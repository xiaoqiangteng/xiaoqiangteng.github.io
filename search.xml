<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高等数学（七）-微分方程</title>
      <link href="/2020/01/25/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E4%B8%83%EF%BC%89-%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
      <url>/2020/01/25/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E4%B8%83%EF%BC%89-%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-微分方程的基本概念"><a href="#1-微分方程的基本概念" class="headerlink" title="1. 微分方程的基本概念"></a>1. 微分方程的基本概念</h1><ul><li>凡表示未知函数、未知函数的导数与自变量之间的关系的方程，叫做微分方程</li><li>一般的，n阶微分方程的形式是$F(x, y, y’, \cdots, y^{(n)}) = 0$</li><li>找出这样的函数，把这函数代入微分方程能使该方程称为恒等式，这个函数叫做该微分方程的解</li><li>如果微分方程的解中含有任意常数，且任意常数的个数与微分方程的阶数相同，这样的解叫做微分方程的通解</li><li>设微分方程中的未知函数为$y = \phi(x)$，如果微分方程是一阶的，通常用来确定任意常数的条件是$x = x_0$时，$y = y_0$，或写成$y|_{x = x_0} = y_0$，其中$x_0$，$y_0$都是给定的值，上述这种条件叫做初始条件</li><li>确定了通解中的任意常数以后，就得到微分方程的特解</li><li>求微分方程$y’ = f(x, y )$满足初值条件$y|_{x = x_0} = y_0$的特解这样一个问题，叫做一阶微分方程的初值问题，记作$y’ = f(x, y)$，$y|_{x = x_0} = y_0$</li><li>微分方程的解的图形是一条曲线，叫做微分方程的积分曲线</li></ul><h1 id="2-可分离变量的微分方程"><a href="#2-可分离变量的微分方程" class="headerlink" title="2. 可分离变量的微分方程"></a>2. 可分离变量的微分方程</h1><ul><li>如果一个一阶微分方程能写成$g(y)dy = f(x)dx$的形式，就是说，能把微分方程写成一端只含y的函数和dy，另一端只含x的函数和dx，那么原方程就称为可分离变量的微分方程</li></ul><h1 id="3-齐次方程"><a href="#3-齐次方程" class="headerlink" title="3. 齐次方程"></a>3. 齐次方程</h1><ul><li>如果一阶微分方程可化成$\frac{dy}{dx} = \psi(\frac{y}{x})$的形式，那么就称这方程为齐次方程</li><li>方程$\frac{dy}{dx} + P(x) = Q(x)$叫做一阶线性微分方程，如果$Q(x) = 0$，那么方程称为齐次的；如果$Q(x) \neq 0$，那么方程称为非齐次的</li><li>为了求出非齐次线性方程的解，我们先把$Q(x)$换成零而写出方程$\frac{dy}{dx} + P(x)y = 0$，叫做对应于非齐次线性方程的齐次线性方程；分离变量后得$\frac{dy}{y} = -P(x)dx$，两端积分得$\ln|y| = -\int P(x)dx + C_1$或$y = Ce^{-\int P(x)dx}$（$C = \pm e^{C_1}$），这是对应的齐次线性方程的通解</li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学（六）-定积分的应用</title>
      <link href="/2020/01/25/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E5%85%AD%EF%BC%89-%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2020/01/25/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E5%85%AD%EF%BC%89-%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-定积分的元素法"><a href="#1-定积分的元素法" class="headerlink" title="1. 定积分的元素法"></a>1. 定积分的元素法</h1><ul><li>旋转体就是由一个平面图形绕这平面内一条直线旋转一周而成的立体。这直线叫做旋转轴</li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学（五）-定积分</title>
      <link href="/2020/01/24/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E4%BA%94%EF%BC%89-%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
      <url>/2020/01/24/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E4%BA%94%EF%BC%89-%E5%AE%9A%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-定积分的概念与性质"><a href="#1-定积分的概念与性质" class="headerlink" title="1. 定积分的概念与性质"></a>1. 定积分的概念与性质</h1><ul><li>设函数$f(x)$在$[a, b]$上有界，在$[a, b]$中任意插入若干个分点$a = x_0 &lt; x_1 &lt; \cdots &lt; x_n = b$，把区间$[a, b]$分成n个小区间$[x_0, x_1], [x_1, x_2], \cdots, [x_{n-1}, x_n]$，各个小区间的长度依次为$\Delta x_1 = x_1 - x_0, \cdots, \Delta x_n = x_n - x_{n-1}$，在每个小区间$[x_{i - 1}, x_i]$上任取一点$\psi_i$（$x_{i - 1} \leq \psi_i \leq x_i$），作函数值$f(\psi_i)$与小区间长度$\Delta x_i$的面积$f(\psi_i)\Delta x_i (i = 1, 2, \cdots, n)$，并作出和$S = \sum_{i = 1}^{n}f(\psi_i)\Delta x_i$。记$\lambda = \max\{\Delta x_1, \cdots, \Delta x_n\}$，如果当$\lambda\to 0$时，这和的极限总存在，且与闭区间$[a, b]$的分法及点$\psi_i$的取法无关，那么称这个极限I为函数$f(x)$在区间$[a, b]$上的定积分（简称积分），记作$\int_a^b f(x)dx$，即$\int_a^b f(x)dx = I = \lim_{\lambda\to 0}\sum_{i = 1}^n f(\psi_i)\Delta x_i$，其中$f(x)$叫做被积函数，$f(x)dx$叫做被积表达式，x叫做积分变量，a叫做积分下限，b叫做积分上限，$[a, b]$叫做积分区间</li><li>设$f(x)$在区间$[a, b]$上连续，则$f(x)$在$[a, b]$上可积</li><li>设$f(x)$在区间$[a, b]$上有界，且只有有限个间断点，则$f(x)$在$[a, b]$上可积</li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学（四）-不定积分</title>
      <link href="/2020/01/23/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E5%9B%9B%EF%BC%89-%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
      <url>/2020/01/23/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E5%9B%9B%EF%BC%89-%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-不定积分的概念与性质"><a href="#1-不定积分的概念与性质" class="headerlink" title="1. 不定积分的概念与性质"></a>1. 不定积分的概念与性质</h1><ul><li>在区间I上，函数$f(x)$的带有任意常数项的原函数称为$f(x)$（或$f(x)dx$）在区间I上的不定积分，记作$\int f(x)dx$，其中记号$\int$称为积分号，$f(x)$称为被积函数，$f(x)dx$称为被积表达式，x称为积分变量</li><li>基本积分表<ul><li>$\int kdx = kx + C$</li><li>$\int x^{\mu}dx = \frac{x^{\mu + 1}}{\mu + 1} + C$</li><li>$\int\frac{dx}{x} = \ln|x| + C$</li><li>$\int\frac{dx}{1 + x^2} = \arctan x + C$</li><li>$\int\frac{dx}{\sqrt{1 - x^2}} = \arcsin x + C$</li><li>$\int \cos x dx = \sin x + C$</li><li>$\int \sin x dx = -\cos x + C$</li><li>$\int\frac{dx}{\cos^2 x} = \int \sec^2 x dx = \tan x + C$</li><li>$\int \frac{dx}{\sin^2 x} = \int\csc^2 x dx = -\cot x + C$</li><li>$\int \sec x\tan x dx = \sec x + C$</li><li>$\int \csc x \cot x dx = -\csc x + C$</li><li>$\int e^x dx = e^x + C$</li><li>$\int a^x dx = \frac{a^x}{\ln a} + C$</li><li>$\int sh xdx = ch x + C$</li><li>$\int ch x dx = sh x + C$</li><li>$\int \tan x dx = -\ln|\cos x| + C$</li><li>$\int \cot x dx = \ln|\sin x| + C$</li><li>$\int \sec x dx = \ln|\sec x + \tan x| + C$</li><li>$\int \csc x dx = \ln|\csc x - \cot x| + C$</li><li>$\int \frac{dx}{a^2 + x^2} = \frac{1}{a}\arctan\frac{x}{a} + C$</li><li>$\int \frac{dx}{x^2 - a^2} = \frac{1}{2a}\ln|\frac{x - a}{x + a}| + C$</li><li>$\int \frac{dx}{\sqrt{a^2 - x^2}} = \arcsin\frac{x}{a} + C$</li><li>$\int \frac{dx}{x^2 + a^2} = \ln(x + \sqrt{x^2 + a^2}) + C$</li><li>$\int \frac{dx}{\sqrt{x^2 - a^2}} = \ln|x + \sqrt{x^2 - a^2}| + C$</li></ul></li><li>第一类换元法<ul><li>设$f(u)$具有原函数，$u = \phi(x)$可导，则有换元公式$\int f[\phi(x)]\phi’(x)dx = [\int f(u)du_{u = \phi(x)}]$</li></ul></li><li>第二类换元法<ul><li>设$x = \psi(t)$是单调的可导函数，并且$\psi’(t) \neq 0$，又设$f[\psi(t)]\psi’(t)$具有原函数，则有换元公式$\int f(x)dx = [\int f[\psi(t)]\psi’(t)dt]_{t = \psi^{-1}(x)}$，其中$\psi^{-1}(x)$是$x = \psi(t)$的反函数</li></ul></li><li>分部积分法<ul><li>设函数$u = u(x)$及$v = v(x)$具有连续导数，则两个函数乘积的导数公式为$(uv)’ = u’v + uv’$，移项，得$uv’ = (uv)’ - u’v$。对这个等式两边求不定积分，得，$\int uv’dx = uv - \int u’v dx$</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学（三）-微分中值定理与导数的应用</title>
      <link href="/2020/01/23/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E4%B8%89%EF%BC%89-%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E4%B8%8E%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2020/01/23/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E4%B8%89%EF%BC%89-%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E4%B8%8E%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-微分中值定理"><a href="#1-微分中值定理" class="headerlink" title="1. 微分中值定理"></a>1. 微分中值定理</h1><ul><li>费马引理<ul><li>设函数$f(x)$在点$x_0$的某邻域$U(x_0)$内有定义，并且在$x_0$处可导，如果对任意的$x\in U(x_0)$，有$f(x) \leq f(x_0)$（或$f(x)\geq f(x_0)$），那么$f’(x_0) = 0$</li></ul></li><li><p>罗尔定理</p><ul><li>如果函数$f(x)$满足<ul><li>在闭区间$[a, b]$上连续</li><li>在开区间$(a, b)$内可导</li><li>在区间端点处的函数值相等，即$f(a) = f(b)$</li><li>那么在$(a, b)$内至少有一点$\psi$（$a &lt; \psi &lt; b$），使得$f’(\psi) = 0$</li></ul></li></ul></li><li><p>拉格朗日中值定理</p><ul><li>如果函数$f(x)$满足<ul><li>在闭区间$[a, b]$上连续</li><li>在开区间$(a, b)$内可导</li><li>那么在$(a, b)$内至少有一点$\psi$（$a &lt; \psi &lt; b$），使等式$f(b) - f(a) = f’(\psi)(b - a)$成立</li></ul></li></ul></li><li>如果函数$f(x)$在区间I上连续，I内可导且导数恒为零，那么$f(x)$在区间I上是一个常数</li><li>如果当$x\to a$（或$x \to \infty$）时，两个函数$f(x)$与$F(x)$都趋于零或都趋于无穷大，那么极限$\lim_{x\to a或x\to \infty}\frac{f(x)}{F(x)}$可能存在、也可能不存在，通常把这种极限叫做未定式</li><li>洛必达法则<ul><li>设当$x\to a$时，函数$f(x)$及$F(x)$都趋于零</li><li>在点a的某去心领域内，$f’(x)$及$F’(x)$都存在且$F’(x) \neq 0$</li><li>$\lim_{x\to a}\frac{f’(x)}{F’(x)}$存在（或为无穷大）</li><li>则$\lim_{x\to a}\frac{f(x)}{F(x)} = \lim_{x\to a}\frac{f’(x)}{F’(x)}$</li></ul></li></ul><h1 id="2-泰勒公式"><a href="#2-泰勒公式" class="headerlink" title="2. 泰勒公式"></a>2. 泰勒公式</h1><ul><li>泰勒中值定理<ul><li>如果函数$f(x)$在$x_0$处具有n阶导数，那么存在$x_0$的一个邻域，对于该邻域内的任一x，有$f(x) = f(x_0) + f’(x_0)(x - x_0) + \frac{f^n(x_0)}{2!}(x - x_0)^2 + \cdots + \frac{f^{(n)}(x_0)}{n!}(x - x_0)^n + R_n(x)$，其中，$R_n(x) = o((x - x_0)^n)$</li></ul></li><li>设函数$y = f(x)$在$[a, b]$上连续，在$(a, b)$内可导<ul><li>如果在$(a, b)$内$f’(x) \geq 0$，且等号仅在有限多个点处成立，那么函数$y = f(x)$在$[a, b]$上单调增加</li><li>如果在$(a, b)$内$f’(x) \leq 0$，且等号仅在有限多个点处成立，那么函数$y = f(x)$在$[a, b]$上单调减少</li></ul></li><li>设$f(x)$在区间I上连续，如果对I上任意两点$x_1$，$x_2$恒有$f(\frac{x_1 + x_2}{2}) &lt; \frac{f(x_1) + f(x_2)}{2}$，那么称$f(x)$在I上的图形是（向上）凹的（或凹弧）；如果恒有$f(\frac{x_1 + x_2}{2}) &gt; \frac{f(x_1) + f(x_2)}{2}$，那么称$f(x)$在I上的图形是（向上）凸的（或凸弧）</li><li>设$f(x)$在$[a, b]$上连续，在$(a, b)$内具有一阶和二阶导数，那么<ul><li>若在$(a, b)$内$f^n(x) &gt; 0$，则$f(x)$在$[a, b]$上的图形是凹的</li><li>若在$(a, b)$内$f^n(x) &lt; 0$，则$f(x)$在$[a, b]$上的图形是凸的</li></ul></li></ul><h1 id="3-函数的极值与最大值最小值"><a href="#3-函数的极值与最大值最小值" class="headerlink" title="3. 函数的极值与最大值最小值"></a>3. 函数的极值与最大值最小值</h1><ul><li>设函数$f(x)$在点$x_0$的某邻域$U(x_0)$内有定义，如果对于去心邻域$\circ{U}(x_0)$内的任一x，有$f(x) &lt; f(x_0)$（或$f(x) &gt; f(x_0)$），那么就称$f(x_0)$是函数$f(x)$的一个极大值（或极小值）</li><li>设函数$f(x)$在$x_0$处可导，且在$x_0$处取得极值，则$f’(x_0) = 0$</li><li>设函数$f(x)$在$x_0$处连续，且在$x_0$的某去心邻域$\circ{U}(x_0, \delta)$内可导<ul><li>若$x \in (x_0 - \delta, x_0)$时，$f’(x) &gt; 0$，而$x \in (x_0, x_0 + \delta)$时，$f’(x) &lt; 0$，则$f(x)$在$x_0$处取得极大值</li><li>若$x \in (x_0 - \delta, x_0)$时，$f’(x) &lt; 0$，而$x \in (x_0, x_0 + \delta)$时，$f’(x) &gt; 0$，则$f(x)$在$x_0$处取得极小值</li><li>若$x \in \circ{U}(x_0, \delta)$时，$f’(x)$的符号保持不变，则$f(x)$在$x_0$处没有极值</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学（二）-导数与微分</title>
      <link href="/2020/01/22/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/"/>
      <url>/2020/01/22/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-导数概念"><a href="#1-导数概念" class="headerlink" title="1. 导数概念"></a>1. 导数概念</h1><ul><li>设函数$y = f(x)$在点$x_0$的某个邻域内有定义，当自变量x在$x_0$处取得增量$\Delta x$（点$x + \Delta x$仍在该邻域内）时，相应地，因变量取得增量$\Delta y = f(x_0 + \Delta x) - f(x_0)$；如果$\Delta y$与$\Delta x$之比当$\Delta x \to 0$时的极限存在，那么称函数$y = f(x)$在点$x_0$处可导，并称这个极限为函数$y = f(x)$在点$x_0$处的导数，记为$f’(x_0)$，即$f’(x_0) = \lim_{\Delta x\to 0}\frac{\Delta y}{\Delta x} = \lim_{\Delta x \to 0}\frac{f(x_0 + \Delta x) - f(x_0)}{\Delta x}$，也可记作$y’|_{x=x_0}$，$\frac{dy}{dx}|_{x = x_0}$或$\frac{df(x)}{dx}|_{x = x_0}$</li><li>如果函数$f(x)$在开区间I内的每点处都可导，那么就称函数$f(x)$在开区间I内可导。这时，对于任一$x\in I$，都对应着$f(x)$的一个确定的导数值，这样就构成了一个新函数，这个函数叫做原来函数$y = f(x)$的导函数，记作$y’$，$f’(x)$，$\frac{dy}{dx}$或$\frac{df(x)}{dx}$</li><li>函数的和、差、积、商的求导法则<ul><li>如果函数$u = u(x)$及$v = v(x)$都在点x具有导数，那么它们的和、差、积、商（除分母为零的点外）都在点x具有导数，且<ul><li>$[u(x) \pm v(x)]’ = u’(x) \pm v’(x)$</li><li>$[u(x)v(x)]’ = u’(x)v(x) + u(x)v’(x)$</li><li>$[\frac{u(x)}{v(x)}]’ = \frac{u’(x)v(x) - u(x)v’(x)}{v^2(x)}$（$v(x) \neq 0$）</li></ul></li></ul></li><li>反函数的求导法则<ul><li>如果函数$x = f(x)$在区间$I_y$内单调、可导且$f’(x)\neq 0$，那么它的反函数$y = f^{-1}(x)$在区间$I_x = \{x|x = f(x), y\in I_y\}$内也可导，且$[f^{-1}(x)]’ = \frac{1}{f’(x)}$或$\frac{dy}{dx} = \frac{1}{\frac{dx}{dy}}$</li></ul></li><li>复合函数的求导法则<ul><li>如果$u = g(x)$在点x可导，而$y = f(u)$在点$u = g(x)$可导，那么复合函数$y = f[g(x)]$在点x可导，且其导数为$\frac{dy}{dx} = f’(u)\cdot g’(x)$或$\frac{dy}{dx} = \frac{dy}{du}\cdot\frac{du}{dx}$</li></ul></li><li>基本求导法则和导数公式<ul><li>$(C)’ = 0$</li><li>$(\sin x)’ = \cos x$</li><li>$(x^\mu)’ = \mu x^{\mu - 1}$</li><li>$(\cos x)’ = -\sin x$</li><li>$(\tan x)’ = \sec^2 x$</li><li>$(\cot x)’ = -\csc^2 x$</li><li>$(\sec x)’ = \sec x\tan x$</li><li>$(csc x)’ = -\csc x \cot x$</li><li>$(a^x)’ = a^x\ln a (a &gt; 0, a\neq 1)$</li><li>$(e^x)’ = e^x$</li><li>$(\log_a x)’ = \frac{1}{x\ln a} (a &gt; 0, a \neq 1)$</li><li>$(\ln x)’ = \frac{1}{x}$</li><li>$(\arcsin x)’ = \frac{1}{\sqrt{1 - x^2}}$</li><li>$(\arccos x)’ = -\frac{1}{\sqrt{1 - x^2}}$</li><li>$(\arctan x)’ = \frac{1}{1 + x^2}$</li><li>$(\arccot x)’ = -\frac{1}{1 + x^2}$</li></ul></li></ul><h1 id="2-函数的微分"><a href="#2-函数的微分" class="headerlink" title="2. 函数的微分"></a>2. 函数的微分</h1><ul><li>设函数$y = f(x)$在某区间内有定义，$x_0$及$x_0 + \Delta x$在这区间内，如果函数的增量$\Delta y = f(x_0 + \Delta x) - f(x_0)$，可表示为$\Delta y = A\Delta x + o(\Delta x)$，其中A是不依赖于$\Delta x$的常数，那么称函数$y = f(x)$在点$x_0$是可微的，而$A\Delta x$叫做函数$y = f(x)$在点$x_0$相应于自变量增量$\Delta x$的微分，记作$dy$，即$dy = A\Delta x$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学（一）-函数与极限</title>
      <link href="/2020/01/18/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E4%B8%80%EF%BC%89-%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/"/>
      <url>/2020/01/18/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%EF%BC%88%E4%B8%80%EF%BC%89-%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1-映射与函数"><a href="#1-映射与函数" class="headerlink" title="1. 映射与函数"></a>1. 映射与函数</h1><ul><li>函数的几种特性<ul><li>函数的有界性</li><li>函数的单调性</li><li>函数的奇偶性</li><li>函数的周期性</li></ul></li><li>初等函数<ul><li>幂函数</li><li>指数函数</li><li>对数函数</li><li>三角函数</li><li>反三角函数</li><li>由常数和 基本初等函数经过有限次的四则运算和有限次的函数复合步骤所构成并用一个式子表示的函数，称为初等函数，如$y = \sqrt{1 - x^2}$</li><li>双曲正弦$sh x = \frac{e^x - e^{-x}}{2}$</li><li>双曲余弦$ch x = \frac{e^x + e^{-x}}{2}$</li><li>双曲正切$th x = \frac{sh x}{ch x} = \frac{e^x - e^{-x}}{e^x + e^{-x}}$</li></ul></li></ul><h1 id="2-数列的极限"><a href="#2-数列的极限" class="headerlink" title="2. 数列的极限"></a>2. 数列的极限</h1><ul><li>对于定义的记忆，只需要记住公式$|x_n - a| &lt; \epsilon$即可，那么根据公式即可整理出定义</li><li>极限的唯一性<ul><li>如果数列$\{x_n\}$收敛，那么它的极限唯一</li></ul></li><li>对于数列$\{x_n\}$，如果存在正整数M，使得对于一切$x_n$都满足不等式$|x_n| \leq M$，那么称数列$\{x_n\}$是有界的；如果这样的正数M不存在，就说数列$\{x_n\}$是无界的</li><li>收敛数列的有界性<ul><li>如果数列$\{x_n\}$收敛，那么数列$\{x_n\}$一定有界</li><li>但是，有界不一定收敛，例如$1, -1, 1, \dots, (-1)^{n+1}, \dots$</li></ul></li><li>收敛数列的保号性<ul><li>如果$\lim_{n\rightarrow \infty} x_n = a$，且$a &gt; 0$（或$a &lt; 0$），那么存在正整数N，当$n &gt; N$时，都有$x_n &gt; 0$（或$x_n &lt; 0$）</li><li>如果数列$\{x_n\}$从某项起有$x_n \geq 0$（或$x_n \leq 0$），且$\lim_{n\to \infty} x_n = a$，那么$a \geq 0$（或$a\leq 0$）</li></ul></li></ul><h1 id="3-无穷小与无穷大"><a href="#3-无穷小与无穷大" class="headerlink" title="3. 无穷小与无穷大"></a>3. 无穷小与无穷大</h1><ul><li>无穷小<ul><li>如果函数$f(x)$当$x\to x_0$（或$x\to \infty$）时的极限为零，那么称函数$f(x)$为当$x\to x_0$（或$x\to \infty$）时的无穷小</li></ul></li><li>无穷大<ul><li>设函数$f(x)$在$x_0$的某一去心邻域内有定义（或$|x|$大于某一正数时有定义）。如果对于任意给定的正数M（不论它多么大），总存在正数$\delta$（或正数X），只要x适合不等式$0 &lt; |x - x_0| &lt; \delta$（或$|x| &gt; X$），对应的函数值$f(x)$总满足不等式$|f(x)| &gt; M$，那么称函数$f(x)$是当$x\to x_0$（或$x\to \infty$）时的无穷大</li></ul></li><li>极限运算法则<ul><li>两个无穷小的和是无穷小；有限个无穷小的和也是无穷小</li><li>有界函数与无穷小的乘积是无穷小<ul><li>常数与无穷小的乘积是无穷小</li><li>有限个无穷小的乘积是无穷小</li></ul></li><li>如果$\lim f(x) = A$，$\lim g(x) + B$，那么<ul><li>$\lim[f(x)\pm g(x)] = A\pm B$</li><li>$\lim [f(x)\cdot g(x)] = A\cdot B$</li><li>若又有$B\neq 0$，则<ul><li>$\lim \frac{f(x)}{g(x)} = \frac{\lim f(x)}{\lim g(x)} = \frac{A}{B}$</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数及其应用（七）-对称矩阵和二次型</title>
      <link href="/2020/01/18/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%83%EF%BC%89-%E5%AF%B9%E7%A7%B0%E7%9F%A9%E9%98%B5%E5%92%8C%E4%BA%8C%E6%AC%A1%E5%9E%8B/"/>
      <url>/2020/01/18/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%83%EF%BC%89-%E5%AF%B9%E7%A7%B0%E7%9F%A9%E9%98%B5%E5%92%8C%E4%BA%8C%E6%AC%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-对称矩阵的对角化"><a href="#1-对称矩阵的对角化" class="headerlink" title="1. 对称矩阵的对角化"></a>1. 对称矩阵的对角化</h1><ul><li>一个对角矩阵是一个满足$A^T = A$的矩阵A，这种矩阵当然是方阵，它的主对角元素是任意的，但其他元素在主对角线的两边成对出现</li><li>一个nxn矩阵A可正交对角化的充分必要条件是A是对称矩阵</li><li>$R^n$上的一个二次型是一个定义在$R^n$上的函数，它在向量x处的值可由表达式$Q(x) = x^TAx$计算，此处A是一个nxn对称矩阵，且矩阵A称为关于二次型的矩阵</li><li>主轴定理<ul><li>设A是一个nxn对称矩阵，那么存在一个正交变量变换$x = Py$，它将二次型$x^TAx$变换为不含交叉项的二次型$y^TDy$</li></ul></li><li>一个二次型Q是<ul><li>正定的，如果对于所有$x\neq 0$，有$Q(x) &gt; 0$</li><li>负定的，如果对所有$x\neq 0$，有$Q(x) &lt; 0$</li><li>不定的，如果$Q(x)$既有正值又有负值</li><li>半正定的，如果对所有x，有$Q(x) \geq 0$</li><li>半负定的，如果对于所有x，有$Q(x) \leq 0$</li></ul></li><li>二次型与特征值<ul><li>设A是nxn对称矩阵，那么一个二次型是<ul><li>正定的，当且仅当A的所有特征值是正数</li><li>负定的，当且仅当A的所有特征值是负数</li><li>不定的，当且仅当A既有正特征值，又有负特征值</li></ul></li></ul></li></ul><h1 id="2-奇异值分解"><a href="#2-奇异值分解" class="headerlink" title="2. 奇异值分解"></a>2. 奇异值分解</h1><ul><li>详见：<a href="https://vslam.net/2019/10/17/线性代数及其应用（二）-矩阵代数/" target="_blank" rel="noopener">线性代数及其应用（二）-矩阵代数</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数及其应用（六）-正交性和最小二乘法</title>
      <link href="/2020/01/01/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E5%85%AD%EF%BC%89-%E6%AD%A3%E4%BA%A4%E6%80%A7%E5%92%8C%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/"/>
      <url>/2020/01/01/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E5%85%AD%EF%BC%89-%E6%AD%A3%E4%BA%A4%E6%80%A7%E5%92%8C%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-內积、长度和正交性"><a href="#1-內积、长度和正交性" class="headerlink" title="1. 內积、长度和正交性"></a>1. 內积、长度和正交性</h1><ul><li>如果$\vec{u}$和$\vec{v}$是$R^n$空间中的向量，可以将$\vec{u}$和$\vec{v}$作为$n\times 1$矩阵。向量矩阵$\vec{u}^T$是1xn矩阵且矩阵成绩$\vec{u}^T\vec{v}$是一个1x1矩阵，我们将其记为一个不加括号的实数。如$\vec{u}^T\vec{v}$称为$\vec{u}$和$\vec{v}$的內积，并记做$\vec{u}\cdot\vec{v}$。</li><li>如果$\vec{u} = \left[<br>   \begin{matrix}<pre><code> u_0 \\ u_1 \\\cdots \\ u_n \end{matrix}\right]$和$\vec{v} = \left[</code></pre>   \begin{matrix}<pre><code> v_0 \\ v_1 \\\cdots \\ v_n \end{matrix}\right]$，那么$\vec{u}$和$\vec{v}$的內积定义为$\left[</code></pre>   \begin{matrix}<pre><code> u_0 &amp; u_1 &amp; \cdots &amp; u_n \end{matrix}\right]\left[</code></pre>   \begin{matrix}<pre><code> v_0 \\ v_1 \\\cdots \\ v_n \end{matrix}\right] = u_0v_0 + u_1v_1 + \cdots + u_nv_n$</code></pre></li><li>向量$\vec{v}$的长度（范数）是非负数$||\vec{v}||$定义为$||\vec{v}|| = \sqrt{\vec{v}\cdot \vec{v}} = \sqrt{v_1^2 + \cdots + v_n^2}$且$||\vec{v}||^2 = \vec{v}\cdot \vec{v}$</li><li>$R^n$中向量$\vec{u}$和$\vec{v}$的距离，记作$dist(\vec{u}, \vec{v})$，表示向量$\vec{u} - \vec{v}$的长度，即$dist(\vec{u}, \vec{v}) = ||\vec{u} - \vec{v}||$</li><li>如果$\vec{u}\cdot\vec{v} = 0$，则两个向量$\vec{u}$和$\vec{v}$称为（相互）正交的</li><li>毕达哥拉斯（勾股）定理<ul><li>两个向量$\vec{u}$和$\vec{v}$正交的充分必要条件是$||\vec{u} + \vec{v}||^2 = ||\vec{u}||^2 + ||\vec{v}||^2$</li></ul></li><li>如果向量$\vec{z}$与$R^n$的子空间W中的任意向量都正交，则称$\vec{z}$正交于W，与子空间W正交的向量$\vec{z}$的全体组成的集合称为W的正交补，并记作$W^\perp$（读作W正交补）</li></ul><h1 id="2-正交集"><a href="#2-正交集" class="headerlink" title="2. 正交集"></a>2. 正交集</h1><ul><li><p>$R^n$中的向量集合$\{\bf{u}_1, \cdots, \bf{u}_p\}$称为正交向量集，如果集合中的任意两个不同向量都正交，即当$i\neq j$时，$\bf{u}_i\cdot \bf{u}_j = 0$</p></li><li><p>如果$S = \{\bf{u}_1, \cdots, \bf{u}_p\}$是由$R^n$空间中非零向量构成的正交集，那么S是线性无关集，因此构成所生成的子空间S的一组基</p></li><li><p>假设$\{\bf{u}_1, \cdots, \bf{u}_p\}$是$R^n$中子空间W的正交基，对W中的每个向量$\bf{y}$，线性组合$\bf{y} = c_1\bf{u}_1 +\cdots + c_p\bf{u}_p$中的权值可以由$c_j = \frac{\bf{y}\cdot \bf{u}_j}{\bf{u}_j\cdot\bf{u}_j} (j = 1, \dots, p)$计算</p></li><li><p>正交分解定理</p><ul><li>若W是$R^n$的一个子空间，那么$R^n$中每一个向量$\bf{y}$可以惟一表示，$\bf{y} = \hat{\bf{y}} + \bf{z}$，此处$\hat{\bf{y}}$属于W且$\bf{z}$属于$W^{\perp}$，实际上，如果$\{\bf{u}_1, \cdots, \bf{u}_p\}$是W的任意正交基，那么$\hat{\bf{y}} = \frac{\bf{y}\cdot\bf{u}_1}{\bf{u}_1\cdot\bf{u}_1}\bf{u}_1 + \cdots + \frac{\bf{y}\cdot\bf{u}_p}{\bf{u}_p\cdot\bf{u}_p}\bf{u}_p$且$\bf{z} = \bf{y} - \hat{\bf{y}}$，其中$\hat{\bf{y}}$称为$\bf{y}$在W上的正交投影，常记作$proj_W\bf{y}$</li></ul></li><li><p>最佳逼近定理</p><ul><li>假设W是$R^n$空间中的一个子空间，$\bf{y}$是$R^n$中的任意向量，$\hat{\bf{y}}$是$\bf{y}$在W上的正交投影，那么$\hat{\bf{y}}$是W中最接近$\bf{y}$的点，也就是指$||\bf{y} - \hat{\bf{y}}|| &lt; ||\bf{y} - \bf{v}||$，对所有属于W又异于$\hat{\bf{y}}$的$\bf{v}$成立</li></ul></li><li><p>格拉姆-施密特方法</p><ul><li><p>对$R^n$中子空间的一个基$\{\bf{x}_1, \dots, \bf{x}_p\}$，定义</p><p>  $\bf{v}_1 = \bf{x}_1$,</p><p>  $\bf{x}_2 = \bf{x}_2 - \frac{\bf{x}_2\cdot\bf{v}_1}{\bf{v}_1\cdot\bf{v}_1}\bf{v}_1$,</p><p>  $\cdots$,</p><p>  $\bf{v}_p = \bf{x}_p - \frac{\bf{x}_p\cdot\bf{v}_1}{\bf{v}_1\cdot\bf{v}_1}\bf{v}_1 - \frac{\bf{x}_p\cdot\bf{v}_2}{\bf{v}_2\cdot\bf{v}_2}\bf{v}_2 - \cdots - \frac{\bf{x}_p\cdot\bf{v}_{p-1}}{\bf{v}_{p-1}\cdot\bf{v}_{p-1}}\bf{v}_{p-1}$.</p><p>  那么$\{\bf{v}_1, \dots, \bf{v}_p\}$是W的一个正交基，此外，</p><p>  $Span\{\bf{v}_1, \dots, \bf{v}_p\} = Span\{\bf{x}_1, \dots, \bf{x}_k\}$，其中$1 \leq k \leq p$.</p></li></ul></li></ul><h1 id="3-最小二乘问题"><a href="#3-最小二乘问题" class="headerlink" title="3. 最小二乘问题"></a>3. 最小二乘问题</h1><ul><li>问题背景<ul><li>巨型方程组$Ax = b$，在实际工作中往往很难直接求解，最好的方法是寻找x，使得Ax尽可能的接近于b</li></ul></li><li>考虑Ax作为b的一个近似，从b到Ax的距离最小，$||\bf{b} - A\bf{x}||$近似程度越好。一般的最小二乘问题就是找出使$||\bf{b} - A\bf{x}||$尽量小的$\bf{x}$</li><li>如果mxn矩阵A和向量$\bf{b}$属于$R^n$，$A\bf{x} = \bf{b}$的最小二乘解是$R^n$中的$\hat{\bf{x}}$，使得$||\bf{b} - A\hat{\bf{x}}|| \leq ||\bf{b} - A\bf{x}||$对所有$\bf{x} \in R$成立</li><li>方程$A\bf{x} = \bf{b}$的最小二乘解集和法方程$A^TA\bf{x} = A^T\bf{b}$的非空解集一致</li><li>矩阵$A^TA$是可逆的充分必要条件是：A的列是线性无关的。在这种情形下，方程$A\bf{x} = \bf{b}$有惟一最小二乘解$\hat{\bf{x}}$且它有下面的表示$\hat{\bf{x}} = (A^TA)^{-1}A^T\bf{b}$</li><li>给定一个mxn矩阵A，且具有线性无关的列，取A = QR是A的QR分解，那么对每一个属于$R^m$的$\bf{b}$，矩阵$A\bf{x} = \bf{b}$有惟一的最小二乘解，其解为$\hat{\bf{x}} = R^{-1}Q^T\bf{b}$</li></ul><h1 id="4-內积空间"><a href="#4-內积空间" class="headerlink" title="4. 內积空间"></a>4. 內积空间</h1><ul><li><p>向量空间V上的內积是一个函数，对每一对属于V的向量$\bf{u}$和$\bf{v}$，存在一个实数$&lt;\bf{u}, \bf{v}&gt;$满足下面公理。对任意属于V的$\bf{u}$，$\bf{v}$，$\bf{w}$和所有数c,</p><p>  $&lt;\bf{u}, \bf{v}&gt; = &lt;\bf{v}, \bf{u}&gt;$,</p><p>  $&lt;\bf{u} + \bf{v}, \bf{w}&gt; = &lt;\bf{u}, \bf{w}&gt; + &lt;\bf{v}, \bf{w}&gt;$,</p><p>  $<c\bf{u}, \bf{v}> = c&lt;\bf{u}, \bf{v}&gt;$,</c\bf{u},></p><p>  $&lt;\bf{u}, \bf{v}&gt; \geq 0$，且$&lt;\bf{u}, \bf{v}&gt; = 0的充分必要条件是$$\bf{u} = 0$,</p><p>  一个赋予上面內积的向量空间称为內积空间</p></li><li><p>柯西-施瓦茨不等式</p><ul><li>对空间V中任意向量$\bf{u}$和$\bf{v}$，有$|&lt;\bf{u}, \bf{v}&gt;| \leq ||\bf{u}||||\bf{v}||$</li></ul></li><li><p>三角不等式</p><ul><li>对属于V的所有向量$\bf{u}$，$\bf{v}$，有$||\bf{u} + \bf{v}|| \leq ||\bf{u}|| + ||\bf{v}||$</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vSLAMNet（六）-滤波算法-卡尔曼滤波基础</title>
      <link href="/2019/12/22/slam/vSLAMNet%EF%BC%88%E5%85%AD%EF%BC%89-%E6%BB%A4%E6%B3%A2%E7%AE%97%E6%B3%95-%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/12/22/slam/vSLAMNet%EF%BC%88%E5%85%AD%EF%BC%89-%E6%BB%A4%E6%B3%A2%E7%AE%97%E6%B3%95-%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><ul><li>Welch G, Bishop G. An introduction to the Kalman filter[J]. 1995.</li><li><a href="http://www.cs.unc.edu/~welch/kalman/" target="_blank" rel="noopener">http://www.cs.unc.edu/~welch/kalman/</a></li></ul><h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2. 基础知识"></a>2. 基础知识</h1><ul><li>概率<ul><li>概率的本质是用数值表示某件事情发生的可能性</li></ul></li></ul><h1 id="3-卡尔曼滤波"><a href="#3-卡尔曼滤波" class="headerlink" title="3. 卡尔曼滤波"></a>3. 卡尔曼滤波</h1><p>问题：测量数据加速度计，但是具有噪声，不能够精确地估计目标的位姿。此时，我们在目标本体上安装了GPS传感器，但是GPS精度也有限。我们的目标是利用均具有误差的加速度计和GPS来估计目标当前的位姿，已达到提升位姿估计精度的目的。</p><p>目标的状态定义为</p><p>$\vec{x} = \left[<br> \begin{matrix}<br>   p \\<br>   v<br>  \end{matrix}<br>  \right]$，其中$v$表示目标的运动速度，$p$表示目标的当前位置。</p><p>卡尔曼滤波假设两个变量（即位置和速度）是<strong>随机的</strong>，而且符合<strong>高斯分布</strong>。每个变量都有一个均值$\mu$，它是随机分布的中心；有一个方差$\sigma$，它衡量组合的不确定性。</p><p>由于基于旧位置估计新位置，我们会产生这两个结论：如果速度很快，机器人可能移动得更远，所以得到的位置会更远；如果速度很慢，机器人就走不了那么远。这种关系对目标跟踪来说非常重要，因为它提供了更多信息：一个可以衡量可能性的标准。这就是卡尔曼滤波的目标：从不确定信息中挤出尽可能多的信息。为了捕获这种相关性，我们用的是协方差矩阵。简而言之，矩阵的每个值是第i个变量和第j个变量之间的相关程度（由于矩阵是对称的，$i$和$j$的位置可以随便交换）。我们用$\Sigma$表示协方差矩阵，在这个例子中，就是$\Sigma_{ij}$。</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-28-090518.png" alt="image-20191228170503855" style="zoom:67%;"></p><p>（图片来源：<a href="http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）" target="_blank" rel="noopener">http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）</a></p><p>为了把以上关于状态的信息建模为高斯分布（图中色块），我们还需要$k$时的两个信息：最佳估计$\hat{x}$（均值，也就是$\mu$，协方差矩阵$P_k$。（虽然还是用了位置和速度两个变量，但只要和问题相关，卡尔曼滤波可以包含任意数量的变量）。</p><p>$\hat{x} = \left[<br> \begin{matrix}<br>   p \\<br>   v<br>  \end{matrix}<br>  \right]$, $P_{k} = \left[<br> \begin{matrix}<br>   \Sigma_{pp} &amp; \Sigma_{pv} \\<br>   \Sigma_{vp} &amp; \Sigma_{vv}<br>  \end{matrix}<br>  \right]$.</p><p>接下来，我们利用$k-1$时刻的状态来预测$k$时刻的状态。从$k-1$时刻到$k$时刻，状态变换矩阵定义为$F_k$，如下图所示。它从原始预测中取每一点，并将其移动到新的预测位置。如果原始预测是正确的，系统就会移动到新位置。</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-28-090800.png" alt="image-20191228170749372" style="zoom:67%;"></p><p>（图片来源：<a href="http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）" target="_blank" rel="noopener">http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）</a></p><h2 id="3-1-预测方程"><a href="#3-1-预测方程" class="headerlink" title="3.1 预测方程"></a>3.1 预测方程</h2><p>假设目标的运动方程为</p><p>$p_k = p_{k-1}+ \Delta tv_{k-1}$,</p><p>$v_k = v_{k-1}$,</p><p>那么，由$\hat{x}_k = \left[<br> \begin{matrix}<br>   1 &amp; \Delta t \\<br>   0 &amp; 1<br>  \end{matrix}<br>  \right]\hat{x}_{k-1} = F_k\hat{x}_{k-1}$得，$F_k = \left[<br> \begin{matrix}<br>   1 &amp; \Delta t \\<br>   0 &amp; 1<br>  \end{matrix}<br>  \right]$。</p><p>这是一个预测矩阵，它能给出机器人的下一个状态，但目前我们还不知道协方差矩阵的更新方法。这也是我们要引出下面这个等式的原因：如果我们将分布中的每个点乘以矩阵A，那么它的协方差矩阵为</p><p>$Cov(x) = \Sigma$,</p><p>$Cov(Ax) = A\Sigma A^T$.</p><p>因此，我们得到</p><p>$\hat{x}_k = F_k\hat{x}_{k-1}$,</p><p>$P_k = F_kP_{k-1}F_k^T$.</p><p>现在我们推到$P_k$。</p><p>假设$\vec{x}_k$为t时刻下状态向量的真值，我们得到，</p><p>$\vec{x}_k - \hat{\vec{x}}_{k|k-1} = F(\vec{x}_{k-1} - \hat{\vec{x}}_{k|k-1}) + w_k$,</p><p>而$P_{k|k-1} = E[(\vec{x}_k - \hat{\vec{x}}_{k|k-1})(\vec{x}_k - \hat{\vec{x}}_{k|k-1})^T] = E[(F(\vec{x}_k - \hat{\vec{x}}_{k|k-1}) + w_k)(F(\vec{x}_k - \hat{\vec{x}}_{k|k-1}) + w_k))^T]$</p><p>$= F(E[(\vec{x}_k - \hat{\vec{x}}_{k|k-1})(\vec{x}_k - \hat{\vec{x}}_{k|k-1})^T])F^T + FE[(\vec{x}_k - \hat{\vec{x}}_{k|k-1})w_k^T]F^T$</p><p>$+ FE[(w_k\vec{x}_k - \hat{\vec{x}}_{k|k-1})^T]F^T + E[w_kw_k^T]$.</p><p>考虑到状态向量和噪声是<strong>不相关</strong>的，则$E[(w_t\vec{x}_k - \hat{\vec{x}}_{k|k-1})^T] = 0$，上式可以简化为</p><p>$P_{k|k-1} = FE[(\vec{x}_{k-1} - \hat{\vec{x}}_{k|k-1})(\vec{x}_{k-1} - \hat{\vec{x}}_{k|k-1})^T]F^T + E[w_kw_k^T]$</p><p>$= F_kP_{k-1}F_k^T + Q_k$</p><p>现在，我们考虑加速度计输入，定义为$\vec{u}_k$。那么，运动方程进一步写成</p><p>$p_k = p_{k-1} + \Delta t v_{k-1} + \frac{1}{2}a\Delta t$,</p><p>$v_k = v_{k-1} + a\Delta t$.</p><p>由于预测也是有误差的，否则我们就直接使用预测结果来作为目标的下一步状态。因此，我们需要一个不确定性来衡量预测可能带来的误差。如下图所示，加上预测不确定性后，$\hat{x}_{k-1}$的每个预测状态都可能会移动到另一点，也就是蓝色的高斯分布会移动到紫色高斯分布的位置，并且具有协方差$Q_k$，换句话说，我们把这些不确定影响视为协方差$Q_k$的噪声。这个紫色的高斯分布拥有和原分布相同的均值，但协方差不同。</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-28-091413.png" alt="image-20191228171402000" style="zoom:67%;"></p><p>（图片来源：<a href="http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）" target="_blank" rel="noopener">http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）</a></p><p><img src="/Users/xiaoqiangteng/Library/Application Support/typora-user-images/image-20191228171439482.png" alt="image-20191228171439482"></p><p>（图片来源：<a href="http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）" target="_blank" rel="noopener">http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）</a></p><p>此处，我们得到的预测方程和协方差方程为</p><p>$\hat{x}_k = F_k\hat{x}_{k-1} + B_k\vec{u}_k$,</p><p>$P_k = F_kP_{k-1}F_{k}^{T}+Q_k$.</p><p>这两个公式主要思想如下：</p><ul><li>新的估计结果是基于原估计结果和已知外部输入校正后得到的预测结果</li><li>新的不确定性是基于原不确定性和外部输入的不确定性得到的预测不确定性</li></ul><h2 id="3-2-观测方程"><a href="#3-2-观测方程" class="headerlink" title="3.2 观测方程"></a>3.2 观测方程</h2><p>基于运动预测方程，当有额外传感器输入观测数据时，我们可利用该观测数据来融合预测数据，易获取目标更加准确地状态。观测是一系列读数，其与状态之间存在一定变换关系，定义为H矩阵。在刚刚的一维情况的小例子中，我们其实做了一个隐式的<strong>假设</strong>，即有预测更新得到的位置的概率分布和测距仪所得的测量值具有相同的单位 (unit)，如米 (m)。但实际情况往往不是这样的，比如，测距仪给出的可能不是距离，而是信号的飞行时间（由仪器至小车的光的传播时间），单位为秒 (s)。这样的话，我们就无法直接如上面一般直接将两个高斯分布相乘了。如下图所示，</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-28-130904.png" alt="image-20191228210904176" style="zoom:67%;"></p><p>（图片来源：<a href="http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）" target="_blank" rel="noopener">http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）</a></p><p>我们得到如下等式，</p><p>$\vec{\mu} = H_k\hat{x}_k$,</p><p>$\Sigma = H_kP_kH_k^T$.</p><p>由于种种因素，传感器记录的信息其实是不准的，一个状态事实上可以产生多种读数。我们将这种不确定性（即传感器噪声）的协方差设为$R_k$，读数的分布均值为$z_k$，如下图所示，</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-28-131227.png" alt="image-20191228211227194" style="zoom:67%;"></p><p>此时，得到了两块高斯分布，一块围绕预测的均值，另一块围绕传感器读数。如下图所示，</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-28-131348.png" alt="image-20191228211347844" style="zoom:67%;"></p><p>（图片来源：<a href="http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）" target="_blank" rel="noopener">http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）</a></p><h2 id="3-3-基于高斯分布的预测和观测融合"><a href="#3-3-基于高斯分布的预测和观测融合" class="headerlink" title="3.3 基于高斯分布的预测和观测融合"></a>3.3 基于高斯分布的预测和观测融合</h2><p>如果要生成靠谱预测，模型必须调和这两个信息。也就是说，对于任何可能的读数$z_1, z_2$，这两种方法预测的状态都有可能是准的，也都有可能是不准的。重点是我们怎么找到这两个准确率。最简单的方法是两者相乘，可以得到它们的重叠部分，这也是会出现最佳估计的区域。换个角度看，它看起来也符合高斯分布。当你把两个高斯分布和它们各自的均值和协方差矩阵相乘时，你会得到一个拥有独立均值和协方差矩阵的新高斯分布。最后剩下的问题就不难解决了：我们必须有一个公式来从旧的参数中获取这些新参数！</p><p>下面将要讨论两个一维高斯分布得到更加准确地高斯分布。</p><p>设方差为$\sigma^2$，均值为$\mu$，高斯分布一般形式为$N(x, \mu, \sigma) = \frac{1}{\sigma\sqrt{2\pi}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$，那么两条高斯曲线相乘后的曲线大约如下图所示，</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-28-131924.png" alt="image-20191228211923880" style="zoom:67%;"></p><p>（图片来源：<a href="http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）" target="_blank" rel="noopener">http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/）</a></p><p>把这个式子按照一维方程进行扩展，可得：</p><p>$\mu’ = \mu_0 + \frac{\sigma_0^2(\mu_1 - \mu_0)}{\sigma_0^2 + \sigma_1^2}$,</p><p>$\sigma’^2 = \sigma_0^2 - \frac{\sigma_0^4}{\sigma_0^2 + \sigma_1^2}$.</p><p>如果有些太复杂，我们用k简化一下，</p><p>$k = \frac{\sigma_0^2}{\sigma_0^2 + \sigma_1^2}$,</p><p>$\mu’ = \mu_0 + k(\mu_1 - \mu_0)$,</p><p>$\sigma’^2 = \sigma_0^2 - k\sigma_0^2$.</p><p>以上是一维的内容，如果是多维空间，把这个式子转成矩阵格式：</p><p>$K = \Sigma_0(\Sigma_0 + \Sigma_1)^{-1}$,</p><p>$\vec{\mu}’ = \vec{\mu}_0 + K(\vec{\mu}_1 - \vec{\mu}_0)$,</p><p>$\Sigma’ = \Sigma_0 - K\Sigma_0$.</p><p>这个矩阵K就是卡尔曼增益。</p><p>基于以上基础，我们开始推导卡尔曼滤波的更新过程。</p><p>截至目前，我们有用矩阵$(\mu_0, \Sigma_0) = (H_k\hat{x}_k, H_kP_kH_k^T)$预测的分布，有用传感器读数$(\mu_1, \Sigma_1) = (\vec{z}_k, R_k)$预测的分布。把它们代入上节的矩阵等式中：</p><p>$H_k\hat{x}_k’ = H_k\hat{x}_k + K(\vec{z}_k - H_k\hat{x}_k)$,</p><p>$H_kP_k’H_k^T = H_kP_kH_k^T - KH_kP_kH_k^T$.</p><p>卡尔曼增益就是：</p><p>$K = H_kP_kH_k^T(H_kP_kH_k^T + R_k)^{-1}$.</p><p>考虑到$K$里还包含着一个$H_k$，再精简一下上式：</p><p>$\hat{x}_k’ = \hat{x}_k + K’(\vec{z}_k - H_k\hat{x}_k)$,</p><p>$P_k’ = P_k - K’H_kP_k$,</p><p>$K’ = P_kH_k^T(H_kP_kH_k^T + R_k)^{-1}$.</p><p>$\hat{x}_k’$是最佳估计值，我们可以把它继续放进去做另一轮预测。</p><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/39912633" target="_blank" rel="noopener">图说卡尔曼滤波，一份通俗易懂的教程</a></li><li><a href="http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/" target="_blank" rel="noopener">How a Kalman filter works, in pictures</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 滤波 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 滤波 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数及其应用（五）-特征值与特征向量</title>
      <link href="/2019/12/22/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%94%EF%BC%89-%E7%89%B9%E5%BE%81%E5%80%BC%E4%B8%8E%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F/"/>
      <url>/2019/12/22/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%94%EF%BC%89-%E7%89%B9%E5%BE%81%E5%80%BC%E4%B8%8E%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-特征向量与特征值"><a href="#1-特征向量与特征值" class="headerlink" title="1. 特征向量与特征值"></a>1. 特征向量与特征值</h1><ul><li>A为nxn矩阵，$\bf{x}$为非零向量，若存在数$\lambda$使$A\bf{x} = \lambda \bf{x}$成立，则称$\lambda$为A的特征值，$\bf{x}$称为对应于$\lambda$的特征向量</li><li>三角矩阵的主对角线的元素是其特征值</li><li>$\lambda_1, \cdots, \lambda_r$是nxn矩阵A相异的特征值，$\bf{v}_1, \cdots, \bf{v}_r$是与$\lambda_1, \cdots, \lambda_r$对应的特征向量，那么向量集合$\{\bf{v}_1. \cdots, \bf{v}_r\}$线性无关</li></ul><h1 id="2-特征方程"><a href="#2-特征方程" class="headerlink" title="2. 特征方程"></a>2. 特征方程</h1><ul><li>通过行列式来判断矩阵$A - \lambda I$是否可逆，数值方程$det(A - \lambda I) = 0$称为A的特征方程</li><li>数$\lambda$是nxn矩阵A的特征值的充要条件是$\lambda$是特征方程$det(A - \lambda I) = 0$的根</li><li>相似性<ul><li>假如矩阵A和B是nxn举着，如果存在可逆矩阵P，使得$P^{-1}AP = B$，或等价地$A = PBP^{-1}$，则称A相似于B，记$Q = P^{-1}$，则有$A^{-1}BQ = A$</li><li>若nxn矩阵A和B是相似的，那么它们有相同的特征多项式，从而有相同的特征值（和相同的重数）</li></ul></li></ul><h1 id="3-对角化"><a href="#3-对角化" class="headerlink" title="3. 对角化"></a>3. 对角化</h1><ul><li>如果方阵A相似于对角矩阵，即存在可逆矩阵P和对角矩阵D，有$A = PDP^{-1}$，则称A可对角化</li><li>nxn矩阵可对角化的充分必要条件是A有n个线性无关的特征向量</li><li>有n个相异特征值的nxn矩阵可对角化</li></ul><h1 id="4-特征向量与线性变换"><a href="#4-特征向量与线性变换" class="headerlink" title="4. 特征向量与线性变换"></a>4. 特征向量与线性变换</h1><ul><li>设V是n维向量空间，W是m维向量空间，T是V到W的线性变换；为了把T与矩阵相联系，指定B和C分别是V和W的基</li><li>V到V的线性变换<ul><li>当W=V，C=B时，M称为T相对于B的矩阵，或简称为T的B-矩阵，记为$[T]_B$</li><li>$V\rightarrow V$的线性变换T的B-矩阵对所有V中的$\bf{x}$，有$[T(\bf{x})]_B = [T]_B[\bf{x}]_B$</li></ul></li><li>对角矩阵表示<ul><li>设$A = PDP^{-1}$，其中D为nxn对角矩阵，若$R^n$的基B由P的列向量组成，那么D是变换$\bf{x}\mapsto A\bf{x}$的B-矩阵</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数及其应用（四）-向量空间</title>
      <link href="/2019/12/19/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4/"/>
      <url>/2019/12/19/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-向量空间与子空间"><a href="#1-向量空间与子空间" class="headerlink" title="1. 向量空间与子空间"></a>1. 向量空间与子空间</h1><ul><li><p>定义</p><ul><li>一个向量空间是由一些被称为向量的对象构成的非空集合V，在这个集合上定义两个运算，称为加法和标量乘法，服从以下定理，这些定理必须对V中所有向量u, v, w及所有标量c和d均成立<ul><li>$\vec{u}$和$\vec{v}$之和表示为$\vec{u} + \vec{v}$，仍在V中</li><li>$\vec{u} + \vec{v} = \vec{v} + \vec{u}$</li><li>$(\vec{u} + \vec{v}) + \vec{w} = \vec{u} + (\vec{v} + \vec{w})$</li><li>V中存在一个零向量$\vec{0}$，使得$\vec{u} + \vec{0} = \vec{u}$</li><li>对V中的每个向量$\vec{u}$，存在V中向量$-\vec{u}$，使得$\vec{u} + (-\vec{u}) = \vec{0}$</li><li>$\vec{u}$与标量c的标量乘法记为$c\vec{u}$，仍在V中</li><li>$c(\vec{u} + \vec{v}) = c\vec{u} + c\vec{v}$</li><li>$(c + d)\vec{u} = c\vec{u} + d\vec{u}$</li><li>$c(d\vec{u}) = (cd)\vec{u}$</li><li>$l\vec{u} = \vec{u}$</li></ul></li></ul></li><li><p>子空间</p><ul><li>向量空间V的一个子空间是V的一个满足以下三个性质的子集H<ul><li>V中的零向量在H中</li><li>H对向量加法封闭，即对H中任意向量$\vec{u}$和$\vec{v}$，和$\vec{u} + \vec{v}$仍在H中</li><li>H对标量乘法封闭，即对H中任意向量$\vec{u}$和任意标量c，向量$c\vec{u}$仍在H中</li></ul></li></ul></li></ul><h1 id="2-零空间、列空间和线性变换"><a href="#2-零空间、列空间和线性变换" class="headerlink" title="2. 零空间、列空间和线性变换"></a>2. 零空间、列空间和线性变换</h1><ul><li>零空间<ul><li>满足$A\bf{x} = \bf{0}$的所有x的集合为矩阵A的零空间</li><li>mxn矩阵A的零空间写成Nul A，是齐次方程$A\bf{x} = \bf{0}$的全体解的集合，用集合符号表示，即$Nul A = \{\bf{x}: \bf{x}\in R^n, A\bf{x} = \bf{0}\}$</li></ul></li><li>矩阵的列空间<ul><li>mxn矩阵的列空间（记为Col A）是由A的列的所有线性组合组成的集合，若$A = [a_1, \cdots, a_n]$，则$Col A = Span\{a_1, \cdots, a_n\}$</li><li>mxn矩阵A的列空间是$R^m$的一个子空间</li></ul></li><li>线性变换的核与值域<ul><li>由向量空间V映射到向量空间W内的线性变换T是一个规则，它将V中每个向量x映射成W中惟一向量T(x)，且满足<ul><li>$T(\bf{u} + \bf{v}) = T(\bf{u}) + T(\bf{v})$，对V中所有$\bf{u}$，$\bf{v}$均成立</li><li>$T(c\bf{u}) = cT(\bf{u})$，对V中所有$\bf{u}$及所有数c均成立</li></ul></li><li>线性变换T的核（或零空间）是V中所有满足$T(\bf{u}) = \bf{0}$的向量$\bf{u}$的集合（$\bf{0}$为W中的零向量）。T的值域是W中所有具有刑事$T(\bf{x})$（任意$\bf{x}\in V$）的向量的集合。如果T是由一个矩阵变换得到的，比如对某矩阵A，$T(\bf{x}) = A\bf{x}$，则T的核与值域恰好是前面定义的A的零空间和列空间</li></ul></li></ul><h1 id="3-线性无关集合基"><a href="#3-线性无关集合基" class="headerlink" title="3. 线性无关集合基"></a>3. 线性无关集合基</h1><ul><li>另H是向量空间V的一个子空间，V中向量的指标集$B = \{b_1, \cdots, b_p\}$称为H的一个基，如果<ul><li>B是一线性无关集</li><li>由B生成的子空间与H相同，即$H = Span\{b_1, \cdots, b_p\}$</li></ul></li><li>生成集<ul><li>另$S = \{\bf{v}_1, \cdots, \bf{v}_p\}$是V中的向量集，$H = Span\{\bf{v}_1, \cdots, \bf{v}_p\}$<ul><li>若S中某一个向量，比如说$\bf{v}_k$，是S中其余向量的线性组合，则S中去掉$\bf{v}_k$后形成的集合仍然可以生成H</li><li>若$H \neq \{\bf{0}\}$，则S的某一子集是H的一个基</li></ul></li></ul></li><li>矩阵A的主元列构成Col A的一个基</li></ul><h1 id="4-坐标系"><a href="#4-坐标系" class="headerlink" title="4. 坐标系"></a>4. 坐标系</h1><ul><li>对一个向量空间V，明确指定一个基B的一个重要原因是在V上强加一个“坐标系”</li><li>惟一表示定理<ul><li>另$B = \{\bf{b}_1, \cdots, \bf{b}_n\}$是向量空间V的一个基，则对V中每个向量$\bf{x}$，存在惟一的一组数$c_1, cdots, c_n$使得$\bf{x} = c_1\bf{b}_1 + \cdots + c_n\bf{b}_n$</li></ul></li><li>假设集合$B = \{\bf{b}_1, \cdots, \bf{b}_n\}$是V的一个基，$\bf{x}$在V中，$\bf{x}$相对于基B的坐标（或$\bf{x}$的B-坐标）是使得$\bf{x} = c_1\bf{b}_1 + \cdots + c_n\bf{b}_n$的权$c_1, \cdots, c_n$</li></ul><h1 id="5-向量空间的维数"><a href="#5-向量空间的维数" class="headerlink" title="5. 向量空间的维数"></a>5. 向量空间的维数</h1><ul><li>若V由一个有限集生成，则V称为有限维的，V的维数写成dimV，是V的基中含有向量的个数，零向量空间${\bf{0}}$的维数定义为零。如果V不是由一有限集生成，则V称为无穷维的</li><li>有限维空间的子空间<ul><li>另H是有限维向量空间V的子空间，若有需要的话，H中任一个线性无关集均可以扩充为H的一个基，H也是有限维的并且$dim H \leq dim V$</li></ul></li></ul><h1 id="6-秩"><a href="#6-秩" class="headerlink" title="6. 秩"></a>6. 秩</h1><ul><li>行空间<ul><li>若A是一个mxn矩阵，A的每一行具有n个数字，即可以视为$R^n$中一个向量。其行向量的所有线性组合的集合称为A的行空间，记为Row A。由于每一行具有n个数，所以Row A是$R^n$的一个子空间。因为A的行与$A^T$的列相同，也可用$Col A^T$代替Row A</li></ul></li><li>A的秩即A的列空间的维数</li><li>mxn矩阵A的列空间和行空间的维数相等，这个公共的维数（即A的秩）还等于A的主元位置的个数且满足方程$rank A + dim Nul A = n$</li><li>秩和可逆矩阵定理<ul><li>令A是一个nxn矩阵，则下列的命题中的每个均等价于A是可逆矩阵<ul><li>A的列构成$R^n$的一个基</li><li>$Col A = R^n$</li><li>$dim Col A = n$</li><li>$rank A = n$</li><li>$Nul A = \{0\}$</li></ul></li></ul></li></ul><h1 id="7-基的变换"><a href="#7-基的变换" class="headerlink" title="7. 基的变换"></a>7. 基的变换</h1><ul><li>设$B = \{\bf{b}_1, \cdots, \bf{b}_n\}$和$C = \{\bf{c}_1, \cdots, 、bf{c}_n\}$是向量空间V的基，则存在一个nxn矩阵$P_{C\leftarrow B}$使得$[\bf{x}]_C = P_{C\leftarrow B}[\bf{x}]_B$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数及其应用（三）-行列式</title>
      <link href="/2019/12/14/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89-%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
      <url>/2019/12/14/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89-%E8%A1%8C%E5%88%97%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-行列式的介绍"><a href="#1-行列式的介绍" class="headerlink" title="1. 行列式的介绍"></a>1. 行列式的介绍</h1><ul><li>当$n \geq 2$，nxn矩阵$A = [a_{ij}]$的行列式是形如$\pm a_{ij}detA_{ij}$的n个项的和，其中加号和减号交替出现，这里元素$a_{11}, a_{12}, \cdots, a_{1n}$来自A的第一行，即$detA = a_{11}detA_{11} - a_{12}detA_{12} + \cdots + (-1)^{1+n}a_{1n}detA_{1n} = \sum_{j=1}^{n}(-1)^{1+j}a_{1j}detA_{1j}$.</li><li>给定$A = [a_{ij}]$，A的(i, j)余因子$C_{ij}$由下式给出$C_{ij} = (-1)^{i+j}detA_{ij}$，则$detA = a_{11}C_{11} + a_{12}C_{12} + \cdots + a_{1n}C_{1n}$.</li><li>nxn矩阵A的行列式可按任意行或列的余因子展开式来计算。按第i行展开为$detA = a_{i1}C_{i1} + a_{i2}C_{i2} + \cdots + a_{in}C_{in}$；按第j列的余因子展开式为$detA = a_{1j}C_{1j} + a_{2j}C_{2j} + \cdots + a_{nj}C_{nj}$.</li></ul><h1 id="2-行列式的性质"><a href="#2-行列式的性质" class="headerlink" title="2 行列式的性质"></a>2 行列式的性质</h1><ul><li>令A是一个方阵<ul><li>若A的某一行的倍数加到另一行得到矩阵B，则$det B = det A$</li><li>若A的两行互换得到矩阵B，则$det B = det A$</li><li>若A的某行乘以k倍得到矩阵B，则$det B = kdet A$</li></ul></li><li>方阵A可逆当且仅当$det A \neq 0$</li><li>若A为一个nxn矩阵，则$det A^T = det A$</li><li>若A和B均为nxn矩阵，则$det AB = (det A)(det B)$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">det</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(A) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> A[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    value = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)):</span><br><span class="line">        n = [[row[a] <span class="keyword">for</span> a <span class="keyword">in</span> range(len(A)) <span class="keyword">if</span> a != i] <span class="keyword">for</span> row <span class="keyword">in</span> A[<span class="number">1</span>:]]</span><br><span class="line">        value += A[<span class="number">0</span>][i] * det(n) * (<span class="number">-1</span>) ** (i % <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><h1 id="3-克拉默法则、体积和线性变换"><a href="#3-克拉默法则、体积和线性变换" class="headerlink" title="3. 克拉默法则、体积和线性变换"></a>3. 克拉默法则、体积和线性变换</h1><ul><li>克拉默法则<ul><li>设A是一个可逆的nxn矩阵，对$R^n$中任意向量b，方程$Ax = b$的唯一解可由下式给出$x_i = \frac{det A_{i}(b)}{det A}$，其中，$i = 1, 2, \dots, n$.</li></ul></li><li>一个求$A^{-1}$的公式<ul><li>$A^{-1}$的第j列是一个向量x，满足$Ax = e_j$，其中$e_j$是单位矩阵的第j列，x的第i个数值是$A^{-1}$中(i, j)位置的数值，由克拉默法则$\{A^{-1}中(i, j)元素\} = x_i = \frac{det A_i(e_j)}{det A}$</li><li>那么，$A^{-1} = \frac{1}{det A}adj A$</li></ul></li><li>用行列式表示面积或体积<ul><li>若A是一个2x2矩阵，则由A的列确定的平行四边形的面积为$|det A|$，若A是一个3x3矩阵，则由A的列确定的平行六面体的体积为$|det A|$</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vSLAMNet（五）-姿态估计-Madgwick算法</title>
      <link href="/2019/12/07/slam/vSLAMNet%EF%BC%88%E4%BA%94%EF%BC%89-%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1-Madgwick%E7%AE%97%E6%B3%95/"/>
      <url>/2019/12/07/slam/vSLAMNet%EF%BC%88%E4%BA%94%EF%BC%89-%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1-Madgwick%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><ul><li>Madgwick S. An efficient orientation filter for inertial and inertial/magnetic sensor arrays[J]. Report x-io and University of Bristol (UK), 2010, 25: 113-118.</li><li>Madgwick S O H, Harrison A J L, Vaidyanathan R. Estimation of IMU and MARG orientation using a gradient descent algorithm[C]//2011 IEEE international conference on rehabilitation robotics. IEEE, 2011: 1-7.</li><li>位姿估计</li><li>传感器<ul><li>陀螺仪 + 加速度计</li><li>陀螺仪 + 加速度计 + 磁力计</li></ul></li><li>优点<ul><li>计算量低，适用于轻量级设备</li><li>适用于低采样频率</li><li>仅有2个需要调的参数</li></ul></li><li>核心思想<ul><li>首先，通过陀螺仪的角速度初步计算传感器方向偏移$^{E}_{S}q_{w,t}$；然后，通过对重力加速度和地磁这两个恒定量在传感器坐标系下的投影计算传感器方向偏移$^{E}_{S}q_{\nabla,t}$；最后通过互补滤波器融合$^{E}_{S}q_{w,t}$和$^{E}_{S}q_{\nabla,t}$来得到一个更加可信的结果。除此之外还需要校正地磁计数据畸变和陀螺仪零点漂移。</li></ul></li></ul><h1 id="2-算法详解"><a href="#2-算法详解" class="headerlink" title="2. 算法详解"></a>2. 算法详解</h1><h2 id="2-1-陀螺仪姿态解算"><a href="#2-1-陀螺仪姿态解算" class="headerlink" title="2.1 陀螺仪姿态解算"></a>2.1 陀螺仪姿态解算</h2><ul><li><p>主要思想</p><ul><li>建立四元数和陀螺仪读数之间的微分方程</li><li>欧拉中值积分</li></ul></li><li><p>坐标系定义</p><ul><li>世界坐标系E</li><li>传感器坐标系S</li><li>$^{S}_{E}q$表示坐标系E相对于坐标系S的单位旋转四元数</li></ul></li><li>陀螺仪数据输出<ul><li>$^{S}w = [0 w_x w_y w_z]$</li></ul></li><li>地面参考系（Earth）相对于传感器参考系（Sensor）的旋转可以由其四元数的导数对时间的积分获得，$^{S}_{E}q_{w,t} = ^{S}_{E}\hat{q}_{est.t-1} + ^{S}_{E}q_{w,t}\Delta t$，其中$^{S}_{E}\dot{q} = \frac{1}{2}^{S}_{E}\hat{q} \otimes ^{S}w$，$^{S}_{E}\dot{q}$表示姿态四元数变化的速度。该公式中的角速度可以直接从传感器读出，上一时刻的位姿也是已知，时间间隔也可以从传感器芯片中的获得。可以轻松的计算出结果，下面推导下该公式</li></ul><p>已知t时刻的四元数$^{S}_{E}q_{t-1}$和角速度$^{S}w_{t-1}$、t时刻的加速度$^{S}w_t$，系统采样间隔为$\Delta t$，求t时刻的四元数$^{S}_{E}q_{t}$。</p><p>基于常微分方程，套用中值积分公式，得到$^{S}_{E}q_t = ^{S}_{E}q_{t-1} + \frac{\Delta t}{2}(K_1 + K_2)$，其中，$K_1 = \frac{1}{2}^{S}_{E}q_{t-1}\otimes ^{S}w_{t-1}$和$K_2 = \frac{1}{2}(^{S}_{E}q_{t-1} + \Delta tK_1)\otimes^{S}w_t$。</p><p>此处，近似估计物体四元数在t-1到t时刻之间的平均变化速度$^{S}_{E}\dot{q}_{w,t-1,t}$。在实际过程中，往往并不能得到t-1时刻的准确的四元数，二是一个最优的估计值$^{S}_{E}\hat{q}_{est,t-1}$。</p><p>我们得到$^{S}_{E}\dot{q}_{w,t-1,t} = \frac{1}{2}(K_1 + K_2) = \frac{1}{2}(\frac{1}{2}^{S}_{E}\hat{q}_{est,t-1}\otimes ^{S}w_{t-1} + \frac{1}{2}(^{S}_{E}\hat{q}_{est,t-1} + \Delta t(\frac{1}{2}^{S}_{E}\hat{q}_{est,t-1}\otimes ^{S}w_{t-1})) \otimes ^{S}w_{t})$</p><p>$^{S}_{E}q_{w,t} = ^{S}_{E}\hat{q}_{est,t-1} + ^{S}_{E}\dot{q}_{w,t-1,t}\Delta t$</p><p>从而得到，</p><p>$^{S}_{E}q_{w,t} = ^{S}_{E}\hat{q}_{est,t-1} + \frac{\Delta}{2}(\frac{1}{2}^{S}_{E}\hat{q}_{est,t-1}\otimes ^{S}w_{t-1} + \frac{1}{2}(^{S}_{E}\hat{q}_{est,t-1} + \Delta t(\frac{1}{2}^{S}_{E}\hat{q}_{est,t-1}\otimes ^{S}w_{t-1})) \otimes ^{S}w_{t})$</p><p>以上迭代公式是计算精度要求较高时采用的。而在实际工程中，不要求如此的高精度而追求计算速度时，可采用以下的近似迭代公式。亦是参考<a href="https://www.cnblogs.com/ilekoaiq/p/8849217.html" target="_blank" rel="noopener">Madgwick算法详细解读</a>。</p><p>在t-1时刻到t时刻之间的变化速度$^S_E\dot{q}_{w,t-1,t}$可近似为，</p><p>$^S_E\dot{q}_{w,t-1,t} = \frac{1}{2}^S_E\hat{q}_{est,t-1}\otimes ^Sw_t$,</p><p>所以，$^S_Eq_{w,t} = ^S_E\hat{q}_{est,t-1} + ^S_E\dot{q}_{w,t-1,t}\Delta t = ^S_E\hat{q}_{est,t-1} + (\frac{1}{2}^S_E\hat{q}_{est,t-1}\otimes ^Sw_t)\Delta t$.</p><h2 id="2-2-加速度计和磁力计姿态解算"><a href="#2-2-加速度计和磁力计姿态解算" class="headerlink" title="2.2 加速度计和磁力计姿态解算"></a>2.2 加速度计和磁力计姿态解算</h2><ul><li>传感器介绍<ul><li>加速度计<ul><li>测量重力和外界施加给物体的力产生的加速度的和</li></ul></li><li>磁力计<ul><li>测量地球磁场和外界地磁干扰在传感器坐标系下的磁通量</li></ul></li></ul></li><li>假设<ul><li>该算法假设加速度计和磁力计分别仅仅观测重力和地球磁场</li></ul></li><li>目标<ul><li>利用加速度计和磁力计求解姿态$^{S}_{E}q_{\bigtriangledown, t}$</li></ul></li></ul><p>以上的推导参考<a href="https://www.cnblogs.com/ilekoaiq/p/8849217.html" target="_blank" rel="noopener">Madgwick算法详细解读</a>，推导思路同论文一致，只是有些符号定义不同。此外，论文中首先分别对加速度计读数和磁力计读数进行推导，然后组合在一起。以下的推导直接将加速度计读数和磁力计读数组合在一起。</p><p>当物体静止朝北时，加速度计理论输出为$^{E}\hat{g} = [0\ 0\ 0\ 1]$，磁力计理论输出为$^E\hat{b} = [0\ b_x\ 0\ b_z]$，表示为实部为0的四元数。进一步地，我们得到向量$^E\hat{y} = [0\ 0\ 1\ b_x\ 0\ b_z]$。</p><p>当物体运动后，在t时刻，我们得到新的加速度计和磁力计的向量分别为$^S\hat{a}_t = [0\ a_x\ a_y\ a_z]$和$^S\hat{m}_t = [0\ m_x\ m_y\ m_z]$。进一步地，我们得到新的向量$^S\hat{y}_t = [a_x\ a_y\ a_z\ m_x\ m_y\ m_z]$。</p><p>设t时刻物体的姿态为$^{S}_{E}q_t$，那么根据四元数旋转可得到，</p><p>$^S\hat{a}_t = ^{S}_{E}q_t \otimes ^E\hat{g} \otimes ^{S}_{E}q_t^*$,</p><p>$^S\hat{m}_t = ^{S}_{E}q_t \otimes ^E\hat{b} \otimes ^{S}_{E}q_t^*$。</p><p>利用旋转矩阵表示为，</p><p>$^S\hat{a}_t^T = R_t ^E\hat{g}^T$，</p><p>$^S\hat{m}_t^T = R_t ^E\hat{b}^T$,</p><p>将$R_t$组合为新的矩阵$M_t$，</p><p>$M_t = \left[<br> \begin{matrix}<br>   R_t &amp; 0 \\<br>   0 &amp; R_t<br>  \end{matrix}<br>  \right]$,</p><p>那么，我们得到，</p><p>$^S\hat{y}_t^T = M_t^E\hat{y}^T$.</p><p>上式中，$^S\hat{y}_t$和$^E\hat{y}$是已知的，可以求出$^{S}_{E}q_t$，即估计值$^{S}_{E}\hat{q}_t = [q_0\ q_1\ q_2\ q_3]^T$，由此转换成$\hat{M}_t$，使得误差平方和$F(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)$最小，得到如下优化方程，</p><p>$\min_{^{S}_{E}\hat{q}_t\in R^4}F(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)$,</p><p>其中，$F(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t) = ||f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)||^2 = (\hat{M}_t\ ^E\hat{y}^T - ^S\hat{y}_t^T)^T(\hat{M}_t\ ^E\hat{y}^T - ^S\hat{y}_t^T)$。</p><p>函数$f(\cdot)$回一个多元向量函数，采用数值解法，例如梯度下降法、牛顿法等。论文中采用梯度下降法。</p><p>设$^{S}_{E}\hat{q}_t$的初值为$^{S}_{E}\hat{q}_{t,k}$，为4行1列矩阵，那么误差平方和为$F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t$。假设初值四元数需要修正的量为$\bigtriangledown f(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)$，那么修正后的误差平方和为$F(^{S}_{E}\hat{q}_{t,k} + \bigtriangledown f, ^E\hat{y}, ^S\hat{y}_t)$。</p><p>由泰勒公式展开得到，</p><p>$F(^{S}_{E}\hat{q}_{t,k} + \bigtriangledown f, ^E\hat{y}, ^S\hat{y}_t) = F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t) + \frac{\partial F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q}\bigtriangledown f + O(||\bigtriangledown f||^2) \approx F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t) + \frac{\partial F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q}\bigtriangledown f$,</p><p>其中，$\bigtriangledown f$为4行1列矩阵，$\frac{\partial F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q}$为1行4列矩阵，得到，</p><p>$\frac{\partial F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q} = [\frac{\partial F}{\partial q_0}\ \frac{\partial F}{\partial q_1}\ \frac{\partial F}{\partial q_2}\ \frac{\partial F}{\partial q_3}]$，</p><p>那么，梯度为，</p><p>$\lim_{\bigtriangledown f\rightarrow 0}\frac{F(^{S}_{E}\hat{q}_{t,k} + \bigtriangledown f, ^E\hat{y}, ^S\hat{y}_t) - F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{||\bigtriangledown f||} = \frac{\partial F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q}\frac{\bigtriangledown f}{||\bigtriangledown f||} = ||\frac{\partial F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q}||\cos \theta$,</p><p>其中，$\theta$为向量$(\frac{\partial F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q})^T$与单位向量$\frac{\bigtriangledown f}{||\bigtriangledown f||}$的夹角。当$\theta = \pi$时，误差平方和下降最快。因此，我们得到，</p><p>$\bigtriangledown f = -\rho (\frac{\partial F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q})^T$,</p><p>其中，$\rho$为一个大于0的比例系数。上式中的$F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)$关于四元数q的偏导计算为，</p><p>$\frac{\partial F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q} = \frac{\partial (f^T(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t))}{\partial q}$</p><p>$= [\frac{\partial (f_{11}^2 + f_{21}^2 + \cdots + f_{61}^2)}{\partial q_0}\ \frac{\partial (f_{11}^2 + f_{21}^2 + \cdots + f_{61}^2)}{\partial q_1}\ \frac{\partial (f_{11}^2 + f_{21}^2 + \cdots + f_{61}^2)}{\partial q_2}\ \frac{\partial (f_{11}^2 + f_{21}^2 + \cdots + f_{61}^2)}{\partial q_3}]$</p><p>$= [2f_{11}\frac{\partial f_{11}}{\partial q_0} + \cdots + 2f_{61}\frac{\partial f_{61}}{\partial q_0}\ 2f_{11}\frac{\partial f_{11}}{\partial q_1} + \cdots + 2f_{61}\frac{\partial f_{61}}{\partial q_1}\ 2f_{11}\frac{\partial f_{11}}{\partial q_2} + \cdots + 2f_{61}\frac{\partial f_{61}}{\partial q_2}\ 2f_{11}\frac{\partial f_{11}}{\partial q_3} + \cdots + 2f_{61}\frac{\partial f_{61}}{\partial q_3}]$</p><p>$= 2f^T(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)\frac{\partial f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)}{\partial q}$,</p><p>其中，$f_{ij}$表示$f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)$中第i行第j列元素。$f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)$的表达式为，</p><p>$f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t) = \hat{M}_t\ ^E\hat{y}^T - ^S\hat{y}_t^T$</p><p>$= \left[<br>\begin{matrix}<br>    2(q_1q_3 - q_0q_2) - a_x \\<br>    2(q_0q_1 + q_2q_3) - a_y \\<br>    2(\frac{1}{2} - q_1^2 - q_2^2) \\<br>    2b_x(\frac{1}{2} - q_2^2 - q_3^2) + 2b_z(q_1q_3 - q_0q_2) - m_x \\<br>    2b_x(q_1q_2 - q_0q_3) + 2b_z(q_0q_1 + q_1q_3) - m_y \\<br>    2b_x(q_0q_2 + q_1q_3) + 2b_z(\frac{1}{2} - q_1^2 - q_2^2) - m_z<br>\end{matrix}<br>\right]$.</p><p>而$\frac{\partial f(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q}$是$f(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)$关于四元数的偏导，其雅可比矩阵为，</p><p>$\frac{\partial F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q} = J(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t))$</p><p>$ = [\frac{\partial f(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q_0}\ \frac{\partial f(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q_1}\ \frac{\partial f(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q_2}\ \frac{\partial f(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)}{\partial q_3}]$</p><p>$= \left[<br>\begin{matrix}<br>    -2q_2 &amp; 2q_3 &amp; -2q_0 &amp; 2q_1 \\<br>    2q_1 &amp; 2q_0 &amp; 2q_3 &amp; 2q_2 \\<br>    0 &amp; -4q_1 &amp; -4q_2 &amp; 0 \\<br>    -2b_zq_2 &amp; 2b_zq_3 &amp; -4b_xq_2 - 2b_zq_0 &amp; -4b_xq_3 + 2b_zq_1 \\<br>    -2b_xq_3 + 2b_zq_1 &amp; 2b_xq_2 + 2b_zq_0 &amp; 2b_xq_1 + 2b_zq_3 &amp; -2b_xq_0 + 2b_zq_2 \\<br>    2b_xq_2 &amp; 2b_xq_3 - 4b_zq_1 &amp; 2b_xq_0 - 4b_zq_2 &amp; 2b_xq_1<br>\end{matrix}<br>\right]$,</p><p>因此，$\bigtriangledown f$的计算为，</p><p>$\bigtriangledown f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t) = -rho(2f^T(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)J(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t))^T$</p><p>$= -2\rho J^T(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)$.</p><p>进行归一化，除以其范数，得到梯度方向为，</p><p>$\frac{\bigtriangledown f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)}{||\bigtriangledown f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)||} = \frac{-2\rho J^T(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)}{||-2\rho J^T(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)||}$</p><p>$= \frac{-J^T(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)}{||-J^T(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)||}$,</p><p>然后再乘以步长$\mu_t$就得到各个变量要改变的值。因此，各个自变量现有的值加上要修正的量，得到新的$^S_E\hat{q}_t$的估计为，</p><p>$^S_E\hat{q}_{t,k} = ^S_E\hat{q}_{t,k-1} + \frac{\bigtriangledown f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)}{||\bigtriangledown f(^{S}_{E}\hat{q}_t, ^E\hat{y}, ^S\hat{y}_t)||}\mu_t$,</p><p>其中，$k = 1, 2, \cdots, n$.</p><p>如此迭代下去，用上一时刻的姿态$^S_E\hat{q}_{est,t-1}$作为初值$^S_E\hat{q}_{t,0}$，即已知上一次的估计$^S_E\hat{q}_{t,k}$，代入上述公式中，进行多次迭代，直到$F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t)$小于某一阈值，或者经过多次迭代，直到满足$F(^{S}_{E}\hat{q}_{t,k}, ^E\hat{y}, ^S\hat{y}_t) - F(^{S}_{E}\hat{q}_{t,k-1}, ^E\hat{y}, ^S\hat{y}_t) \geq 0$，此时，$^S_E\hat{q}_{t,k}$为$^S_E\hat{q}_{t}$的最佳估计值。</p><p>以上迭代公式是计算精度要求较高时采用的。而在实际工程中，不要求如此的高精度而追求计算速度时，可采用以下的近似迭代公式。亦是参考<a href="https://www.cnblogs.com/ilekoaiq/p/8849217.html" target="_blank" rel="noopener">Madgwick算法详细解读</a>。</p><p>梯度下降法的迭代过程，也可以只用一步来简化，即认为一步就可以近似达到最佳估计值。那就是要设置步长$\mu_t$，使得迭代一次就能够接近最佳估计值，</p><p>$\mu_t = \eta||^S_E\dot{q}_{w,t-1,t}||\Delta t$，其中，$\eta \geq 1$，是一个根据实际情况调节的量，用来弥补加速度计和磁力计的测量误差。</p><p>因此，简化后的$^S_Eq_{\bigtriangledown, t}$为，</p><p>$^S_Eq_{\bigtriangledown, t} = ^S_E\hat{q}_{est,t-1} - \mu_t\frac{\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)}{||\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)||}$</p><p>$= ^S_E\hat{q}_{est,t-1} - (\eta||^S_E\dot{q}_{w,t-1,t}||\Delta t)\frac{\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)}{||\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)||}$</p><p>$^S_E\hat{q}_{est,t-1} - (\eta||\frac{1}{2}^S_E\hat{q}_{est,t-1}\otimes ^Sw_t||\Delta t)\frac{\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)}{||\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)||}$</p><h2 id="2-3-加权融合"><a href="#2-3-加权融合" class="headerlink" title="2.3 加权融合"></a>2.3 加权融合</h2><p>互补滤波的方法将两个部分的加权平均，</p><p>$^S_Eq_{est,t} = \alpha_1\ ^S_Eq_{w,t} + \alpha_2\ ^S_Eq_{\bigtriangledown,t}$,</p><p>其中，$\alpha_1 + \alpha_2 = 1$，$0 \leq \alpha_1 \leq 1$，$0 \leq \alpha_2 \leq 1$。$\alpha_1$和$\alpha_2$是加权系数，它们是由各自的误差占总体误差的比重所决定的，误差所占的比重越小则加权系数越大。</p><p>设采样间隔为$\Delta t$，陀螺仪的单位误差$\beta$可以通过查手册得到，那么陀螺仪的误差为$\beta \Delta t$。而加速度计磁场计共同算出的姿态的误差是由计算方法决定的，计算方法如梯度下降法、高斯牛顿迭代法、牛顿法、共轭梯度法等，由于采用的方法是梯度下降法，所以其误差为梯度下降法中所选取的步长$\mu_t$，步长越长则其计算结果的误差越大。所以，总体误差为$\beta \Delta t + \mu_t$。</p><p>$\alpha_1$是陀螺仪的姿态加权系数，$\alpha_1 = 1 - \frac{\beta \Delta t}{\beta \Delta t + \mu_t}$。</p><p>$\alpha_2$是加速度计和磁力计的姿态加权系数，$\alpha_2 = \alpha_1 = 1 - \frac{\mu_t}{\beta \Delta t + \mu_t}$。</p><p>所以，</p><p>$^S_Eq_{est,t} = \alpha_1\ ^S_Eq_{w,t} + \alpha_2\ ^S_Eq_{\bigtriangledown,t}$</p><p>$= (1-\frac{\beta\Delta t}{\beta\Delta t + \mu_t})(^S_E\hat{q}_{est,t-1} + ^S_E\dot{q}_{w,t-1,t}\Delta t) + (1-\frac{\mu_t}{\beta\Delta t + \mu_t})(^S_E\hat{q}_{est,t-1} - \mu_t\frac{\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)}{||\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)||})$</p><p>$= ^S_E\hat{q}_{est,t-1} + \frac{\mu_t}{\beta\Delta t + \mu_t}^S_E\dot{q}_{w,t-1,t}\Delta t - \frac{\beta\Delta t}{\beta\Delta t + \mu_t}\mu_t\frac{\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)}{||\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)||}$</p><p>$= ^S_E\hat{q}_{est,t-1} + \frac{\eta||^S_E\dot{q}_{w,t-1,t}||\Delta t}{\beta\Delta t + \eta||^S_E\dot{q}_{w,t-1,t}||\Delta t}^S_E\dot{q}_{w,t-1,t}\Delta t - \frac{\beta\Delta t}{\beta\Delta t + \eta||^S_E\dot{q}_{w,t-1,t}||}\eta||^S_E\dot{q}_{w,t-1,t}||\Delta t\frac{\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)}{||\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)||}$</p><p>$= ^S_E\hat{q}_{est,t-1}+ \frac{\eta||^S_E\hat{q}_{est,t-1}||}{\beta + \eta||^S_E\hat{q}_{est,t-1}||}(\frac{1}{2}^S_E\hat{q}_{est,t-1}\otimes ^Sw_t)\Delta t - \frac{\beta}{\beta + \eta||^S_E\hat{q}_{est,t-1}||}\eta||\frac{1}{2}^S_E\hat{q}_{est,t-1}\otimes ^Sw_t||\Delta t\frac{\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)}{||\bigtriangledown f(^{S}_{E}\hat{q}_{est,t-1}, ^E\hat{y}, ^S\hat{y}_t)||}$.</p><h2 id="2-4-系统流程图"><a href="#2-4-系统流程图" class="headerlink" title="2.4 系统流程图"></a>2.4 系统流程图</h2><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-08-081943.png" alt="image-20191208161930373" style="zoom:50%;"></p><h2 id="2-5-磁力计校准"><a href="#2-5-磁力计校准" class="headerlink" title="2.5 磁力计校准"></a>2.5 磁力计校准</h2><ul><li>磁力计易受外界地磁干扰，导致地磁测量数据误差较大</li><li>磁力计本身也具有误差，例如漂移、制造误差等</li><li><p>如果使用磁力计估计姿态，为了获取精确地姿态，需要对磁力计进行校准</p></li><li><p>主要思想</p><ul><li>利用加速度计来校准磁力计</li><li>因为加速度计不收外界干扰，仅有其自身传感器相关误差</li><li>采用最优化算法来估计最优姿态，继而校准磁力计</li></ul></li></ul><p>根据论文和参考<a href="https://www.cnblogs.com/ilekoaiq/p/8849217.html" target="_blank" rel="noopener">Madgwick算法详细解读</a>，磁力计校准过程描述如下。</p><p>在传感器刚开始运行的时候，即第一帧的时候，传感器可能处于任意一种姿态，几乎不会是水平静止朝北的，所以磁场计的输出$^S\hat{m}_0$几乎不会是$^E\hat{b}_0$。所以，$^E\hat{b}_0$是未知的。此时，可利用加速度计来估计姿态，</p><p>$^S\hat{a}_0 = ^S_Eq_0 \otimes ^E\hat{g} \otimes ^S_Eq^*_0$,</p><p>用旋转矩阵R表示为，</p><p>$^S\hat{a}_0^T = R ^E\hat{g}$.</p><p>在上式中，$^S\hat{a}_0$和$^E\hat{g}$是已知的，所以可以由上式再反过来去求出第一帧的姿态$^S_Eq_0$，转换成R，使得f最小，</p><p>$\epsilon = R\ ^E\hat{g}^T - ^S\hat{a}^T_0$,</p><p>$f = \epsilon^T\epsilon = (R\ ^E\hat{g}^T - ^S\hat{a}_0^T)^T(R\ ^E\hat{g}^T - ^S\hat{a}_0^T)$.</p><p>用高斯牛顿迭代法来寻找这个最佳的四元数，其雅克比矩阵为，</p><p>$J = [\frac{\partial \epsilon}{\partial q_0}\ \frac{\partial \epsilon}{\partial q_1}\ \frac{\partial \epsilon}{\partial q_2}\ \frac{\partial \epsilon}{\partial q_3}]$.</p><p>假设当前四元数各个元素的误差为4行1列的矩阵x，那么$Jx = \epsilon$。采用最小二乘法计算x，</p><p>$x = (J^TJ)^{-1}\epsilon$.</p><p>所以，现有的四元数的值减去误差，得到新的四元数，</p><p>$,^S_E\hat{q}_{0,k+1} = ^S_E\hat{q}_{0,k} - x = ^S_E\hat{q}_{0,k+1} - (J^TJ)^{-1}J^T\epsilon$</p><p>其中，$^S_E\hat{q}_{0}$的初始值可以设为$[1\ 0\ 0\ 0]$。</p><p>重复上述公式，迭代多次，直到f达到最小值。</p><p>于是就得到加速度计估计出的第一帧的姿态$^S_E\hat{q}_{0}$。</p><p>根据四元数的坐标系旋转性质，可以把坐标系转到水平的位置上，但并不能保证朝北。对于向量来讲，坐标系逆着四元数转回去，就相当于是向量顺着四元数继续转，得到在这个水平坐标系中的磁场的向量$^E\hat{h}_0$。</p><p>其中，$h_x$和$h_y$是$b_x$在这个坐标系中的x轴和y轴上的分量，得到$^E\hat{b}_0 = [0\ \sqrt{h_x^2 + h_y^2}\ 0\ h_z]$.</p><p>以上是第一帧的时候得到$^E\hat{b}_0$的方法。</p><p>再将加速度计估计出来的姿态$^S_E\hat{q}_{0}$作为初值，将$^E\hat{g}$、$^S\hat{a}_0$、$^E\hat{b}_0$、$^S\hat{m}_0$代入之前公式中，用梯度下降法迭代，得到高精度的第一帧的姿态$^S_E\hat{q}_{0}$。</p><p>当物体发生运动之后，由于周围环境的影响，每一帧都要对$^E\hat{b}_t$进行修正，假设上一针的最佳的姿态估计为$^S_R\hat{q}_{est,t-1}$，那么这一帧的$^E\hat{b}_t$为</p><p>$^E\hat{h}_t = [0\ h_x\ h_y\ h_z] = ^S_R\hat{q}_{est,t-1} \otimes ^S\hat{m}_t \otimes ^S_R\hat{q}_{est,t-1}^*$,</p><p>$^E\hat{b}_t  = [0\ \sqrt{h_x^2 + h_y^2}\ 0\ h_z]$.</p><p>这样的校准计算可以将外界的电磁干扰影响约束在对传感器指向的方向估计中。而且不需要预先给定地磁方向。</p><h2 id="2-6-陀螺仪零点漂移校准"><a href="#2-6-陀螺仪零点漂移校准" class="headerlink" title="2.6 陀螺仪零点漂移校准"></a>2.6 陀螺仪零点漂移校准</h2><ul><li>陀螺仪的零飘受温度和运动等因素的影响</li><li>本文提出陀螺仪的零飘可通过姿态变化率来进行弥补</li></ul><p>修正方法如下：</p><p>$^S_E\dot{\hat{q}}_{\epsilon}$代表了陀螺仪在各个轴的角误差，使用前文提到的$^S_E\dot{q}_{w,t} = \frac{1}{2}^S_E\hat{q}_{est,t-1}\otimes ^Sw_t$公式的逆运算可以得出陀螺仪当前度数的可能偏差为$^Sw_{\epsilon, t} = 2^S_E\hat{q}^*_{est,t-1}\otimes ^S_E\dot{\hat{q}}_{\epsilon,t}$。</p><p>那么，陀螺仪随着时间的漂移量为$^Sw_{b,t} = \zeta\sum\ ^Sw_{\epsilon,t}\Delta t$。</p><p>最后，得到校正后的陀螺仪读数为$^Sw_{\epsilon,t} = ^Sw_{t} - ^Sw_{b,t}$。</p><h2 id="2-7-算法的整体流程"><a href="#2-7-算法的整体流程" class="headerlink" title="2.7 算法的整体流程"></a>2.7 算法的整体流程</h2><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-08-125136.png" alt="image-20191208205128064"></p><h1 id="3-实验评测"><a href="#3-实验评测" class="headerlink" title="3. 实验评测"></a>3. 实验评测</h1><h2 id="3-1-实验设置"><a href="#3-1-实验设置" class="headerlink" title="3.1 实验设置"></a>3.1 实验设置</h2><ul><li>传感器<ul><li>xsens MTx orientation sensor</li><li>tri-axis gyroscopes, accelerometers and magnetometers</li><li>512 Hz</li></ul></li><li>对比算法<ul><li>Kalman-based orientation filter</li></ul></li><li>真值<ul><li>A Vicon system</li></ul></li></ul><h2 id="3-2-实验结果"><a href="#3-2-实验结果" class="headerlink" title="3.2 实验结果"></a>3.2 实验结果</h2><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-08-125811.png" alt="image-20191208205742715"></p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-08-125832.png" alt="image-20191208205816720"></p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-08-130056.png" alt="image-20191208205959230"></p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-08-130351.png" alt="image-20191208210044291"></p><h1 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5. 代码实现"></a>5. 代码实现</h1><h2 id="5-1-论文源码"><a href="#5-1-论文源码" class="headerlink" title="5.1 论文源码"></a>5.1 论文源码</h2><ul><li>加速度计和陀螺仪</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// System constants</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> deltat 0.001f <span class="comment">// sampling period in seconds (shown as 1 ms)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gyroMeasError 3.14159265358979f * (5.0f / 180.0f) <span class="comment">// gyroscope measurement error in rad/s (shown as 5 deg/s)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> beta sqrt(3.0f / 4.0f) * gyroMeasError <span class="comment">// compute beta</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Global system variables</span></span><br><span class="line"><span class="keyword">float</span> a_x, a_y, a_z; <span class="comment">// accelerometer measurements</span></span><br><span class="line"><span class="keyword">float</span> w_x, w_y, w_z; <span class="comment">// gyroscope measurements in rad/s</span></span><br><span class="line"><span class="keyword">float</span> SEq_1 = <span class="number">1.0f</span>, SEq_2 = <span class="number">0.0f</span>, SEq_3 = <span class="number">0.0f</span>, SEq_4 = <span class="number">0.0f</span>; <span class="comment">// estimated orientation quaternion elements with initial conditions</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">filterUpdate</span><span class="params">(<span class="keyword">float</span> w_x, <span class="keyword">float</span> w_y, <span class="keyword">float</span> w_z, <span class="keyword">float</span> a_x, <span class="keyword">float</span> a_y, <span class="keyword">float</span> a_z)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Local system variables</span></span><br><span class="line">  <span class="keyword">float</span> norm; <span class="comment">// vector norm</span></span><br><span class="line">  <span class="keyword">float</span> SEqDot_omega_1, SEqDot_omega_2, SEqDot_omega_3, SEqDot_omega_4; <span class="comment">// quaternion derrivative from gyroscopes elements</span></span><br><span class="line">  <span class="keyword">float</span> f_1, f_2, f_3; <span class="comment">// objective function elements</span></span><br><span class="line">  <span class="keyword">float</span> J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; <span class="comment">// objective function Jacobian elements</span></span><br><span class="line">  <span class="keyword">float</span> SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4; <span class="comment">// estimated direction of the gyroscope error</span></span><br><span class="line">  <span class="comment">// Axulirary variables to avoid reapeated calcualtions</span></span><br><span class="line">  <span class="keyword">float</span> halfSEq_1 = <span class="number">0.5f</span> * SEq_1;</span><br><span class="line">  <span class="keyword">float</span> halfSEq_2 = <span class="number">0.5f</span> * SEq_2;</span><br><span class="line">  <span class="keyword">float</span> halfSEq_3 = <span class="number">0.5f</span> * SEq_3;</span><br><span class="line">  <span class="keyword">float</span> halfSEq_4 = <span class="number">0.5f</span> * SEq_4;</span><br><span class="line">  <span class="keyword">float</span> twoSEq_1 = <span class="number">2.0f</span> * SEq_1;</span><br><span class="line">  <span class="keyword">float</span> twoSEq_2 = <span class="number">2.0f</span> * SEq_2;</span><br><span class="line">  <span class="keyword">float</span> twoSEq_3 = <span class="number">2.0f</span> * SEq_3;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Normalise the accelerometer measurement</span></span><br><span class="line">  norm = <span class="built_in">sqrt</span>(a_x * a_x + a_y * a_y + a_z * a_z);</span><br><span class="line">  a_x /= norm;</span><br><span class="line">  a_y /= norm;</span><br><span class="line">  a_z /= norm;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Compute the objective function and Jacobian</span></span><br><span class="line">  f_1 = twoSEq_2 * SEq_4 - twoSEq_1 * SEq_3 - a_x;</span><br><span class="line">  f_2 = twoSEq_1 * SEq_2 + twoSEq_3 * SEq_4 - a_y;</span><br><span class="line">  f_3 = <span class="number">1.0f</span> - twoSEq_2 * SEq_2 - twoSEq_3 * SEq_3 - a_z;</span><br><span class="line">  J_11or24 = twoSEq_3; <span class="comment">// J_11 negated in matrix multiplication</span></span><br><span class="line">  J_12or23 = <span class="number">2.0f</span> * SEq_4;</span><br><span class="line">  J_13or22 = twoSEq_1; <span class="comment">// J_12 negated in matrix multiplication</span></span><br><span class="line">  J_14or21 = twoSEq_2;</span><br><span class="line">  J_32 = <span class="number">2.0f</span> * J_14or21; <span class="comment">// negated in matrix multiplication</span></span><br><span class="line">  J_33 = <span class="number">2.0f</span> * J_11or24; <span class="comment">// negated in matrix multiplication</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Compute the gradient (matrix multiplication)</span></span><br><span class="line">  SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;</span><br><span class="line">  SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;</span><br><span class="line">  SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;</span><br><span class="line">  SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Normalise the gradient</span></span><br><span class="line">  norm = <span class="built_in">sqrt</span>(SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2 + SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);</span><br><span class="line">  SEqHatDot_1 /= norm;</span><br><span class="line">  SEqHatDot_2 /= norm;</span><br><span class="line">  SEqHatDot_3 /= norm;</span><br><span class="line">  SEqHatDot_4 /= norm;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Compute the quaternion derrivative measured by gyroscopes</span></span><br><span class="line">  SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;</span><br><span class="line">  SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;</span><br><span class="line">  SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;</span><br><span class="line">  SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Compute then integrate the estimated quaternion derrivative</span></span><br><span class="line">  SEq_1 += (SEqDot_omega_1 - (beta * SEqHatDot_1)) * deltat;</span><br><span class="line">  SEq_2 += (SEqDot_omega_2 - (beta * SEqHatDot_2)) * deltat;</span><br><span class="line">  SEq_3 += (SEqDot_omega_3 - (beta * SEqHatDot_3)) * deltat;</span><br><span class="line">  SEq_4 += (SEqDot_omega_4 - (beta * SEqHatDot_4)) * deltat;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Normalise quaternion</span></span><br><span class="line">  norm = <span class="built_in">sqrt</span>(SEq_1 * SEq_1 + SEq_2 * SEq_2 + SEq_3 * SEq_3 + SEq_4 * SEq_4);</span><br><span class="line">  SEq_1 /= norm;</span><br><span class="line">  SEq_2 /= norm;</span><br><span class="line">  SEq_3 /= norm;</span><br><span class="line">  SEq_4 /= norm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加速度计、陀螺仪和磁力计</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math library required for `sqrt'</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// System constants</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> deltat 0.001f <span class="comment">// sampling period in seconds (shown as 1 ms)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gyroMeasError 3.14159265358979 * (5.0f / 180.0f) <span class="comment">// gyroscope measurement error in rad/s (shown as 5 deg/s)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gyroMeasDrift 3.14159265358979 * (0.2f / 180.0f) <span class="comment">// gyroscope measurement error in rad/s/s (shown as 0.2f deg/s/s)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> beta sqrt(3.0f / 4.0f) * gyroMeasError <span class="comment">// compute beta</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zeta sqrt(3.0f / 4.0f) * gyroMeasDrift <span class="comment">// compute zeta</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Global system variables</span></span><br><span class="line"><span class="keyword">float</span> a_x, a_y, a_z; <span class="comment">// accelerometer measurements</span></span><br><span class="line"><span class="keyword">float</span> w_x, w_y, w_z; <span class="comment">// gyroscope measurements in rad/s</span></span><br><span class="line"><span class="keyword">float</span> m_x, m_y, m_z; <span class="comment">// magnetometer measurements</span></span><br><span class="line"><span class="keyword">float</span> SEq_1 = <span class="number">1</span>, SEq_2 = <span class="number">0</span>, SEq_3 = <span class="number">0</span>, SEq_4 = <span class="number">0</span>; <span class="comment">// estimated orientation quaternion elements with initial conditions</span></span><br><span class="line"><span class="keyword">float</span> b_x = <span class="number">1</span>, b_z = <span class="number">0</span>; <span class="comment">// reference direction of flux in earth frame</span></span><br><span class="line"><span class="keyword">float</span> w_bx = <span class="number">0</span>, w_by = <span class="number">0</span>, w_bz = <span class="number">0</span>; <span class="comment">// estimate gyroscope biases error</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">filterUpdate</span><span class="params">(<span class="keyword">float</span> w_x, <span class="keyword">float</span> w_y, <span class="keyword">float</span> w_z, <span class="keyword">float</span> a_x, <span class="keyword">float</span> a_y, <span class="keyword">float</span> a_z, <span class="keyword">float</span> m_x, <span class="keyword">float</span> m_y, <span class="keyword">float</span> m_z)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// local system variables</span></span><br><span class="line">  <span class="keyword">float</span> norm; <span class="comment">// vector norm</span></span><br><span class="line">  <span class="keyword">float</span> SEqDot_omega_1, SEqDot_omega_2, SEqDot_omega_3, SEqDot_omega_4; <span class="comment">// quaternion rate from gyroscopes elements</span></span><br><span class="line">  <span class="keyword">float</span> f_1, f_2, f_3, f_4, f_5, f_6; <span class="comment">// objective function elements</span></span><br><span class="line">  <span class="keyword">float</span> J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33, <span class="comment">// objective function Jacobian elements</span></span><br><span class="line">  J_41, J_42, J_43, J_44, J_51, J_52, J_53, J_54, J_61, J_62, J_63, J_64; <span class="comment">//</span></span><br><span class="line">  <span class="keyword">float</span> SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4; <span class="comment">// estimated direction of the gyroscope error</span></span><br><span class="line">  <span class="keyword">float</span> w_err_x, w_err_y, w_err_z; <span class="comment">// estimated direction of the gyroscope error (angular)</span></span><br><span class="line">  <span class="keyword">float</span> h_x, h_y, h_z; <span class="comment">// computed flux in the earth frame</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// axulirary variables to avoid reapeated calcualtions</span></span><br><span class="line">  <span class="keyword">float</span> halfSEq_1 = <span class="number">0.5f</span> * SEq_1;</span><br><span class="line">  <span class="keyword">float</span> halfSEq_2 = <span class="number">0.5f</span> * SEq_2;</span><br><span class="line">  <span class="keyword">float</span> halfSEq_3 = <span class="number">0.5f</span> * SEq_3;</span><br><span class="line">  <span class="keyword">float</span> halfSEq_4 = <span class="number">0.5f</span> * SEq_4;</span><br><span class="line">  <span class="keyword">float</span> twoSEq_1 = <span class="number">2.0f</span> * SEq_1;</span><br><span class="line">  <span class="keyword">float</span> twoSEq_2 = <span class="number">2.0f</span> * SEq_2;</span><br><span class="line">  <span class="keyword">float</span> twoSEq_3 = <span class="number">2.0f</span> * SEq_3;</span><br><span class="line">  <span class="keyword">float</span> twoSEq_4 = <span class="number">2.0f</span> * SEq_4;</span><br><span class="line">  <span class="keyword">float</span> twob_x = <span class="number">2.0f</span> * b_x;</span><br><span class="line">  <span class="keyword">float</span> twob_z = <span class="number">2.0f</span> * b_z;</span><br><span class="line">  <span class="keyword">float</span> twob_xSEq_1 = <span class="number">2.0f</span> * b_x * SEq_1;</span><br><span class="line">  <span class="keyword">float</span> twob_xSEq_2 = <span class="number">2.0f</span> * b_x * SEq_2;</span><br><span class="line">  <span class="keyword">float</span> twob_xSEq_3 = <span class="number">2.0f</span> * b_x * SEq_3;</span><br><span class="line">  <span class="keyword">float</span> twob_xSEq_4 = <span class="number">2.0f</span> * b_x * SEq_4;</span><br><span class="line">  <span class="keyword">float</span> twob_zSEq_1 = <span class="number">2.0f</span> * b_z * SEq_1;</span><br><span class="line">  <span class="keyword">float</span> twob_zSEq_2 = <span class="number">2.0f</span> * b_z * SEq_2;</span><br><span class="line">  <span class="keyword">float</span> twob_zSEq_3 = <span class="number">2.0f</span> * b_z * SEq_3;</span><br><span class="line">  <span class="keyword">float</span> twob_zSEq_4 = <span class="number">2.0f</span> * b_z * SEq_4;</span><br><span class="line">  <span class="keyword">float</span> SEq_1SEq_2;</span><br><span class="line">  <span class="keyword">float</span> SEq_1SEq_3 = SEq_1 * SEq_3;</span><br><span class="line">  <span class="keyword">float</span> SEq_1SEq_4;</span><br><span class="line">  <span class="keyword">float</span> SEq_2SEq_3;</span><br><span class="line">  <span class="keyword">float</span> SEq_2SEq_4 = SEq_2 * SEq_4;</span><br><span class="line">  <span class="keyword">float</span> SEq_3SEq_4;</span><br><span class="line">  <span class="keyword">float</span> twom_x = <span class="number">2.0f</span> * m_x;</span><br><span class="line">  <span class="keyword">float</span> twom_y = <span class="number">2.0f</span> * m_y;</span><br><span class="line">  <span class="keyword">float</span> twom_z = <span class="number">2.0f</span> * m_z;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// normalise the accelerometer measurement</span></span><br><span class="line">  norm = <span class="built_in">sqrt</span>(a_x * a_x + a_y * a_y + a_z * a_z);</span><br><span class="line">  a_x /= norm;</span><br><span class="line">  a_y /= norm;</span><br><span class="line">  a_z /= norm;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// normalise the magnetometer measurement</span></span><br><span class="line">  norm = <span class="built_in">sqrt</span>(m_x * m_x + m_y * m_y + m_z * m_z);</span><br><span class="line">  m_x /= norm;</span><br><span class="line">  m_y /= norm;</span><br><span class="line">  m_z /= norm;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// compute the objective function and Jacobian</span></span><br><span class="line">  f_1 = twoSEq_2 * SEq_4 - twoSEq_1 * SEq_3 - a_x;</span><br><span class="line">  f_2 = twoSEq_1 * SEq_2 + twoSEq_3 * SEq_4 - a_y;</span><br><span class="line">  f_3 = <span class="number">1.0f</span> - twoSEq_2 * SEq_2 - twoSEq_3 * SEq_3 - a_z;</span><br><span class="line">  f_4 = twob_x * (<span class="number">0.5f</span> - SEq_3 * SEq_3 - SEq_4 * SEq_4) + twob_z * (SEq_2SEq_4 - SEq_1SEq_3) - m_x;</span><br><span class="line">  f_5 = twob_x * (SEq_2 * SEq_3 - SEq_1 * SEq_4) + twob_z * (SEq_1 * SEq_2 + SEq_3 * SEq_4) - m_y;</span><br><span class="line">  f_6 = twob_x * (SEq_1SEq_3 + SEq_2SEq_4) + twob_z * (<span class="number">0.5f</span> - SEq_2 * SEq_2 - SEq_3 * SEq_3) - m_z;</span><br><span class="line">  J_11or24 = twoSEq_3; <span class="comment">// J_11 negated in matrix multiplication</span></span><br><span class="line">  J_12or23 = <span class="number">2.0f</span> * SEq_4;</span><br><span class="line">  J_13or22 = twoSEq_1; <span class="comment">// J_12 negated in matrix multiplication</span></span><br><span class="line">  J_14or21 = twoSEq_2;</span><br><span class="line">  J_32 = <span class="number">2.0f</span> * J_14or21; <span class="comment">// negated in matrix multiplication</span></span><br><span class="line">  J_33 = <span class="number">2.0f</span> * J_11or24; <span class="comment">// negated in matrix multiplication</span></span><br><span class="line">  J_41 = twob_zSEq_3; <span class="comment">// negated in matrix multiplication</span></span><br><span class="line">  J_42 = twob_zSEq_4;</span><br><span class="line">  J_43 = <span class="number">2.0f</span> * twob_xSEq_3 + twob_zSEq_1; <span class="comment">// negated in matrix multiplication</span></span><br><span class="line">  J_44 = <span class="number">2.0f</span> * twob_xSEq_4 - twob_zSEq_2; <span class="comment">// negated in matrix multiplication</span></span><br><span class="line">  J_51 = twob_xSEq_4 - twob_zSEq_2; <span class="comment">// negated in matrix multiplication</span></span><br><span class="line">  J_52 = twob_xSEq_3 + twob_zSEq_1;</span><br><span class="line">  J_53 = twob_xSEq_2 + twob_zSEq_4;</span><br><span class="line">  J_54 = twob_xSEq_1 - twob_zSEq_3; <span class="comment">// negated in matrix multiplication</span></span><br><span class="line">  J_61 = twob_xSEq_3;</span><br><span class="line">  J_62 = twob_xSEq_4 - <span class="number">2.0f</span> * twob_zSEq_2;</span><br><span class="line">  J_63 = twob_xSEq_1 - <span class="number">2.0f</span> * twob_zSEq_3;</span><br><span class="line">  J_64 = twob_xSEq_2;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// compute the gradient (matrix multiplication)</span></span><br><span class="line">  SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1 - J_41 * f_4 - J_51 * f_5 + J_61 * f_6;</span><br><span class="line">  SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3 + J_42 * f_4 + J_52 * f_5 + J_62 * f_6;</span><br><span class="line">  SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1 - J_43 * f_4 + J_53 * f_5 + J_63 * f_6;</span><br><span class="line">  SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2 - J_44 * f_4 - J_54 * f_5 + J_64 * f_6;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// normalise the gradient to estimate direction of the gyroscope error</span></span><br><span class="line">  norm = <span class="built_in">sqrt</span>(SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2 + SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);</span><br><span class="line">  SEqHatDot_1 = SEqHatDot_1 / norm;</span><br><span class="line">  SEqHatDot_2 = SEqHatDot_2 / norm;</span><br><span class="line">    SEqHatDot_3 = SEqHatDot_3 / norm;</span><br><span class="line">  SEqHatDot_4 = SEqHatDot_4 / norm;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// compute angular estimated direction of the gyroscope error</span></span><br><span class="line">  w_err_x = twoSEq_1 * SEqHatDot_2 - twoSEq_2 * SEqHatDot_1 - twoSEq_3 * SEqHatDot_4 + twoSEq_4 * SEqHatDot_3;</span><br><span class="line">  w_err_y = twoSEq_1 * SEqHatDot_3 + twoSEq_2 * SEqHatDot_4 - twoSEq_3 * SEqHatDot_1 - twoSEq_4 * SEqHatDot_2;</span><br><span class="line">  w_err_z = twoSEq_1 * SEqHatDot_4 - twoSEq_2 * SEqHatDot_3 + twoSEq_3 * SEqHatDot_2 - twoSEq_4 * SEqHatDot_1;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// compute and remove the gyroscope baises</span></span><br><span class="line">  w_bx += w_err_x * deltat * zeta;</span><br><span class="line">  w_by += w_err_y * deltat * zeta;</span><br><span class="line">  w_bz += w_err_z * deltat * zeta;</span><br><span class="line">  w_x -= w_bx;</span><br><span class="line">  w_y -= w_by;</span><br><span class="line">  w_z -= w_bz;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// compute the quaternion rate measured by gyroscopes</span></span><br><span class="line">  SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;</span><br><span class="line">  SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;</span><br><span class="line">  SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;</span><br><span class="line">  SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// compute then integrate the estimated quaternion rate</span></span><br><span class="line">  SEq_1 += (SEqDot_omega_1 - (beta * SEqHatDot_1)) * deltat;</span><br><span class="line">  SEq_2 += (SEqDot_omega_2 - (beta * SEqHatDot_2)) * deltat;</span><br><span class="line">  SEq_3 += (SEqDot_omega_3 - (beta * SEqHatDot_3)) * deltat;</span><br><span class="line">  SEq_4 += (SEqDot_omega_4 - (beta * SEqHatDot_4)) * deltat;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// normalise quaternion</span></span><br><span class="line">  norm = <span class="built_in">sqrt</span>(SEq_1 * SEq_1 + SEq_2 * SEq_2 + SEq_3 * SEq_3 + SEq_4 * SEq_4);</span><br><span class="line">  SEq_1 /= norm;</span><br><span class="line">  SEq_2 /= norm;</span><br><span class="line">  SEq_3 /= norm;</span><br><span class="line">  SEq_4 /= norm;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// compute flux in the earth frame</span></span><br><span class="line">  SEq_1SEq_2 = SEq_1 * SEq_2; <span class="comment">// recompute axulirary variables</span></span><br><span class="line">  SEq_1SEq_3 = SEq_1 * SEq_3;</span><br><span class="line">  SEq_1SEq_4 = SEq_1 * SEq_4;</span><br><span class="line">  SEq_3SEq_4 = SEq_3 * SEq_4;</span><br><span class="line">  SEq_2SEq_3 = SEq_2 * SEq_3;</span><br><span class="line">  SEq_2SEq_4 = SEq_2 * SEq_4;</span><br><span class="line">  h_x = twom_x * (<span class="number">0.5f</span> - SEq_3 * SEq_3 - SEq_4 * SEq_4) + twom_y * (SEq_2SEq_3 - SEq_1SEq_4) + twom_z * (SEq_2SEq_4 + SEq_1SEq_3);</span><br><span class="line">  h_y = twom_x * (SEq_2SEq_3 + SEq_1SEq_4) + twom_y * (<span class="number">0.5f</span> - SEq_2 * SEq_2 - SEq_4 * SEq_4) + twom_z * (SEq_3SEq_4 - SEq_1SEq_2);</span><br><span class="line">  h_z = twom_x * (SEq_2SEq_4 - SEq_1SEq_3) + twom_y * (SEq_3SEq_4 + SEq_1SEq_2) + twom_z * (<span class="number">0.5f</span> - SEq_2 * SEq_2 - SEq_3 * SEq_3);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// normalise the flux vector to have only components in the x and z</span></span><br><span class="line">  b_x = <span class="built_in">sqrt</span>((h_x * h_x) + (h_y * h_y));</span><br><span class="line">  b_z = h_z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-x-io源码"><a href="#5-2-x-io源码" class="headerlink" title="5.2 x-io源码"></a>5.2 x-io源码</h2><ul><li><a href="https://x-io.co.uk/open-source-imu-and-ahrs-algorithms/" target="_blank" rel="noopener">https://x-io.co.uk/open-source-imu-and-ahrs-algorithms/</a></li><li>MadgwickAHRS.h</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="comment">// MadgwickAHRS.h</span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Implementation of Madgwick's IMU and AHRS algorithms.</span></span><br><span class="line"><span class="comment">// See: http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// DateAuthor          Notes</span></span><br><span class="line"><span class="comment">// 29/09/2011SOH Madgwick    Initial release</span></span><br><span class="line"><span class="comment">// 02/10/2011SOH MadgwickOptimised for reduced CPU load</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MadgwickAHRS_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MadgwickAHRS_h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Variable declaration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="keyword">float</span> beta;<span class="comment">// algorithm gain</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="keyword">float</span> q0, q1, q2, q3;<span class="comment">// quaternion of sensor frame relative to auxiliary frame</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Function declarations</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MadgwickAHRSupdate</span><span class="params">(<span class="keyword">float</span> gx, <span class="keyword">float</span> gy, <span class="keyword">float</span> gz, <span class="keyword">float</span> ax, <span class="keyword">float</span> ay, <span class="keyword">float</span> az, <span class="keyword">float</span> mx, <span class="keyword">float</span> my, <span class="keyword">float</span> mz)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MadgwickAHRSupdateIMU</span><span class="params">(<span class="keyword">float</span> gx, <span class="keyword">float</span> gy, <span class="keyword">float</span> gz, <span class="keyword">float</span> ax, <span class="keyword">float</span> ay, <span class="keyword">float</span> az)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="comment">// End of file</span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br></pre></td></tr></table></figure><ul><li>MadgwickAHRS.c</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="comment">// MadgwickAHRS.c</span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Implementation of Madgwick's IMU and AHRS algorithms.</span></span><br><span class="line"><span class="comment">// See: http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// DateAuthor          Notes</span></span><br><span class="line"><span class="comment">// 29/09/2011SOH Madgwick    Initial release</span></span><br><span class="line"><span class="comment">// 02/10/2011SOH MadgwickOptimised for reduced CPU load</span></span><br><span class="line"><span class="comment">// 19/02/2012SOH MadgwickMagnetometer measurement is normalised</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Header files</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MadgwickAHRS.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Definitions</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sampleFreq512.0f<span class="comment">// sample frequency in Hz</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> betaDef0.1f<span class="comment">// 2 * proportional gain</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Variable definitions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">float</span> beta = betaDef;<span class="comment">// 2 * proportional gain (Kp)</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">float</span> q0 = <span class="number">1.0f</span>, q1 = <span class="number">0.0f</span>, q2 = <span class="number">0.0f</span>, q3 = <span class="number">0.0f</span>;<span class="comment">// quaternion of sensor frame relative to auxiliary frame</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Function declarations</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">invSqrt</span><span class="params">(<span class="keyword">float</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"><span class="comment">// Functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// AHRS algorithm update</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MadgwickAHRSupdate</span><span class="params">(<span class="keyword">float</span> gx, <span class="keyword">float</span> gy, <span class="keyword">float</span> gz, <span class="keyword">float</span> ax, <span class="keyword">float</span> ay, <span class="keyword">float</span> az, <span class="keyword">float</span> mx, <span class="keyword">float</span> my, <span class="keyword">float</span> mz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> recipNorm;</span><br><span class="line"><span class="keyword">float</span> s0, s1, s2, s3;</span><br><span class="line"><span class="keyword">float</span> qDot1, qDot2, qDot3, qDot4;</span><br><span class="line"><span class="keyword">float</span> hx, hy;</span><br><span class="line"><span class="keyword">float</span> _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)</span></span><br><span class="line"><span class="keyword">if</span>((mx == <span class="number">0.0f</span>) &amp;&amp; (my == <span class="number">0.0f</span>) &amp;&amp; (mz == <span class="number">0.0f</span>)) &#123;</span><br><span class="line">MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rate of change of quaternion from gyroscope</span></span><br><span class="line">qDot1 = <span class="number">0.5f</span> * (-q1 * gx - q2 * gy - q3 * gz);</span><br><span class="line">qDot2 = <span class="number">0.5f</span> * (q0 * gx + q2 * gz - q3 * gy);</span><br><span class="line">qDot3 = <span class="number">0.5f</span> * (q0 * gy - q1 * gz + q3 * gx);</span><br><span class="line">qDot4 = <span class="number">0.5f</span> * (q0 * gz + q1 * gy - q2 * gx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)</span></span><br><span class="line"><span class="keyword">if</span>(!((ax == <span class="number">0.0f</span>) &amp;&amp; (ay == <span class="number">0.0f</span>) &amp;&amp; (az == <span class="number">0.0f</span>))) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalise accelerometer measurement</span></span><br><span class="line">recipNorm = invSqrt(ax * ax + ay * ay + az * az);</span><br><span class="line">ax *= recipNorm;</span><br><span class="line">ay *= recipNorm;</span><br><span class="line">az *= recipNorm;   </span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalise magnetometer measurement</span></span><br><span class="line">recipNorm = invSqrt(mx * mx + my * my + mz * mz);</span><br><span class="line">mx *= recipNorm;</span><br><span class="line">my *= recipNorm;</span><br><span class="line">mz *= recipNorm;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Auxiliary variables to avoid repeated arithmetic</span></span><br><span class="line">_2q0mx = <span class="number">2.0f</span> * q0 * mx;</span><br><span class="line">_2q0my = <span class="number">2.0f</span> * q0 * my;</span><br><span class="line">_2q0mz = <span class="number">2.0f</span> * q0 * mz;</span><br><span class="line">_2q1mx = <span class="number">2.0f</span> * q1 * mx;</span><br><span class="line">_2q0 = <span class="number">2.0f</span> * q0;</span><br><span class="line">_2q1 = <span class="number">2.0f</span> * q1;</span><br><span class="line">_2q2 = <span class="number">2.0f</span> * q2;</span><br><span class="line">_2q3 = <span class="number">2.0f</span> * q3;</span><br><span class="line">_2q0q2 = <span class="number">2.0f</span> * q0 * q2;</span><br><span class="line">_2q2q3 = <span class="number">2.0f</span> * q2 * q3;</span><br><span class="line">q0q0 = q0 * q0;</span><br><span class="line">q0q1 = q0 * q1;</span><br><span class="line">q0q2 = q0 * q2;</span><br><span class="line">q0q3 = q0 * q3;</span><br><span class="line">q1q1 = q1 * q1;</span><br><span class="line">q1q2 = q1 * q2;</span><br><span class="line">q1q3 = q1 * q3;</span><br><span class="line">q2q2 = q2 * q2;</span><br><span class="line">q2q3 = q2 * q3;</span><br><span class="line">q3q3 = q3 * q3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reference direction of Earth's magnetic field</span></span><br><span class="line">hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;</span><br><span class="line">hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;</span><br><span class="line">_2bx = <span class="built_in">sqrt</span>(hx * hx + hy * hy);</span><br><span class="line">_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;</span><br><span class="line">_4bx = <span class="number">2.0f</span> * _2bx;</span><br><span class="line">_4bz = <span class="number">2.0f</span> * _2bz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gradient decent algorithm corrective step</span></span><br><span class="line">s0 = -_2q2 * (<span class="number">2.0f</span> * q1q3 - _2q0q2 - ax) + _2q1 * (<span class="number">2.0f</span> * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (<span class="number">0.5f</span> - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (<span class="number">0.5f</span> - q1q1 - q2q2) - mz);</span><br><span class="line">s1 = _2q3 * (<span class="number">2.0f</span> * q1q3 - _2q0q2 - ax) + _2q0 * (<span class="number">2.0f</span> * q0q1 + _2q2q3 - ay) - <span class="number">4.0f</span> * q1 * (<span class="number">1</span> - <span class="number">2.0f</span> * q1q1 - <span class="number">2.0f</span> * q2q2 - az) + _2bz * q3 * (_2bx * (<span class="number">0.5f</span> - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (<span class="number">0.5f</span> - q1q1 - q2q2) - mz);</span><br><span class="line">s2 = -_2q0 * (<span class="number">2.0f</span> * q1q3 - _2q0q2 - ax) + _2q3 * (<span class="number">2.0f</span> * q0q1 + _2q2q3 - ay) - <span class="number">4.0f</span> * q2 * (<span class="number">1</span> - <span class="number">2.0f</span> * q1q1 - <span class="number">2.0f</span> * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (<span class="number">0.5f</span> - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (<span class="number">0.5f</span> - q1q1 - q2q2) - mz);</span><br><span class="line">s3 = _2q1 * (<span class="number">2.0f</span> * q1q3 - _2q0q2 - ax) + _2q2 * (<span class="number">2.0f</span> * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (<span class="number">0.5f</span> - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (<span class="number">0.5f</span> - q1q1 - q2q2) - mz);</span><br><span class="line">recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); <span class="comment">// normalise step magnitude</span></span><br><span class="line">s0 *= recipNorm;</span><br><span class="line">s1 *= recipNorm;</span><br><span class="line">s2 *= recipNorm;</span><br><span class="line">s3 *= recipNorm;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply feedback step</span></span><br><span class="line">qDot1 -= beta * s0;</span><br><span class="line">qDot2 -= beta * s1;</span><br><span class="line">qDot3 -= beta * s2;</span><br><span class="line">qDot4 -= beta * s3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integrate rate of change of quaternion to yield quaternion</span></span><br><span class="line">q0 += qDot1 * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line">q1 += qDot2 * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line">q2 += qDot3 * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line">q3 += qDot4 * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalise quaternion</span></span><br><span class="line">recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);</span><br><span class="line">q0 *= recipNorm;</span><br><span class="line">q1 *= recipNorm;</span><br><span class="line">q2 *= recipNorm;</span><br><span class="line">q3 *= recipNorm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// IMU algorithm update</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MadgwickAHRSupdateIMU</span><span class="params">(<span class="keyword">float</span> gx, <span class="keyword">float</span> gy, <span class="keyword">float</span> gz, <span class="keyword">float</span> ax, <span class="keyword">float</span> ay, <span class="keyword">float</span> az)</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> recipNorm;</span><br><span class="line"><span class="keyword">float</span> s0, s1, s2, s3;</span><br><span class="line"><span class="keyword">float</span> qDot1, qDot2, qDot3, qDot4;</span><br><span class="line"><span class="keyword">float</span> _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rate of change of quaternion from gyroscope</span></span><br><span class="line">qDot1 = <span class="number">0.5f</span> * (-q1 * gx - q2 * gy - q3 * gz);</span><br><span class="line">qDot2 = <span class="number">0.5f</span> * (q0 * gx + q2 * gz - q3 * gy);</span><br><span class="line">qDot3 = <span class="number">0.5f</span> * (q0 * gy - q1 * gz + q3 * gx);</span><br><span class="line">qDot4 = <span class="number">0.5f</span> * (q0 * gz + q1 * gy - q2 * gx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)</span></span><br><span class="line"><span class="keyword">if</span>(!((ax == <span class="number">0.0f</span>) &amp;&amp; (ay == <span class="number">0.0f</span>) &amp;&amp; (az == <span class="number">0.0f</span>))) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalise accelerometer measurement</span></span><br><span class="line">recipNorm = invSqrt(ax * ax + ay * ay + az * az);</span><br><span class="line">ax *= recipNorm;</span><br><span class="line">ay *= recipNorm;</span><br><span class="line">az *= recipNorm;   </span><br><span class="line"></span><br><span class="line"><span class="comment">// Auxiliary variables to avoid repeated arithmetic</span></span><br><span class="line">_2q0 = <span class="number">2.0f</span> * q0;</span><br><span class="line">_2q1 = <span class="number">2.0f</span> * q1;</span><br><span class="line">_2q2 = <span class="number">2.0f</span> * q2;</span><br><span class="line">_2q3 = <span class="number">2.0f</span> * q3;</span><br><span class="line">_4q0 = <span class="number">4.0f</span> * q0;</span><br><span class="line">_4q1 = <span class="number">4.0f</span> * q1;</span><br><span class="line">_4q2 = <span class="number">4.0f</span> * q2;</span><br><span class="line">_8q1 = <span class="number">8.0f</span> * q1;</span><br><span class="line">_8q2 = <span class="number">8.0f</span> * q2;</span><br><span class="line">q0q0 = q0 * q0;</span><br><span class="line">q1q1 = q1 * q1;</span><br><span class="line">q2q2 = q2 * q2;</span><br><span class="line">q3q3 = q3 * q3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gradient decent algorithm corrective step</span></span><br><span class="line">s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;</span><br><span class="line">s1 = _4q1 * q3q3 - _2q3 * ax + <span class="number">4.0f</span> * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;</span><br><span class="line">s2 = <span class="number">4.0f</span> * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;</span><br><span class="line">s3 = <span class="number">4.0f</span> * q1q1 * q3 - _2q1 * ax + <span class="number">4.0f</span> * q2q2 * q3 - _2q2 * ay;</span><br><span class="line">recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); <span class="comment">// normalise step magnitude</span></span><br><span class="line">s0 *= recipNorm;</span><br><span class="line">s1 *= recipNorm;</span><br><span class="line">s2 *= recipNorm;</span><br><span class="line">s3 *= recipNorm;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply feedback step</span></span><br><span class="line">qDot1 -= beta * s0;</span><br><span class="line">qDot2 -= beta * s1;</span><br><span class="line">qDot3 -= beta * s2;</span><br><span class="line">qDot4 -= beta * s3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integrate rate of change of quaternion to yield quaternion</span></span><br><span class="line">q0 += qDot1 * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line">q1 += qDot2 * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line">q2 += qDot3 * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line">q3 += qDot4 * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalise quaternion</span></span><br><span class="line">recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);</span><br><span class="line">q0 *= recipNorm;</span><br><span class="line">q1 *= recipNorm;</span><br><span class="line">q2 *= recipNorm;</span><br><span class="line">q3 *= recipNorm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Fast inverse square-root</span></span><br><span class="line"><span class="comment">// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">invSqrt</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> halfx = <span class="number">0.5f</span> * x;</span><br><span class="line"><span class="keyword">float</span> y = x;</span><br><span class="line"><span class="keyword">long</span> i = *(<span class="keyword">long</span>*)&amp;y;</span><br><span class="line">i = <span class="number">0x5f3759df</span> - (i&gt;&gt;<span class="number">1</span>);</span><br><span class="line">y = *(<span class="keyword">float</span>*)&amp;i;</span><br><span class="line">y = y * (<span class="number">1.5f</span> - (halfx * y * y));</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"><span class="comment">// END OF CODE</span></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br></pre></td></tr></table></figure><ul><li>MahonyAHRS.h</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="comment">// MahonyAHRS.h</span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Madgwick's implementation of Mayhony's AHRS algorithm.</span></span><br><span class="line"><span class="comment">// See: http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// DateAuthorNotes</span></span><br><span class="line"><span class="comment">// 29/09/2011SOH Madgwick    Initial release</span></span><br><span class="line"><span class="comment">// 02/10/2011SOH MadgwickOptimised for reduced CPU load</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MahonyAHRS_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MahonyAHRS_h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Variable declaration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="keyword">float</span> twoKp;<span class="comment">// 2 * proportional gain (Kp)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="keyword">float</span> twoKi;<span class="comment">// 2 * integral gain (Ki)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="keyword">float</span> q0, q1, q2, q3;<span class="comment">// quaternion of sensor frame relative to auxiliary frame</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Function declarations</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MahonyAHRSupdate</span><span class="params">(<span class="keyword">float</span> gx, <span class="keyword">float</span> gy, <span class="keyword">float</span> gz, <span class="keyword">float</span> ax, <span class="keyword">float</span> ay, <span class="keyword">float</span> az, <span class="keyword">float</span> mx, <span class="keyword">float</span> my, <span class="keyword">float</span> mz)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MahonyAHRSupdateIMU</span><span class="params">(<span class="keyword">float</span> gx, <span class="keyword">float</span> gy, <span class="keyword">float</span> gz, <span class="keyword">float</span> ax, <span class="keyword">float</span> ay, <span class="keyword">float</span> az)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="comment">// End of file</span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br></pre></td></tr></table></figure><ul><li>MahonyAHRS.c</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="comment">// MahonyAHRS.c</span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Madgwick's implementation of Mayhony's AHRS algorithm.</span></span><br><span class="line"><span class="comment">// See: http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// DateAuthorNotes</span></span><br><span class="line"><span class="comment">// 29/09/2011SOH Madgwick    Initial release</span></span><br><span class="line"><span class="comment">// 02/10/2011SOH MadgwickOptimised for reduced CPU load</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//=====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Header files</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MahonyAHRS.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Definitions</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sampleFreq512.0f<span class="comment">// sample frequency in Hz</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> twoKpDef(2.0f * 0.5f)<span class="comment">// 2 * proportional gain</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> twoKiDef(2.0f * 0.0f)<span class="comment">// 2 * integral gain</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Variable definitions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">float</span> twoKp = twoKpDef;<span class="comment">// 2 * proportional gain (Kp)</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">float</span> twoKi = twoKiDef;<span class="comment">// 2 * integral gain (Ki)</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">float</span> q0 = <span class="number">1.0f</span>, q1 = <span class="number">0.0f</span>, q2 = <span class="number">0.0f</span>, q3 = <span class="number">0.0f</span>;<span class="comment">// quaternion of sensor frame relative to auxiliary frame</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">float</span> integralFBx = <span class="number">0.0f</span>,  integralFBy = <span class="number">0.0f</span>, integralFBz = <span class="number">0.0f</span>;<span class="comment">// integral error terms scaled by Ki</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Function declarations</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">invSqrt</span><span class="params">(<span class="keyword">float</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"><span class="comment">// Functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// AHRS algorithm update</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MahonyAHRSupdate</span><span class="params">(<span class="keyword">float</span> gx, <span class="keyword">float</span> gy, <span class="keyword">float</span> gz, <span class="keyword">float</span> ax, <span class="keyword">float</span> ay, <span class="keyword">float</span> az, <span class="keyword">float</span> mx, <span class="keyword">float</span> my, <span class="keyword">float</span> mz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> recipNorm;</span><br><span class="line">    <span class="keyword">float</span> q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;  </span><br><span class="line"><span class="keyword">float</span> hx, hy, bx, bz;</span><br><span class="line"><span class="keyword">float</span> halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;</span><br><span class="line"><span class="keyword">float</span> halfex, halfey, halfez;</span><br><span class="line"><span class="keyword">float</span> qa, qb, qc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)</span></span><br><span class="line"><span class="keyword">if</span>((mx == <span class="number">0.0f</span>) &amp;&amp; (my == <span class="number">0.0f</span>) &amp;&amp; (mz == <span class="number">0.0f</span>)) &#123;</span><br><span class="line">MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)</span></span><br><span class="line"><span class="keyword">if</span>(!((ax == <span class="number">0.0f</span>) &amp;&amp; (ay == <span class="number">0.0f</span>) &amp;&amp; (az == <span class="number">0.0f</span>))) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalise accelerometer measurement</span></span><br><span class="line">recipNorm = invSqrt(ax * ax + ay * ay + az * az);</span><br><span class="line">ax *= recipNorm;</span><br><span class="line">ay *= recipNorm;</span><br><span class="line">az *= recipNorm;     </span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalise magnetometer measurement</span></span><br><span class="line">recipNorm = invSqrt(mx * mx + my * my + mz * mz);</span><br><span class="line">mx *= recipNorm;</span><br><span class="line">my *= recipNorm;</span><br><span class="line">mz *= recipNorm;   </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Auxiliary variables to avoid repeated arithmetic</span></span><br><span class="line">        q0q0 = q0 * q0;</span><br><span class="line">        q0q1 = q0 * q1;</span><br><span class="line">        q0q2 = q0 * q2;</span><br><span class="line">        q0q3 = q0 * q3;</span><br><span class="line">        q1q1 = q1 * q1;</span><br><span class="line">        q1q2 = q1 * q2;</span><br><span class="line">        q1q3 = q1 * q3;</span><br><span class="line">        q2q2 = q2 * q2;</span><br><span class="line">        q2q3 = q2 * q3;</span><br><span class="line">        q3q3 = q3 * q3;   </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reference direction of Earth's magnetic field</span></span><br><span class="line">        hx = <span class="number">2.0f</span> * (mx * (<span class="number">0.5f</span> - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));</span><br><span class="line">        hy = <span class="number">2.0f</span> * (mx * (q1q2 + q0q3) + my * (<span class="number">0.5f</span> - q1q1 - q3q3) + mz * (q2q3 - q0q1));</span><br><span class="line">        bx = <span class="built_in">sqrt</span>(hx * hx + hy * hy);</span><br><span class="line">        bz = <span class="number">2.0f</span> * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (<span class="number">0.5f</span> - q1q1 - q2q2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Estimated direction of gravity and magnetic field</span></span><br><span class="line">halfvx = q1q3 - q0q2;</span><br><span class="line">halfvy = q0q1 + q2q3;</span><br><span class="line">halfvz = q0q0 - <span class="number">0.5f</span> + q3q3;</span><br><span class="line">        halfwx = bx * (<span class="number">0.5f</span> - q2q2 - q3q3) + bz * (q1q3 - q0q2);</span><br><span class="line">        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);</span><br><span class="line">        halfwz = bx * (q0q2 + q1q3) + bz * (<span class="number">0.5f</span> - q1q1 - q2q2);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Error is sum of cross product between estimated direction and measured direction of field vectors</span></span><br><span class="line">halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);</span><br><span class="line">halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);</span><br><span class="line">halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compute and apply integral feedback if enabled</span></span><br><span class="line"><span class="keyword">if</span>(twoKi &gt; <span class="number">0.0f</span>) &#123;</span><br><span class="line">integralFBx += twoKi * halfex * (<span class="number">1.0f</span> / sampleFreq);<span class="comment">// integral error scaled by Ki</span></span><br><span class="line">integralFBy += twoKi * halfey * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line">integralFBz += twoKi * halfez * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line">gx += integralFBx;<span class="comment">// apply integral feedback</span></span><br><span class="line">gy += integralFBy;</span><br><span class="line">gz += integralFBz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">integralFBx = <span class="number">0.0f</span>;<span class="comment">// prevent integral windup</span></span><br><span class="line">integralFBy = <span class="number">0.0f</span>;</span><br><span class="line">integralFBz = <span class="number">0.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply proportional feedback</span></span><br><span class="line">gx += twoKp * halfex;</span><br><span class="line">gy += twoKp * halfey;</span><br><span class="line">gz += twoKp * halfez;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integrate rate of change of quaternion</span></span><br><span class="line">gx *= (<span class="number">0.5f</span> * (<span class="number">1.0f</span> / sampleFreq));<span class="comment">// pre-multiply common factors</span></span><br><span class="line">gy *= (<span class="number">0.5f</span> * (<span class="number">1.0f</span> / sampleFreq));</span><br><span class="line">gz *= (<span class="number">0.5f</span> * (<span class="number">1.0f</span> / sampleFreq));</span><br><span class="line">qa = q0;</span><br><span class="line">qb = q1;</span><br><span class="line">qc = q2;</span><br><span class="line">q0 += (-qb * gx - qc * gy - q3 * gz);</span><br><span class="line">q1 += (qa * gx + qc * gz - q3 * gy);</span><br><span class="line">q2 += (qa * gy - qb * gz + q3 * gx);</span><br><span class="line">q3 += (qa * gz + qb * gy - qc * gx); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalise quaternion</span></span><br><span class="line">recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);</span><br><span class="line">q0 *= recipNorm;</span><br><span class="line">q1 *= recipNorm;</span><br><span class="line">q2 *= recipNorm;</span><br><span class="line">q3 *= recipNorm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// IMU algorithm update</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MahonyAHRSupdateIMU</span><span class="params">(<span class="keyword">float</span> gx, <span class="keyword">float</span> gy, <span class="keyword">float</span> gz, <span class="keyword">float</span> ax, <span class="keyword">float</span> ay, <span class="keyword">float</span> az)</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> recipNorm;</span><br><span class="line"><span class="keyword">float</span> halfvx, halfvy, halfvz;</span><br><span class="line"><span class="keyword">float</span> halfex, halfey, halfez;</span><br><span class="line"><span class="keyword">float</span> qa, qb, qc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)</span></span><br><span class="line"><span class="keyword">if</span>(!((ax == <span class="number">0.0f</span>) &amp;&amp; (ay == <span class="number">0.0f</span>) &amp;&amp; (az == <span class="number">0.0f</span>))) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalise accelerometer measurement</span></span><br><span class="line">recipNorm = invSqrt(ax * ax + ay * ay + az * az);</span><br><span class="line">ax *= recipNorm;</span><br><span class="line">ay *= recipNorm;</span><br><span class="line">az *= recipNorm;        </span><br><span class="line"></span><br><span class="line"><span class="comment">// Estimated direction of gravity and vector perpendicular to magnetic flux</span></span><br><span class="line">halfvx = q1 * q3 - q0 * q2;</span><br><span class="line">halfvy = q0 * q1 + q2 * q3;</span><br><span class="line">halfvz = q0 * q0 - <span class="number">0.5f</span> + q3 * q3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error is sum of cross product between estimated and measured direction of gravity</span></span><br><span class="line">halfex = (ay * halfvz - az * halfvy);</span><br><span class="line">halfey = (az * halfvx - ax * halfvz);</span><br><span class="line">halfez = (ax * halfvy - ay * halfvx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compute and apply integral feedback if enabled</span></span><br><span class="line"><span class="keyword">if</span>(twoKi &gt; <span class="number">0.0f</span>) &#123;</span><br><span class="line">integralFBx += twoKi * halfex * (<span class="number">1.0f</span> / sampleFreq);<span class="comment">// integral error scaled by Ki</span></span><br><span class="line">integralFBy += twoKi * halfey * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line">integralFBz += twoKi * halfez * (<span class="number">1.0f</span> / sampleFreq);</span><br><span class="line">gx += integralFBx;<span class="comment">// apply integral feedback</span></span><br><span class="line">gy += integralFBy;</span><br><span class="line">gz += integralFBz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">integralFBx = <span class="number">0.0f</span>;<span class="comment">// prevent integral windup</span></span><br><span class="line">integralFBy = <span class="number">0.0f</span>;</span><br><span class="line">integralFBz = <span class="number">0.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply proportional feedback</span></span><br><span class="line">gx += twoKp * halfex;</span><br><span class="line">gy += twoKp * halfey;</span><br><span class="line">gz += twoKp * halfez;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integrate rate of change of quaternion</span></span><br><span class="line">gx *= (<span class="number">0.5f</span> * (<span class="number">1.0f</span> / sampleFreq));<span class="comment">// pre-multiply common factors</span></span><br><span class="line">gy *= (<span class="number">0.5f</span> * (<span class="number">1.0f</span> / sampleFreq));</span><br><span class="line">gz *= (<span class="number">0.5f</span> * (<span class="number">1.0f</span> / sampleFreq));</span><br><span class="line">qa = q0;</span><br><span class="line">qb = q1;</span><br><span class="line">qc = q2;</span><br><span class="line">q0 += (-qb * gx - qc * gy - q3 * gz);</span><br><span class="line">q1 += (qa * gx + qc * gz - q3 * gy);</span><br><span class="line">q2 += (qa * gy - qb * gz + q3 * gx);</span><br><span class="line">q3 += (qa * gz + qb * gy - qc * gx); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Normalise quaternion</span></span><br><span class="line">recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);</span><br><span class="line">q0 *= recipNorm;</span><br><span class="line">q1 *= recipNorm;</span><br><span class="line">q2 *= recipNorm;</span><br><span class="line">q3 *= recipNorm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Fast inverse square-root</span></span><br><span class="line"><span class="comment">// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">invSqrt</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> halfx = <span class="number">0.5f</span> * x;</span><br><span class="line"><span class="keyword">float</span> y = x;</span><br><span class="line"><span class="keyword">long</span> i = *(<span class="keyword">long</span>*)&amp;y;</span><br><span class="line">i = <span class="number">0x5f3759df</span> - (i&gt;&gt;<span class="number">1</span>);</span><br><span class="line">y = *(<span class="keyword">float</span>*)&amp;i;</span><br><span class="line">y = y * (<span class="number">1.5f</span> - (halfx * y * y));</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"><span class="comment">// END OF CODE</span></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br></pre></td></tr></table></figure><h1 id="6-参考："><a href="#6-参考：" class="headerlink" title="6. 参考："></a>6. 参考：</h1><ul><li><p><a href="https://www.samba.org/tridge/UAV/madgwick_internal_report.pdf" target="_blank" rel="noopener">An efficient orientation filter for inertial and inertial/magnetic sensor arrays</a></p></li><li><p><a href="https://blog.csdn.net/Gregory24/article/details/90646084" target="_blank" rel="noopener">Madgwick算法的数学推演：基于惯性导航元件的位姿估计</a></p></li><li><a href="https://www.cnblogs.com/ilekoaiq/p/8849217.html" target="_blank" rel="noopener">Madgwick算法详细解读</a></li><li>[<a href="https://x-io.co.uk/open-source-imu-and-ahrs-algorithms/" target="_blank" rel="noopener">Open source IMU and AHRS algorithms</a>]</li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 姿态估计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 姿态估计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vSLAMNet（四）-最优化-数值解法</title>
      <link href="/2019/12/07/slam/vSLAMNet%EF%BC%88%E5%9B%9B%EF%BC%89-%E6%9C%80%E4%BC%98%E5%8C%96-%E6%95%B0%E5%80%BC%E8%A7%A3%E6%B3%95/"/>
      <url>/2019/12/07/slam/vSLAMNet%EF%BC%88%E5%9B%9B%EF%BC%89-%E6%9C%80%E4%BC%98%E5%8C%96-%E6%95%B0%E5%80%BC%E8%A7%A3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><ul><li>梯度下降法</li><li>高斯牛顿迭代法</li><li>牛顿法</li><li>共轭梯度法</li></ul><h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2. 基础知识"></a>2. 基础知识</h1><h2 id="2-1-微分"><a href="#2-1-微分" class="headerlink" title="2.1 微分"></a>2.1 微分</h2><ul><li>函数图像中，某点的切线的斜率</li><li>函数的变化率</li></ul><p>例子：</p><p>$\frac{d(x^2)}{dx} = 2x$，为单变量微分。</p><p>$\frac{\partial}{\partial x}(x^2y^2) = 2xy^2$，为多变量微分</p><h2 id="2-2-梯度"><a href="#2-2-梯度" class="headerlink" title="2.2 梯度"></a>2.2 梯度</h2><ul><li>梯度实际上就是多变量微分的一般化</li><li>在单变量的函数中，梯度其实就是函数的微分，代表着函数在某个给定点的切线的斜率</li><li>在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向<ul><li>分别对每个变量进行微分，然后用逗号分割开，梯度是用&lt;&gt;包括起来，说明梯度其实一个向量</li></ul></li><li>梯度的方向是函数在给定点上升最快的方向，那么梯度的反方向就是函数在给定点下降最快的方向</li><li>只要沿着梯度的方向一直走，就能走到局部的最低点</li></ul><p>例子：</p><p>$J(\Theta) = 0.55 - (5\theta_1 + 2\theta_2 - 12\theta_3)$,</p><p>$\bigtriangledown J(\Theta) = &lt;\frac{\partial J}{\partial \theta_1}, \frac{\partial J}{\partial \theta_2}, \frac{\partial J}{\partial \theta_3}&gt; = &lt;-5, -2, 12&gt;$.</p><h2 id="2-3-泰勒公式"><a href="#2-3-泰勒公式" class="headerlink" title="2.3 泰勒公式"></a>2.3 泰勒公式</h2><ul><li>用多项式函数去逼近光滑函数</li></ul><p>$f(x) = \sum_{i=0}^{n}\frac{f^{(i)}(x_0)}{i!}(x - x_0)^{i}$.</p><h1 id="3-梯度下降法"><a href="#3-梯度下降法" class="headerlink" title="3. 梯度下降法"></a>3. 梯度下降法</h1><h2 id="3-1-原理分析"><a href="#3-1-原理分析" class="headerlink" title="3.1 原理分析"></a>3.1 原理分析</h2><ul><li><p>目标</p><ul><li>有一个可微分的函数，找到这个函数的最小值，就是找到给定点的梯度，然后朝着梯度相反的方向，就能让函数值下降的最快</li></ul></li><li><p>核心公式</p><p>  $\theta_1 = \theta_0 - \alpha \bigtriangledown J(\theta)$.</p></li><li><p>该公式的主要含义如下</p><ul><li>J是$\theta$的函数</li><li>当前处在$\theta_0$点，目标是要从这个点走到J的最小值点</li><li>先确定前进的方向，也就是梯度的反向，然后走一段距离的步长$\alpha$，此时到了$\theta_1$</li><li>如果$\theta_1$就是使得函数局部最小值的点，那么迭代结束</li><li>如果$\theta_1$不是使得函数取得局部最小值的点，那么继续迭代下去</li><li>公式中负号的含义是朝着梯度相反的方向前进；因为梯度的方向实际就是函数在此点上升最快的方向，我们需要朝着下降最快的方向走，自然就是负的梯度的方向，所以此处需要加上负号</li></ul></li></ul><p>例子1：</p><p>假设单变量函数为$J(\theta) = \theta^2$，其微分为$J’(\theta) = 2\theta$，假设起点为$\theta_0 = 1$，步长为$\alpha = 0.4$，那么梯度下降法的迭代过程如下：</p><p>$\theta_0 = 1$,</p><p>$\theta_1 = \theta_0 - \alpha <em> J’(\theta_0) = 1 - 0.4 </em> 2 = 0.2$,</p><p>$\theta_2 = \theta_1 - \alpha <em> J’(\theta_1) = 0.2 - 0.4 </em> 2 * 0.2 = 0.04$,</p><p>$\theta_3 = 0.008$,</p><p>$\theta_4 = 0.0016$.</p><p>如果我们要求的精度为1e2或者迭代次数最大4次，那么，此时我们的算法已收敛。</p><p>例子2：</p><p>假设目标函数为$J(\Theta) = \theta_1^2 + \theta_2^2$，初始值为(1, 3)，步长为0.1，函数的梯度为$\bigtriangledown J(\Theta) = <2\theta_1, 2\theta_2>$，迭代过程如下：</2\theta_1,></p><p>$\Theta_0 = (1, 3)$,</p><p>$\Theta_1 = \Theta_0 - \alpha <em> \bigtriangledown J(\Theta) = (1, 3) - 0.1 </em> (2, 6) = (0.8, 2.4)$,</p><p>$\Theta_2 = \Theta_1 - \alpha <em> \bigtriangledown J(\Theta) = (0.8, 2.4) - 0.1 </em> (1.6, 4.8) = (0.64, 1.92)$,</p><p>$\Theta_3 = (0.512, 1.536)$,</p><p>$\dots$,</p><p>$\Theta_{10} = (0.1073, 0.3221)$,</p><p>$\dots$,</p><p>$\Theta_{100} = (1.629e^{-10}, 4.8888e^{-10})$.</p><h2 id="3-2-算法实现"><a href="#3-2-算法实现" class="headerlink" title="3.2 算法实现"></a>3.2 算法实现</h2><ul><li>线性回归</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Size of the points dataset.</span></span><br><span class="line">m = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Points x-coordinate and dummy value (x0, x1).</span></span><br><span class="line">X0 = np.ones((m, <span class="number">1</span>))</span><br><span class="line">X1 = np.arange(<span class="number">1</span>, m+<span class="number">1</span>).reshape(m, <span class="number">1</span>)</span><br><span class="line">X = np.hstack((X0, X1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Points y-coordinate</span></span><br><span class="line">y = np.array([</span><br><span class="line">    <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>,</span><br><span class="line">    <span class="number">11</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span></span><br><span class="line">]).reshape(m, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The Learning Rate alpha.</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_function</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    <span class="string">'''Error function J definition.'''</span></span><br><span class="line">    diff = np.dot(X, theta) - y</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1.</span>/<span class="number">2</span>*m) * np.dot(np.transpose(diff), diff)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_function</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    <span class="string">'''Gradient of the function J definition.'''</span></span><br><span class="line">    diff = np.dot(X, theta) - y</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1.</span>/m) * np.dot(np.transpose(X), diff)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(X, y, alpha)</span>:</span></span><br><span class="line">    <span class="string">'''Perform gradient descent.'''</span></span><br><span class="line">    theta = np.array([<span class="number">1</span>, <span class="number">1</span>]).reshape(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    gradient = gradient_function(theta, X, y)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> np.all(np.absolute(gradient) &lt;= <span class="number">1e-5</span>):</span><br><span class="line">        theta = theta - alpha * gradient</span><br><span class="line">        gradient = gradient_function(theta, X, y)</span><br><span class="line">    <span class="keyword">return</span> theta</span><br><span class="line"></span><br><span class="line">optimal = gradient_descent(X, y, alpha)</span><br><span class="line">print(<span class="string">'optimal:'</span>, optimal)</span><br><span class="line">print(<span class="string">'error function:'</span>, error_function(optimal, X, y)[<span class="number">0</span>,<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="3-3-梯度下降法大家族（BGD，SGD，MBGD）"><a href="#3-3-梯度下降法大家族（BGD，SGD，MBGD）" class="headerlink" title="3.3 梯度下降法大家族（BGD，SGD，MBGD）"></a>3.3 梯度下降法大家族（BGD，SGD，MBGD）</h2><ul><li>批量梯度下降法（Batch Gradient Descent）<ul><li>批量梯度下降法，是梯度下降法最常用的形式，具体做法也就是在更新参数时使用所有的样本来进行更新</li></ul></li><li>随机梯度下降法（Stochastic Gradient Descent）<ul><li>随机梯度下降法，其实和批量梯度下降法原理类似，区别在与求梯度时没有用所有的样本的数据，而是仅仅选取一个样本来求梯度</li></ul></li><li><p>小批量梯度下降法（Mini-batch Gradient Descent）</p><ul><li>小批量梯度下降法是批量梯度下降法和随机梯度下降法的折衷，也就是对于m个样本，我们采用x个样子来迭代</li></ul></li><li><p>批量梯度下降法python实现</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(X, y, W, B, alpha, max_iters)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    使用了所有的样本进行梯度下降</span></span><br><span class="line"><span class="string">    X: 训练集,</span></span><br><span class="line"><span class="string">    y: 标签,</span></span><br><span class="line"><span class="string">    W: 权重向量,</span></span><br><span class="line"><span class="string">    B: bias,</span></span><br><span class="line"><span class="string">    alpha: 学习率,</span></span><br><span class="line"><span class="string">    max_iters: 最大迭代次数.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    dW = <span class="number">0</span> <span class="comment"># 权重梯度收集器</span></span><br><span class="line">    dB = <span class="number">0</span> <span class="comment"># Bias梯度的收集器</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>] <span class="comment"># 样本数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(max_iters):</span><br><span class="line">        dW = <span class="number">0</span> <span class="comment"># 每次迭代重置</span></span><br><span class="line">        dB = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="comment"># 1. 迭代所有的样本</span></span><br><span class="line">            <span class="comment"># 2. 计算权重和bias的梯度保存在w_grad和b_grad,</span></span><br><span class="line">            <span class="comment"># 3. 通过增加w_grad和b_grad来更新dW和dB</span></span><br><span class="line">            W = W - alpha * (dW / m) <span class="comment"># 更新权重</span></span><br><span class="line">            B = B - alpha * (dB / m) <span class="comment"># 更新bias</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> W, B</span><br></pre></td></tr></table></figure><h2 id="3-4-梯度下降法和最小二乘法"><a href="#3-4-梯度下降法和最小二乘法" class="headerlink" title="3.4 梯度下降法和最小二乘法"></a>3.4 梯度下降法和最小二乘法</h2><ul><li>梯度下降法和最小二乘法相比，梯度下降法需要选择步长，而最小二乘法不需要</li><li>梯度下降法是迭代求解，最小二乘法是计算解析解</li><li>如果样本量不算很大，且存在解析解，最小二乘法比起梯度下降法要有优势，计算速度很快</li><li>如果样本量很大，用最小二乘法由于需要求一个超级大的逆矩阵，这时就很难或者很慢才能求解解析解了，使用迭代的梯度下降法比较有优势</li></ul><h2 id="3-5-优缺点"><a href="#3-5-优缺点" class="headerlink" title="3.5 优缺点"></a>3.5 优缺点</h2><ul><li>靠近极小值时收敛速度减慢</li><li>直线搜索时可能会产生一些问题</li><li>可能会“之字形”地下降</li></ul><h1 id="4-牛顿法"><a href="#4-牛顿法" class="headerlink" title="4. 牛顿法"></a>4. 牛顿法</h1><ul><li>是一种在实数域和复数域上近似求解方程的方法</li><li>方法使用函数<em>f</em> (<em>x</em>)的泰勒级数的前面几项来寻找方程<em>f</em> (<em>x</em>) = 0的根</li><li>最大的特点就在于它的收敛速度很快</li></ul><p>将函数f(x)在$x_0$处应用泰勒展开得，$f(x) = f(x_0) + \frac{f’(x_0)}{1!}(x - x_0) + \frac{f’’(x_0)}{2!}(x-x_0)^2 + \cdots$，我们取前两项，$f(x) = f(x_0) + f’(x_0)(x-x_0)$。</p><p>对等式两边求导数得到，</p><p>$f’(x) = f’(x_0) + f’’(x_0)\Delta x$，</p><p>当f(x)取最小值时，$f’(x) = 0$，所以我们得到，</p><p>$0 = f’(x_0)+ f’’(x_0)\Delta x$，</p><p>$\Delta x = -\frac{f’(x_0)}{f’’(x_0)}$，</p><p>这样我们就得到了牛顿法的参数迭代更新公式如下，</p><p>$x_{n+1} = x_n- \frac{f’(x_n)}{f’’(x_n}$。</p><p>例子：</p><p>求解最优化问题，函数$\min_{x\in R^n}f(x)$，其中$x^*$为目标函数的极小值。</p><p>设f(x)具有二阶连续偏导数，若第k次的迭代值为$x^{(k)}$，则可将f(x)在$x^{(k)}$附近进行二阶泰勒展开，</p><p>$f(x) = f(x^{(k)}) + g_k^T(x-x^{(k)}) + \frac{1}{2}(x-x^{(k)})^TH(x^{(k)})(x-x^{(k)})$，</p><p>其中，$g_k = g(x^{(k)}) = \bigtriangledown f(x^{(k)})$是f(x)的梯度向量在点$x^{(k)}$，$H(x^{(k)})$是f(x)的海赛矩阵$H(x^{(k)}) = [\frac{\partial^2f}{\partial x_i\partial x_j}]_{nxn}$在点$x^{(k)}$的值。</p><p>函数f(x)有极值的必要条件是在极值点处一阶导数为0，即梯度向量为0。特别的当$H(x^{(k)})$是正定矩阵时，函数f(x)的极值为极小值。对上述泰勒公式再进行求导得到，</p><p>$\bigtriangledown f(x) = g_k + H_k(x - x^{(k)})$，</p><p>其中，$H_k = H(x^{(k)})$，那么，</p><p>$g_k + H_k(x^{(k+1)} - x^{(k)}) = 0$，</p><p>$x^{(k+1)} = x^{(k)} - H_k^{-1}g_k$。</p><p>令$H_kp_k = -g_k$，</p><p>那么得到迭代公式，</p><p>$x^{(k + 1)} = x^{(k)} + p_k$。<br>最终可在$\bigtriangledown f(x^*)= 0$处收敛。</p><p>算法伪代码：</p><p>输入: f(x)，梯度$g(x) = \bigtriangledown f(x)$，海赛矩阵H(x)，精度要求$\epsilon$</p><p>输出: f(x)的极小值点$x^*$</p><ol><li>取初始值$x^{(0)}$，置$k = 0$</li><li>计算$g_k = g(x^{(k)})$</li><li>若$||g_k|| \leq \epsilon$，停止得到近似解$x^* = x^{(k)}$</li><li>计算$H_k = H(x^{(k)})$，并求$p_k$</li></ol><p>$H_kp_k = -g_k$</p><ol><li>置$x^{(k+1)} = x^{(k)} + p_k$</li><li>置$k = k+1$，转2</li></ol><p>优缺点：</p><ul><li>二阶收敛，收敛速度快</li><li>牛顿法是一种迭代算法，每一步都需要求解目标函数的Hessian矩阵的逆矩阵，计算比较复杂</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.jianshu.com/p/c7e642877b0e" target="_blank" rel="noopener">深入浅出—梯度下降法及其实现</a></li><li><a href="https://zhuanlan.zhihu.com/p/37524275" target="_blank" rel="noopener">梯度下降法、牛顿法和拟牛顿法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 最优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 最优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vSLAMNet（三）-数字图像处理-高斯滤波</title>
      <link href="/2019/12/07/slam/vSLAMNet%EF%BC%88%E4%B8%89%EF%BC%89-%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2/"/>
      <url>/2019/12/07/slam/vSLAMNet%EF%BC%88%E4%B8%89%EF%BC%89-%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-高斯模糊概述"><a href="#1-高斯模糊概述" class="headerlink" title="1. 高斯模糊概述"></a>1. 高斯模糊概述</h1><p>高斯模糊(英语: Gaussian Blur), 也叫高斯平滑, 是在 Adobe Photoshop, GIMP 以及 Paint.NET 等图像处理软件中广泛使用的处理效果, 通常用它来减少图像噪声以及降低细节层次.</p><ul><li>从数学的角度来看, 图像的高斯模糊过程就是图像与正态分布做卷积. 由于正态分布又叫作高斯分布, 所以这项技术就叫作高斯模糊. </li><li>由于高斯函数的傅立叶变换是另外一个高斯函数, 所以高斯模糊对于图像来说就是一个低通滤波器.</li></ul><h1 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h1><p>所谓”模糊”，可以理解成每一个像素都取周边像素的平均值，如下图所示：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-07-142820.png" alt="image-20191012093017995" style="zoom:70%;"></p><p>“中间点”取”周围点”的平均值，就是1。在数值上，这是一种”平滑化”。</p><ul><li>在图形上，就相当于产生”模糊”效果，”中间点”失去细节。显然，计算平均值时，取值范围越大，”模糊效果”越强烈。</li><li>从数值角度看，就是数值越平滑。</li></ul><p>接下来的问题就是，既然每个点都要取周边像素的平均值，那么应该如何分配权重呢？如果使用简单平均，显然不是很合理，因为图像都是连续的，越靠近的点关系越密切，越远离的点关系越疏远。因此，加权平均更合理，距离越近的点权重越大，距离越远的点权重越小。</p><h2 id="2-1-正态分布的权重"><a href="#2-1-正态分布的权重" class="headerlink" title="2.1 正态分布的权重"></a>2.1 正态分布的权重</h2><p>正态分布显然是一种可取的权重分配模式。在图形上，正态分布是一种钟形曲线，越接近中心，取值越大，越远离中心，取值越小。计算平均值的时候，我们只需要将”中心点”作为原点，其他点按照其在正态曲线上的位置，分配权重，就可以得到一个加权平均值。</p><p>一维高斯函数如下公式所述：</p><p><script type="math/tex">G(x) = \frac{1}{2\pi \sigma^{2}}e^{-\frac{x^2}{2\sigma^2}}</script>，</p><p>其中， 由于对于中心点而言，$\mu = 0$。</p><p>图像是二维的，因此，图像对应的高斯函数如下公式所述：</p><p><script type="math/tex">G(x, y, \sigma) = \frac{1}{2\pi \sigma^{2}}e^{-\frac{x^2 + y^2}{2\sigma^2}}</script>.</p><p>有了这个函数 ，就可以计算每个点的权重了。</p><h2 id="2-2-sigma-值介绍"><a href="#2-2-sigma-值介绍" class="headerlink" title="2.2 $\sigma$值介绍"></a>2.2 $\sigma$值介绍</h2><p>尺度参数$\sigma$决定了分布幅度，在高斯模糊处理中，$\sigma$常取 1.5。</p><h2 id="2-3-权重矩阵计算"><a href="#2-3-权重矩阵计算" class="headerlink" title="2.3 权重矩阵计算"></a>2.3 权重矩阵计算</h2><p>假定中心点的坐标是（0,0），那么距离它最近的8个点的坐标如下：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-07-142917.png" alt="image-20191012094212344" style="zoom:70%;"></p><p>为了计算权重矩阵，需要设定$\sigma$的值。假定$\sigma = 1.5$，则模糊半径为1的权重矩阵如下：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-07-142955.png" alt="image-20191012094249560" style="zoom:70%;"></p><p>这9个点的权重总和等于0.4787147，如果只计算这9个点的加权平均，还必须让它们的权重之和等于1，因此上面9个值还要分别除以0.4787147，得到最终的权重矩阵。</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-07-143027.png" alt="image-20191012094534679" style="zoom:70%;"></p><h2 id="2-4-计算高斯模糊"><a href="#2-4-计算高斯模糊" class="headerlink" title="2.4 计算高斯模糊"></a>2.4 计算高斯模糊</h2><p>假设现有9个像素点，灰度值（0-255）如下：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-07-143058.png" alt="image-20191012094613535" style="zoom:70%;"></p><p>每个点乘以自己的权重值：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-07-143232.png" alt="image-20191012094635553" style="zoom:70%;"></p><p>得到：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-07-143314.png" alt="image-20191012094708241" style="zoom:70%;"></p><p>将这9个值加起来，就是中心点的高斯模糊的值。</p><p>对所有点重复这个过程，就得到了高斯模糊后的图像。如果原图是彩色图片，可以对RGB三个通道分别做高斯模糊。</p><h1 id="2-5-边界点的处理"><a href="#2-5-边界点的处理" class="headerlink" title="2.5 边界点的处理"></a>2.5 边界点的处理</h1><ul><li>一个变通方法，就是把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。</li><li>填充0。</li></ul><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> PIL.Image</span><br><span class="line"><span class="keyword">import</span> PIL.ImageFilter</span><br><span class="line"><span class="keyword">import</span> scipy.misc</span><br><span class="line"><span class="keyword">import</span> scipy.signal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 概率密度函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cv</span><span class="params">(r, sigma)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">2</span> * math.pi * sigma ** <span class="number">2</span>) * math.exp((-r**<span class="number">2</span>) / (<span class="number">2</span> * sigma ** <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯滤波掩模</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_window</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 模糊半径为 2, sigma 为 1.5</span></span><br><span class="line">    radius, sigma = <span class="number">2</span>, <span class="number">1.5</span></span><br><span class="line">    window = np.zeros((radius * <span class="number">2</span> + <span class="number">1</span>, radius * <span class="number">2</span> + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(-radius, radius + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(-radius, radius + <span class="number">1</span>):</span><br><span class="line">            r = (i ** <span class="number">2</span> + j ** <span class="number">2</span>) ** <span class="number">0.5</span></span><br><span class="line">            window[i + radius][j + radius] = get_cv(r, sigma)</span><br><span class="line">    <span class="keyword">return</span> window / np.sum(window)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_2d</span><span class="params">(r)</span>:</span></span><br><span class="line">    window = get_window()</span><br><span class="line">    s = scipy.signal.convolve2d(r, window, mode=<span class="string">'same'</span>, boundary=<span class="string">'symm'</span>)</span><br><span class="line">    <span class="keyword">return</span> s.astype(np.uint8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_3d</span><span class="params">(r)</span>:</span></span><br><span class="line">    s_dsplit = []</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> range(r.shape[<span class="number">2</span>]):</span><br><span class="line">        rr = r[:, :, d]</span><br><span class="line">        ss = convert_2d(rr)</span><br><span class="line">        s_dsplit.append(ss)</span><br><span class="line">    s = np.dstack(s_dsplit)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">im = PIL.Image.open(<span class="string">'/img/jp.jpg'</span>)</span><br><span class="line">im_mat = scipy.misc.fromimage(im)</span><br><span class="line">im_converted_mat = convert_3d(im_mat)</span><br><span class="line">im_converted = PIL.Image.fromarray(im_converted_mat)</span><br><span class="line">im_converted.show()</span><br></pre></td></tr></table></figure><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h1><ul><li><a href="http://accu.cc/content/pil/spatial_filter_gaussian_blur/" target="_blank" rel="noopener">数字图像处理 » 数字图像处理-空间滤波-高斯滤波</a></li><li><a href="https://blog.csdn.net/farmwang/article/details/74452750" target="_blank" rel="noopener">高斯模糊的算法（高斯卷积 高斯核）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vSLAMNet（二）-三维旋转变换</title>
      <link href="/2019/12/07/slam/vSLAMNet%EF%BC%88%E4%BA%8C%EF%BC%89-%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2/"/>
      <url>/2019/12/07/slam/vSLAMNet%EF%BC%88%E4%BA%8C%EF%BC%89-%E4%B8%89%E7%BB%B4%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><ul><li>欧拉角</li><li>旋转矩阵</li><li>四元数</li></ul><h1 id="2-欧拉角与旋转矩阵相互转换"><a href="#2-欧拉角与旋转矩阵相互转换" class="headerlink" title="2. 欧拉角与旋转矩阵相互转换"></a>2. 欧拉角与旋转矩阵相互转换</h1><h2 id="2-1-旋转矩阵转欧拉角"><a href="#2-1-旋转矩阵转欧拉角" class="headerlink" title="2.1 旋转矩阵转欧拉角"></a>2.1 旋转矩阵转欧拉角</h2><ul><li>C++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotationMatrixToEuler</span><span class="params">(Eigen::Matrix3d rotation, Eigen::Vector3d&amp; euler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> sy = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(<span class="built_in">sqrt</span>(rotation(<span class="number">0</span>, <span class="number">0</span>) * rotation(<span class="number">0</span>, <span class="number">0</span>) + rotation(<span class="number">1</span>, <span class="number">0</span>) * rotation(<span class="number">1</span>, <span class="number">0</span>)));</span><br><span class="line">    <span class="keyword">bool</span> singular = sy &lt; <span class="number">1e-6</span>;</span><br><span class="line">    <span class="keyword">if</span> (!singular) &#123;</span><br><span class="line">        euler[<span class="number">0</span>] = <span class="built_in">atan2</span>(rotation(<span class="number">2</span>, <span class="number">1</span>) , rotation(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">        euler[<span class="number">1</span>] = <span class="built_in">atan2</span>(-rotation(<span class="number">2</span>, <span class="number">0</span>), sy);</span><br><span class="line">        euler[<span class="number">2</span>] = <span class="built_in">atan2</span>(rotation(<span class="number">1</span>, <span class="number">0</span>), rotation(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        euler[<span class="number">0</span>] = <span class="built_in">atan2</span>(-rotation(<span class="number">1</span>, <span class="number">2</span>), rotation(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        euler[<span class="number">1</span>] = <span class="built_in">atan2</span>(-rotation(<span class="number">2</span>, <span class="number">0</span>), sy);</span><br><span class="line">        euler[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetEulerAngles</span><span class="params">(<span class="keyword">const</span> ARFrame* frame, Eigen::Vector3d&amp; euler)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//first we get the quaternion from m00...m22</span></span><br><span class="line">    <span class="comment">//see http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.html</span></span><br><span class="line">    <span class="keyword">float</span> qw = <span class="built_in">sqrt</span>(<span class="number">1</span> + frame.camera.transform.columns[<span class="number">0</span>][<span class="number">0</span>] + frame.camera.transform.columns[<span class="number">1</span>][<span class="number">1</span>] + frame.camera.transform.columns[<span class="number">2</span>][<span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">float</span> qx = (frame.camera.transform.columns[<span class="number">2</span>][<span class="number">1</span>] - frame.camera.transform.columns[<span class="number">1</span>][<span class="number">2</span>]) / (qw * <span class="number">4.0</span>);</span><br><span class="line">    <span class="keyword">float</span> qy = (frame.camera.transform.columns[<span class="number">0</span>][<span class="number">2</span>] - frame.camera.transform.columns[<span class="number">2</span>][<span class="number">0</span>]) / (qw * <span class="number">4.0</span>);</span><br><span class="line">    <span class="keyword">float</span> qz = (frame.camera.transform.columns[<span class="number">1</span>][<span class="number">0</span>] - frame.camera.transform.columns[<span class="number">0</span>][<span class="number">1</span>]) / (qw * <span class="number">4.0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//then we deduce euler angles with some cosines</span></span><br><span class="line">    <span class="comment">//see https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles</span></span><br><span class="line">    <span class="comment">// roll (x-axis rotation)</span></span><br><span class="line">    <span class="keyword">float</span> sinr = +<span class="number">2.0</span> * (qw * qx + qy * qz);</span><br><span class="line">    <span class="keyword">float</span> cosr = +<span class="number">1.0</span> - <span class="number">2.0</span> * (qx * qx + qy * qy);</span><br><span class="line">    <span class="keyword">float</span> roll = <span class="built_in">atan2</span>(sinr, cosr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// pitch (y-axis rotation)</span></span><br><span class="line">    <span class="keyword">float</span> sinp = +<span class="number">2.0</span> * (qw * qy - qz * qx);</span><br><span class="line">    <span class="keyword">float</span> pitch;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(sinp) &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        pitch = copysign(M_PI/<span class="number">2</span>, sinp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pitch = <span class="built_in">asin</span>(sinp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// yaw (z-axis rotation)</span></span><br><span class="line">    <span class="keyword">float</span> siny = +<span class="number">2.0</span> * (qw * qz + qx * qy);</span><br><span class="line">    <span class="keyword">float</span> cosy = +<span class="number">1.0</span> - <span class="number">2.0</span> * (qy * qy + qz * qz);</span><br><span class="line">    <span class="keyword">float</span> yaw = <span class="built_in">atan2</span>(siny, cosy);</span><br><span class="line">    euler[<span class="number">0</span>] = roll;</span><br><span class="line">    euler[<span class="number">1</span>] = pitch;</span><br><span class="line">    euler[<span class="number">2</span>] = yaw;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotationToEuler</span><span class="params">(rotation)</span>:</span></span><br><span class="line">    euler = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(rotation)):</span><br><span class="line">        sy = math.sqrt(rotation[i][<span class="number">0</span>]*rotation[i][<span class="number">0</span>] + rotation[i][<span class="number">3</span>]*rotation[i][<span class="number">3</span>])</span><br><span class="line">        singular = sy &lt; <span class="number">1e-6</span></span><br><span class="line">        eulers = []</span><br><span class="line">        <span class="keyword">if</span> ~singular:</span><br><span class="line">            eulers.append(-math.atan2(rotation[i][<span class="number">7</span>], rotation[i][<span class="number">8</span>]))</span><br><span class="line">            eulers.append(-math.atan2(-rotation[i][<span class="number">6</span>], sy))</span><br><span class="line">            eulers.append(-math.atan2(rotation[i][<span class="number">3</span>], rotation[i][<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            eulers.append(-math.atan2(-rotation[i][<span class="number">5</span>], rotation[i][<span class="number">4</span>]))</span><br><span class="line">            eulers.append(-math.atan2(-rotation[i][<span class="number">6</span>], sy))</span><br><span class="line">            eulers.append(<span class="number">0</span>)</span><br><span class="line">        eulers = np.array(eulers)</span><br><span class="line">        euler.append(eulers)</span><br><span class="line">    euler = np.array(euler)</span><br><span class="line">    <span class="keyword">return</span> euler</span><br></pre></td></tr></table></figure><h2 id="2-2-欧拉角转旋转矩阵"><a href="#2-2-欧拉角转旋转矩阵" class="headerlink" title="2.2 欧拉角转旋转矩阵"></a>2.2 欧拉角转旋转矩阵</h2><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaw pitch roll</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">EularToRotationMatrix</span><span class="params">(angle)</span>:</span></span><br><span class="line">    y = angle[<span class="number">0</span>]</span><br><span class="line">    p = angle[<span class="number">1</span>]</span><br><span class="line">    r = angle[<span class="number">2</span>]</span><br><span class="line">    Rx = random.rand(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    Ry = random.rand(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    Rz = random.rand(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    Rz[<span class="number">0</span>, <span class="number">0</span>] = math.cos(y)</span><br><span class="line">    Rz[<span class="number">0</span>, <span class="number">1</span>] = -math.sin(y)</span><br><span class="line">    Rz[<span class="number">0</span>, <span class="number">2</span>] = <span class="number">0.0</span></span><br><span class="line">    Rz[<span class="number">1</span>, <span class="number">0</span>] = math.sin(y)</span><br><span class="line">    Rz[<span class="number">1</span>, <span class="number">1</span>] = math.cos(y)</span><br><span class="line">    Rz[<span class="number">1</span>, <span class="number">2</span>] = <span class="number">0.0</span></span><br><span class="line">    Rz[<span class="number">2</span>, <span class="number">0</span>] = <span class="number">0.0</span></span><br><span class="line">    Rz[<span class="number">2</span>, <span class="number">1</span>] = <span class="number">0.0</span></span><br><span class="line">    Rz[<span class="number">2</span>, <span class="number">2</span>] = <span class="number">1.0</span></span><br><span class="line">    Ry[<span class="number">0</span>, <span class="number">0</span>] = math.cos(p)</span><br><span class="line">    Ry[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">0.0</span></span><br><span class="line">    Ry[<span class="number">0</span>, <span class="number">2</span>] = math.sin(p)</span><br><span class="line">    Ry[<span class="number">1</span>, <span class="number">0</span>] = <span class="number">0.0</span></span><br><span class="line">    Ry[<span class="number">1</span>, <span class="number">1</span>] = <span class="number">1.0</span></span><br><span class="line">    Ry[<span class="number">1</span>, <span class="number">2</span>] = <span class="number">0.0</span></span><br><span class="line">    Ry[<span class="number">2</span>, <span class="number">0</span>] = -math.sin(p)</span><br><span class="line">    Ry[<span class="number">2</span>, <span class="number">1</span>] = <span class="number">0.0</span></span><br><span class="line">    Ry[<span class="number">2</span>, <span class="number">2</span>] = math.cos(p)</span><br><span class="line">    Rx[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">1.0</span></span><br><span class="line">    Rx[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">0.0</span></span><br><span class="line">    Rx[<span class="number">0</span>, <span class="number">2</span>] = <span class="number">0.0</span></span><br><span class="line">    Rx[<span class="number">1</span>, <span class="number">0</span>] = <span class="number">0.0</span></span><br><span class="line">    Rx[<span class="number">1</span>, <span class="number">1</span>] = math.cos(r)</span><br><span class="line">    Rx[<span class="number">1</span>, <span class="number">2</span>] = -math.sin(r)</span><br><span class="line">    Rx[<span class="number">2</span>, <span class="number">0</span>] = <span class="number">0.0</span></span><br><span class="line">    Rx[<span class="number">2</span>, <span class="number">1</span>] = math.sin(r)</span><br><span class="line">    Rx[<span class="number">2</span>, <span class="number">2</span>] = math.cos(r)</span><br><span class="line">    <span class="keyword">return</span> np.dot(np.dot(Rz, Ry), Rx)</span><br></pre></td></tr></table></figure><h1 id="3-欧拉角与四元数相互转换"><a href="#3-欧拉角与四元数相互转换" class="headerlink" title="3. 欧拉角与四元数相互转换"></a>3. 欧拉角与四元数相互转换</h1><h2 id="3-1-欧拉角转四元数"><a href="#3-1-欧拉角转四元数" class="headerlink" title="3.1 欧拉角转四元数"></a>3.1 欧拉角转四元数</h2><ul><li>C++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// euler angles: roll pitch yaw</span></span><br><span class="line"><span class="keyword">void</span> Utility::EulerAngleToQuat(<span class="keyword">const</span> Eigen::Vector3d euler, Eigen::Quaterniond&amp; quat)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">float</span> fCosHRoll = <span class="built_in">cos</span>(euler[<span class="number">0</span>] * <span class="number">.5</span>f);</span><br><span class="line">    <span class="keyword">float</span> fSinHRoll = <span class="built_in">sin</span>(euler[<span class="number">0</span>] * <span class="number">.5</span>f);</span><br><span class="line">    <span class="keyword">float</span> fCosHPitch = <span class="built_in">cos</span>(euler[<span class="number">1</span>] * <span class="number">.5</span>f);</span><br><span class="line">    <span class="keyword">float</span> fSinHPitch = <span class="built_in">sin</span>(euler[<span class="number">1</span>] * <span class="number">.5</span>f);</span><br><span class="line">    <span class="keyword">float</span> fCosHYaw = <span class="built_in">cos</span>(euler[<span class="number">2</span>] * <span class="number">.5</span>f);</span><br><span class="line">    <span class="keyword">float</span> fSinHYaw = <span class="built_in">sin</span>(euler[<span class="number">2</span>] * <span class="number">.5</span>f);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Cartesian coordinate System</span></span><br><span class="line">    <span class="keyword">float</span> w = fCosHRoll * fCosHPitch * fCosHYaw + fSinHRoll * fSinHPitch * fSinHYaw;</span><br><span class="line">    <span class="keyword">float</span> x = fSinHRoll * fCosHPitch * fCosHYaw - fCosHRoll * fSinHPitch * fSinHYaw;</span><br><span class="line">    <span class="keyword">float</span> y = fCosHRoll * fSinHPitch * fCosHYaw + fSinHRoll * fCosHPitch * fSinHYaw;</span><br><span class="line">    <span class="keyword">float</span> z = fCosHRoll * fCosHPitch * fSinHYaw - fSinHRoll * fSinHPitch * fCosHYaw;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    float w = fCosHRoll * fCosHPitch * fCosHYaw + fSinHRoll * fSinHPitch * fSinHYaw;</span></span><br><span class="line"><span class="comment">//    float x = fCosHRoll * fSinHPitch * fCosHYaw + fSinHRoll * fCosHPitch * fSinHYaw;</span></span><br><span class="line"><span class="comment">//    float y = fCosHRoll * fCosHPitch * fSinHYaw - fSinHRoll * fSinHPitch * fCosHYaw;</span></span><br><span class="line"><span class="comment">//    float z = fSinHRoll * fCosHPitch * fCosHYaw - fCosHRoll * fSinHPitch * fSinHYaw;</span></span><br><span class="line">    </span><br><span class="line">    quat.coeffs().w() = w;</span><br><span class="line">    quat.coeffs().x() = x;</span><br><span class="line">    quat.coeffs().y() = y;</span><br><span class="line">    quat.coeffs().z() = z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EulerAngle Quaternion::GetEulerAngle() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">EulerAngle ea;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Cartesian coordinate System </span></span><br><span class="line"><span class="comment">//ea.m_fRoll  = atan2(2 * (w * x + y * z) , 1 - 2 * (x * x + y * y));</span></span><br><span class="line"><span class="comment">//ea.m_fPitch = asin(2 * (w * y - z * x));</span></span><br><span class="line"><span class="comment">//ea.m_fYaw   = atan2(2 * (w * z + x * y) , 1 - 2 * (y * y + z * z));</span></span><br><span class="line"></span><br><span class="line">ea.m_fRoll  = <span class="built_in">atan2</span>(<span class="number">2</span> * (w * z + x * y) , <span class="number">1</span> - <span class="number">2</span> * (z * z + x * x));</span><br><span class="line">ea.m_fPitch = <span class="built_in">asin</span>(CLAMP(<span class="number">2</span> * (w * x - y * z) , <span class="number">-1.0f</span> , <span class="number">1.0f</span>));</span><br><span class="line">ea.m_fYaw   = <span class="built_in">atan2</span>(<span class="number">2</span> * (w * y + z * x) , <span class="number">1</span> - <span class="number">2</span> * (x * x + y * y));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ea;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Quaternion <span class="title">eulerAngleToQuaternion</span><span class="params">(Vector3f euler, Quaternion quat)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> fCosHRoll = (<span class="keyword">float</span>) Math.cos(euler.getX() * .<span class="number">5f</span>);</span><br><span class="line">        <span class="keyword">float</span> fSinHRoll = (<span class="keyword">float</span>) Math.sin(euler.getX() * .<span class="number">5f</span>);</span><br><span class="line">        <span class="keyword">float</span> fCosHPitch = (<span class="keyword">float</span>) Math.cos(euler.getY() * .<span class="number">5f</span>);</span><br><span class="line">        <span class="keyword">float</span> fSinHPitch = (<span class="keyword">float</span>) Math.sin(euler.getY() * .<span class="number">5f</span>);</span><br><span class="line">        <span class="keyword">float</span> fCosHYaw = (<span class="keyword">float</span>) Math.cos(euler.getZ() * .<span class="number">5f</span>);</span><br><span class="line">        <span class="keyword">float</span> fSinHYaw = (<span class="keyword">float</span>) Math.sin(euler.getZ() * .<span class="number">5f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// Cartesian coordinate System</span></span><br><span class="line">        <span class="keyword">float</span> w = fCosHRoll * fCosHPitch * fCosHYaw + fSinHRoll * fSinHPitch * fSinHYaw;</span><br><span class="line">        <span class="keyword">float</span> x = fSinHRoll * fCosHPitch * fCosHYaw - fCosHRoll * fSinHPitch * fSinHYaw;</span><br><span class="line">        <span class="keyword">float</span> y = fCosHRoll * fSinHPitch * fCosHYaw + fSinHRoll * fCosHPitch * fSinHYaw;</span><br><span class="line">        <span class="keyword">float</span> z = fCosHRoll * fCosHPitch * fSinHYaw - fSinHRoll * fSinHPitch * fCosHYaw;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    float w = fCosHRoll * fCosHPitch * fCosHYaw + fSinHRoll * fSinHPitch * fSinHYaw;</span></span><br><span class="line"><span class="comment">//    float x = fCosHRoll * fSinHPitch * fCosHYaw + fSinHRoll * fCosHPitch * fSinHYaw;</span></span><br><span class="line"><span class="comment">//    float y = fCosHRoll * fCosHPitch * fSinHYaw - fSinHRoll * fSinHPitch * fCosHYaw;</span></span><br><span class="line"><span class="comment">//    float z = fSinHRoll * fCosHPitch * fCosHYaw - fCosHRoll * fSinHPitch * fSinHYaw;</span></span><br><span class="line"></span><br><span class="line">        quat.setW(w);</span><br><span class="line">        quat.setX(x);</span><br><span class="line">        quat.setY(y);</span><br><span class="line">        quat.setZ(z);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> quat;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>Eigen</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Eigen::Vector3d euler;</span><br><span class="line">euler[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">euler[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">euler[<span class="number">2</span>] = M_PI/<span class="number">4.0f</span>;</span><br><span class="line"></span><br><span class="line">Eigen::<span class="function">AngleAxisd <span class="title">rollAngle</span><span class="params">(euler[<span class="number">0</span>], Eigen::Vector3d::UnitX())</span></span>;</span><br><span class="line">Eigen::<span class="function">AngleAxisd <span class="title">pitchAngle</span><span class="params">(euler[<span class="number">1</span>], Eigen::Vector3d::UnitY())</span></span>;</span><br><span class="line">Eigen::<span class="function">AngleAxisd <span class="title">yawAngle</span><span class="params">(euler[<span class="number">2</span>], Eigen::Vector3d::UnitZ())</span></span>;</span><br><span class="line">Eigen::Quaterniond q = yawAngle * pitchAngle * rollAngle;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"q = "</span> &lt;&lt; q.coeffs().w() &lt;&lt; <span class="string">" "</span> &lt;&lt; q.coeffs().x() &lt;&lt; <span class="string">" "</span> &lt;&lt; q.coeffs().y() &lt;&lt; <span class="string">" "</span> &lt;&lt; q.coeffs().z() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title=" "></a> </h3><h1 id="4-四元数与旋转矩阵相互转换"><a href="#4-四元数与旋转矩阵相互转换" class="headerlink" title="4. 四元数与旋转矩阵相互转换"></a>4. 四元数与旋转矩阵相互转换</h1><h2 id="4-1-旋转矩阵转四元数"><a href="#4-1-旋转矩阵转四元数" class="headerlink" title="4.1 旋转矩阵转四元数"></a>4.1 旋转矩阵转四元数</h2><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotation_matrix_to_quaternion</span><span class="params">(rotation)</span>:</span></span><br><span class="line">    quat = quaternion.quaternion(<span class="number">1</span>, *[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">    trace = rotation[<span class="number">0</span>, <span class="number">0</span>] + rotation[<span class="number">1</span>, <span class="number">1</span>] + rotation[<span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> trace &gt; <span class="number">0</span>:</span><br><span class="line">        s = <span class="number">0.5</span> / math.sqrt(trace + <span class="number">1.0</span>)</span><br><span class="line">        quat.w = <span class="number">0.25</span> / s</span><br><span class="line">        quat.x = (rotation[<span class="number">2</span>, <span class="number">1</span>] - rotation[<span class="number">1</span>, <span class="number">2</span>]) * s</span><br><span class="line">        quat.y = (rotation[<span class="number">0</span>, <span class="number">2</span>] - rotation[<span class="number">2</span>, <span class="number">0</span>]) * s</span><br><span class="line">        quat.z = (rotation[<span class="number">1</span>, <span class="number">0</span>] - rotation[<span class="number">0</span>, <span class="number">1</span>]) * s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> rotation[<span class="number">0</span>, <span class="number">0</span>] &gt; rotation[<span class="number">1</span>, <span class="number">1</span>] <span class="keyword">and</span> rotation[<span class="number">0</span>, <span class="number">0</span>] &gt; rotation[<span class="number">2</span>, <span class="number">2</span>]:</span><br><span class="line">            s = <span class="number">2.0</span> * math.sqrt(<span class="number">1.0</span> + rotation[<span class="number">0</span>, <span class="number">0</span>] - rotation[<span class="number">1</span>, <span class="number">1</span>] - rotation[<span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">            quat.w = (rotation[<span class="number">2</span>, <span class="number">1</span>] - rotation[<span class="number">1</span>, <span class="number">2</span>]) / s</span><br><span class="line">            quat.x = <span class="number">0.25</span> * s</span><br><span class="line">            quat.y = (rotation[<span class="number">0</span>, <span class="number">1</span>] + rotation[<span class="number">1</span>, <span class="number">0</span>]) / s</span><br><span class="line">            quat.z = (rotation[<span class="number">0</span>, <span class="number">2</span>] + rotation[<span class="number">2</span>, <span class="number">0</span>]) / s</span><br><span class="line">        <span class="keyword">elif</span> rotation[<span class="number">1</span>, <span class="number">1</span>] &gt; rotation[<span class="number">2</span>, <span class="number">2</span>]:</span><br><span class="line">            s = <span class="number">2.0</span> * math.sqrt(<span class="number">1.0</span> + rotation[<span class="number">1</span>, <span class="number">1</span>] - rotation[<span class="number">0</span>, <span class="number">0</span>] - rotation[<span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">            quat.w = (rotation[<span class="number">0</span>, <span class="number">2</span>] - rotation[<span class="number">2</span>, <span class="number">0</span>]) / s</span><br><span class="line">            quat.x = (rotation[<span class="number">0</span>, <span class="number">1</span>] + rotation[<span class="number">1</span>, <span class="number">0</span>]) / s</span><br><span class="line">            quat.y = <span class="number">0.25</span> * s</span><br><span class="line">            quat.z = (rotation[<span class="number">1</span>, <span class="number">2</span>] + rotation[<span class="number">2</span>, <span class="number">1</span>]) / s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = <span class="number">2.0</span> * math.sqrt(<span class="number">1.0</span> + rotation[<span class="number">2</span>, <span class="number">2</span>] - rotation[<span class="number">0</span>, <span class="number">0</span>] - rotation[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">            quat.w = (rotation[<span class="number">1</span>, <span class="number">0</span>] - rotation[<span class="number">0</span>, <span class="number">1</span>]) / s</span><br><span class="line">            quat.x = (rotation[<span class="number">0</span>, <span class="number">2</span>] + rotation[<span class="number">2</span>, <span class="number">0</span>]) / s</span><br><span class="line">            quat.y = (rotation[<span class="number">1</span>, <span class="number">2</span>] + rotation[<span class="number">2</span>, <span class="number">1</span>]) / s</span><br><span class="line">            quat.z = <span class="number">0.25</span> * s</span><br><span class="line">    quat_array = [quat.w, quat.x, quat.y, quat.z]</span><br><span class="line">    <span class="keyword">return</span> np.array(quat_array)</span><br></pre></td></tr></table></figure><h2 id="4-2-四元数转旋转矩阵"><a href="#4-2-四元数转旋转矩阵" class="headerlink" title="4.2 四元数转旋转矩阵"></a>4.2 四元数转旋转矩阵</h2><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># qw, qx, qy, qz</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">QuatToRotationMatrix</span><span class="params">(q)</span>:</span></span><br><span class="line">    R = np.eye(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    w = q[<span class="number">0</span>]</span><br><span class="line">    x = q[<span class="number">1</span>]</span><br><span class="line">    y = q[<span class="number">2</span>]</span><br><span class="line">    z = q[<span class="number">3</span>]</span><br><span class="line">    x2 = x * x</span><br><span class="line">    y2 = y * y</span><br><span class="line">    z2 = z * z</span><br><span class="line">    xy = x * y</span><br><span class="line">    xz = x * z</span><br><span class="line">    yz = y * z</span><br><span class="line">    wx = w * x</span><br><span class="line">    wy = w * y</span><br><span class="line">    wz = w * z</span><br><span class="line">    R[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">1.0</span> - <span class="number">2.0</span> * (y2 + z2)</span><br><span class="line">    R[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">2.0</span> * (xy - wz)</span><br><span class="line">    R[<span class="number">0</span>, <span class="number">2</span>] = <span class="number">2.0</span> * (xz + wy)</span><br><span class="line">    R[<span class="number">1</span>, <span class="number">0</span>] = <span class="number">2.0</span> * (xy + wz)</span><br><span class="line">    R[<span class="number">1</span>, <span class="number">1</span>] = <span class="number">1.0</span> - <span class="number">2.0</span> * (x2 + z2)</span><br><span class="line">    R[<span class="number">1</span>, <span class="number">2</span>] = <span class="number">2.0</span> * (yz - wx)</span><br><span class="line">    R[<span class="number">2</span>, <span class="number">0</span>] = <span class="number">2.0</span> * (xz - wy)</span><br><span class="line">    R[<span class="number">2</span>, <span class="number">1</span>] = <span class="number">2.0</span> * (yz + wx)</span><br><span class="line">    R[<span class="number">2</span>, <span class="number">2</span>] = <span class="number">1.0</span> - <span class="number">2.0</span> * (x2 + y2)</span><br><span class="line">    <span class="keyword">return</span> R</span><br></pre></td></tr></table></figure><h1 id="5-其他变换"><a href="#5-其他变换" class="headerlink" title="5. 其他变换"></a>5. 其他变换</h1><h2 id="5-1-静止检测"><a href="#5-1-静止检测" class="headerlink" title="5.1 静止检测"></a>5.1 静止检测</h2><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetMotionState</span><span class="params">(values)</span>:</span></span><br><span class="line">    state = []</span><br><span class="line">    isMoving = false</span><br><span class="line">    moveBeg = false</span><br><span class="line">    xPositive = false</span><br><span class="line">    xNegative = false</span><br><span class="line">    yPositive = false</span><br><span class="line">    yNegative = false</span><br><span class="line">    zPositive = false</span><br><span class="line">    zNegative = false</span><br><span class="line">    userAccel = max(max(abs(values[<span class="number">0</span>]), abs(values[<span class="number">1</span>])), abs(values[<span class="number">2</span>]))</span><br><span class="line">    <span class="keyword">if</span> userAccel &gt; <span class="number">0.07</span>:</span><br><span class="line">        isMoving = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> isMoving :</span><br><span class="line">        moveBeg = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> userAccel == fabs(values[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">if</span> values[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                xPositive = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                xNegative = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">elif</span> userAccel == fabs(values[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> values[<span class="number">1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                yPositive = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                yNegative = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">elif</span> userAccel == fabs(values[<span class="number">2</span>]):</span><br><span class="line">            <span class="keyword">if</span> values[<span class="number">2</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                zPositive = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                zNegative = <span class="keyword">True</span></span><br><span class="line">        state = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> moveBeg:</span><br><span class="line">            changeSymbol = false</span><br><span class="line">            <span class="keyword">if</span> xPositive <span class="keyword">or</span> xNegative:</span><br><span class="line">                <span class="keyword">if</span> xPositive <span class="keyword">and</span> xNegative:</span><br><span class="line">                    changeSymbol = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">elif</span> yPositive <span class="keyword">or</span> yNegative:</span><br><span class="line">                <span class="keyword">if</span> yPositive <span class="keyword">and</span> yNegative:</span><br><span class="line">                    changeSymbol = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">elif</span> zPositive <span class="keyword">or</span> zNegative:</span><br><span class="line">                <span class="keyword">if</span> zPositive <span class="keyword">and</span> zNegative:</span><br><span class="line">                    changeSymbol = <span class="keyword">True</span></span><br><span class="line">            xPositive = false</span><br><span class="line">            xNegative = false</span><br><span class="line">            yPositive = false</span><br><span class="line">            yNegative = false</span><br><span class="line">            zPositive = false</span><br><span class="line">            zNegative = false</span><br><span class="line">            <span class="keyword">if</span> ~changeSymbol:</span><br><span class="line">                state = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                state = <span class="number">0</span></span><br><span class="line">            moveBeg = false</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            state = <span class="number">0</span></span><br><span class="line">    moveBeg = false</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetMotionStateVar</span><span class="params">(values)</span>:</span></span><br><span class="line">    state = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">global</span> values_buf</span><br><span class="line">    value = sqrt(pow(values[<span class="number">0</span>], <span class="number">2</span>) + pow(values[<span class="number">1</span>], <span class="number">2</span>) + pow(values[<span class="number">2</span>], <span class="number">2</span>))</span><br><span class="line">    values_buf.append(value)</span><br><span class="line">    <span class="keyword">print</span> len(values_buf)</span><br><span class="line">    <span class="keyword">if</span> len(values_buf) &gt;= <span class="number">120</span>*<span class="number">0.3</span> <span class="keyword">and</span> len(values_buf) &lt;= <span class="number">120</span>*<span class="number">2</span>:</span><br><span class="line">        var = VarCalculation(values_buf)</span><br><span class="line">        <span class="keyword">print</span> var</span><br><span class="line">        <span class="keyword">if</span> var &gt;= <span class="number">0.0003</span>:</span><br><span class="line">            state = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            state = <span class="number">0</span></span><br><span class="line">        <span class="keyword">del</span>(values_buf[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> len(values_buf) &lt; <span class="number">120</span>*<span class="number">0.3</span>:</span><br><span class="line">        state = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">del</span>(values_buf[<span class="number">0</span>])</span><br><span class="line">        state = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">VarCalculation</span><span class="params">(values_buf)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    m = len(values_buf)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        sum += values_buf[i]</span><br><span class="line">    dAve = sum/m;</span><br><span class="line">    dVar = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        dVar += (values_buf[i]-dAve)*(values_buf[i]-dAve);</span><br><span class="line">    <span class="keyword">return</span> dVar/m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LowPassFilter</span><span class="params">(values, time)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> values</span><br><span class="line">    <span class="keyword">global</span> output</span><br><span class="line">    <span class="keyword">global</span> startTime</span><br><span class="line">    <span class="keyword">global</span> timestamp</span><br><span class="line">    <span class="keyword">global</span> dt</span><br><span class="line">    <span class="keyword">global</span> alpha</span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">if</span> startTime == <span class="number">0</span>:</span><br><span class="line">        startTime = time*<span class="number">1000</span></span><br><span class="line">    timestamp = time*<span class="number">1000</span>+<span class="number">0.0000001</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    dt = <span class="number">1.0</span> / (count/(float((timestamp-startTime))/<span class="number">1000.0</span>))</span><br><span class="line">    alpha = <span class="number">0.05</span> / (<span class="number">0.05</span> + dt)</span><br><span class="line"><span class="comment">#     print(startTime, timestamp, count, dt, alpha)</span></span><br><span class="line">    <span class="keyword">if</span> count &gt; <span class="number">5</span>:</span><br><span class="line">        output[<span class="number">0</span>] = alpha * output[<span class="number">0</span>] + (<span class="number">1</span>-alpha)*values[<span class="number">0</span>]</span><br><span class="line">        output[<span class="number">1</span>] = alpha * output[<span class="number">1</span>] + (<span class="number">1</span>-alpha)*values[<span class="number">1</span>]</span><br><span class="line">        output[<span class="number">2</span>] = alpha * output[<span class="number">2</span>] + (<span class="number">1</span>-alpha)*values[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output[<span class="number">0</span>] = values[<span class="number">0</span>]</span><br><span class="line">        output[<span class="number">1</span>] = values[<span class="number">1</span>]</span><br><span class="line">        output[<span class="number">2</span>] = values[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">print</span> output</span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><h2 id="5-2-数据点对齐"><a href="#5-2-数据点对齐" class="headerlink" title="5.2 数据点对齐"></a>5.2 数据点对齐</h2><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = len(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> end + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定一个元素，在制定list中查找最相邻的元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rIndex</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    n = len(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    mid = searchInsert(nums, target)</span><br><span class="line">    rlist = []  <span class="comment"># 保持索引</span></span><br><span class="line">    i, j = <span class="number">-1</span>, n</span><br><span class="line">    left, rigth = <span class="number">0</span>, <span class="number">0</span>  <span class="comment"># 左右扩展的标志</span></span><br><span class="line">    mxg = float(<span class="string">'-inf'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; mid &lt; n:  <span class="comment"># 如果找到了</span></span><br><span class="line">        i, j = mid<span class="number">-1</span>, mid</span><br><span class="line">        mxg = min(abs(nums[i] - target), abs(nums[j] - target))</span><br><span class="line">        left, rigth = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> mid == <span class="number">0</span>:  <span class="comment"># 小于最左边的数字</span></span><br><span class="line">        j = mid</span><br><span class="line">        mxg = abs(nums[j] - target)</span><br><span class="line">        left, rigth = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> mid == n:  <span class="comment"># 大于最右边的数字</span></span><br><span class="line">        i = mid<span class="number">-1</span></span><br><span class="line">        mxg = abs(nums[i] - target)</span><br><span class="line">        left, rigth = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> left == <span class="number">1</span> <span class="keyword">or</span> rigth == <span class="number">1</span>:  <span class="comment"># 两边查找</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">-1</span>: left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> j == n: rigth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> left == <span class="number">1</span> <span class="keyword">and</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">            le = abs(nums[i] - target)</span><br><span class="line">            <span class="keyword">if</span> le == mxg:</span><br><span class="line">                rlist = [i] + rlist</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> rigth == <span class="number">1</span> <span class="keyword">and</span> j &lt; len(nums):</span><br><span class="line">            ri = abs(nums[j] - target)</span><br><span class="line">            <span class="keyword">if</span> mxg == ri:</span><br><span class="line">                rlist = rlist + [j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rigth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> rlist</span><br></pre></td></tr></table></figure><h2 id="5-3-向量转四元数"><a href="#5-3-向量转四元数" class="headerlink" title="5.3 向量转四元数"></a>5.3 向量转四元数</h2><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quaternion_from_two_vectors</span><span class="params">(v1, v2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Compute quaternion from two vectors. v1 and v2 need not be normalized.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param v1: starting vector</span></span><br><span class="line"><span class="string">    :param v2: ending vector</span></span><br><span class="line"><span class="string">    :return Quaternion representation of rotation that rotate v1 to v2.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    v1n = v1 / np.linalg.norm(v1)</span><br><span class="line">    <span class="comment">#     print(v1n)</span></span><br><span class="line">    v2n = v2 / np.linalg.norm(v2)</span><br><span class="line">    <span class="comment">#     print(v2n)</span></span><br><span class="line">    w = np.cross(v1n, v2n)</span><br><span class="line">    <span class="comment">#     print("w = &#123;&#125;".format(w))</span></span><br><span class="line">    q = np.array([<span class="number">1.0</span> + np.dot(v1n, v2n), *w])</span><br><span class="line">    <span class="comment">#     print("q = &#123;&#125;".format(q))</span></span><br><span class="line">    q /= np.linalg.norm(q)</span><br><span class="line">    <span class="comment">#     print("q_normlizaed = &#123;&#125;".format(q))</span></span><br><span class="line">    <span class="keyword">return</span> quaternion.quaternion(*q)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> SLAM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux实战技能（三）-系统管理</title>
      <link href="/2019/12/06/programmings/linux/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%EF%BC%88%E4%B8%89%EF%BC%89-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
      <url>/2019/12/06/programmings/linux/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%EF%BC%88%E4%B8%89%EF%BC%89-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-网络管理"><a href="#1-网络管理" class="headerlink" title="1. 网络管理"></a>1. 网络管理</h1><h2 id="1-1-⽹络状态查看"><a href="#1-1-⽹络状态查看" class="headerlink" title="1.1 ⽹络状态查看"></a>1.1 ⽹络状态查看</h2><ul><li>net-tools<ul><li>ifconfig<ul><li>eth0 第⼀块⽹卡（⽹络接口）</li><li>查看⽹卡物理连接情况<ul><li>mii-tool eth0</li></ul></li></ul></li><li>route<ul><li>查看⽹网关<ul><li>route -n</li><li>使⽤ -n 参数不解析主机名</li></ul></li><li>添加⽹关<ul><li>route add default gw &lt;⽹网关ip&gt;</li><li>route add -host &lt;指定ip&gt; gw &lt;⽹网关ip&gt;</li><li>route add -net &lt;指定⽹网段&gt; netmask &lt;⼦子⽹网掩码&gt; gw &lt;⽹网关ip&gt;</li></ul></li></ul></li><li>netstat</li></ul></li><li>Iproute<ul><li>ip<ul><li>ip addr ls<ul><li>ifconfig</li></ul></li><li>ip link set dev eth0 up<ul><li>ifup eth0</li></ul></li><li>ip addr add 10.0.0.1/24 dev eth1<ul><li>ifconfig eth1 10.0.0.1 netmask 255.255.255.0</li></ul></li><li>ip route add 10.0.0/24 via 192.168.0.1<ul><li>route add -net 10.0.0.0 netmask 255.255.255.0 gw 192.168.0.1</li></ul></li></ul></li><li>Ss</li></ul></li></ul><h2 id="1-2-⽹络故障排除命令"><a href="#1-2-⽹络故障排除命令" class="headerlink" title="1.2 ⽹络故障排除命令"></a>1.2 ⽹络故障排除命令</h2><ul><li>ping<ul><li>网络通不通</li></ul></li><li>traceroute<ul><li>路由</li></ul></li><li>mtr<ul><li>丢包</li></ul></li><li>nslookup<ul><li>域名访问</li></ul></li><li>telnet<ul><li>端口问题</li></ul></li><li>tcpdump</li><li>netstat</li><li>ss</li></ul><h2 id="1-3-网络服务管理"><a href="#1-3-网络服务管理" class="headerlink" title="1.3 网络服务管理"></a>1.3 网络服务管理</h2><ul><li>⽹络服务管理程序分为两种，分别为SysV和systemd<ul><li>service network start|stop|restart</li><li>chkconfig -list network</li><li>systemctl list-unit-files NetworkManager.service</li><li>systemctl start|stop|restart NetworkManger</li><li>systemctl enable|disable NetworkManger</li></ul></li><li>主机名<ul><li>hostname</li><li>hostname c7.test11</li><li>hostname set-hostname c7.test11</li></ul></li></ul><h1 id="2-软件安装"><a href="#2-软件安装" class="headerlink" title="2. 软件安装"></a>2. 软件安装</h1><ul><li>rpm 包和 rpm 命令</li><li>yum 仓库</li><li>源代码编译安装</li><li>内核升级</li><li>grub 配置⽂文件</li></ul><h2 id="2-1-软件包管理器"><a href="#2-1-软件包管理器" class="headerlink" title="2.1 软件包管理器"></a>2.1 软件包管理器</h2><ul><li>包管理器是⽅便软件安装、卸载，解决软件依赖关系的重要工具</li><li>CentOS、RedHat 使⽤ yum 包管理器，软件安装包格式为 rpm</li><li>Debian、Ubuntu 使⽤ apt 包管理器，软件安装包格式为 deb</li><li>rpm 包<ul><li>vim-common-7.4.10-5.el7.x86_64.rpm</li><li>软件名称 软件版本 系统版本 平台</li></ul></li><li>rpm 命令常⽤参数<ul><li>-q 查询软件包</li><li>-i 安装软件包</li><li>-e 卸载软件包</li></ul></li><li>rpm 包的问题<ul><li>需要⾃己解决依赖关系</li><li>软件包来源不不可靠</li></ul></li></ul><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示已经安装的rpm软件包</span></span><br><span class="line">$ rpm -qa</span><br><span class="line"><span class="comment"># 分屏显示</span></span><br><span class="line">$ rpm -qa | more</span><br><span class="line"><span class="comment"># 查询安装的vim软件包</span></span><br><span class="line">$ rpm -q vim*</span><br><span class="line"><span class="comment"># 卸载软件包</span></span><br><span class="line">$ rpm -e vim*</span><br><span class="line"><span class="comment"># 卸载多个软件包</span></span><br><span class="line">$ rpm -e vim* tmux*</span><br></pre></td></tr></table></figure><h2 id="2-2-yum管理软件包"><a href="#2-2-yum管理软件包" class="headerlink" title="2.2 yum管理软件包"></a>2.2 yum管理软件包</h2><ul><li>yum 配置⽂件<ul><li>/etc/yum.repos.d/CentOS-Base.repo</li></ul></li><li>常⽤选项<ul><li>install 安装软件包</li><li>remove 卸载软件包</li><li>list| grouplist 查看软件包</li><li>update 升级软件包</li></ul></li><li>更改yum仓库镜像<ul><li>备份<ul><li>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</li></ul></li><li>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></li><li>yum makecache</li></ul></li><li>yum install vim</li><li>yum remove vim</li><li>yum update</li></ul><h2 id="2-3-其他安装方式"><a href="#2-3-其他安装方式" class="headerlink" title="2.3 其他安装方式"></a>2.3 其他安装方式</h2><ul><li>⼆进制安装</li><li>源代码编译安装<ul><li>wget <a href="https://openresty.org/download/openresty-1.15.8.1.tar.gz" target="_blank" rel="noopener">https://openresty.org/download/openresty-1.15.8.1.tar.gz</a></li><li>tar -zxf openresty-VERSION.tar.gz</li><li>cd openresty-VERSION/</li><li>./configure —prefix=/usr/local/openresty</li><li>make -j2</li><li>make install</li></ul></li></ul><h2 id="2-4-升级内核"><a href="#2-4-升级内核" class="headerlink" title="2.4 升级内核"></a>2.4 升级内核</h2><ul><li><p>rpm 格式内核</p><ul><li>查看内核版本<ul><li>uname –r</li></ul></li></ul></li><li><p>yum安装</p><ul><li>升级内核版本<ul><li>yum install kernel-3.10.0</li></ul></li><li>升级已安装的其他软件包和补丁<ul><li>yum update</li></ul></li></ul></li><li><p>源代码编译安装内核</p><ul><li><p>安装依赖包</p><ul><li>yum install gcc gcc-c++ make ncurses-devel openssl-devel elfutils-libelf-devel</li></ul></li><li><p>下载并解压缩内核</p><ul><li><a href="https://www.kernel.org" target="_blank" rel="noopener">https://www.kernel.org</a></li><li>tar xvf linux-5.1.10.tar.xz -C /usr/src/kernels</li></ul></li><li><p>配置内核编译参数</p><ul><li>cd /usr/src/kernels/linux-5.1.10/</li><li>make menuconfig | allyesconfig | allnoconfig</li></ul></li><li><p>使⽤当前系统内核配置</p><ul><li><p>cp /boot/config-kernelversion.platform /usr/src/kernels/</p><p>  linux-5.1.10/.config</p></li></ul></li><li><p>编译</p><ul><li>make -j2 all</li><li>其中CPU数目可通过命令lscpu查询</li></ul></li><li><p>安装内核</p><ul><li>安装内核支持的组件<ul><li>make modules_install</li></ul></li><li>安装内核<ul><li>make install</li></ul></li></ul></li></ul></li></ul><h2 id="2-5-grub-配置⽂件"><a href="#2-5-grub-配置⽂件" class="headerlink" title="2.5 grub 配置⽂件"></a>2.5 grub 配置⽂件</h2><ul><li>grub 配置⽂件<ul><li>基本grub配置<ul><li>/etc/default/grub</li></ul></li><li>新的grub配置文件<ul><li>/etc/grub.d/</li><li>/boot/grub2/grub.cfg</li><li>grub2-mkconfig -o /boot/grub2/grub.cfg</li></ul></li></ul></li></ul><h1 id="3-进程管理"><a href="#3-进程管理" class="headerlink" title="3. 进程管理"></a>3. 进程管理</h1><ul><li>进程—运⾏中的程序，从程序开始运⾏到终⽌的整个⽣生命周期是可管理的</li><li>进程也是树形结构</li><li>进程和权限有着密不可分的关系</li><li>查看命令<ul><li>ps</li><li>pstree</li><li>top</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看进行信息，包括UID、PID、PPID、C、STIME、TTY、TIME、CMD</span></span><br><span class="line">$ ps -eLf | more</span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS信息</span></span><br><span class="line">$ top</span><br><span class="line">Processes: 405 total, 5 running, 400 sleeping, 1826 threads                                                              22:02:45</span><br><span class="line">Load Avg: 3.54, 4.17, 4.47  CPU usage: 15.43% user, 19.71% sys, 64.84% idle  SharedLibs: 138M resident, 42M data, 24M linkedit.</span><br><span class="line">MemRegions: 98102 total, 2019M resident, 101M private, 1087M shared. PhysMem: 7732M used (2199M wired), 459M unused.</span><br><span class="line">VM: 1969G vsize, 1372M framework vsize, 118892587(0) swapins, 120274963(0) swapouts.</span><br><span class="line">Networks: packets: 111277167/150G <span class="keyword">in</span>, 85519715/43G out. Disks: 21984786/773G <span class="built_in">read</span>, 16581121/641G written.</span><br><span class="line">- Load Avg为平均负载，用来衡量系统的繁忙程度，包括1min, 5min, 15min</span><br><span class="line">- CPU usage为CPU利用率</span><br><span class="line">- Processes处理的任务</span><br></pre></td></tr></table></figure><ul><li>进程的优先级调整<ul><li>nice 范围从-20 到 19 ，值越⼩小优先级越⾼高，抢占资源就越多</li><li>renice 重新设置优先级</li><li>进程的作业控制<ul><li>jobs</li><li>&amp; 符号</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">:</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ./XXX.sh</span><br><span class="line">18746</span><br><span class="line"></span><br><span class="line">$ top -p 18746</span><br><span class="line">$ nice -n 10 ./XXX.sh</span><br><span class="line">$ renice -n 15 18764</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序运行在后台</span></span><br><span class="line">$ ./XXX.sh &amp;</span><br><span class="line"><span class="comment"># 程序运行在前台</span></span><br><span class="line">$ <span class="built_in">jobs</span></span><br><span class="line">$ <span class="built_in">fg</span> 1</span><br></pre></td></tr></table></figure><ul><li>进程通信信号<ul><li>Ctrl + C终止进程</li><li>kill -9 id终止id进程</li></ul></li><li>守护进程<ul><li>使⽤nohup 与 &amp; 符号配合运⾏⼀个命令<ul><li>运行的该命令将不会因为终端等关闭而终止</li></ul></li><li>screen 命令<ul><li>进入screen，命令为screen</li><li>退出，ctrl+a d</li><li>screen -ls 查看 screen 的会话</li><li>screen -r sessionid 恢复会话</li></ul></li></ul></li><li>查看系统日志<ul><li>路径为/var/log/</li><li>messages，操作日志</li><li>dmesg，内核相关日志信息</li><li>secure，安全日志</li><li>cron，计划任务日志</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行程序</span></span><br><span class="line">$ nohup sh XXX.sh &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入screen环境</span></span><br><span class="line">$ screen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复程序</span></span><br><span class="line">$ screen -r sessionid</span><br></pre></td></tr></table></figure><h1 id="4-服务管理工具"><a href="#4-服务管理工具" class="headerlink" title="4. 服务管理工具"></a>4. 服务管理工具</h1><ul><li>服务（提供常⻅功能的守护进程）集中管理工具<ul><li>service<ul><li>/etc/init.d/</li></ul></li><li>systemctl<ul><li>/usr/lib/systemd/system/</li><li>systemctl start | stop | restart | reload | enable | disable 服务名称</li></ul></li></ul></li></ul><h1 id="5-内存和磁盘管理"><a href="#5-内存和磁盘管理" class="headerlink" title="5. 内存和磁盘管理"></a>5. 内存和磁盘管理</h1><ul><li>内存使用率查看<ul><li>free<ul><li>free -m</li><li>free -g</li></ul></li><li>top</li><li>du<ul><li>du -h</li></ul></li><li>fdisk<ul><li>fdisk -l</li></ul></li><li>df<ul><li>df -h</li></ul></li></ul></li><li>文件系统<ul><li>ext4<ul><li>超级块、超级块副本</li><li>i 节点(inode)<ul><li>ls -i</li><li>记录每一个文件相关属性</li></ul></li><li>数据块(datablock)<ul><li>记录数据</li></ul></li></ul></li><li>cp更改了文件i节点和复制了数据block</li><li>mv没有改变i节点和数据block，只更改了文件名</li><li>硬链接ln，不改变文件的i节点</li><li>软连接ln -s，更改了文件i节点</li></ul></li><li>磁盘分区和挂载<ul><li>fdisk /dev/sdc</li><li>parted</li></ul></li><li>逻辑卷管理<ul><li>pvcreate /dev/sdb1</li><li>pvs，显示所有物理卷</li></ul></li></ul><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><ul><li><a href="geekbang.org">Linux实战技能100讲</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法（三）-链表</title>
      <link href="/2019/11/30/data_structure_algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89-%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/11/30/data_structure_algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><ul><li>数组需要一块连续的内存空间来存储，对内存的要求比较高，而链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用</li><li>内存块称为链表的“结点”</li><li>为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址，把这个记录下个结点地址的指针叫作后继指针 next</li><li>第一个结点叫作头结点，用来记录链表的基地址，基于头结点，可以遍历得到整条链表</li><li>最后一个结点叫作尾结点，指向一个空地址 NULL</li><li>优点<ul><li>快速插入和删除，时间复杂度为O(1)</li></ul></li><li>缺点<ul><li>无法快速的随机访问第 k 个元素，需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点，时间复杂度为O(n)</li></ul></li></ul><h1 id="2-单链表"><a href="#2-单链表" class="headerlink" title="2. 单链表"></a>2. 单链表</h1><ul><li>结点定义<ul><li>结点由存放数据元素的数据域存放后继结点地址的指针域组成</li><li>假设p是指向线性表第i个元素的指针，则该结点ai的数据域我们可以用p-&gt;data来表示，p-&gt;data的值是一个数据元素，结点ai的指针域可以用 p-&gt;next来表示，p-&gt;next的值是一个指针。p-&gt;next指向第i+1个元素，即指向ai+1的指针</li><li>关于结构体”struct Node *next;”，next是指向下一个Node，所以其类型必须是Node，但是 Node 是结构体，所以前面还得加上个 struct</li><li>“Node(const int&amp; d): data(d), next(NULL) {}”是结构体的构造函数，d=T()来指定默认值，用构造函数来初始化成员变量data和指针，所有数据类型，默认初始化都为0，这里data默认初始化为0</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">  Node(<span class="keyword">const</span> ElemType&amp; d = ElemType()): data(d), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LinkList</span>;</span></span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-11-30-133845.png" alt="image-20191130213822896" style="zoom:50%;"></p><p>（图片来源：<a href="https://blog.csdn.net/sinat_20265495/article/details/52716710）" target="_blank" rel="noopener">https://blog.csdn.net/sinat_20265495/article/details/52716710）</a></p><ul><li>创建头结点<ul><li>新建节点Node，将Node的next置为NULL</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><ul><li>从头插入一个新的节点<ul><li>新建新节点p，p的next的指向head-&gt;next所指向的地址</li><li>head-&gt;next指向p</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Node * p = <span class="keyword">new</span> Node(<span class="keyword">int</span>);</span><br><span class="line">p-&gt;next = data-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br></pre></td></tr></table></figure><ul><li>删除指定节点<ul><li>先遍历到指定节点的前一个节点</li><li>将前一个节点的next指针指向指定节点的下一个节点，达到悬空指定节点的效果</li><li>删除指定节点</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Node * p = find(d);</span><br><span class="line">Node *q = p-&gt;next;</span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br></pre></td></tr></table></figure><ul><li>修改指定节点<ul><li>遍历到指定节点的位置</li><li>将其data修改为要修改的值</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node *p = find(d);</span><br><span class="line">p-&gt;next-&gt;data = d_new;</span><br></pre></td></tr></table></figure><ul><li>链表反转<ul><li>定义三个临时节点指向头结点之后的第1个节点p，第2个节点q和第3个节点m</li><li>将p-&gt;next置为空</li><li>将q-&gt;next = p</li><li>将p向后移动一个节点，即p = q</li><li>将q向后移动一个节点，即q = m</li><li>把m向后移动一个节点，即m = m-&gt;next;</li><li>依此类推直到m等于NULL</li><li>将q-&gt;next = p</li><li>将head-&gt;next指向q（即目前第一个节点，也就是原本最后的一个节点）</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Node *p = head-&gt;next;</span><br><span class="line">Node *q = head-&gt;next-&gt;next;</span><br><span class="line">Node *m = head-&gt;next-&gt;next-&gt;next;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(m) &#123;</span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">    p = q;</span><br><span class="line">    q = m;</span><br><span class="line">    m = m-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">q-&gt;next = p;</span><br><span class="line">head-&gt;next = q;</span><br></pre></td></tr></table></figure><p>代码如下:</p><ul><li>List.hpp</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Xiaoqiang Teng on 2019/11/30.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DATA_STRUCTURE_LIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_STRUCTURE_LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    List();</span><br><span class="line">    ~List();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InsertPos</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d_new)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Erase</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Updata</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d_new)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        Node * next;</span><br><span class="line">        Node(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d):data(d),next(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Node *head;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node * p = head;</span><br><span class="line">        <span class="keyword">while</span>(p) &#123;</span><br><span class="line">            Node * q = p-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">            p = q;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node* <span class="title">find</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span> </span>&#123;</span><br><span class="line">        Node * p = head;</span><br><span class="line">        <span class="keyword">for</span>(; p; p = p-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;next-&gt;data == d)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//DATA_STRUCTURE_LIST_H</span></span></span><br></pre></td></tr></table></figure><ul><li>List.cpp</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Xiaoqiang Teng on 2019/11/30.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"></span><br><span class="line">List::List() &#123;</span><br><span class="line">    CreateList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List::~List() &#123;</span><br><span class="line">    Clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::CreateList() &#123;</span><br><span class="line">    head = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::Insert(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d) &#123;</span><br><span class="line">    Node *p = <span class="keyword">new</span> Node(d);</span><br><span class="line">    p-&gt;next = head-&gt;next;</span><br><span class="line">    head-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::InsertPos(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d_new) &#123;</span><br><span class="line">    Node *p = find(d);</span><br><span class="line">    Node *q = <span class="keyword">new</span> Node(d_new);</span><br><span class="line">    q-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = q;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::Erase(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d) &#123;</span><br><span class="line">    Node *p = find(d);</span><br><span class="line">    Node *q = p-&gt;next;</span><br><span class="line">    p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::Updata(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d_new) &#123;</span><br><span class="line">    Node *p = find(d);</span><br><span class="line">    p-&gt;next-&gt;data = d_new;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::Reverse() &#123;</span><br><span class="line">    Node *p = head-&gt;next;</span><br><span class="line">    Node *q = head-&gt;next-&gt;next;</span><br><span class="line">    Node *m = head-&gt;next-&gt;next-&gt;next;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(m) &#123;</span><br><span class="line">        q-&gt;next = p;</span><br><span class="line">        p = q;</span><br><span class="line">        q = m;</span><br><span class="line">        m = m-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">    head-&gt;next = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::Print() &#123;</span><br><span class="line">    <span class="keyword">for</span> (Node * p = head-&gt;next; p; p = p-&gt;next) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码参考：<a href="https://www.cnblogs.com/scandy-yuan/archive/2013/01/06/2847801.html" target="_blank" rel="noopener">https://www.cnblogs.com/scandy-yuan/archive/2013/01/06/2847801.html</a></p><h1 id="3-单向循环链表"><a href="#3-单向循环链表" class="headerlink" title="3. 单向循环链表"></a>3. 单向循环链表</h1><ul><li>单向循环链表和单向链表差不多，只不过是最后的尾节点指向的不是空，而是指向头节点</li><li>优点是从链尾到链头比较方便。当要处理的数据具有环型结构特点时，就特别适合采用循环链表</li></ul><p>代码如下：</p><ul><li>CircularList.hpp</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Xiaoqiang Teng on 2019/11/30.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DATA_STRUCTURE_CIRCULARLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_STRUCTURE_CIRCULARLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *pNext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularList</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CircularList();</span><br><span class="line">    ~CircularList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TraverseLinkList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InsertNode</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> d)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DeleteNode</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DeleteLinkList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node *head;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//DATA_STRUCTURE_CIRCULARLIST_H</span></span></span><br></pre></td></tr></table></figure><ul><li>CircularList.cpp</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Xiaoqiang Teng on 2019/11/30.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CircularList.h"</span></span></span><br><span class="line"></span><br><span class="line">CircularList::CircularList() &#123;</span><br><span class="line">    head = <span class="keyword">new</span> Node;</span><br><span class="line">    head-&gt;data = <span class="number">0</span>;</span><br><span class="line">    head-&gt;pNext = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CircularList::~CircularList() &#123;</span><br><span class="line">    <span class="keyword">delete</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CircularList::CreateList(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *pnew, *ptemp = head;</span><br><span class="line">    <span class="keyword">int</span> i = n;</span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        pnew = <span class="keyword">new</span> Node;</span><br><span class="line">        pnew-&gt;data = n;</span><br><span class="line">        pnew-&gt;pNext = head;</span><br><span class="line">        ptemp-&gt;pNext = pnew;</span><br><span class="line">        ptemp = pnew;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CircularList::TraverseLinkList() &#123;</span><br><span class="line">    Node *ptemp = head-&gt;pNext;</span><br><span class="line">    <span class="keyword">while</span> (ptemp != head) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptemp-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        ptemp = ptemp-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CircularList::IsEmpty() &#123;</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;pNext == head) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CircularList::GetLength() &#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    Node *ptemp = head-&gt;pNext;</span><br><span class="line">    <span class="keyword">while</span> (ptemp != head) &#123;</span><br><span class="line">        n ++;</span><br><span class="line">        ptemp = ptemp-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CircularList::InsertNode(<span class="keyword">int</span> position, <span class="keyword">int</span> d) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; GetLength() + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *pnew, *ptemp = head;</span><br><span class="line">    pnew = <span class="keyword">new</span> Node;</span><br><span class="line">    pnew-&gt;data = d;</span><br><span class="line">    <span class="keyword">while</span> (position-- &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        ptemp = ptemp-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    pnew-&gt;pNext = ptemp-&gt;pNext;</span><br><span class="line">    ptemp-&gt;pNext = pnew;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CircularList::DeleteNode(<span class="keyword">int</span> position) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; GetLength()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *ptemp = head, *pdelete;</span><br><span class="line">    <span class="keyword">while</span> (position-- &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        ptemp = ptemp-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    pdelete = ptemp-&gt;pNext;</span><br><span class="line">    ptemp-&gt;pNext = pdelete-&gt;pNext;</span><br><span class="line">    <span class="keyword">delete</span> pdelete;</span><br><span class="line">    pdelete = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CircularList::DeleteLinkList() &#123;</span><br><span class="line">    Node *pdelete = head-&gt;pNext, *ptemp;</span><br><span class="line">    <span class="keyword">while</span> (pdelete != head) &#123;</span><br><span class="line">        ptemp = pdelete-&gt;pNext;</span><br><span class="line">        head-&gt;pNext = ptemp;</span><br><span class="line">        <span class="keyword">delete</span> pdelete;</span><br><span class="line">        pdelete = ptemp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码参考：<a href="https://blog.csdn.net/fisherwan/article/details/25561857" target="_blank" rel="noopener">https://blog.csdn.net/fisherwan/article/details/25561857</a></p><h1 id="4-双向链表"><a href="#4-双向链表" class="headerlink" title="4. 双向链表"></a>4. 双向链表</h1><ul><li>双向链表支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点</li><li>双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表操作的灵活性</li><li>用空间换时间</li><li>从结构上来看，双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点，使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效</li><li>优点<ul><li>插入效率高，双向链表中的结点已经保存了前驱结点的指针，不需要像单链表那样遍历</li><li>查找效率高，可以记录上次查找的位置 p，每次查询时，根据要查找的值与 p 的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据</li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.cnblogs.com/scandy-yuan/archive/2013/01/06/2847801.html" target="_blank" rel="noopener">C++ 单链表基本操作分析与实现</a></li><li><a href="https://blog.csdn.net/fisherwan/article/details/25561857" target="_blank" rel="noopener">C++版）链表（二）——实现单项循环链表创建、插入、删除等操作</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux实战技能（二）-常用命令</title>
      <link href="/2019/11/27/programmings/linux/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/11/27/programmings/linux/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>常用命令包括：</p><ul><li>pwd</li><li>ls</li><li>cp/mv</li><li>文本查看命令</li></ul><h1 id="2-文本查看命令"><a href="#2-文本查看命令" class="headerlink" title="2. 文本查看命令"></a>2. 文本查看命令</h1><ul><li>cat<ul><li>⽂文本内容显示到终端</li></ul></li><li>head<ul><li>查看⽂文件开头</li></ul></li><li>tail<ul><li>查看⽂文件结尾，常⽤用参数 -f ⽂文件内容更更新后，显示信息同步更更新</li></ul></li><li>wc<ul><li>统计⽂文件内容信息</li></ul></li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示文件所有内容</span></span><br><span class="line">$ cat test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件前10行内容</span></span><br><span class="line">$ head -10 test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件末尾2行内容</span></span><br><span class="line">$ tail -2 test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新显示文件末尾内容</span></span><br><span class="line">$ tail -f test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计文件内容行数</span></span><br><span class="line">$ wc -l test.txt</span><br></pre></td></tr></table></figure><h1 id="3-文件打包和压缩"><a href="#3-文件打包和压缩" class="headerlink" title="3. 文件打包和压缩"></a>3. 文件打包和压缩</h1><ul><li>打包<ul><li>最早的 Linux 备份介质是磁带，使⽤用的命令是 tar</li><li>tar 打包命令<ul><li>c 打包</li><li>x 解包</li><li>f 指定操作类型为⽂文件</li></ul></li></ul></li><li>压缩<ul><li>可以打包后的磁带⽂文件进⾏行行压缩储存，压缩的命令是 gzip 和 bzip2</li><li>经常使⽤用的扩展名是 .tar.gz .tar.bz2 .tgz</li></ul></li><li>解压缩<ul><li>-z gzip 格式压缩和解压缩</li><li>-j bzip2 格式压缩和解压缩</li></ul></li></ul><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将test.txt文件进行打包为文件</span></span><br><span class="line">$ tar cf test.tar test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将test.txt文件进行打包为文件并压缩</span></span><br><span class="line">$ tar czf test.tar.gz test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将test.tar解压缩到test文件夹下</span></span><br><span class="line">$ tar xf test.tar -C <span class="built_in">test</span>/</span><br></pre></td></tr></table></figure><h1 id="4-强⼤的⽂文本编辑器器-vi"><a href="#4-强⼤的⽂文本编辑器器-vi" class="headerlink" title="4. 强⼤的⽂文本编辑器器 vi"></a>4. 强⼤的⽂文本编辑器器 vi</h1><ul><li><p>模式</p><ul><li>正常模式 (Normal-mode)<ul><li>esc 从其他模式回到正常模式</li></ul></li><li>插⼊模式 (Insert-mode)<ul><li>i I a A o O 进⼊插⼊模式</li></ul></li><li>命令模式 (Command-mode)<ul><li>： 进⼊入命令模式</li></ul></li><li>可视模式 (Visual-mode)<ul><li>v V ctrl+v 进⼊入可视化模式</li></ul></li></ul></li><li><p>基本操作</p><p> | 操作                         | 命令                                                         |<br> | :—————————————- | :—————————————————————————————- |<br> | 复制单行/多行/当前位置至行尾 | Yy / n+yy，其中n表示行数 / y+$                               |<br> | 剪切/当前位置至行尾          | dd / d$                                                      |<br> | 粘贴                         | p                                                            |<br> | 撤销                         | u                                                            |<br> | 重做                         | ctrl + r                                                     |<br> | 删除单个字符                 | x                                                            |<br> | 替换单个字符                 | r                                                            |<br> | 定位指定的⾏                 | G                                                            |<br> | 定位到⾏⾸                   | ^                                                            |<br> | 定位到⾏尾                   | $                                                            |<br> | 写入                         | :w                                                           |<br> | 退出                         | :q                                                           |<br> | 执⾏Shell 命令               | :!                                                           |<br> | 替换                         | :s                                                           |<br> | 查找                         | /                                                            |<br> | 设置命令                     | :set，如：”:set nu”，设置显示行号                            |<br> | 左右上下移动                 | hjkl                                                         |<br> | 在VIM中执行Shell命令         | :!，如：”:!ifconfig”，查看网络IP地址                         |<br> | 查找和移动                   | /和n/N                                                       |<br> | 替换                         | :s（只针对光标所在行），:%s（针对整个文件），如：”:%s/x/X”，将x替换为X，全局替换：”:%s/x/X/g”，在指定行内替换：”:3,5s/x/X/g” |<br> | 可视模式                     | ctrl+v 块可视模式                                            |</p></li></ul><h1 id="5-用户与权限管理理"><a href="#5-用户与权限管理理" class="headerlink" title="5. 用户与权限管理理"></a>5. 用户与权限管理理</h1><ul><li>多用户操作系统的⽬的是隔离<ul><li>用户权限隔离</li><li>系统资源隔离</li><li>root ⽤用户与普通⽤用户的区别</li></ul></li></ul><h2 id="5-1-用户管理理常⽤用命令"><a href="#5-1-用户管理理常⽤用命令" class="headerlink" title="5.1 用户管理理常⽤用命令"></a>5.1 用户管理理常⽤用命令</h2><div class="table-container"><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>useradd</td><td>新建用户</td></tr><tr><td>userdel</td><td>删除⽤户</td></tr><tr><td>passwd</td><td>修改⽤户密码</td></tr><tr><td>usermod</td><td>修改⽤户属性</td></tr><tr><td>chage</td><td>修改⽤户属性</td></tr><tr><td>id username</td><td>查找某个用户是否存在</td></tr><tr><td>groupadd</td><td>新建用户组</td></tr><tr><td>groupdel</td><td>删除⽤户组</td></tr><tr><td>sudo</td><td>以其他⽤户身份执⾏行行命令</td></tr><tr><td>visudo</td><td>设置需要使用 sudo 的用户（组）</td></tr></tbody></table></div><ul><li>例子</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 删除用户，保留home目录</span><br><span class="line"><span class="comment"># userdel XXX</span></span><br><span class="line"></span><br><span class="line">// 删除用户，不保留home目录</span><br><span class="line"><span class="comment"># userdel -r XXX</span></span><br><span class="line"></span><br><span class="line">// 修改某一用户的密码</span><br><span class="line"><span class="comment"># passwd XXX</span></span><br><span class="line">// 修改当前用的密码</span><br><span class="line"><span class="comment"># passwd</span></span><br><span class="line"></span><br><span class="line">// 修改用户的home目录</span><br><span class="line"><span class="comment"># usermod -d /home/XXX XXX</span></span><br><span class="line"></span><br><span class="line">// 建立用户组</span><br><span class="line"><span class="comment"># groupadd groupXXX</span></span><br><span class="line"><span class="comment"># usermod -g groupXXX XXX</span></span><br><span class="line">// 新建用户和用户组</span><br><span class="line"><span class="comment"># useradd -g groupXXX XXX</span></span><br><span class="line"></span><br><span class="line">// 切换用户</span><br><span class="line"><span class="comment"># su XXX</span></span><br><span class="line">// 切换用户并跳转至该用户的根目录</span><br><span class="line"><span class="comment"># su - XXX</span></span><br></pre></td></tr></table></figure><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-03-162653.png" alt="image-20191204002646432"></p><p>其中，users代表用户，如果对用户组进行设置，在user前加%。</p><h2 id="5-2-查看文件权限的⽅方法"><a href="#5-2-查看文件权限的⽅方法" class="headerlink" title="5.2 查看文件权限的⽅方法"></a>5.2 查看文件权限的⽅方法</h2><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-12-05-154046.png" alt="image-20191205234045988" style="zoom:30%;"></p><ul><li>类型<ul><li>-表示文件</li><li>d表示文件夹</li><li>b表示块特殊文件</li><li>c表示字符特殊⽂件</li><li>l表示符号链接</li><li>f表示命名管道</li><li>s表示套接字⽂件</li></ul></li><li>权限<ul><li>前三个表示用户的权限、中间三个表示用户组的权限、最后三个表示其他用户权限</li><li>r表示读，可用数字4表示</li><li>w表示写，可用数字2表示</li><li>x表示执行，可用数字1表示</li></ul></li><li>创建新⽂件有默认权限，根据 umask 值计算，属主和属组根据当前进程的⽤户来设定</li><li>修改权限命令<ul><li>chmod 修改⽂件、⽬录权限</li><li>chmod u+x /tmp/testfile</li><li>chmod 755 /tmp/testfile</li><li>chown 更更改属主、属组</li><li>chgrp 可以单独更改属组，不常⽤</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 字符权限</span><br><span class="line"><span class="comment"># chmod u+x /tmp/testfile</span></span><br><span class="line"><span class="comment"># chmod g+x /tmp/testfile</span></span><br><span class="line"><span class="comment"># chmod o+x /tmp/testfile</span></span><br><span class="line"><span class="comment"># chmod a+x /tmp/testfile</span></span><br><span class="line"></span><br><span class="line">// 数字权限</span><br><span class="line"><span class="comment"># chmod 644 file_name</span></span><br></pre></td></tr></table></figure><h2 id="5-3-特殊权限"><a href="#5-3-特殊权限" class="headerlink" title="5.3 特殊权限"></a>5.3 特殊权限</h2><ul><li>SUID<ul><li>⽤于⼆进制可执⾏文件，执⾏命令时取得⽂件属主权限</li><li>/usr/bin/passwd</li></ul></li><li>SGID<ul><li>⽤于⽬录，在该⽬录下创建新的⽂件和⽬录，权限⾃动更改为该目录的属组</li></ul></li><li>SBIT<ul><li>⽤于⽬录，该⽬录下新建的⽂件和⽬录，仅 root 和⾃己可以删除</li></ul></li></ul><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><ul><li><a href="geekbang.org">Linux实战技能100讲</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法（二）-数组</title>
      <link href="/2019/11/24/data_structure_algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89-%E6%95%B0%E7%BB%84/"/>
      <url>/2019/11/24/data_structure_algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p><ul><li>线性<ul><li>线性表就是数据排成像一条线一样的结构</li><li>每个线性表上的数据最多只有前和后两个方向</li></ul></li><li>连续的内存空间和相同类型的数据</li></ul><h1 id="2-高效的随机访问"><a href="#2-高效的随机访问" class="headerlink" title="2. 高效的随机访问"></a>2. 高效的随机访问</h1><p>计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[i]_address = base_address + i * data_type_size</span><br></pre></td></tr></table></figure><p>其中 data_type_size 表示数组中每个元素的大小。我们举的这个例子里，数组中存储的是 int 类型数据，所以 data_type_size 就为 4 个字节。这个公式非常简单，我就不多做解释了。</p><p>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。</p><h1 id="3-低效的“插入”和“删除”"><a href="#3-低效的“插入”和“删除”" class="headerlink" title="3. 低效的“插入”和“删除”"></a>3. 低效的“插入”和“删除”</h1><p>假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。删除操作跟插入数据类似，如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。</p><h1 id="4-数组编码练习"><a href="#4-数组编码练习" class="headerlink" title="4. 数组编码练习"></a>4. 数组编码练习</h1><p>例：实现STL库中vector。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DATA_STRUCTURE_STL_VECTOR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_STRUCTURE_STL_VECTOR_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>=<span class="title">std</span>:</span>:allocator&lt;T&gt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">STDVector</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> Tvalue_type;</span><br><span class="line">    <span class="keyword">typedef</span> value_type*iterator;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">const</span> value_type*const_iterator;</span><br><span class="line">    <span class="keyword">typedef</span> value_type&amp;reference;</span><br><span class="line">    <span class="keyword">typedef</span> value_type*pointer;</span><br><span class="line">    <span class="keyword">typedef</span><span class="keyword">size_t</span>size_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>difference_type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">std</span>::allocator&lt;value_type&gt; _alloc;</span><br><span class="line">    iterator _start;</span><br><span class="line">    iterator _end;</span><br><span class="line">    iterator _end_of_storage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    STDVector() :_start(<span class="number">0</span>), _end(<span class="number">0</span>), _end_of_storage(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    STDVector(size_type n, <span class="keyword">const</span> T&amp; value);</span><br><span class="line">    STDVector(size_type n);</span><br><span class="line">    STDVector(iterator first, iterator last);</span><br><span class="line">    STDVector(<span class="keyword">const</span> STDVector&amp; v);</span><br><span class="line">    STDVector&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> STDVector&amp; rhs);</span><br><span class="line">    ~STDVector() &#123; _destroy(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _start; &#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _end; &#125;</span><br><span class="line">    <span class="function">const_iterator <span class="title">cbegin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _start; &#125;</span><br><span class="line">    <span class="function">const_iterator <span class="title">cend</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _end; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> size_type(end() - begin()); &#125;</span><br><span class="line">    <span class="function">size_type <span class="title">capacity</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> size_type(_end_of_storage - begin()); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> begin() == end(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(STDVector &amp;other)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *begin(); &#125;</span><br><span class="line">    <span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *(end() - <span class="number">1</span>); &#125;</span><br><span class="line">    reference <span class="keyword">operator</span>[] (size_type n) &#123; <span class="keyword">return</span> *(begin() + n); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert_aux</span><span class="params">(iterator positon, <span class="keyword">const</span> T&amp; x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> T&amp; value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator position, size_type n, <span class="keyword">const</span> T&amp; x)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">erase</span><span class="params">(iterator position)</span></span>;</span><br><span class="line">    <span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; erase(begin(), end()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">void</span> _destroy();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TestSTDVector</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line">STDVector&lt;T, Alloc&gt;::STDVector(size_type n, <span class="keyword">const</span> T&amp; value) &#123;</span><br><span class="line">    _start = _alloc.allocate(n);</span><br><span class="line">    <span class="built_in">std</span>::uninitialized_fill(_start, _start + n, value);</span><br><span class="line">    _end = _end_of_storage = _start + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line">STDVector&lt;T, Alloc&gt;::STDVector(size_type n) &#123;</span><br><span class="line">    _start = _alloc.allocate(n);</span><br><span class="line">    <span class="built_in">std</span>::uninitialized_fill(_start, _start + n, <span class="number">0</span>);</span><br><span class="line">    _end = _end_of_storage = _start + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line">STDVector&lt;T, Alloc&gt;::STDVector(iterator first, iterator last) &#123;</span><br><span class="line">    _start = _alloc.allocate(last - first);</span><br><span class="line">    _end = _end_of_storage = <span class="built_in">std</span>::uninitialized_copy(first, last, _start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line">STDVector&lt;T, Alloc&gt;::STDVector(<span class="keyword">const</span> STDVector&amp; v) &#123;</span><br><span class="line">    size_type n = v.cend() - v.cbegin();</span><br><span class="line">    _start = _alloc.allocate(n);</span><br><span class="line">    _end = _end_of_storage = <span class="built_in">std</span>::uninitialized_copy(v.cbegin(), v.cend(), _start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">void</span> STDVector&lt;T, Alloc&gt;::swap(STDVector &amp;other) &#123;</span><br><span class="line">    <span class="built_in">std</span>::swap(_start, other._start);</span><br><span class="line">    <span class="built_in">std</span>::swap(_end, other._end);</span><br><span class="line">    <span class="built_in">std</span>::swap(_end_of_storage, other._end_of_storage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line">STDVector&lt;T, Alloc&gt; &amp;STDVector&lt;T, Alloc&gt;::<span class="keyword">operator</span>=(<span class="keyword">const</span> STDVector &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rhs)</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    size_type n = rhs.cend() - rhs.cbegin();</span><br><span class="line">    _start = _alloc.allocate(n);</span><br><span class="line">    _end = _end_of_storage = <span class="built_in">std</span>::uninitialized_copy(rhs.cbegin(), rhs.cend(), _start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">void</span> STDVector&lt;T, Alloc&gt;::insert(iterator position, size_type n, <span class="keyword">const</span> T&amp; x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_end_of_storage - _end &gt;= n) &#123;</span><br><span class="line">            T x_copy = x;</span><br><span class="line">            <span class="keyword">const</span> size_type elem_after = _end - position;</span><br><span class="line">            iterator old_end = _end;</span><br><span class="line">            <span class="keyword">if</span> (elem_after &gt; n) &#123;</span><br><span class="line">                <span class="built_in">std</span>::uninitialized_copy(_end - n, _end, _end);</span><br><span class="line">                _end = _end + n;</span><br><span class="line">                <span class="built_in">std</span>::copy_backward(position, old_end - n, old_end);</span><br><span class="line">                <span class="built_in">std</span>::fill(position, position + n, x_copy);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">std</span>::uninitialized_fill_n(_end, n - elem_after, x_copy);</span><br><span class="line">                _end += n - elem_after;</span><br><span class="line">                <span class="built_in">std</span>::uninitialized_copy(position, old_end, _end);</span><br><span class="line">                _end += elem_after;</span><br><span class="line">                <span class="built_in">std</span>::fill(position, old_end, x_copy);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> size_type old_size = size();</span><br><span class="line">            <span class="keyword">const</span> size_type len = old_size + <span class="built_in">std</span>::max(old_size, n);</span><br><span class="line">            iterator new_start = _alloc.allocate(len);</span><br><span class="line">            iterator new_end = new_start;</span><br><span class="line">            new_end = <span class="built_in">std</span>::uninitialized_copy(_start, position , new_start);</span><br><span class="line">            new_end = <span class="built_in">std</span>::uninitialized_fill_n(new_end, n, x);</span><br><span class="line">            new_end = <span class="built_in">std</span>::uninitialized_copy(position, _end, new_end);</span><br><span class="line">            _destroy();</span><br><span class="line">            _start = new_start;</span><br><span class="line">            _end = new_end;</span><br><span class="line">            _end_of_storage = new_start + len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">void</span> STDVector&lt;T, Alloc&gt;::insert_aux(iterator positon, <span class="keyword">const</span> T&amp; x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_end != _end_of_storage) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> size_type old_size = size();</span><br><span class="line">        <span class="keyword">const</span> size_type len = old_size ? <span class="number">2</span> * old_size : <span class="number">1</span>;</span><br><span class="line">        iterator new_start = _alloc.allocate(len);</span><br><span class="line">        iterator new_end = new_start;</span><br><span class="line">        new_end = <span class="built_in">std</span>::uninitialized_copy(_start, positon, new_start);</span><br><span class="line">        _alloc.construct(new_end, x);</span><br><span class="line">        ++ new_end;</span><br><span class="line">        new_end = <span class="built_in">std</span>::uninitialized_copy(positon, _end, new_end);</span><br><span class="line">        _destroy();</span><br><span class="line">        _start = new_start;</span><br><span class="line">        _end = new_end;</span><br><span class="line">        _end_of_storage = new_start + len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">void</span> STDVector&lt;T, Alloc&gt;::push_back(<span class="keyword">const</span> T&amp; value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_end != _end_of_storage) &#123;</span><br><span class="line">        _alloc.construct(_end, value);</span><br><span class="line">        ++ _end;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert_aux(end(), value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">void</span> STDVector&lt;T, Alloc&gt;::pop_back() &#123;</span><br><span class="line">    --_end;</span><br><span class="line">    _alloc.destroy(_end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">typename</span> STDVector&lt;T, Alloc&gt;::iterator STDVector&lt;T, Alloc&gt;::erase(iterator position) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position + <span class="number">1</span> != end())</span><br><span class="line">        <span class="built_in">std</span>::copy(position + <span class="number">1</span>, end(), position);</span><br><span class="line">    --_end;</span><br><span class="line">    _alloc.destroy(_end);</span><br><span class="line">    <span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">typename</span> STDVector&lt;T, Alloc&gt;::iterator STDVector&lt;T, Alloc&gt;::erase(iterator first, iterator last) &#123;</span><br><span class="line">    difference_type left = _end - last;</span><br><span class="line">    <span class="built_in">std</span>::copy(last, _end, first);</span><br><span class="line">    <span class="function">iterator <span class="title">it</span><span class="params">(first + left)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (_end != it)</span><br><span class="line">        _alloc.destroy(--_end);</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">std</span>:</span>:allocator&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">void</span> STDVector&lt;T, Alloc&gt;::_destroy() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_start) &#123;</span><br><span class="line">        <span class="function">iterator <span class="title">it</span><span class="params">(_end)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (it != _start)</span><br><span class="line">            _alloc.destroy(--it);</span><br><span class="line">    &#125;</span><br><span class="line">    _alloc.deallocate(_start, _end_of_storage - _start);</span><br><span class="line">    _start= _end_of_storage = _end = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//DATA_STRUCTURE_STL_VECTOR_H</span></span></span><br></pre></td></tr></table></figure><p>以上代码参考：<a href="https://github.com/yqtaowhu/DataStructureAndAlgorithm/tree/master/DataStructure/vector" target="_blank" rel="noopener">https://github.com/yqtaowhu/DataStructureAndAlgorithm/tree/master/DataStructure/vector</a></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h1><ul><li>以上内容为《数据结构与算法之美》学习笔记</li><li><a href="https://github.com/yqtaowhu/DataStructureAndAlgorithm/tree/master/DataStructure/vector" target="_blank" rel="noopener">STL的vector实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法（一）-复杂度分析</title>
      <link href="/2019/11/24/data_structure_algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>/2019/11/24/data_structure_algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><ul><li>学习算法的复杂度分析的目的<ul><li>衡量你编写的算法代码的执行效率</li><li>让代码运行得更快，如何让代码更省存储空间</li></ul></li><li>复杂度分析的方法<ul><li>需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法</li><li>时间、空间复杂度分析方法</li></ul></li></ul><h1 id="2-大O表示法"><a href="#2-大O表示法" class="headerlink" title="2. 大O表示法"></a>2. 大O表示法</h1><p>$T(n) = O(f(n))$，其中$T(n)$表示代码执行的时间，n表示数据规模的大小，f(n)表示每行代码执行的次数总和，大O表示T(n)与f(n)成正比。</p><p>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。</p><p>例：</p><p>$T(n) = O(2n + 2)$和$T(n) = O(2n^2 + 2n + 3)$用大O表示法表示为$T(n) = O(n)$和$T(n) = O(n^2)$。</p><h1 id="3-时间复杂度分析"><a href="#3-时间复杂度分析" class="headerlink" title="3. 时间复杂度分析"></a>3. 时间复杂度分析</h1><ul><li>原则<ul><li>只关注循环执行次数最多的一段代码</li><li>加法法则：总复杂度等于量级最大的那段代码的复杂度<ul><li>如果$T1(n) = O(f(n))$，$T2(n) = O(g(n))$，那么$T(n) = T1(n) + T2(n) = max(O(f(n)), O(g(n)) = O(max(f(n), g(n)))$</li><li>如果$T1(n) = O(f(n))$，$T2(n) = O(g(n))$，那么$T(n) = T1(n)<em>T2(n) = O(f(n)</em>g(n))$</li></ul></li></ul></li></ul><p>例1：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> ret = <span class="number">0</span>; </span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">     ret = ret + f(i);</span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>单独看 cal() 函数。假设 f() 只是一个普通的操作，那时间复杂度就是，T1(n) = O(n)。但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)，所以，整个 cal() 函数的时间复杂度就是，<script type="math/tex">T(n) = T1(n) * T2(n) = O(n*n) = O(n^2)</script>。</p><ul><li>常见时间复杂度<ul><li>常量阶<ul><li>O(1)</li></ul></li><li>对数阶<ul><li>O(logn)</li></ul></li><li>线性阶<ul><li>O(n)</li></ul></li><li>线性对数阶<ul><li>O(nlogn)</li></ul></li><li>平方阶<ul><li>$O(n^2)$</li></ul></li><li>k次方阶<ul><li>$O(n^k)$</li></ul></li><li>指数阶<ul><li>$O(2^n)$</li></ul></li><li>阶乘阶<ul><li>O(n!)</li></ul></li></ul></li></ul><p>例2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> sum = i + j;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(1)。一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。</p><p>例3：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span> (i &lt;= n)  &#123;</span><br><span class="line">   i = i * <span class="number">2</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>变量 i 的取值就是一个等比数列。通过 $2^x = n$，求解$x=log_2n$，所以，这段代码的时间复杂度就是 $O(log_2n)$。把所有对数阶的时间复杂度都记为$O(logn)$。如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。</p><p>例4：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; m; ++i) &#123;</span><br><span class="line">    sum_1 = sum_1 + i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; j &lt; n; ++j) &#123;</span><br><span class="line">    sum_2 = sum_2 + j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum_1 + sum_2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度是O(m+n)。</p><h1 id="4-空间复杂度分析"><a href="#4-空间复杂度分析" class="headerlink" title="4. 空间复杂度分析"></a>4. 空间复杂度分析</h1><p>渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。</p><p>例5：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">  <span class="keyword">for</span> (i; i &lt;n; ++i) &#123;</span><br><span class="line">    a[i] = i * i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    print out a[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p><p>常见的空间复杂度就是 O(1)、O(n)、O(n2)，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。</p><h1 id="5-最好、最坏情况时间复杂度和平均情况时间复杂度"><a href="#5-最好、最坏情况时间复杂度和平均情况时间复杂度" class="headerlink" title="5. 最好、最坏情况时间复杂度和平均情况时间复杂度"></a>5. 最好、最坏情况时间复杂度和平均情况时间复杂度</h1><ul><li>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度</li><li>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度</li><li>平均情况时间复杂度</li><li>均摊时间复杂度<ul><li>均摊时间复杂度就是一种特殊的平均时间复杂度</li></ul></li></ul><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><ul><li>以上内容为《数据结构与算法之美》学习笔记</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数及其应用（二）-矩阵代数</title>
      <link href="/2019/10/17/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89-%E7%9F%A9%E9%98%B5%E4%BB%A3%E6%95%B0/"/>
      <url>/2019/10/17/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89-%E7%9F%A9%E9%98%B5%E4%BB%A3%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-矩阵运算"><a href="#1-矩阵运算" class="headerlink" title="1. 矩阵运算"></a>1. 矩阵运算</h1><h2 id="1-1-矩阵乘法"><a href="#1-1-矩阵乘法" class="headerlink" title="1.1 矩阵乘法"></a>1.1 矩阵乘法</h2><p>若乘积AB有定义，AB的第i行第j列的元素是A的第i行与B的第j列对应元素乘积之和。若$(AB)_{ij}$表示AB的(i, j)元素，A为mxn矩阵，则$(AB)_{ij} = a_{i1}b_{1j} + a_{i2}b_{2j} + \dots + a_{in}b_{nj}$。</p><h1 id="1-2-矩阵乘法的性质"><a href="#1-2-矩阵乘法的性质" class="headerlink" title="1.2 矩阵乘法的性质"></a>1.2 矩阵乘法的性质</h1><p>设A为mxn矩阵，B、C的维数使下列各式的乘积有定义：</p><ul><li>A(BC) = (AB)C</li><li>A(B + C) = AB + AC</li><li>(B + C)A = BA + CA</li><li>r(AB) = (rA)B = A(rB)</li><li>$I_{m}A = A = AI_{n}$</li></ul><p>特别注意：</p><ul><li>一般情况下，$AB\neq BA$</li><li>消去律对矩阵乘法不成立，即若$AB = AC$，一般情况下，B= C并不成立</li><li>若乘积AB是零矩阵，一般情况下，不能断定A = 0或B = 0</li></ul><h2 id="1-3-矩阵的转置"><a href="#1-3-矩阵的转置" class="headerlink" title="1.3 矩阵的转置"></a>1.3 矩阵的转置</h2><p>设A与B表示矩阵，其维数使下列和与积有定义，则：</p><ul><li>$(A^{T})^{T} = A$</li><li>$(A + B)^T = A^T + B^T$</li><li>对任意数r，$(rA)^T = rA^T$</li><li>$(AB)^T = B^TA^T$</li></ul><h1 id="1-4-数值计算的注解"><a href="#1-4-数值计算的注解" class="headerlink" title="1.4 数值计算的注解"></a>1.4 数值计算的注解</h1><p>在计算机上求出AB的最快方法依赖于计算机存储矩阵的方法。标准的高性能算法（如LAPACK）中按列计算AB，正如我们所定义的那样。AB的定义使得我们可以在计算机上用并行算法计算，B的列可单独或分组分配给不同的处理器，因此可以同时计算AB的列。</p><p>代码：</p><ul><li>Python版本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Matrix_Mul</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a.shape[<span class="number">1</span>] != b.shape[<span class="number">0</span>]:</span><br><span class="line">        print(<span class="string">'这两个矩阵无法做乘法，请检查左边矩阵的列数是否与右边矩阵的行数相等！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c = np.zeros(a.shape[<span class="number">0</span>]*b.shape[<span class="number">1</span>]).reshape(a.shape[<span class="number">0</span>],b.shape[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(a.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(b.shape[<span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(a.shape[<span class="number">1</span>]):</span><br><span class="line">                    c[i,j] = c[i,j] + a[i,k]*b[k,j]</span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><ul><li>C++版本</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>&#123;</span> ll a[M][M];</span><br><span class="line">    ll* <span class="keyword">operator</span> [](<span class="keyword">int</span> x)&#123; <span class="keyword">return</span> a[x]; &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> *(matrix&amp; b)&#123;</span><br><span class="line">        <span class="keyword">static</span> matrix c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;++j)</span><br><span class="line">                c[i][j]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;++j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;++k)</span><br><span class="line">                    c[i][j]+=a[i][k]*b[k][j],c[i][j]%=mod;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i,<span class="built_in">putchar</span>(<span class="string">'\n'</span>))</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j,<span class="built_in">putchar</span>(<span class="string">' '</span>))</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'0'</span>+a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;F,T;</span><br></pre></td></tr></table></figure><h2 id="1-5-练习题"><a href="#1-5-练习题" class="headerlink" title="1.5 练习题"></a>1.5 练习题</h2><p>设A为4X4向量，x为$R^4$中的向量。计算$A^2x$的最快方法是什么？计算出乘法的次数。</p><p>答：首先计算Ax，再计算A(Ax)，总计需要32次乘法操作。因为Ax需要16次乘法运算，每个元素4次。A(Ax)也需要16次乘法操作。故总计需要32次乘法操作。</p><h1 id="2-矩阵的逆"><a href="#2-矩阵的逆" class="headerlink" title="2. 矩阵的逆"></a>2. 矩阵的逆</h1><p>类比于实数代数，即实数的倒数（乘法逆），矩阵的逆的定义如下：</p><ul><li>一个nXn矩阵A是可逆的，若存在一个nXn矩阵C使AC = I且CA = I，其中$I = I_n$是nXn的单位矩阵，这时称C是A的逆阵，且C是唯一的，一般将C记为$A^{-1}$，得到$AA^{-1} = I$或者$A^{-1}A = I$。</li><li>不可逆矩阵有时称为奇异矩阵，而可逆矩阵也称为非奇异矩阵。</li></ul><h2 id="2-1-逆矩阵的求法"><a href="#2-1-逆矩阵的求法" class="headerlink" title="2.1 逆矩阵的求法"></a>2.1 逆矩阵的求法</h2><p>下面利用一个例子来说明逆矩阵的求法，并给出矩阵可逆的一些判断条件。</p><p>例：设$A = \left[ \begin{matrix}   a &amp; b \\ c &amp; d \\ \end{matrix} \right]$，若$ad - bc \neq 0$，则A可逆且<script type="math/tex">A^{-1} = \frac{1}{ad - bc}\left[ \begin{matrix}   d & -b \\ -c & a \\ \end{matrix} \right]</script>.</p><p>若$ad - bc = 0$，则A不可逆。其中，$det A = ad - bc$。</p><p>定理: </p><ul><li>若A是nXn可逆矩阵，则对每一$R^n$中的向量b，方程Ax = b有唯一解$x = A^{-1}b$</li><li>若A是可逆矩阵，则$A^{-1}$也可逆且$(A^{-1})^{-1} = A$</li><li>若A和B都是nXn可逆矩阵，AB也可逆，且其逆是A和B的逆矩阵按相反顺序的乘积，即$(AB)^{-1} = b^{-1}A^{-1}$</li><li>若A可逆，则$A^{T}$也可逆，且其逆是$A^{-1}$的转置，即$(A^T)^{-1} = (A^{-1})^T$</li></ul><p>代数余子式：代数余子式是从行列式的公式中提取出来的，它的作用是把n阶行列式化简为n – 1阶行列式。</p><h2 id="2-2-初等矩阵"><a href="#2-2-初等矩阵" class="headerlink" title="2.2 初等矩阵"></a>2.2 初等矩阵</h2><p>把单位矩阵进行一次行变换，就得到初等矩阵。</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-26-163027.png" alt="image-20191027003001123"></p><p>定理：</p><ul><li>nXn矩阵A是可逆的，当且仅当A行等价于$I_n$，这时，把A变为$I_n$的一系列初等行变换同时把$I_n$变成$A^{-1}$</li></ul><h2 id="2-3-A-1-的求法"><a href="#2-3-A-1-的求法" class="headerlink" title="2.3 $A^{-1}$的求法"></a>2.3 $A^{-1}$的求法</h2><p>把增广矩阵[A I]进行行化简。若A行等价于I，则[A I]行等价于$[I A^{-1}]$，否则A没有逆。</p><p>线性方程组解释：</p><p>用$e_1, \dots, e_n$表示$I_n$的各列，则把[A I]行变换成$[I A^{-1}]$的过程可看作是解n个方程组，<script type="math/tex">Ax = e_1, Ax = e_2, \dots, Ax = e_n</script>，</p><p>其中这些方程组的“增广列”都放在A的右边，构成矩阵，<script type="math/tex">[A e_1 e_2 \dots e_n] = [A I]</script>。</p><p>方程$AA^{-1} = I$及矩阵乘法的定义说明$A^{-1}$的列正好是上述方程组的解。这一点是很有用的，因为在某些应用问题中，只需要$A^{-1}$的一列或两列，这时只需要解上述方程组的中的相应方程即可。</p><h2 id="2-4-计算机中的矩阵求逆方法"><a href="#2-4-计算机中的矩阵求逆方法" class="headerlink" title="2.4 计算机中的矩阵求逆方法"></a>2.4 计算机中的矩阵求逆方法</h2><p>(1) 数值计算的注解</p><p>在实际中，很少计算$A^{-1}$，除非需要$A^{-1}$的元素。计算$A^{-1}$和$A^{-1}b$总共需要的原酸次数大约是用行变换解方程组Ax = b的3倍，而且行变换可能更为精确。</p><p>(2) 高斯消元构造逆矩阵</p><ul><li>基本思想<ul><li>将原矩阵化成阶梯型矩阵</li><li>朴素运算消成单位矩阵</li></ul></li><li><p>即上文2.2节内容</p></li><li><p>代码：</p><ul><li>C++版本</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n; <span class="keyword">static</span> <span class="keyword">double</span> a[<span class="number">50</span>][<span class="number">50</span>],b[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="comment">//交换当前行与下一行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">double</span> a[][<span class="number">50</span>],<span class="keyword">double</span> b[][<span class="number">50</span>],<span class="keyword">int</span> current_line,<span class="keyword">int</span> next_line,<span class="keyword">int</span> all_line_number)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换两行</span></span><br><span class="line">    <span class="keyword">int</span> cl=current_line,nl=next_line,n=all_line_number;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        swap(a[cl][i],a[nl][i]),</span><br><span class="line">        swap(b[cl][i],b[nl][i]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">the_data_change_to_1</span><span class="params">(<span class="keyword">double</span> a[][<span class="number">50</span>],<span class="keyword">double</span> b[][<span class="number">50</span>],<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">//将a[m][m]变成1</span></span><br><span class="line">    <span class="keyword">if</span>(a[m][m]) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>; i&lt;n; ++i) a[m][i]=a[m][i]/a[m][m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) b[m][i]=b[m][i]/a[m][m];</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">void</span>)(a[m][m]=<span class="number">1</span>); <span class="comment">//change_to_upper_angle_matrix(a,b,m,n);//将a[m][m]之下的元素全部变成0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m+<span class="number">1</span>&lt;n&amp;&amp;!a[m][m]) exchange(a,b,m,m+<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">if</span>(a[m][m]!=<span class="number">1</span>) the_data_change_to_1(a,b,m,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将a[m][m]之下的元素全部变成0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_to_upper_angle_matrix</span><span class="params">(<span class="keyword">double</span> a[][<span class="number">50</span>],<span class="keyword">double</span> b[][<span class="number">50</span>],<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m+<span class="number">1</span>&gt;=n) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>,t; i&lt;n; ++i,a[i][m]=<span class="number">0</span>) &#123; t=a[i][m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m; j&lt;n; ++j) a[i][j]=a[i][j]-t*a[m][j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; ++k) b[i][k]=b[i][k]-t*b[m][k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*将上三角矩阵变成单位阵*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_to_unit_matrix</span><span class="params">(<span class="keyword">double</span> a[][<span class="number">50</span>],<span class="keyword">double</span> b[][<span class="number">50</span>],<span class="keyword">int</span> l,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l<span class="number">-1</span>; i&gt;=<span class="number">0</span>; a[i][l]=<span class="number">0</span>,--i) <span class="comment">//从a[l-1][l]开始向上，让每个元素都变成0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)</span><br><span class="line">            b[i][j]=b[i][j]-a[i][l]*b[l][j];</span><br><span class="line">    --l,change_to_unit_matrix(a,b,l,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_result</span><span class="params">(<span class="keyword">double</span> b[][<span class="number">50</span>],<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i,<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) <span class="built_in">cout</span>&lt;&lt;b[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,a[i]+j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) b[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i][i]!=<span class="number">1</span>) the_data_change_to_1(a,b,i,n);<span class="comment">//将a[i][i]变成 1</span></span><br><span class="line">        <span class="keyword">if</span>(a[i][i]==<span class="number">1</span>) change_to_upper_angle_matrix(a,b,i,n); <span class="comment">//将a[i][i]之下的元素全部变成 0</span></span><br><span class="line">    &#125;</span><br><span class="line">    change_to_unit_matrix(a,b,n<span class="number">-1</span>,n);</span><br><span class="line">    <span class="keyword">return</span> print_result(b,n),<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 解方程组构造（非同阶）逆矩阵</p><ul><li>主要思想同2.3节</li><li>最终构造的方程组也使用高斯消元法进行求解</li><li>该解法时间复杂度为$O(n^4)$</li></ul><h1 id="3-可逆矩阵的特征"><a href="#3-可逆矩阵的特征" class="headerlink" title="3 可逆矩阵的特征"></a>3 可逆矩阵的特征</h1><p>设A为nXn矩阵，则下列命题是等价的，即对某一特定的A，它们同时为真或同时为假：</p><ul><li>A是可逆矩阵</li><li>A等价于nXn单位矩阵</li><li>A有n个主元位置</li><li>方程Ax = 0仅有平凡解</li><li>A的各列线性无关</li><li>线性变换$x\mapsto Ax$是一对一的</li><li>对$R^n$中任意b，方程Ax = b至少有一个解</li><li>A的各列生成$R^n$</li><li>线性变换$x\mapsto Ax$把$R^n$映射到$R^n$上</li><li>存在nXn矩阵C使$CA = I$</li><li>存在nXn矩阵D使$AD = I$</li><li>$A^T$是可逆矩阵</li></ul><h1 id="4-分块矩阵"><a href="#4-分块矩阵" class="headerlink" title="4. 分块矩阵"></a>4. 分块矩阵</h1><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-27-075932.png" alt="image-20191027155815026"></p><h2 id="4-1-分块矩阵的运算"><a href="#4-1-分块矩阵的运算" class="headerlink" title="4.1 分块矩阵的运算"></a>4.1 分块矩阵的运算</h2><ul><li>若矩阵A和B有相同维数且被同样的分块，则A+B的计算按照矩阵相加运算法则一样计算且被同样的分块</li><li>分块矩阵与标量的乘法运算同矩阵与标量的乘法运算法则一致</li><li>分块矩阵的乘法与矩阵的乘法运算法则一致</li></ul><h2 id="4-2-分块矩阵的逆"><a href="#4-2-分块矩阵的逆" class="headerlink" title="4.2 分块矩阵的逆"></a>4.2 分块矩阵的逆</h2><p>分块矩阵的求逆根据分块矩阵的维数和排列不同而计算结果不同，但计算过程一般如下例子所示。</p><p>例：设分块上三角矩阵$A = \left[ \begin{matrix}   A_{11} &amp; A_{22} \\ 0 &amp; A_{22} \\ \end{matrix} \right]$，其中$A_{11}$是pXp矩阵，$A_{22}$是qXq矩阵，A为可逆矩阵，求$A^{-1}$。</p><p>解：设B为$A^{-1}$，那么得到，<script type="math/tex">\left[ \begin{matrix}   A_{11} & A_{22} \\ 0 & A_{22} \\ \end{matrix} \right]\left[ \begin{matrix}   B_{11} & B_{12} \\ B_{21} & B_{22} \\ \end{matrix} \right] = \left[ \begin{matrix}   I_{p} & 0 \\ 0 & I_{q} \\ \end{matrix} \right]</script>，</p><p>得到如下方程组：</p><ul><li>$A_{11}B_{11} + A_{12}B_{21} I_{p}$ (1)</li><li>$A_{11}B_{12} + A_{12}B_{22} = 0$ (2)</li><li>$A_{22}B_{21} = 0$ (3)</li><li>$A_{22}B_{22} = I_{q}$ (4)</li></ul><p>由(4)即$A_{22}$是方阵可知，$A_{22}$可逆。基于$A_{22}$可逆和公式 (4)即可求解上述方程组。解得，<script type="math/tex">A^{-1} = \left[ \begin{matrix}   A_{11} & A_{22} \\ 0 & A_{22} \\ \end{matrix} \right]^{-1} = \left[ \begin{matrix}   A_{11}^{-1} & -A_{11}^{-1}A_{12}A_{22}^{-1} \\ 0 & A_{22}^{-1} \\ \end{matrix} \right]</script>。</p><h1 id="5-矩阵因式分解"><a href="#5-矩阵因式分解" class="headerlink" title="5. 矩阵因式分解"></a>5. 矩阵因式分解</h1><p>矩阵因式分解指的是将矩阵由多个矩阵进行表示。矩阵乘法是数据的综合，矩阵因式分解是数据的分解。矩阵的因式分解的主要意义在于便于计算。矩阵因式分解的方法有很多，例如LU分解、秩分解、QR分解、奇异值分解和谱分解等。</p><h1 id="5-1-LU分解"><a href="#5-1-LU分解" class="headerlink" title="5.1 LU分解"></a>5.1 LU分解</h1><p>给定一系列具有相同系数的方程组：$Ax = b_1, Ax = b_2, \dots, Ax = b_p$，如果A可逆，那么只需要求$A^{-1}b_1, \dots, A^{-1}b_{p}$等。接下来，我们首先对A进行LU分解。这样做的好处分析如下。</p><p>当A = LU时，方程Ax = b可写成LUx = b。另Ux = y，那么得到如下方程组：</p><ul><li>Ly = b</li><li>Ux = y</li></ul><p>这两个方程都比较容易解。</p><p>设A为mXn矩阵，另$A = LU$，其中L为mXm下三角矩阵，主对角元素全为1，U是A的等价的mXn的阶梯型矩阵。如下是矩阵LU分解的一个例子，其中L是可逆的，称为单位下三角矩阵。</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-27-083414.png" alt="image-20191027163408844"></p><p>设A可以化为阶梯形U，化简过程仅用行倍加变换，即把一行的倍数加于它下面的另一行。这样，存在单位下三角初等矩阵$E_1, \dots, E_p$使<script type="math/tex">E_p\dots E_1A = U</script>。</p><p>之后，$A = (E_p\dots E_1)^{-1}U = LU$，其中$L = (E_p\dots E_1)^{-1}$。也就是说L就是使得A化为U的变换的逆。</p><ul><li>如果可能的话，用一系列的倍加变换把A化为阶梯形</li><li>填充L的元素使相同的行变换把L变为I</li></ul><p>例：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-11-02-145415.png" alt="image-20191102225407207"></p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-11-02-145633.png" alt="image-20191102225430417"></p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-11-02-145535.png" alt="image-20191102225514477"></p><p>计算复杂度分析，对于nXn稠密矩阵A，n相当大，例如$n\geq 30$：</p><ul><li>计算A的LU分解大约需要$2n^3/3$浮算，而求$A^{-1}$大约需要$2n^3$浮算</li><li>解Ly = b和Ux = y大约需要$2n^2$浮算，因任意nXn三角方程组可以用大约$n^2$浮算解出</li><li>把b乘以$A^{-1}$也需要$2n^2$浮算，但结果可能不如由L和U得出的精确（由于计算$A^{-1}$和$A^{-1}b$的舍入误差）</li><li>若A是稀疏矩阵（大部分元素为0），则L和U可能也是稀疏的，然而$A^{-1}$很可能是稠密的。这时，用LU分解来解方程Ax = b很可能比用$A^{-1}$快很多。</li></ul><h2 id="5-2-QR分解"><a href="#5-2-QR分解" class="headerlink" title="5.2 QR分解"></a>5.2 QR分解</h2><ul><li>是目前求一般矩阵全部特征值的最有效并广泛应用的方法</li><li>将矩阵分解成一个正规正交矩阵Q与上三角形矩阵R</li><li>分解过程中利用Gram−Schmidt正交化</li></ul><p>其中，Gram−Schmidt正交化内容将在后续章节进行总结。</p><p>给定矩阵A，其列向量为$\alpha_1, \alpha_2, \dots, \alpha_n$，利用Gram−Schmidt正交化对矩阵A的列向量进行正交化，得到$\epsilon_1, \epsilon_2, \dots, \epsilon_j$，得到如下矩阵形式：<script type="math/tex">(\epsilon_1, \epsilon_2, \dots, \epsilon_j) = (\alpha_1, \alpha_2, \dots, \alpha_n)\left[ \begin{matrix}   t_{11} & \dots & t_{1n} \\  & \ddots & \vdots \\ & & t_{nn} \\ \end{matrix} \right]</script>,</p><p>其中，$Q = (\epsilon_1, \epsilon_2, \dots, \epsilon_j)$，$R = T^{-1}$。</p><p>求解步骤：</p><ul><li>通过Gram–Schmidt正交化求出正交矩阵Q</li><li>再通过$R = Q^{T}A$得到矩阵R</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gram_schmidt</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="string">"""Gram-schmidt正交化"""</span></span><br><span class="line">    Q = np.zeros_like(A)</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> A.T:</span><br><span class="line">        u = np.copy(a)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, cnt):</span><br><span class="line">            u -= np.dot(np.dot(Q[:, i].T, a), Q[:, i])</span><br><span class="line">        e = u / np.linalg.norm(u)</span><br><span class="line">        Q[:, cnt] = e</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">    R = np.dot(Q.T, A)</span><br><span class="line">    <span class="keyword">return</span> (Q, R)</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    np.set_printoptions(precision=<span class="number">4</span>, suppress=<span class="keyword">True</span>)</span><br><span class="line">    A = np.array([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">0</span>], [<span class="number">5</span>, <span class="number">-1</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">1</span>, <span class="number">-14</span>], [<span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>]], dtype=float)</span><br><span class="line"></span><br><span class="line">    (Q, R) = gram_schmidt(A)</span><br><span class="line">    print(Q)</span><br><span class="line">    print(R)</span><br><span class="line">    print(np.dot(Q, R))</span><br></pre></td></tr></table></figure><h2 id="5-3-SVD分解"><a href="#5-3-SVD分解" class="headerlink" title="5.3 SVD分解"></a>5.3 SVD分解</h2><p>在学习SVD分解前，先简单描述下如下定义，详细的内容将在后续进行总结。</p><ul><li>特征值<ul><li>$Ax = \lambda x$</li><li>矩阵是线性空间里的变换的描述。矩阵AA与向量相乘，本质上对向量x进行一次线性转换（旋转或拉伸），而该转换的效果为常数c乘以向量x（即只进行拉伸）。当我们求特征值与特征向量的时候，就是为了求矩阵A能使哪些向量（特征向量）只发生拉伸，而拉伸的程度，自然就是特征值λ了</li></ul></li></ul><p>对于一个矩阵A，有一组特征向量；再将这组向量进行正交化单位化，也就是我们学过的Schmidt正交化，就能得到一组正交单位向量。特征值分解，就是将矩阵A分解为如下方式：<script type="math/tex">A = Q\Sigma Q^{-1}</script>，其中，Q是矩阵A的特征向量组成的矩阵，Σ则是一个对角阵，对角线上的元素就是特征值。通过特征值分解得到的前N个特征向量，那么就对应了这个矩阵最主要的N个变化方向。利用这前N个变化方向，就可以近似这个矩阵（变换）。特征值分解可以得到特征值与特征向量，特征值表示的是这个特征到底有多重要，而特征向量表示这个特征是什么，可以将每一个特征向量理解为一个线性的子空间。</p><ul><li>特征值分解最大的问题是只能针对方阵</li><li>为了解决该问题，SVD分解算法出现了</li></ul><p>SVD分解的公式如下：<script type="math/tex">A = U\Sigma V^{T}</script>。</p><p>SVD解决了特征值分解中只能针对方阵而没法对更一般矩阵进行分解的问题。</p><p>在大部分情况下，当我们把矩阵Σ里的奇异值按从大到小的顺序呢排列以后，很容易就会发现，奇异值减小的速度特别快。在很多时候，前10%甚至前1%的奇异值的和就占了全部奇异值和的99%以上。换句话说，大部分奇异值都很小，基本没什么用。因此，可以用前面r个奇异值来对这个矩阵做近似。于是，SVD也可以写为：<script type="math/tex">A_{m\times n} \approx U_{m\times r}\Sigma_{r\times r}V_{r\times n}</script>，其中，$r\ll m$和$r\ll n$。实际在使用SVD的时候，需要我们根据不同的业务场景与需求还有资源情况，合理选择r的大小。本质是在计算精度与空间时间成本之间做个折中。</p><p>SVD算法流程如下：</p><ul><li><p>输入</p><ul><li>样本数据</li></ul></li><li><p>输出</p><ul><li>左奇异矩阵，奇异值矩阵，右奇异矩阵</li></ul></li><li><p>算法流程</p><ul><li><p>计算特征值</p><ul><li>特征值分解$AA^{T}$，其中$A\in R^{m\times n}$为原始样本数据，$AA^{T} = U\Sigma \Sigma^{T}U^{T}$</li><li>得到左奇异矩阵$U\in R^{m\times m}$和奇异矩阵$\Sigma’ \in R^{m\times m}$</li></ul></li><li><p>间接求部分右奇异矩阵</p><ul><li>由$A = U\Sigma’V’$可得<script type="math/tex">V' = (U\Sigma')^{-1}A = (\Sigma')^{-1}U^{T}A</script></li></ul></li><li><p>返回$U$，$\Sigma’$，$V’$</p></li></ul></li></ul><h1 id="6-R-n-子空间"><a href="#6-R-n-子空间" class="headerlink" title="6. $R^{n}$子空间"></a>6. $R^{n}$子空间</h1><ul><li>$R^{n}$中的一个子空间是$R^n$中的集合H，具有以下三个性质<ul><li>零向量属于H</li><li>对H中任意的向量u和v，u + v属于H</li><li>对H中任意向量u和数c，cu属于H</li></ul></li><li>由$v_1, \dots, v_p$张成的子空间定义为$Span\{v_1, \dots, v_p\}$</li><li>矩阵A的列空间是A的各列的线性组合的集合，记做Col A</li><li>矩阵A的零空间是齐次方程Ax = 0的所有解的集合，记为Nul A</li><li>$R^n$中子空间H的一组基是H中一个线性无关集，它生成H</li><li>矩阵A的主元列构成列空间的基</li></ul><h1 id="7-维数和秩"><a href="#7-维数和秩" class="headerlink" title="7. 维数和秩"></a>7. 维数和秩</h1><ul><li>非零子空间H的维数，用dimH表示，是H的任意一个基的向量个数，零子空间的维数定义为零</li><li>如果一个矩阵A有n列，则rank A +dim Nul A = n</li></ul><h1 id="8-参考"><a href="#8-参考" class="headerlink" title="8. 参考"></a>8. 参考</h1><ul><li><a href="https://www.cnblogs.com/Judge/p/10124232.html" target="_blank" rel="noopener">论如何求矩阵的逆?先看看基础芝士！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown-数学公式</title>
      <link href="/2019/10/03/others/Markdown-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2019/10/03/others/Markdown-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h1><p>Hexo 的自带的 Markdown 引擎并不支持 LaTeX 公式。 但是 MathJax 支持，因此首先要 启用 MathJax 才能渲染 LaTeX 公式。如果你已经安装了 NexT theme，开启 MathJax 支持非常容易，在最新版的 NexT 主题的 _config.yml 文件里，找到 MathJax 相关部分，使用以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">math:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Default(true) will load mathjax/katex script on demand</span></span><br><span class="line">  <span class="comment"># That is it only render those page who has 'mathjax: true' in Front Matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax/katex srcipt EVERY PAGE.</span></span><br><span class="line">  per_page: <span class="literal">false</span></span><br><span class="line">  engine: mathjax</span><br></pre></td></tr></table></figure><p>但是由于 LaTeX 中的一些符号在 Markdown 中有特殊含义，例如 两个 <code>_</code> 在 Markdown 中用来表示斜体（italic），因此两者的配合使用会产生一些问题。</p><p>解决方案：</p><p>使用 <a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="noopener">hexo-renderer-kramed</a> 替换 Hexo 默认的渲染器 <strong>hexo-renderer-marked</strong>。<a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="noopener">hexo-renderer-kramed</a> 是 <strong>hexo-renderer-marked</strong> 的 <strong>Fork 修改版</strong>，仅针对 MathJax 渲染的<strong>语义冲突</strong>问题进行了修改，因此可以放心使用。在 <strong>Hexo 根目录</strong>下执行以下命令替换默认渲染引擎：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>更换渲染引擎后，<strong>整行公式就可以正常显示了</strong>，然而<strong>行内公式还是会遇到</strong><code>&lt;em&gt;</code><strong>标签语义冲突的问题</strong>。在 Markdown 语法中，用$$$$包括起来的内容表示整行公式，用<code>$</code>包括起来的内容表示行内公式。之所以行内公式的渲染依然存在问题，是因为 <a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="noopener">hexo-renderer-kramed</a> 引擎同样存在语义冲突的问题。在博客根目录下，找到<code>node_modules/kramed/lib/rules/inline.js</code>文件，在<code>inline</code>变量中做出如下修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var inline = &#123;</span><br><span class="line">  // escape: /^\\([\\`*&#123;&#125;\[\]()<span class="comment">#$+\-.!_&gt;])/, 第 11 行, 将其修改为</span></span><br><span class="line">  escape: /^\\([`*\[\]()<span class="comment">#$+\-.!_&gt;])/,</span></span><br><span class="line">  autolink: /^&lt;([^ &gt;]+(@|:\/)[^ &gt;]+)&gt;/,</span><br><span class="line">  url: noop,</span><br><span class="line">  html: /^&lt;!--[\s\S]*?--&gt;|^&lt;(\w+(?!:\/|[^\w\s@]*@)\b)*?(?:<span class="string">"[^"</span>]*<span class="string">"|'[^']*'|[^'"</span>&gt;])*?&gt;([\s\S]*?)?&lt;\/\1&gt;|^&lt;(\w+(?!:\/|[^\w\s@]*@)\b)(?:<span class="string">"[^"</span>]*<span class="string">"|'[^']*'|[^'"</span>&gt;])*?&gt;/,</span><br><span class="line">  link: /^!?\[(inside)\]\(href\)/,</span><br><span class="line">  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,</span><br><span class="line">  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,</span><br><span class="line">  reffn: /^!?\[\^(inside)\]/,</span><br><span class="line">  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,</span><br><span class="line">  // em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 第 20 行，将其修改为 </span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,</span><br><span class="line">  br: /^ &#123;2,&#125;\n(?!\s*$)/,</span><br><span class="line">  del: noop,</span><br><span class="line">  text: /^[\s\S]+?(?=[\\&lt;!\[_*`$]| &#123;2,&#125;\n|$)/,</span><br><span class="line">  math: /^\$\$\s*([\s\S]*?[^\$])\s*\$\$(?!\$)/,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>依然可以在 Hexo 中使用<code>*</code>表示<em>斜体</em>，但<strong>用</strong><code>_</code><strong>表示</strong>_斜体_<strong>就不会生效了</strong>。</p><h1 id="2-矩阵"><a href="#2-矩阵" class="headerlink" title="2. 矩阵"></a>2. 矩阵</h1><h2 id="2-1-不带括号的矩阵"><a href="#2-1-不带括号的矩阵" class="headerlink" title="2.1 不带括号的矩阵"></a>2.1 不带括号的矩阵</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">  \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125; \tag&#123;1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><script type="math/tex; mode=display">\begin{matrix}   1 & 2 & 3 \\   4 & 5 & 6 \\   7 & 8 & 9  \end{matrix} \tag{1}</script><h2 id="2-2-带括号-的矩阵"><a href="#2-2-带括号-的矩阵" class="headerlink" title="2.2 带括号{}的矩阵"></a>2.2 带括号{}的矩阵</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \left\&#123;</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">  \right\&#125; \tag&#123;2&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><script type="math/tex; mode=display">\left\{ \begin{matrix}   1 & 2 & 3 \\   4 & 5 & 6 \\   7 & 8 & 9  \end{matrix}  \right\} \tag{2}</script><p>不使用left和right的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \begin&#123;Bmatrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;Bmatrix&#125; \tag&#123;5&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><script type="math/tex; mode=display">\begin{Bmatrix}   1 & 2 & 3 \\   4 & 5 & 6 \\   7 & 8 & 9  \end{Bmatrix} \tag{5}</script><h2 id="2-3-带括号-的矩阵"><a href="#2-3-带括号-的矩阵" class="headerlink" title="2.3 带括号[]的矩阵"></a>2.3 带括号[]的矩阵</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \left[</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">  \right] \tag&#123;3&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><script type="math/tex; mode=display">\left[ \begin{matrix}   1 & 2 & 3 \\   4 & 5 & 6 \\   7 & 8 & 9  \end{matrix}  \right] \tag{3}</script><p>不使用left和right的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \begin&#123;bmatrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;bmatrix&#125; \tag&#123;4&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><script type="math/tex; mode=display">\begin{bmatrix}   1 & 2 & 3 \\   4 & 5 & 6 \\   7 & 8 & 9  \end{bmatrix} \tag{4}</script><h2 id="2-4-带省略号的矩阵"><a href="#2-4-带省略号的矩阵" class="headerlink" title="2.4 带省略号的矩阵"></a>2.4 带省略号的矩阵</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\left[</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line"> 1      &amp; 2      &amp; \cdots &amp; 4      \\</span><br><span class="line"> 7      &amp; 6      &amp; \cdots &amp; 5      \\</span><br><span class="line"> \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\</span><br><span class="line"> 8      &amp; 9      &amp; \cdots &amp; 0      \\</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right]</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：</p><script type="math/tex; mode=display">\left[\begin{matrix} 1      & 2      & \cdots & 4      \\ 7      & 6      & \cdots & 5      \\ \vdots & \vdots & \ddots & \vdots \\ 8      & 9      & \cdots & 0      \\\end{matrix}\right]</script><h2 id="2-5-行间矩阵"><a href="#2-5-行间矩阵" class="headerlink" title="2.5 行间矩阵"></a>2.5 行间矩阵</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test$\bigl(</span><br><span class="line">    \begin&#123;smallmatrix&#125;</span><br><span class="line">l&amp;l\\j&amp;z</span><br><span class="line">\end&#123;smallmatrix&#125;</span><br><span class="line">\bigr)<span class="variable">$Test</span></span><br></pre></td></tr></table></figure><p>效果：</p><p>Test$\bigl(<br>    \begin{smallmatrix}<br>        l&amp;l\\j&amp;z<br>    \end{smallmatrix}<br>\bigr)$Test</p><h1 id="3-方程组"><a href="#3-方程组" class="headerlink" title="3. 方程组"></a>3. 方程组</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;cases&#125;</span><br><span class="line">x+y+z=0 \\</span><br><span class="line">x+2y+3z=0 \\</span><br><span class="line">x+4y+5z=0</span><br><span class="line">\end&#123;cases&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><script type="math/tex; mode=display">\begin{cases}x+y+z=0 \\x+2y+3z=0 \\x+4y+5z=0\end{cases}</script><h1 id="4-Greek-and-Hebrew-Letters"><a href="#4-Greek-and-Hebrew-Letters" class="headerlink" title="4. Greek and Hebrew Letters"></a>4. Greek and Hebrew Letters</h1><div class="table-container"><table><thead><tr><th>$\alpha$</th><th>\alpha</th><th>$\beta$</th><th>\beta</th><th>$\gamma$</th><th>\gamma</th><th>$\chi$</th><th>\chi</th><th>$\delta$</th><th>\delta</th><th>$\epsilon$</th><th>\epsilon</th></tr></thead><tbody><tr><td>$\eta$</td><td>\eta</td><td>$\iota$</td><td>\iota</td><td>$\kappa$</td><td>\kappa</td><td>$\lambda$</td><td>\lambda</td><td>$\mu$</td><td>\mu</td><td>$\nu$</td><td>\nu</td></tr><tr><td>$o$</td><td>o</td><td>$\omega$</td><td>\omega</td><td>$\phi$</td><td>\phi</td><td>$\pi$</td><td>\pi</td><td>$\psi$</td><td>\psi</td><td>$\rho$</td><td>\rho</td></tr><tr><td>$\sigma$</td><td>\sigma</td><td>$\tau$</td><td>\tau</td><td>$\theta$</td><td>\theta</td><td>$\upsilon$</td><td>\upsilon</td><td>$\xi$</td><td>\xi</td><td>$\zeta$</td><td>\zeta</td></tr><tr><td>$\digamma$</td><td>\digamma</td><td>$\varepsilon$</td><td>\varepsilon</td><td>$\varkappa$</td><td>\varkappa</td><td>$\varphi$</td><td>\varphi</td><td>$\varpi$</td><td>\varpi</td><td>$\varrho$</td><td>\varrho</td></tr><tr><td>$\varsigma$</td><td>\varsigma</td><td>$\vartheta$</td><td>\vartheta</td><td>$\Delta$</td><td>\Delta</td><td>$\Gamma$</td><td>\Gamma</td><td>$\Lambda$</td><td>\Lambda</td><td>$\Omega$</td><td>\Omega</td></tr><tr><td>$\Phi$</td><td>\Phi</td><td>$\Pi$</td><td>\Pi</td><td>$\Psi$</td><td>\Psi</td><td>$\Sigma$</td><td>\Sigma</td><td>$\Theta$</td><td>\Theta</td><td>$\Upsilon$</td><td>\Upsilon</td></tr><tr><td>$\Xi$</td><td>\Xi</td><td>$\aleph$</td><td>\aleph</td><td>$\beth$</td><td>\beth</td><td>$\daleth$</td><td>\daleth</td><td>$\gimel$</td><td>\gimel</td><td></td></tr></tbody></table></div><h1 id="5-Binary-Operations-Relation-Symbols"><a href="#5-Binary-Operations-Relation-Symbols" class="headerlink" title="5. Binary Operations / Relation Symbols"></a>5. Binary Operations / Relation Symbols</h1><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><h1 id="10-参考"><a href="#10-参考" class="headerlink" title="10. 参考"></a>10. 参考</h1><ul><li><a href="https://abelsu7.top/2018/10/29/hexo-mathjax/" target="_blank" rel="noopener">在 Hexo 中使用 MathJax 渲染数学公式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数及其应用（一）-线性方程组</title>
      <link href="/2019/10/03/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89-%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/"/>
      <url>/2019/10/03/math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89-%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-线性方程组"><a href="#1-线性方程组" class="headerlink" title="1. 线性方程组"></a>1. 线性方程组</h1><p>定义：包含未知数的$x_1, x_2, \cdots, x_n$的线性方程组如下所示：</p><script type="math/tex; mode=display">a_1x_1+a_2x_2+\cdots+a_nx_n = b.</script><p>矩阵形式：</p><script type="math/tex; mode=display">x_1 - 2x_2 + x3 = 0 \\2x_2-8x_3 = 8 \\-4x_1 + 5x_2 + 9x_3 = -9</script><p>系数矩阵为：</p><script type="math/tex; mode=display">\left[ \begin{matrix}   1 & -2 & 1 \\   0 & 2 & -8 \\   -4 & 5 & 9  \end{matrix}  \right]</script><p>增广矩阵为：</p><script type="math/tex; mode=display">\left[ \begin{matrix}   1 & -2 & 1 & 0 \\   0 & 2 & -8 & 8 \\   -4 & 5 & 9 & -9 \\  \end{matrix}  \right]</script><h1 id="1-1-线性方程组的解法"><a href="#1-1-线性方程组的解法" class="headerlink" title="1.1 线性方程组的解法"></a>1.1 线性方程组的解法</h1><p>采用等价方程组来求解一个线性方程组。等价方程组可通过如下三种变换得到：</p><ul><li>把某一个方程换成另一个方程的倍数的和</li><li>把某一方程的所有项乘以一个非零常数</li><li>交换两个方程的位置</li></ul><p>以上变换即所谓的“行初等变换”。</p><p>例：</p><script type="math/tex; mode=display">\left[ \begin{matrix}   1 & -2 & 1 & 0 \\   0 & 2 & -8 & 8 \\   -4 & 5 & 9 & -9 \\  \end{matrix}  \right]</script><p>转换为行阶梯形为：</p><script type="math/tex; mode=display">\left[ \begin{matrix}   1 & -2 & 1 & 0 \\   0 & 1 & -4 & 4 \\   0 & 0 & 1 & 3 \\  \end{matrix}  \right] \tag{3}</script><p>和最简形为：</p><script type="math/tex; mode=display">\left[ \begin{matrix}   1 & 0 & 0 & 29 \\   0 & 1 & 0 & 16 \\   0 & 0 & 1 & 3 \\  \end{matrix}  \right] \tag{3}</script><p>相当于：</p><script type="math/tex; mode=display">\begin{cases}x_1 = 29 \\x_2 = 16 \\x_3 = 3\end{cases}</script><h1 id="1-2-存在与唯一性问题"><a href="#1-2-存在与唯一性问题" class="headerlink" title="1.2 存在与唯一性问题"></a>1.2 存在与唯一性问题</h1><ul><li>线性方程组是否相容</li><li>若它有解，解的唯一性</li></ul><h1 id="2-行化简与阶梯型矩阵"><a href="#2-行化简与阶梯型矩阵" class="headerlink" title="2. 行化简与阶梯型矩阵"></a>2. 行化简与阶梯型矩阵</h1><h2 id="2-1-阶梯型定义"><a href="#2-1-阶梯型定义" class="headerlink" title="2.1 阶梯型定义"></a>2.1 阶梯型定义</h2><ul><li>每一非零行在每一零行之上</li><li>某一行的先导元素所在的列位于前一行先导元素的后面</li><li>某一行的先导元素所在的列下方元素都是零。</li></ul><h2 id="2-2-简化阶梯型"><a href="#2-2-简化阶梯型" class="headerlink" title="2.2 简化阶梯型"></a>2.2 简化阶梯型</h2><ul><li>属于阶梯型</li><li>每一非零行的先导元素是1</li><li>每一先导元素1是该元素所在列的唯一非零元素</li></ul><h2 id="2-3-例子"><a href="#2-3-例子" class="headerlink" title="2.3 例子"></a>2.3 例子</h2><ul><li>行阶梯形</li></ul><script type="math/tex; mode=display">\left[ \begin{matrix}   2 & -3 & 2 & 1 \\   0 & 1 & -4 & 8 \\   0 & 0 & 0 & 1  \end{matrix}  \right]</script><ul><li>行最简形</li></ul><script type="math/tex; mode=display">\left[ \begin{matrix}   1 & 0 & 0 & 29 \\   0 & 1 & 0 & 16 \\   0 & 0 & 1 & 3  \end{matrix}  \right]</script><h2 id="2-4-主元位置和主元列"><a href="#2-4-主元位置和主元列" class="headerlink" title="2.4 主元位置和主元列"></a>2.4 主元位置和主元列</h2><p>距震中的主元位置是矩阵A中对应于它的阶梯形中先导元素的位置；主元列是矩阵A中含有主元位置的列。</p><h2 id="2-5-线性方程组的解"><a href="#2-5-线性方程组的解" class="headerlink" title="2.5 线性方程组的解"></a>2.5 线性方程组的解</h2><p>应用行化简法解线性方程组：</p><ul><li>写出方程组的增广矩阵</li><li>应用行化简算法把增广矩阵化为阶梯形。确定方程组是否有解，如果没有解则停止；否则进行下一步。</li><li>继续行化简法得到他的简化阶梯形</li><li>写出由第三步所得矩阵所对应的方程组</li><li>把第四步所得到的每个方程改写为用自由变量表示基本变量的形式。</li></ul><h1 id="3-向量方程"><a href="#3-向量方程" class="headerlink" title="3. 向量方程"></a>3. 向量方程</h1><h2 id="3-1-R-2-中的向量定义"><a href="#3-1-R-2-中的向量定义" class="headerlink" title="3.1 $R^{2}$中的向量定义"></a>3.1 $R^{2}$中的向量定义</h2><ul><li>仅含一列的矩阵称为列向量，或简称向量。</li><li>两个向量相等，当且仅当两个向量对应元素相等。</li><li>向量是实数的有序对。</li><li>所有元素都是零的向量称为零向量。</li></ul><h2 id="3-2-向量的性质"><a href="#3-2-向量的性质" class="headerlink" title="3.2 向量的性质"></a>3.2 向量的性质</h2><ul><li>向量u, v, w和标量c和d</li><li>u + v = v + u</li><li>(u + v) + w = u + (v + w)</li><li>u + 0 = 0 + u</li><li>u + (-u) = -u + u = 0</li></ul><h2 id="3-3-线性组合"><a href="#3-3-线性组合" class="headerlink" title="3.3 线性组合"></a>3.3 线性组合</h2><p>戈丁$R^n$中的向量$v_1, v_2, \dots, v_p$和标量$c_1, c_2, \dots, c_p$，向量$y = c_1v_1 + c_2v_2 + \dots + c_pv_p$称为向量$v_1, v_2, \dots, v_p$以$c_1, c_2, \dots, c_p$为权的线性组合。</p><p>定义$Span\{v_1, v_2, \dots, v_n\}$为由$v_1, v_2, \dots, v_n$的所有线性组合所成的集合。</p><p>要判断向量b是否属于$Span\{v_1, v_2, \dots, v_n\}$，就是判断向量方程：</p><script type="math/tex; mode=display">x_1v_1 + x_2v_2 + \dots + x_nv_n = b</script><p>是否有解。</p><h2 id="3-4-向量方程"><a href="#3-4-向量方程" class="headerlink" title="3.4 向量方程"></a>3.4 向量方程</h2><p>向量方程<script type="math/tex">x_1a_1 + _2a_2 + \dots + x_na_n = b</script>，和增广矩阵为<script type="math/tex">[a_1 a_2 \dots a_n b]</script>的线性方程组有相同的解集。特别地，b可表示为$a_1, a_2, \dots, a_n$的线性组合，当且仅当上述增广矩阵有解。</p><p>线性代数的一个主要思想是研究可以表示为某一固定向量集合$\{v_1, v_2, \dots, v_n\}$的线性组合的所有向量。</p><h1 id="4-矩阵方程"><a href="#4-矩阵方程" class="headerlink" title="4. 矩阵方程"></a>4. 矩阵方程</h1><p>若A是mxn矩阵，它的各列为$a_1, \dots, a_n$。若x是$R^n$中向量，则A与x的积，记为Ax，就是A的各列以x中对应元素为权的线性组合，即：</p><p><script type="math/tex">Ax = [a_1, a_2, \dots, a_n][x_1, x_2, \dots, x_n]^{T} = x_1a_1 +x_2a_2 + \dots + x_na_n</script>。</p><p>例：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-062045.png" alt="image-20191013142032010"></p><h2 id="4-1-向量方程和矩阵方程的区别"><a href="#4-1-向量方程和矩阵方程的区别" class="headerlink" title="4.1 向量方程和矩阵方程的区别"></a>4.1 向量方程和矩阵方程的区别</h2><p>向量方程形如:</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-062408.png" alt="image-20191013142401120"></p><p>矩阵方程形如：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-062414.png" alt="image-20191013142331968"></p><h2 id="4-2-解的存在性"><a href="#4-2-解的存在性" class="headerlink" title="4.2 解的存在性"></a>4.2 解的存在性</h2><p>设A是mxn矩阵，则下列命题是逻辑上等价的。也就是说，对某个A，他们都成立或者都不成立：</p><ul><li>对$R^{m}$中每个b，方程Ax = b有解</li><li>$R^{m}$中的每个b都是A的列的一个线性组合</li><li>A的各列生成$R^m$</li><li>A的每一行都有一个主元位置</li></ul><h1 id="5-线性方程组的解集"><a href="#5-线性方程组的解集" class="headerlink" title="5. 线性方程组的解集"></a>5. 线性方程组的解集</h1><h2 id="5-1-齐次线性方程组"><a href="#5-1-齐次线性方程组" class="headerlink" title="5.1 齐次线性方程组"></a>5.1 齐次线性方程组</h2><p>线性方程组称为齐次的，若它可写成Ax = 0的形式，其中A是mxn矩阵，0是$R^m$中的零向量。这样的方程组至少有一个解，即x = 0。这个解称为它的平凡解。</p><p>齐次方程Ax = 0有非平凡解，当且仅当方程至少有一个自由变量。</p><h2 id="5-2-参数向量形式"><a href="#5-2-参数向量形式" class="headerlink" title="5.2 参数向量形式"></a>5.2 参数向量形式</h2><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-071040.png" alt="image-20191013151029601"></p><p>方程（2）是称为平面的参数向量方程。有时也可写为：</p><p><script type="math/tex">x = sy + tv</script>。</p><h2 id="5-3-非齐次方程组的解"><a href="#5-3-非齐次方程组的解" class="headerlink" title="5.3 非齐次方程组的解"></a>5.3 非齐次方程组的解</h2><p>当非齐次方程组有许多解时，一般可表示为参数向量形式，即由一个向量加上满足对应的齐次方程的一些向量的任意线性组合的形式。</p><p>例：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-074056.png" alt="image-20191013153845394"></p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-074146.png" alt="image-20191013154102302"></p><p>几何解释：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-075925.png" alt="image-20191013155859814"></p><h1 id="6-线性无关"><a href="#6-线性无关" class="headerlink" title="6. 线性无关"></a>6. 线性无关</h1><h2 id="6-1-定义"><a href="#6-1-定义" class="headerlink" title="6.1 定义"></a>6.1 定义</h2><p>$R^n$中一组向量$\{v_1, \dots, v_p\}$称为线性无关的，若向量方程$x_1v_1 + x_2v_2 + \dots + x_pv_p = 0$仅有平凡解。向量组（集）称为线性无关的，若存在不全为零的权$c_1, \dots, c_p$，使$c_1v_1 + c_2v_2 + \dots + c_pv_p = 0$。</p><h2 id="6-2-矩阵各列的线性无关"><a href="#6-2-矩阵各列的线性无关" class="headerlink" title="6.2 矩阵各列的线性无关"></a>6.2 矩阵各列的线性无关</h2><p>矩阵A的各列线性无关，当且仅当方程Ax = 0仅有平凡解。</p><h2 id="6-3-一个或多个向量的集合"><a href="#6-3-一个或多个向量的集合" class="headerlink" title="6.3 一个或多个向量的集合"></a>6.3 一个或多个向量的集合</h2><ul><li><p>两个向量的集合$\{v_1, v_2\}$线性相关，当且仅当其中一个向量是另一个向量的倍数。这个集合线性无关，当且仅当其中一个向量都不是另一个向量的倍数。</p></li><li><p>更多个向量的集合$S = \{v_1, \dots, v_p\}$线性相关，当且仅当S中至少有一个向量是其他向量的线性组合。</p></li><li><p>若一个向量组的向量个数超过每个向量元素个数，那么这个向量组线性相关。</p></li><li>若向量组$S = \{v_1, \dots, v_p\}$包含零向量，则它线性相关。</li></ul><h1 id="7-线性变换介绍"><a href="#7-线性变换介绍" class="headerlink" title="7. 线性变换介绍"></a>7. 线性变换介绍</h1><h2 id="7-1-矩阵变换"><a href="#7-1-矩阵变换" class="headerlink" title="7.1 矩阵变换"></a>7.1 矩阵变换</h2><p>变换（或映射）T称为线性的，若：</p><ul><li>对T的定义域中一切u, v，T(u + v) = T(u) + T(v)</li><li>对一切u和标量c，T(cu) = cT(u)</li></ul><h2 id="7-2-线性变换的矩阵"><a href="#7-2-线性变换的矩阵" class="headerlink" title="7.2 线性变换的矩阵"></a>7.2 线性变换的矩阵</h2><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-132101.png" alt="image-20191013212009351"></p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-132459.png" alt="image-20191013212458966"></p><h2 id="7-3-R-2-中的几何线性变换"><a href="#7-3-R-2-中的几何线性变换" class="headerlink" title="7.3 $R^2$中的几何线性变换"></a>7.3 $R^2$中的几何线性变换</h2><p>例：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-133232.png" alt="image-20191013213231663"></p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-133423.png" alt="image-20191013213325065"></p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-133344.png" alt="image-20191013213343910"></p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-10-13-133525.png" alt="image-20191013213358029"></p>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vultr搭建个人主页</title>
      <link href="/2019/07/31/others/%E4%BD%BF%E7%94%A8Vultr%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/"/>
      <url>/2019/07/31/others/%E4%BD%BF%E7%94%A8Vultr%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><ul><li>申请域名</li><li>购买VPS</li><li>环境配置</li><li>个人网站部署<ul><li>静态网站</li><li>PHP网站</li></ul></li></ul><h1 id="2-申请域名"><a href="#2-申请域名" class="headerlink" title="2. 申请域名"></a>2. 申请域名</h1><p>域名是IP的别名。一般而言，我们想要访问一个站点，并不会直接输入IP，而是输入域名来访问。例如，想要访问Google站点的话，只需在浏览器的地址栏内输入”www.google.com”即可。</p><p>域名需要自行付费申请。一般而言，.com是主流域名，价格稍贵。其他新兴域名，例如.cc等，便宜。申请的服务商也很多，诸如阿里云、Godaddy等。</p><h1 id="3-购买VPS"><a href="#3-购买VPS" class="headerlink" title="3. 购买VPS"></a>3. 购买VPS</h1><p>VPS主要用来存放网站的所有内容，包括代码、素材等。VPS服务商也很多，在国际上比较出名的是<a href="www.vultr.com">Vultr</a>和搬瓦工。本教程利用Vultr上的服务器来搭建个人主页。</p><p>Vultr主页上的服务器购买也很简单：注册、充值、选服务。此处选取Centos 6.X作为演示。其中涉及到如何使用SSH登录服务器，请参考<a href="[https://vslam.net/2018/10/21/vultr%E7%9A%84ss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/](https://vslam.net/2018/10/21/vultr的ss服务器教程/">vultr的ss服务器教程</a>)。</p><h1 id="4-环境配置"><a href="#4-环境配置" class="headerlink" title="4. 环境配置"></a>4. 环境配置</h1><p>环境：Centos 6.X</p><h2 id="4-1-配置Nginx"><a href="#4-1-配置Nginx" class="headerlink" title="4.1 配置Nginx"></a>4.1 配置Nginx</h2><p>1）在 CentOS 上，可直接使用 yum 来安装 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure><p>2）安装完成后，使用 nginx 命令启动 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>此时，访问 <a href="http://ip" target="_blank" rel="noopener">http://ip</a> 可以看到 Nginx 的测试页面。如果无法访问，请重试用命令重启 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>如果出现如下页面，则配置正确：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-31-164104.png" alt="image-20190801004058752"></p><p>如果还是无法访问，可能是因为端口没有开放的原因。请按照如下解决方案：</p><p>1）本地机器测试nginx是否能正常启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://ip</span><br></pre></td></tr></table></figure><p>这里的ip地址为你本机的ip地址。</p><p>如果出现类似如下结果，证明服务器上nginx配置没问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.1//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span> xml:lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Test Page <span class="keyword">for</span> the Nginx HTTP Server on EPEL&lt;/title&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span><br><span class="line">        &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">            /*&lt;![CDATA[*/</span><br><span class="line">            body &#123;</span><br><span class="line">                background-color: <span class="comment">#fff;</span></span><br><span class="line">                color: <span class="comment">#000;</span></span><br><span class="line">                font-size: 0.9em;</span><br><span class="line">                font-family: sans-serif,helvetica;</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0;</span><br><span class="line">            &#125;</span><br><span class="line">            :link &#123;</span><br><span class="line">                color: <span class="comment">#c00;</span></span><br><span class="line">            &#125;</span><br><span class="line">            :visited &#123;</span><br><span class="line">                color: <span class="comment">#c00;</span></span><br><span class="line">            &#125;</span><br><span class="line">            a:hover &#123;</span><br><span class="line">                color: <span class="comment">#f50;</span></span><br><span class="line">            &#125;</span><br><span class="line">            h1 &#123;</span><br><span class="line">                text-align: center;</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0.6em 2em 0.4em;</span><br><span class="line">                background-color: <span class="comment">#294172;</span></span><br><span class="line">                color: <span class="comment">#fff;</span></span><br><span class="line">                font-weight: normal;</span><br><span class="line">                font-size: 1.75em;</span><br><span class="line">                border-bottom: 2px solid <span class="comment">#000;</span></span><br><span class="line">            &#125;</span><br><span class="line">            h1 strong &#123;</span><br><span class="line">                font-weight: bold;</span><br><span class="line">                font-size: 1.5em;</span><br><span class="line">            &#125;</span><br><span class="line">            h2 &#123;</span><br><span class="line">                text-align: center;</span><br><span class="line">                background-color: <span class="comment">#3C6EB4;</span></span><br><span class="line">                font-size: 1.1em;</span><br><span class="line">                font-weight: bold;</span><br><span class="line">                color: <span class="comment">#fff;</span></span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0.5em;</span><br><span class="line">                border-bottom: 2px solid <span class="comment">#294172;</span></span><br><span class="line">            &#125;</span><br><span class="line">            hr &#123;</span><br><span class="line">                display: none;</span><br><span class="line">            &#125;</span><br><span class="line">            .content &#123;</span><br><span class="line">                padding: 1em 5em;</span><br><span class="line">            &#125;</span><br><span class="line">            .alert &#123;</span><br><span class="line">                border: 2px solid <span class="comment">#000;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            img &#123;</span><br><span class="line">                border: 2px solid <span class="comment">#fff;</span></span><br><span class="line">                padding: 2px;</span><br><span class="line">                margin: 2px;</span><br><span class="line">            &#125;</span><br><span class="line">            a:hover img &#123;</span><br><span class="line">                border: 2px solid <span class="comment">#294172;</span></span><br><span class="line">            &#125;</span><br><span class="line">            .logos &#123;</span><br><span class="line">                margin: 1em;</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line">            /*]]&gt;*/</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Welcome to &lt;strong&gt;nginx&lt;/strong&gt; on EPEL!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">"content"</span>&gt;</span><br><span class="line">            &lt;p&gt;This page is used to <span class="built_in">test</span> the proper operation of the</span><br><span class="line">            &lt;strong&gt;nginx&lt;/strong&gt; HTTP server after it has been</span><br><span class="line">            installed. If you can <span class="built_in">read</span> this page, it means that the</span><br><span class="line">            web server installed at this site is working</span><br><span class="line">            properly.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"alert"</span>&gt;</span><br><span class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Sun Aug  4 11:16:46 2019</span></span><br><span class="line">                &lt;h2&gt;Website Administrator&lt;/h2&gt;</span><br><span class="line">                &lt;div class=<span class="string">"content"</span>&gt;</span><br><span class="line">                    &lt;p&gt;This is the default &lt;tt&gt;index.html&lt;/tt&gt; page that</span><br><span class="line">                    is distributed with &lt;strong&gt;nginx&lt;/strong&gt; on</span><br><span class="line">                    EPEL.  It is located <span class="keyword">in</span></span><br><span class="line">                    &lt;tt&gt;/usr/share/nginx/html&lt;/tt&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;p&gt;You should now put your content <span class="keyword">in</span> a location of</span><br><span class="line">                    your choice and edit the &lt;tt&gt;root&lt;/tt&gt; configuration</span><br><span class="line">                    directive <span class="keyword">in</span> the &lt;strong&gt;nginx&lt;/strong&gt;</span><br><span class="line">                    configuration file</span><br><span class="line">                    &lt;tt&gt;/etc/nginx/nginx.conf&lt;/tt&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=<span class="string">"logos"</span>&gt;</span><br><span class="line">                &lt;a href=<span class="string">"http://nginx.net/"</span>&gt;&lt;img</span><br><span class="line">                    src=<span class="string">"nginx-logo.png"</span></span><br><span class="line">                    alt=<span class="string">"[ Powered by nginx ]"</span></span><br><span class="line">                    width=<span class="string">"121"</span> height=<span class="string">"32"</span> /&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">                &lt;a href=<span class="string">"http://fedoraproject.org/"</span>&gt;&lt;img</span><br><span class="line">                    src=<span class="string">"poweredby.png"</span></span><br><span class="line">                    alt=<span class="string">"[ Powered by Fedora EPEL ]"</span></span><br><span class="line">                    width=<span class="string">"88"</span> height=<span class="string">"31"</span> /&gt;&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2）防火墙、端口开启设置</p><p>（1）打开80端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><p>（2）重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables status</span><br></pre></td></tr></table></figure><p>在进行ip访问，应该能够成功了。</p><h2 id="4-2-配置静态服务器访问路径"><a href="#4-2-配置静态服务器访问路径" class="headerlink" title="4.2 配置静态服务器访问路径"></a>4.2 配置静态服务器访问路径</h2><p>外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置静态资源的路径信息才能通过 url 正确访问到服务器上的静态资源。nginx后发现配置文件只有一个,/etc/nginx/nginx.conf。所有的配置包括虚拟目录也在此文件中配置, 这样当虚拟主机多了管理就有些不方便了。我们把配置文件拆分开来,在/etc/nginx/conf.d/ 文件建立对应的域名配置文件,比如 /etc/nginx/conf.d/123.com.conf。</p><p>1）新建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch new_file.conf &amp;&amp; vi new_file.conf</span><br></pre></td></tr></table></figure><p>2）添加配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  server_name ip; // 你的域名或者 ip</span><br><span class="line">  root /www/website; // 你的克隆到的项目路径</span><br><span class="line">  index index.html; // 显示首页</span><br><span class="line">  location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt)&#123;</span><br><span class="line">    root /www/website;</span><br><span class="line">  &#125; // 静态文件访问</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，路径/www/website为你的源文件存放地址。</p><p>3）重启Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 网站搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS开发-CocoaPods教程</title>
      <link href="/2019/07/28/programmings/iOS/IOS%E5%BC%80%E5%8F%91-CocoaPods%E6%95%99%E7%A8%8B/"/>
      <url>/2019/07/28/programmings/iOS/IOS%E5%BC%80%E5%8F%91-CocoaPods%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="CocoaPods简介"><a href="#CocoaPods简介" class="headerlink" title="CocoaPods简介"></a>CocoaPods简介</h1><p>CocoaPods是iOS的包管理工具。在开发iOS项目时，经常会使用第三方开源库，手动引入流程复杂，并且库之间还存在依赖关系，更增加了手动管理的难度。开源库如果升级了，你也想用最新版本，还需要重新手动导入，这大大增加了工作量。但用了CocoaPods后，安装和升级都只是一句命令的事情，让你可以专于业务本身。</p><h1 id="CocoaPods安装"><a href="#CocoaPods安装" class="headerlink" title="CocoaPods安装"></a>CocoaPods安装</h1><h2 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h2><p>CocoaPods基于Ruby语言开发而成，因此安装CocoaPods前需要安装Ruby环境。幸运的是Mac系统默认自带Ruby环境，如果没有请自行查找安装。检测是否安装Ruby：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gem -v</span><br><span class="line">2.0.14</span><br></pre></td></tr></table></figure><p>安装则会提示当前Ruby版本。gem介绍：gem是一个管理Ruby库和程序的标准包，它通过Ruby Gem（如 <a href="http://rubygems.org/" target="_blank" rel="noopener">http://rubygems.org/</a> ）源来查找、安装、升级和卸载软件包，非常的便捷。</p><h2 id="更换gem源"><a href="#更换gem源" class="headerlink" title="更换gem源"></a>更换gem源</h2><p>因为国内网络的问题导致gem源间歇性中断，原因你懂的。因此我们需要更换gem源，使用淘宝的gem源<a href="https://ruby.taobao.org/。" target="_blank" rel="noopener">https://ruby.taobao.org/。</a></p><p>第一步：移动默认的源:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br></pre></td></tr></table></figure><p>第二步：指定淘宝的源:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -a https://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p>第三步：查看指定的源是不是淘宝源:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p>如果是<a href="https://ruby.taobao.org/，则更换成功。" target="_blank" rel="noopener">https://ruby.taobao.org/，则更换成功。</a></p><h2 id="安装CocoaPods"><a href="#安装CocoaPods" class="headerlink" title="安装CocoaPods"></a>安装CocoaPods</h2><p>确认改成淘宝源后执行以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p>稍等片刻即可安装完成，输入以下命令检测是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pod --version</span><br><span class="line">0.39.0</span><br></pre></td></tr></table></figure><p>成功则会提示CocoaPods版本。</p><h1 id="CocoaPods使用实例"><a href="#CocoaPods使用实例" class="headerlink" title="CocoaPods使用实例"></a>CocoaPods使用实例</h1><p>首先新建一个iOS工程MyDemo，在该工程中演示CocoaPods的使用。</p><ol><li><p>进入工程的根目录，创建Podfile文件.</p></li><li><p>根据需要，我们可以在Podfile文件中写入我们需要的第三方库，这里以AFNetworking和MJRefresh为例，Podfile内容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &apos;7.0&apos;</span><br><span class="line">pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos;</span><br><span class="line">pod &apos;MJRefresh&apos;,&apos;~&gt; 3.1&apos;</span><br><span class="line"># 这段代码的意思是，当前类库支持的iOS最低版本是iOS 7.0, 要下载的两个类库的版本分别为 3.0、3.1。</span><br></pre></td></tr></table></figure></li><li><p>这时候，你就可以利用CocoPods下载AFNetworking和MJRefresh类库了。在终端中进入工程根目录，运行以下命令：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/myl/Desktop/IOS/MyDemo</span><br><span class="line">$ pod install</span><br><span class="line">Analyzing dependencies</span><br><span class="line">Downloading dependencies</span><br><span class="line">Installing AFNetworking (3.0.4)</span><br><span class="line">Installing MJRefresh (3.1.0)</span><br><span class="line">Generating Pods project</span><br><span class="line">Integrating client project</span><br><span class="line"></span><br><span class="line">[!] Please close any current Xcode sessions and use `MyDemo.xcworkspace` <span class="keyword">for</span> this project from now on.</span><br><span class="line">Sending stats</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zotero教程</title>
      <link href="/2019/06/17/science/Zotero%E6%95%99%E7%A8%8B/"/>
      <url>/2019/06/17/science/Zotero%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Zotero简介"><a href="#Zotero简介" class="headerlink" title="Zotero简介"></a>Zotero简介</h1><p><a href="https://www.zotero.org/" target="_blank" rel="noopener">Zotero</a>是一个集成式的参考文献管理软件，支持一键导出为bib格式文献库或者一键插入Word文档。</p><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><p>详见官网：<a href="https://www.zotero.org/" target="_blank" rel="noopener">Zotero</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h3><p>打开Zotero，找到[首选项]或偏好。在同步一栏输入注册的账号，这样，文献库可以同步到[Zotero]官网。</p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>由于Zotero自带的云存储只有300M（虽然存储条目数据绰绰有余，但是面对众多文献pdf附件就只能两手一摊了）因此只能另外找地方来存储这些pdf。</p><p>（1）Dropbox设置</p><p>通常来说，Dropbox默认的同步文件夹名为Dropbox。<br>（2）设置Zotero首选项</p><p>打开 编辑 - 首选项 ，切换至 同步 标签，取消勾选 文件同步 中的两个复选框。这一步的目的是不让附件自动同步到Zotero的云空间上。</p><p>仅一台电脑：打开 编辑 - 首选项 ，切换至 高级 标签，再切换至 文件和文件夹 子标签，在 链接附件的根目录 中选择一个文件夹。这个文件夹需要建在Onedrive（或其他云盘）文件夹里，用来存储pdf文件。比如：\Users\xxx\OneDrive\My Zotero\My Reference。</p><p>多台电脑：需要保持两台电脑及以上电脑对Zotero数据的同步，确保可以随时同步查看我自己添加的笔记，文献的 pdf 等各种文件。</p><p>如果你只是简单将Zotero的数据存储位置改到网盘里的话，同时在两台电脑打开Zotero并操作，很容易导致两台电脑的数据不一致。网盘不知道该以哪台电脑的数据库为准。如此会在Zotero文件夹下形成几十个冲突的zotero.sqlite文件。不甚优雅。还可能导致数据库损坏。</p><p>我们可以利用 Zotero 官方的数据同步功能来同步数据库，使用symlink（符号链接）的形式同步文件。符号链接是一种软链接，由一个文件夹指向另一个文件夹，此处及Zotero文件夹指向Dropbox文件夹。操作系统访问符号链接所在文件夹时，会自动跳转到所指向的源文件夹，仿佛直接在访问源文件夹。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="string">"/Users/XXX/网盘路径/Zotero/storage"</span> <span class="string">"/Users/XXX/本地路径/Zotero"</span></span><br></pre></td></tr></table></figure><p>（3）设置 ZotFile 首选项</p><p>ZotFile是一个Zotero的附件管理插件。由于Zotero默认保存附件的机制是：每添加一个附件，就在storage文件夹中自动随机生成一串字母数字作为文件夹名，然后将pdf附件保存在该文件夹中。这样的后果就是我们无法方便地对附件归类，并且不方便搜寻特定的附件。ZotFile可按照特定规则自动修改文件名，并可按照分类规则自动创建文件夹，将符合该规则的附件放在同一个文件夹下。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://dango.rocks/blog/2019/03/25/Zotero_ZotFile_iCloud/" target="_blank" rel="noopener">迁移到 Zotero + ZotFile + OneDrive</a></li><li><a href="https://ffffuturexu.github.io/hexo-blog/2018/02/26/zotero-setting/" target="_blank" rel="noopener">文献管理工具 Zotero 的同步设置</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学术 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AFNetworking库教程</title>
      <link href="/2019/05/12/programmings/iOS/AFNetworking%E5%BA%93%E6%95%99%E7%A8%8B/"/>
      <url>/2019/05/12/programmings/iOS/AFNetworking%E5%BA%93%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p><p>超文本传输协议（HyperText Transfer Protocol，HTTP）是从服务器传输数据到客户端的传输协议。</p><p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>支持客户/服务器模式；</li><li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li><li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li><li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li><li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ul><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息。URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。</p><p>完整的URL包括以下几部分：</p><p>实例：<a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name" target="_blank" rel="noopener">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p><ul><li>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符；</li><li>域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用；</li><li>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口；</li><li>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”；</li><li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名；</li><li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分；</li><li>参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</li></ul><h2 id="请求消息Request"><a href="#请求消息Request" class="headerlink" title="请求消息Request"></a>请求消息Request</h2><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /562f25980001b1b106000338.jpg HTTP/1.1</span><br><span class="line">Host    img.mukewang.com</span><br><span class="line">User-Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</span><br><span class="line">Accept  image/webp,image/*,*/*;q=0.8</span><br><span class="line">Referer http://www.imooc.com/</span><br><span class="line">Accept-Encoding gzip, deflate, sdch</span><br><span class="line">Accept-Language zh-CN,zh;q=0.8</span><br></pre></td></tr></table></figure><ul><li>请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</li><li>求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息。从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等；<ul><li>Accept: 客户端接受哪些 Mine 类型。如 Accept: text/html</li><li>Accept-Encoding: 支持的编码类型。如 gzip, deflate, sdch</li><li>Accept-Language: 可接受的语言。如 en-US,en;q=0.8</li><li>User-Agent:一个标识客户端的字符串。如 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML，like Gecko) Chrome/38.0.2125.101 Safari/537.36</li><li>Cookie: Cookie。如 sessionid=c8422b97-98e2-4bc6-aa31-9b667d6ca4a5; theme=4;</li><li>Referer: 从那个页面到的该页面。</li></ul></li><li>空行，请求头部后面的空行是必须的；</li><li>请求数据也叫主体，可以添加任意的其他数据。</li></ul><h2 id="响应消息Response"><a href="#响应消息Response" class="headerlink" title="响应消息Response"></a>响应消息Response</h2><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 22 May 2009 06:07:21 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;/head&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">            &lt;!--body goes here--&gt;</span><br><span class="line">      &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</li><li>消息报头，用来说明客户端要使用的一些附加信息,Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</li><li>空行，消息报头后面的空行是必须的</li><li>响应正文，服务器返回给客户端的文本信息。</li></ul><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>HTTP 状态码（HTTP Status Code）是用以表示网页服务器 HTTP 响应状态的3位数字代码。<br>所有的状态码的第一个数字代表了响应的五种状态之一:</p><ul><li>1xx：代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行 结束。</li><li>2xx：代表请求接收、理解并且接受。</li><li>3xx：代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目 标）在本次响应的Location域中指明。当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以 在没有用户介入的情况下自动提交所需要的后续请求。</li><li>4xx：代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应 该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。</li><li>5xx：代表了服务器在处理请求的过程中有错误或者异常状态发生，，也有可能是服务器意识到以当前的软硬件资源 无法完成对请求的处理。</li></ul><p>常见状态码有：</p><ul><li>200: 请求已经成功，请求所希望的响应头或者数据体将随着此响应返回</li><li>202: 服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了</li><li>204: 服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息</li><li>304: 被请求的资源内容没有发生更改</li><li>400: 包含语法错误，无法被服务器解析</li><li>403: 服务器已经接收请求，但是拒绝执行</li><li>404: 请求失败，请求所希望得到的资源未在服务器上发现</li><li>408: 请求超时。客户端可以再次提交这一请求而无需任何修改</li><li>500: 服务器内部错误，无法处理请求</li><li>502: 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效响应</li><li>504: 作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应</li></ul><h3 id="响应头字段"><a href="#响应头字段" class="headerlink" title="响应头字段"></a>响应头字段</h3><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Date: Mon, 27 Jul 2009 12:28:53 GMT</span><br><span class="line">Server: Apache/2.2.14 (Win32)</span><br><span class="line">Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class="line">Content-Length: 88</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Connection: Closed</span><br></pre></td></tr></table></figure><p>常见响应头有：</p><ul><li>Content-Encoding: 数据的编码类型。如 Content-Encoding: gzip</li><li>Server: 服务器的名称。如 Server:thin 1.5.0 codename Knife</li><li>Location:  通知客户端新的资源位置。如 Location: <a href="http://www.github.com/login" target="_blank" rel="noopener">http://www.github.com/login</a></li><li>Content-Type: 响应数据的类型。如 Content-Type:text/html; charset=UTF-8</li><li>Content-Encoding: 响应数据的编码格式。如 gzip。客户端会根据该值对响应内容解码。</li></ul><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>根据HTTP标准，HTTP请求可以使用多种请求方法。HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET  请求指定的页面信息，并返回实体主体。</span><br><span class="line">HEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</span><br><span class="line">POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</span><br><span class="line">PUT  从客户端向服务器传送的数据取代指定的文档的内容。</span><br><span class="line">DELETE   请求服务器删除指定的页面。</span><br><span class="line">CONNECT  HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</span><br><span class="line">OPTIONS  允许客户端查看服务器的性能。</span><br><span class="line">TRACE    回显服务器收到的请求，主要用于测试或诊断。</span><br></pre></td></tr></table></figure><h2 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h2><p>步骤：</p><p>1）客户端连接到Web服务器</p><p>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如：<a href="http://www.vslam.net" target="_blank" rel="noopener">http://www.vslam.net</a>.</p><p>2）发送HTTP请求</p><p>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</p><p>3）服务器接受请求并返回HTTP响应</p><p>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</p><p>4）释放连接TCP连接</p><p>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p><p>5）客户端浏览器解析HTML内容</p><p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p><p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p><p>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</p><p>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</p><p>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</p><p>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</p><p>5、释放 TCP连接;</p><p>6、浏览器将该 html 文本并显示内容;</p><h2 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h2><p>例子：</p><p>GET请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /books/?sex=man&amp;name=Professional HTTP/1.1</span><br><span class="line">Host: www.wrox.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><p>注意最后一行是空行。</p><p>POST请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.wrox.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 40</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">name=Professional%20Ajax&amp;publisher=Wiley</span><br></pre></td></tr></table></figure><p>1）GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；例 如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p><p>2）POST提交：把提交的数据放置在是HTTP包的包体中。</p><p>因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</p><h2 id="命令行-HTTP-客户端"><a href="#命令行-HTTP-客户端" class="headerlink" title="命令行 HTTP 客户端"></a>命令行 HTTP 客户端</h2><p><a href="https://link.jianshu.com/?t=https://github.com/jkbrzt/httpie" target="_blank" rel="noopener">HTTPie</a> 类似 cURL，但其 api 相比 cURL 更友好。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.jianshu.com/p/80e25cb1d81a" target="_blank" rel="noopener">关于HTTP协议，一篇就够了</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下更换Homebrew镜像源</title>
      <link href="/2019/05/12/programmings/linux/Mac%E4%B8%8B%E6%9B%B4%E6%8D%A2Homebrew%E9%95%9C%E5%83%8F%E6%BA%90/"/>
      <url>/2019/05/12/programmings/linux/Mac%E4%B8%8B%E6%9B%B4%E6%8D%A2Homebrew%E9%95%9C%E5%83%8F%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1-使用中科大源"><a href="#1-使用中科大源" class="headerlink" title="1. 使用中科大源"></a>1. 使用中科大源</h1><p>(1) 替换默认源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure><p>(2) 替换homebrew-core.git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>(3) 替换Homebrew Bottles源</p><blockquote><p>Homebrew是OS X系统的一款开源的包管理器。出于节省时间的考虑，Homebrew默认从Homebrew Bottles源中下载二进制代码包安装。Homebrew Bottles是Homebrew提供的二进制代码包，目前镜像站收录了以下仓库：<br>homebrew/homebrew-core<br>homebrew/homebrew-dupes<br>homebrew/homebrew-games<br>homebrew/homebrew-gui<br>homebrew/homebrew-python<br>homebrew/homebrew-php<br>homebrew/homebrew-science<br>homebrew/homebrew-versions<br>homebrew/homebrew-x11</p></blockquote><p>对于bash用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>对于zsh用户:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="2-使用清华源"><a href="#2-使用清华源" class="headerlink" title="2. 使用清华源"></a>2. 使用清华源</h1><p>(1) 替换默认源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>(2) 使用homebrew-science或者homebrew-python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-science"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-science.git</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-python"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-python.git</span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>(3) 替换Homebrew Bottles源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><h1 id="3-切换回官方源"><a href="#3-切换回官方源" class="headerlink" title="3. 切换回官方源"></a>3. 切换回官方源</h1><p>(1) 重置brew.git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure><p>(2) 重置homebrew-core.git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>(3) 注释掉bash配置文件里的有关Homebrew Bottles即可恢复官方源。 重启bash或让bash重读配置文件。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://blog.csdn.net/lwplwf/article/details/79097565" target="_blank" rel="noopener">Mac下更换Homebrew镜像源</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++空类</title>
      <link href="/2019/05/12/programmings/c_plus_plus/C-%E7%A9%BA%E7%B1%BB/"/>
      <url>/2019/05/12/programmings/c_plus_plus/C-%E7%A9%BA%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>C++的空类是指这个类不带任何数据，即类中没有非静态(non-static)数据成员变量，没有虚函数(virtual function)，也没有虚基类(virtual base class)。</p><p>直观地看，空类对象不使用任何空间，因为没有任何隶属对象的数据需要存储。然而，C++标准规定，凡是一个独立的(非附属)对象都必须具有非零大小。换句话说，++空类的大小不为0。</p><p>C++标准指出，不允许一个对象（当然包括类对象）的大小为0，不同的对象不能具有相同的地址。这是由于：</p><ul><li>new需要分配不同的内存地址，不能分配内存大小为0的空间</li><li>避免除以 sizeof(T)时得到除以0错误</li></ul><p>故使用一个字节来区分空类。</p><p>为了验证这个结论，可以先来看测试程序的输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoMembers</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NoMembers n;  <span class="comment">// Object of type NoMembers.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The size of an object of empty class is: "</span></span><br><span class="line">         &lt;&lt; <span class="keyword">sizeof</span>(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">he size of an object of empty <span class="class"><span class="keyword">class</span> <span class="title">is</span>:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>值得注意的是，这并不代表一个空的基类也需要加一个字节到子类中去。这种情况下，空类并不是独立的，它附属于子类。子类继承空类后，子类如果有自己的数据成员，而空基类的一个字节并不会加到子类中去。例如，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D</span> :</span> <span class="keyword">public</span> Empty &#123;<span class="keyword">int</span> a;&#125;;</span><br></pre></td></tr></table></figure><p>sizeof(D)为4。</p><p>再来看另一种情况，一个类包含一个空类对象数据成员。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoldsAnInt</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    Empty e;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>大多数编译器中，你会发现 sizeof(HoldsAnInt) 输出为8。这是由于，Empty类的大小虽然为1，然而为了内存对齐，编译器会为HoldsAnInt额外加上一些字节，使得HoldsAnInt被放大到足够又可以存放一个int。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程-设计模式教程</title>
      <link href="/2019/05/12/programmings/c_plus_plus/%E7%BC%96%E7%A8%8B-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%95%99%E7%A8%8B/"/>
      <url>/2019/05/12/programmings/c_plus_plus/%E7%BC%96%E7%A8%8B-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>确保某个类只有一个实例,并且自行实例化并向整个系统提供这个实例。</p><p>1）特点</p><ul><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ul><p>2）应用场景</p><ul><li>频繁访问数据库或文件的对象。</li><li>工具类对象；</li><li>创建对象时耗时过多或耗费资源过多，但又经常用到的对象；</li></ul><p>3）优点</p><ul><li>内存中只存在一个对象，节省了系统资源。</li><li>避免对资源的多重占用，例如一个文件操作，由于只有一个实例存在内存中，避免对同一资源文件的同时操作。</li></ul><p>4）缺点</p><ul><li>获取对象时不能用new</li><li>单例对象如果持有Context，那么很容易引发内存泄露。</li><li>单例模式一般没有接口，扩展很困难，若要扩展，只能修改代码来实现。</li></ul><p>5）实现</p><p>（1）推荐方案</p><p>Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一次调用getInstance方法时才加载SingletonHolder并初始化sInstance</span></span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.sInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton sInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// version 1.2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Singleton() &#123; &#125;;</span><br><span class="line">~Singleton() &#123; &#125;;</span><br><span class="line">Singleton(<span class="keyword">const</span> Singleton&amp;);</span><br><span class="line">Singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> Singleton&amp; <span class="title">getInstance</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>（2) 饿汉式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例类.   </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;<span class="comment">//构造方法为private,防止外部代码直接通过new来构造多个对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton single = <span class="keyword">new</span> Singleton();  <span class="comment">//在类初始化时，已经自行实例化,所以是线程安全的。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  <span class="comment">//通过getInstance()方法获取实例对象</span></span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：写法简单，线程安全。</li><li>缺点：没有懒加载的效果，如果没有使用过的话会造成内存浪费。</li></ul><p>（3) 懒汉式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">            single = <span class="keyword">new</span> Singleton();  <span class="comment">//在第一次调用getInstance()时才实例化，实现懒加载,所以叫懒汉式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：实现了懒加载的效果。</li><li>缺点：线程不安全。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton single = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="comment">//加上synchronized同步 </span></span><br><span class="line">        <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;</span><br><span class="line">            single = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：实现了懒加载的效果，线程安全。</li><li>缺点：使用synchronized会造成不必要的同步开销，而且大部分时候我们是用不到同步的.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton; <span class="comment">//volatile 能够防止代码的重排序，保证得到的对象是初始化过</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  <span class="comment">//第一次检查，避免不必要的同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;  <span class="comment">//同步</span></span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;   <span class="comment">//第二次检查，为null时才创建实例</span></span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：懒加载，线程安全，效率较高</li><li>缺点：volatile影响一点性能，高并发下有一定的缺陷，某些情况下DCL会失效，虽然概率较小。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-grep教程</title>
      <link href="/2019/02/15/programmings/linux/linux-grep%E6%95%99%E7%A8%8B/"/>
      <url>/2019/02/15/programmings/linux/linux-grep%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</p><p>grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p><h1 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [option] pattern file</span><br></pre></td></tr></table></figure><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>用于过滤/搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活。</p><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-a  --text   <span class="comment">#不要忽略二进制的数据。   </span></span><br><span class="line">-A&lt;显示行数&gt;   --after-context=&lt;显示行数&gt;   <span class="comment">#除了显示符合范本样式的那一列之外，并显示该行之后的内容。   </span></span><br><span class="line">-b   --byte-offset   <span class="comment">#在显示符合样式的那一行之前，标示出该行第一个字符的编号。   </span></span><br><span class="line">-B&lt;显示行数&gt;   --before-context=&lt;显示行数&gt;   <span class="comment">#除了显示符合样式的那一行之外，并显示该行之前的内容。   </span></span><br><span class="line">-c    --count   <span class="comment">#计算符合样式的列数。   </span></span><br><span class="line">-C&lt;显示行数&gt;    --context=&lt;显示行数&gt;或-&lt;显示行数&gt;   <span class="comment">#除了显示符合样式的那一行之外，并显示该行之前后的内容。   </span></span><br><span class="line">-d &lt;动作&gt;      --directories=&lt;动作&gt;   <span class="comment">#当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。   </span></span><br><span class="line">-e&lt;范本样式&gt;  --regexp=&lt;范本样式&gt;   <span class="comment">#指定字符串做为查找文件内容的样式。   </span></span><br><span class="line">-E      --extended-regexp   <span class="comment">#将样式为延伸的普通表示法来使用。   </span></span><br><span class="line">-f&lt;规则文件&gt;  --file=&lt;规则文件&gt;   <span class="comment">#指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。   </span></span><br><span class="line">-F   --fixed-regexp   <span class="comment">#将样式视为固定字符串的列表。   </span></span><br><span class="line">-G   --basic-regexp   <span class="comment">#将样式视为普通的表示法来使用。   </span></span><br><span class="line">-h   --no-filename   <span class="comment">#在显示符合样式的那一行之前，不标示该行所属的文件名称。   </span></span><br><span class="line">-H   --with-filename   <span class="comment">#在显示符合样式的那一行之前，表示该行所属的文件名称。   </span></span><br><span class="line">-i    --ignore-case   <span class="comment">#忽略字符大小写的差别。   </span></span><br><span class="line">-l    --file-with-matches   <span class="comment">#列出文件内容符合指定的样式的文件名称。   </span></span><br><span class="line">-L  --files-without-match   <span class="comment">#列出文件内容不符合指定的样式的文件名称。   </span></span><br><span class="line">-n   --line-number   <span class="comment">#在显示符合样式的那一行之前，标示出该行的列数编号。   </span></span><br><span class="line">-q   --quiet或--silent   <span class="comment">#不显示任何信息。   </span></span><br><span class="line">-r   --recursive   <span class="comment">#此参数的效果和指定“-d recurse”参数相同。   </span></span><br><span class="line">-s   --no-messages   <span class="comment">#不显示错误信息。   </span></span><br><span class="line">-v   --revert-match   <span class="comment">#显示不包含匹配文本的所有行。   </span></span><br><span class="line">-V   --version   <span class="comment">#显示版本信息。   </span></span><br><span class="line">-w   --word-regexp   <span class="comment">#只显示全字符合的列。   </span></span><br><span class="line">-x    --line-regexp   <span class="comment">#只显示全列符合的列。   </span></span><br><span class="line">-y   <span class="comment">#此参数的效果和指定“-i”参数相同。</span></span><br></pre></td></tr></table></figure><h2 id="规则表达式"><a href="#规则表达式" class="headerlink" title="规则表达式"></a>规则表达式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">^  <span class="comment">#锚定行的开始 如：'^grep'匹配所有以grep开头的行。    </span></span><br><span class="line">$  <span class="comment">#锚定行的结束 如：'grep$'匹配所有以grep结尾的行。    </span></span><br><span class="line">.  <span class="comment">#匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。    </span></span><br><span class="line">*  <span class="comment">#匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。    </span></span><br><span class="line">.*   <span class="comment">#一起用代表任意字符。   </span></span><br><span class="line">[]   <span class="comment">#匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。    </span></span><br><span class="line">[^]  <span class="comment">#匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。    </span></span><br><span class="line">\(..\)  <span class="comment">#标记匹配字符，如'\(love\)'，love被标记为1。    </span></span><br><span class="line">\&lt;      <span class="comment">#锚定单词的开始，如:'\&lt;grep'匹配包含以grep开头的单词的行。    </span></span><br><span class="line">\&gt;      <span class="comment">#锚定单词的结束，如'grep\&gt;'匹配包含以grep结尾的单词的行。    </span></span><br><span class="line">x\&#123;m\&#125;  <span class="comment">#重复字符x，m次，如：'0\&#123;5\&#125;'匹配包含5个o的行。    </span></span><br><span class="line">x\&#123;m,\&#125;  <span class="comment">#重复字符x,至少m次，如：'o\&#123;5,\&#125;'匹配至少有5个o的行。    </span></span><br><span class="line">x\&#123;m,n\&#125;  <span class="comment">#重复字符x，至少m次，不多于n次，如：'o\&#123;5,10\&#125;'匹配5--10个o的行。   </span></span><br><span class="line">\w    <span class="comment">#匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。   </span></span><br><span class="line">\W    <span class="comment">#\w的反置形式，匹配一个或多个非单词字符，如点号句号等。   </span></span><br><span class="line">\b    <span class="comment">#单词锁定符，如: '\bgrep\b'只匹配grep。  </span></span><br><span class="line"></span><br><span class="line">POSIX字符:</span><br><span class="line">为了在不同国家的字符编码中保持一至，POSIX(The Portable Operating System Interface)增加了特殊的字符类，如[:alnum:]是[A-Za-z0-9]的另一个写法。要把它们放到[]号内才能成为正则表达式，如[A- Za-z0-9]或[[:alnum:]]。在linux下的grep除fgrep外，都支持POSIX的字符类。</span><br><span class="line"></span><br><span class="line">[:alnum:]    <span class="comment">#文字数字字符   </span></span><br><span class="line">[:alpha:]    <span class="comment">#文字字符   </span></span><br><span class="line">[:digit:]    <span class="comment">#数字字符   </span></span><br><span class="line">[:graph:]    <span class="comment">#非空字符（非空格、控制字符）   </span></span><br><span class="line">[:lower:]    <span class="comment">#小写字符   </span></span><br><span class="line">[:cntrl:]    <span class="comment">#控制字符   </span></span><br><span class="line">[:<span class="built_in">print</span>:]    <span class="comment">#非空字符（包括空格）   </span></span><br><span class="line">[:punct:]    <span class="comment">#标点符号   </span></span><br><span class="line">[:space:]    <span class="comment">#所有空白字符（新行，空格，制表符）   </span></span><br><span class="line">[:upper:]    <span class="comment">#大写字符   </span></span><br><span class="line">[:xdigit:]   <span class="comment">#十六进制数字（0-9，a-f，A-F）</span></span><br></pre></td></tr></table></figure><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><h2 id="查找文件中制定行的内容哦并输出到制定文件中"><a href="#查找文件中制定行的内容哦并输出到制定文件中" class="headerlink" title="查找文件中制定行的内容哦并输出到制定文件中"></a>查找文件中制定行的内容哦并输出到制定文件中</h2><p>被找文件：images.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># id x y z qw qx qy qz image</span></span><br><span class="line">1 1 1 1 1 0 0 0 00.JPG</span><br><span class="line">2 2 2 2 2 2 2 2 2 2 2 2 2 2</span><br><span class="line">3 1 2 2 1 0 0 0 11.JPG</span><br><span class="line">4 2 3 3 3 3 3 3 3 3 3 3 3 3</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此处想要查找和的得到包含JPG行的内容，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'JPG$'</span> images.txt &gt; image.txt</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.cnblogs.com/peida/archive/2012/12/17/2821195.html" target="_blank" rel="noopener">每天一个linux命令（39）：grep 命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发之使用网络时间</title>
      <link href="/2018/11/23/programmings/linux/Android%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4/"/>
      <url>/2018/11/23/programmings/linux/Android%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="使用truetime-android第三方库实现"><a href="#使用truetime-android第三方库实现" class="headerlink" title="使用truetime-android第三方库实现"></a>使用truetime-android第三方库实现</h1><p>github地址：<a href="https://github.com/instacart/truetime-android" target="_blank" rel="noopener">https://github.com/instacart/truetime-android</a></p><h2 id="配置教程"><a href="#配置教程" class="headerlink" title="配置教程"></a>配置教程</h2><p>详见：github的<a href="https://github.com/instacart/truetime-android/wiki/How-to-use-this-library" target="_blank" rel="noopener">wiki</a>，也可阅读本文实例教程。</p><p>Add this to your application’s build.gradle file:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">"https://jitpack.io"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    implementation <span class="string">'com.github.instacart.truetime-android:library-extension-rx:&lt;release-version&gt;'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// or if you want the vanilla version of Truetime:</span></span><br><span class="line">    implementation <span class="string">'com.github.instacart.truetime-android:library:&lt;release-version&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">"https://jitpack.io"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">implementation <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></span><br><span class="line"><span class="function">    implementation 'com.android.support:appcompat-v7:28.0.0-rc02'</span></span><br><span class="line"><span class="function">    implementation 'com.android.support.constraint:constraint-layout:1.1.2'</span></span><br><span class="line"><span class="function">    implementation 'com.github.instacart.truetime-android:library:3.3'</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>Importing ‘com.github.instacart.truetime-android:library:<release-version>‘ should be sufficient for this.</release-version></p><p>Then you must initialize it in onCreate() in your class that extendsandroid.app.Application.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TrueTime.build().initialize();</span><br></pre></td></tr></table></figure><p>例子：</p><p>APP.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TrueTime.build().withNtpHost(<span class="string">"time.ustc.edu.cn"</span>).initialize();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将APP.java添加到AndroidManifest.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">android:name=<span class="string">".App"</span></span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure><p>使用Date noReallyThisIsTheTrueDateAndTime = TrueTime.now();来获取网络时间。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AR引擎调研</title>
      <link href="/2018/11/17/slam/AR%E5%BC%95%E6%93%8E%E8%B0%83%E7%A0%94/"/>
      <url>/2018/11/17/slam/AR%E5%BC%95%E6%93%8E%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h1 id="SLAM-AR"><a href="#SLAM-AR" class="headerlink" title="SLAM AR"></a>SLAM AR</h1><p>ARKit （好）<br>ARCore（好）<br>网易洞见（好）<br>EasyAR 2.1.0 Pro（一般）<br>ARToolKit （差）<br>Wikitude（较好）<br>Maxst（好）</p><h1 id="ARKit"><a href="#ARKit" class="headerlink" title="ARKit"></a>ARKit</h1><h1 id="ARCore"><a href="#ARCore" class="headerlink" title="ARCore"></a>ARCore</h1><ul><li><p>条件</p><ul><li>Android SDK 7.0 (API level 24) or higher</li><li>minSdk 19</li><li>Google Pixel and Pixel XL。Samsung Galaxy S8 (SM-G950U, SM-G950N, SM-G950FD, SM-G950FD, SM-G950W, SM-G950U1)</li></ul></li><li><p>功能点与特点</p><ul><li>支持平面监测</li><li>支持环境光照预估</li><li>支持直接识别 frame 增加锚点</li><li>demo 中未见目标图像识别</li><li>支持机型暂时较少</li><li>移动手机，模型显示稳定</li></ul></li><li><p>价格</p><ul><li>免费</li></ul></li></ul><h1 id="网易洞见"><a href="#网易洞见" class="headerlink" title="网易洞见"></a>网易洞见</h1><ul><li><p>条件</p><ul><li>无机型限制</li></ul></li><li><p>功能点与特点</p><ul><li>支持 Android、iOS</li><li>支持指定目标图像识别</li><li>支持即时场景投放，显示效果好</li><li>支持 SLAM</li><li>对机器有要求，红米 Note 4 有卡顿（官方demo）</li></ul></li><li><p>价格</p><ul><li>收费</li></ul></li></ul><h1 id="EasyAR"><a href="#EasyAR" class="headerlink" title="EasyAR"></a>EasyAR</h1><ul><li><p>条件</p><ul><li>无机型限制</li></ul></li><li><p>功能点与特点</p><ul><li>支持平台 Android，iOS，Unity</li><li>支持单图和多图识别，可设置跟踪器数目，支持三维模型跟踪</li><li>支持即时视频帧图像识别</li><li>支持二维码识别</li><li>视频播放</li><li>支持录屏</li><li>2.1 专业版支持平面监测</li><li>容易上手，API 设计友好</li></ul></li><li><p>价格</p><ul><li>v1.3.1 免费，无水印，仅支持图像识别</li><li>v2.0.0，v2.1.0 专业版收费，支持 3D 物体识别，环境感知，云识别，app 云打包。￥2999/一个APP，一次性收费，永久使用</li><li>云端图库识别，根据日活沟通联系价格</li></ul></li><li><p>结论</p><ul><li><strong><em>设备能运行demo，有slam，效果很不稳定，demo没显示相机图像</em></strong></li></ul></li></ul><h1 id="Maxst"><a href="#Maxst" class="headerlink" title="Maxst"></a>Maxst</h1><ul><li><p>条件</p><ul><li>无机型限制</li></ul></li><li><p>功能与特点</p><ul><li>支持平台：Android，iOS，Windows，Mac OS</li><li>支持指定图像识别</li><li>支持视频播放</li><li>支持即时视频图像识别</li><li>视频增强显示</li><li>支持 SLAM</li><li>支持二维码和条形码扫描</li><li>集成效果较好，模型显示较稳定</li><li>集成简单，文档清晰</li></ul></li><li><p>价格</p><ul><li>收费版：499（支持查看，社区支持），（增加邮件支持）</li><li>免费版：有水印，功能与收费版误差别</li></ul></li><li><p>结论</p><ul><li><strong><em>无尺度信息，不可用</em></strong></li><li>MAXST构建的坐标系，坐标原点位置可以选择相机或者Target</li><li>MAXST的SLAM是基于视觉的，在初始化的时候就确定下来图片上的特征点，相机离开这些特征点会导致SLAM丢失，此时需要重新初始化</li><li>通过MAXST的接口获取特征点，返回的特征点数据是二维信息，不具备深度信息，不像ARCore返回的是三维坐标</li><li>VisualSLAM Demo定位效果还不错，想用来测距，后来发现每次初始化的位置不一样，建立坐标系大小不同，所以没有绝对的距离信息，不能用于直接测量距离</li><li>InstantTracker Demo不需要初始化即可找到平面了，有点神奇，不过不是很准，而且放置的物体不是很稳定</li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.zybuluo.com/zyl06/note/926425" target="_blank" rel="noopener">Android AR 简单调研</a></li><li><a href="https://blog.csdn.net/killfunst/article/details/82389460" target="_blank" rel="noopener">玩各种各样的AR库，最终选择了MAXST</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> AR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> AR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性方程组Ax=b求解</title>
      <link href="/2018/11/11/math/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84Ax-b%E6%B1%82%E8%A7%A3/"/>
      <url>/2018/11/11/math/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84Ax-b%E6%B1%82%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h1><p>有多个未知数，并且每个未知数的次数均为一次，这样多个未知数组成的方程组为线性方程组。</p><h1 id="高斯消元法"><a href="#高斯消元法" class="headerlink" title="高斯消元法"></a>高斯消元法</h1><p>高斯消元主要用来求解线性方程组，也可以求解矩阵的秩，矩阵的逆。在ACM中是一个有力的数学武器。时间复杂度是n^3，主要与方程组的个数，未知数的个数有关。高斯消元的过程就是手算解方程组的过程。加减消元，消去未知数，如果有多个未知数，就一直消去，直到得到类似kx=b（k和b为常数，x为未知数）的式子，就可以求解出未知数x，然后我们回代，依次求解出各个未知数的值，就解完了方程组。 </p><p>总共分两步： </p><ol><li>加减消元 </li><li>回代求未知数值</li></ol><h2 id="C-实现1"><a href="#C-实现1" class="headerlink" title="C++实现1"></a>C++实现1</h2><p>首先，我们对于每一行找到第一个不为零的元素，并且将这一行置为1 <em> </em> <em> </em>的形式，用这一行乘上倍数加到之后的每一行。</p><p>然后，我们从最后一行开始，选择主元，加到之前的每一行上，使得该列的元素都为零。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> e     0.00000001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>    n;<span class="comment">//规模nXn</span></span><br><span class="line"><span class="keyword">double</span> a[maxn][maxn];<span class="comment">//系数矩阵</span></span><br><span class="line"><span class="keyword">double</span> b[maxn];<span class="comment">//b矩阵</span></span><br><span class="line"><span class="keyword">double</span> m[maxn][maxn];<span class="comment">//中间变量矩阵</span></span><br><span class="line"><span class="keyword">double</span> x[maxn];<span class="comment">//最终解</span></span><br><span class="line"><span class="keyword">int</span>    H=<span class="number">1</span>;<span class="comment">//扩大H被结算（优化）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">读取数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入系数矩阵规模n:= "</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|请输入系数矩阵,如：\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|1.1348 3.8326 1.1651 3.4017\n"</span>; </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|0.5301 1.7875 2.5330 1.5435\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|3.4129 4.9317 8.7643 1.3142\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|1.2371 4.9998 10.6721 0.0147\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">            a[i][j]*=H;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|请输入b矩阵，如：\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|9.5342 6.3941 18.4231 16.9237\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">        b[i]*=H;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中间矩阵输出</span></span><br><span class="line"><span class="comment">参数：消元次数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintProc</span><span class="params">(<span class="keyword">int</span> cases)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------第%d次消元结果如下：\n"</span>,cases);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">10</span>)&lt;&lt;a[i][j]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">10</span>)&lt;&lt;b[i]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"END THIS SHOW-------------\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">显示结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|结果为：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"x[%d]=  %lf\n"</span>,i,x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">顺序消元法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShunXuXiaoYuan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//消元计算</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            m[i][k]=a[i][k]/a[k][k];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=k+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                a[i][j]-=m[i][k]*a[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            b[i]-=m[i][k]*b[k];</span><br><span class="line">        &#125;</span><br><span class="line">        PrintProc(k);<span class="comment">//输出中间计算过程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回代求解</span></span><br><span class="line">    x[n]=b[n]/a[n][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        x[i]=b[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            x[i]-=a[i][j]*x[j];</span><br><span class="line">        x[i]/=a[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    Print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">列主消元</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LieZhuXiaoYuan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">        <span class="comment">//选主元[这一列的绝对值最大值]</span></span><br><span class="line">        <span class="keyword">double</span> ab_max=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span>       max_ik;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][k])&gt;ab_max)&#123;</span><br><span class="line">                ab_max=<span class="built_in">abs</span>(a[i][k]);</span><br><span class="line">                max_ik=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换行处理[先判断是否为0矩阵]</span></span><br><span class="line">        <span class="keyword">if</span>(ab_max&lt;e)&#123;<span class="comment">//0矩阵情况</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"det A=0\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(max_ik!=k)&#123;<span class="comment">//是否是当前行，不是交换</span></span><br><span class="line">            <span class="keyword">double</span> temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                temp=a[max_ik][j];</span><br><span class="line">                a[max_ik][j]=a[k][j];</span><br><span class="line">                a[k][j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=b[max_ik];</span><br><span class="line">            b[max_ik]=b[k];</span><br><span class="line">            b[k]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消元计算</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            a[i][k]/=a[k][k];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=k+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                a[i][j]-=a[i][k]*a[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">            b[i]-=a[i][k]*b[k];</span><br><span class="line">        &#125;</span><br><span class="line">        PrintProc(k);<span class="comment">//输出中间计算过程</span></span><br><span class="line">        <span class="keyword">if</span>(k&lt;n<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[n][n])&lt;e)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"det A=0\n"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//回代求解</span></span><br><span class="line">                x[n]=b[n]/a[n][n];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                    x[i]=b[i];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                        x[i]-=a[i][j]*x[j];</span><br><span class="line">                    x[i]/=a[i][i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//输出结果</span></span><br><span class="line">                Print();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">主函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        read();</span><br><span class="line">        LieZhuXiaoYuan();</span><br><span class="line">        <span class="comment">//ShunXuXiaoYuan();</span></span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">书上高斯消元的例子：</span></span><br><span class="line"><span class="comment">1 1 1 </span></span><br><span class="line"><span class="comment">1 3 -2</span></span><br><span class="line"><span class="comment">2 -2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6 1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">书上列主消元的例子：</span></span><br><span class="line"><span class="comment">-0.002 2 2</span></span><br><span class="line"><span class="comment">1 0.78125 0</span></span><br><span class="line"><span class="comment">3.996 5.5625 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0.4 1.3816 7.4178</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="C-实现2"><a href="#C-实现2" class="headerlink" title="C++实现2"></a>C++实现2</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> a[MAXN][MAXN];<span class="comment">//增广矩阵</span></span><br><span class="line">    <span class="keyword">int</span> x[MAXN];<span class="comment">//解集</span></span><br><span class="line">    <span class="keyword">bool</span> free_x[MAXN];<span class="comment">//标记是否是不确定的变元</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> a; <span class="keyword">else</span> <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a/gcd(a,b)*b;<span class="comment">//先除后乘防溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 高斯消元法解方程组(Gauss-Jordan elimination).(-2表示有浮点数解，但无整数解，</span></span><br><span class="line">    <span class="comment">//-1表示无解，0表示唯一解，大于0表示无穷解，并返回自由变元的个数)</span></span><br><span class="line">    <span class="comment">//有equ个方程，var个变元。增广矩阵行数为equ,分别为0到equ-1,列数为var+1,分别为0到var.</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Gauss</span><span class="params">(<span class="keyword">int</span> equ,<span class="keyword">int</span> var)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j,k;</span><br><span class="line">        <span class="keyword">int</span> max_r;<span class="comment">// 当前这列绝对值最大的行.</span></span><br><span class="line">        <span class="keyword">int</span> col;<span class="comment">//当前处理的列</span></span><br><span class="line">        <span class="keyword">int</span> ta,tb;</span><br><span class="line">        <span class="keyword">int</span> LCM;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">int</span> free_x_num;</span><br><span class="line">        <span class="keyword">int</span> free_index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=var;i++)&#123;</span><br><span class="line">            x[i]=<span class="number">0</span>;</span><br><span class="line">            free_x[i]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换为阶梯阵.</span></span><br><span class="line">        col=<span class="number">0</span>; <span class="comment">// 当前处理的列</span></span><br><span class="line">        <span class="keyword">for</span>(k = <span class="number">0</span>;k &lt; equ &amp;&amp; col &lt; var;k++,col++)&#123;<span class="comment">// 枚举当前处理的行.</span></span><br><span class="line">        <span class="comment">// 找到该col列元素绝对值最大的那行与第k行交换.(为了在除法时减小误差)</span></span><br><span class="line">            max_r=k;</span><br><span class="line">            <span class="keyword">for</span>(i=k+<span class="number">1</span>;i&lt;equ;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][col])&gt;<span class="built_in">abs</span>(a[max_r][col])) max_r=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max_r!=k)&#123;<span class="comment">// 与第k行交换.</span></span><br><span class="line">                <span class="keyword">for</span>(j=k;j&lt;var+<span class="number">1</span>;j++) swap(a[k][j],a[max_r][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[k][col]==<span class="number">0</span>)&#123;<span class="comment">// 说明该col列第k行以下全是0了，则处理当前行的下一列.</span></span><br><span class="line">                k--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(i=k+<span class="number">1</span>;i&lt;equ;i++)&#123;<span class="comment">// 枚举要删去的行.</span></span><br><span class="line">                <span class="keyword">if</span>(a[i][col]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    LCM = lcm(<span class="built_in">abs</span>(a[i][col]),<span class="built_in">abs</span>(a[k][col]));</span><br><span class="line">                    ta = LCM/<span class="built_in">abs</span>(a[i][col]);</span><br><span class="line">                    tb = LCM/<span class="built_in">abs</span>(a[k][col]);</span><br><span class="line">                    <span class="keyword">if</span>(a[i][col]*a[k][col]&lt;<span class="number">0</span>)tb=-tb;<span class="comment">//异号的情况是相加</span></span><br><span class="line">                    <span class="keyword">for</span>(j=col;j&lt;var+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                        a[i][j] = a[i][j]*ta-a[k][j]*tb;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1. 无解的情况: 化简的增广阵中存在(0, 0, ..., a)这样的行(a != 0).</span></span><br><span class="line">        <span class="keyword">for</span> (i = k; i &lt; equ; i++)&#123; <span class="comment">// 对于无穷解来说，如果要判断哪些是自由变元，那么初等行变换中的交换就会影响，则要记录交换.</span></span><br><span class="line">            <span class="keyword">if</span> (a[i][col] != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 无穷解的情况: 在var * (var + 1)的增广阵中出现(0, 0, ..., 0)这样的行，即说明没有形成严格的上三角阵.</span></span><br><span class="line">        <span class="comment">// 且出现的行数即为自由变元的个数.</span></span><br><span class="line">        <span class="keyword">if</span> (k &lt; var)&#123;</span><br><span class="line">            <span class="keyword">return</span> var - k; <span class="comment">// 自由变元有var - k个.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 唯一解的情况: 在var * (var + 1)的增广阵中形成严格的上三角阵.</span></span><br><span class="line">        <span class="comment">// 计算出Xn-1, Xn-2 ... X0.</span></span><br><span class="line">        <span class="keyword">for</span> (i = var - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            temp = a[i][var];</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; var; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i][j] != <span class="number">0</span>) temp -= a[i][j] * x[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp % a[i][i] != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-2</span>; <span class="comment">// 说明有浮点数解，但无整数解.</span></span><br><span class="line">            x[i] = temp / a[i][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line">    <span class="comment">//    freopen("out.txt","w",stdout);</span></span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">int</span> equ,var;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;equ, &amp;var) != EOF)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; equ; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; var + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> free_num = Gauss(equ,var);</span><br><span class="line">            <span class="keyword">if</span> (free_num == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"无解!\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (free_num == <span class="number">-2</span>) <span class="built_in">printf</span>(<span class="string">"有浮点数解，无整数解!\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (free_num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"无穷多解! 自由变元个数为%d\n"</span>, free_num);</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; var; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (free_x[i]) <span class="built_in">printf</span>(<span class="string">"x%d 是不确定的\n"</span>, i + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"x%d: %d\n"</span>, i + <span class="number">1</span>, x[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; var; i++)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"x%d: %d\n"</span>, i + <span class="number">1</span>, x[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="QR-分解"><a href="#QR-分解" class="headerlink" title="QR 分解"></a>QR 分解</h1><h2 id="QR-分解的形式"><a href="#QR-分解的形式" class="headerlink" title="QR 分解的形式"></a>QR 分解的形式</h2><p>QR 分解是把矩阵分解成一个正交矩阵与一个上三角矩阵的积。QR 分解经常用来解线性最小二乘法问题。QR 分解也是特定特征值算法即QR算法的基础。</p><h2 id="QR-分解的求解"><a href="#QR-分解的求解" class="headerlink" title="QR 分解的求解"></a>QR 分解的求解</h2><p>QR 分解的实际计算有很多方法，例如 Givens 旋转、Householder 变换，以及 Gram-Schmidt 正交化等等。每一种方法都有其优点和不足</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/pengwill97/article/details/77200372" target="_blank" rel="noopener">高斯消元快速入门</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 线性方程组求解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 线性方程组求解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-SVM调参</title>
      <link href="/2018/11/07/machine_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-SVM%E8%B0%83%E5%8F%82/"/>
      <url>/2018/11/07/machine_learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-SVM%E8%B0%83%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SVM参数"><a href="#1-SVM参数" class="headerlink" title="1. SVM参数"></a>1. SVM参数</h1><p>SVM 怎样能得到好的结果：</p><ol><li>对数据做归一化（simple scaling） </li><li>应用 RBF kernel </li><li>用cross-validation和grid-search 得到最优的c和g </li><li>用得到的最优c和g训练训练数据 </li><li>测试</li></ol><h1 id="2-关于svm的C以及核函数参数设置"><a href="#2-关于svm的C以及核函数参数设置" class="headerlink" title="2. 关于svm的C以及核函数参数设置"></a>2. 关于svm的C以及核函数参数设置</h1><h2 id="参数C"><a href="#参数C" class="headerlink" title="参数C"></a>参数C</h2><p>C一般可以选择为：10^t , t=[- 4，4]就是0.0001 到10000。选择的越大，表示对错误例惩罚程度越大，可能会导致模型过拟合。</p><h2 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h2><p>（1）线性核函数 </p><p>（无其他参数） </p><p>（2）多项式核函数 </p><p>（重点是阶数的选择，即d，一般选择1-11：1 3 5 7 9 11，也可以选择2,4，6…） </p><p>（3）RBF核函数 </p><p>（径向基RBF内核，exp{-|xi-xj|^2/均方差}，其中均方差反映了数据波动的大小。gamma参数通常可选择下面几个数的倒数：0.1 0.2 0.4 0.6 0.8 1.6 3.2 6.4 12.8，默认的是类别数的倒数，即1/k，2分类的话就是0.5） </p><p>（4）sigmoid核函数 又叫做S形内核<br>两个参数g以及r：g一般可选1 2 3 4，r选0.2 0.4 0.6 0.8 1 </p><p><strong>说明</strong>：</p><p>（1）对于线性核函数，没有专门需要设置的参数 </p><p>（2）对于多项式核函数，有三个参数。-d用来设置多项式核函数的最高此项次数，也就是公式中的d，默认值是3。-g用来设置核函数中的gamma参数设置，也就是公式中的第一个r(gamma)，默认值是1/k（k是类别数）。-r用来设置核函数中的coef0，也就是公式中的第二个r，默认值是0。 </p><p>（3）对于RBF核函数，有一个参数。-g用来设置核函数中的gamma参数设置，也就是公式中的第一个r(gamma)，默认值是1/k（k是类别数）。 </p><p>（4）对于sigmoid核函数，有两个参数。-g用来设置核函数中的gamma参数设置，也就是公式中的第一个r(gamma)，默认值是1/k（k是类别数）。-r用来设置核函数中的coef0，也就是公式中的第二个r，默认值是0。</p><h2 id="Grid-Search"><a href="#Grid-Search" class="headerlink" title="Grid Search"></a>Grid Search</h2><p>使用grid Search虽然比较简单，而且看起来很naïve。但是他确实有两个优点：</p><ul><li>可以得到全局最优 </li><li>(C,gamma)相互独立，便于并行化进行</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vultr的ss服务器教程</title>
      <link href="/2018/10/21/others/vultr%E7%9A%84ss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2018/10/21/others/vultr%E7%9A%84ss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h1><p>登录<a href="https://www.vultr.com/" target="_blank" rel="noopener">vultr</a>，注册账号并充值。</p><p>选择vps操作系统时，不要选centos7系统！点击图中的CentOS几个字，会弹出centos6，然后选中centos6！entos7默认的防火墙可能会干扰ssr的正常连接！</p><p>开通服务器时，当出现了ip，不要立马去ping或者用xshell去连接，再等5分钟之后，有个缓冲时间。完成购买后，找到系统的密码记下来，部署服务器时需要用到。</p><h1 id="删除服务器"><a href="#删除服务器" class="headerlink" title="删除服务器"></a>删除服务器</h1><p>点击菜单栏Servers，可以看到开通的所有的服务器。找到server destroy，即可删除服务器。</p><h1 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h1><h2 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p [PORT] [username]@[ip]</span><br></pre></td></tr></table></figure><h2 id="更改默认端口"><a href="#更改默认端口" class="headerlink" title="更改默认端口"></a>更改默认端口</h2><p>(1) 登陆 SSH 修改配置文件，输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>(2) 能够看到#port 22，代表默认端口 22。先将Port 22 前面的 # 号去掉，并另起一行。如定义SSH端口号为33322，则输入：Port 33322。自定义端口选择建议在万位的端口（如：10000-65535之间）。</p><p>保留22是为了防止个别防火墙屏蔽了其它端口导致无法连接VPS（如没单独指定22，新指定的33322端口防火墙也没放行，那么可能无法通过SSH连接VPS或服务器）。为了防止不必要问题的产生，所以要给自己保留条“后路”。</p><p>(3) 以上修改完后，重启 SSH 服务，并退出当前连接的 SSH 端口。命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>(4) 开启端口防火墙。Vi 编辑器打开防火墙列表的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>按下键盘的 a，进入 vi 命令的编辑状态，回车另起一行使用上下键和 delete 键配合添加 12366 端口。不需要明白那些命令是什么意思，照着 22 端口原样输入一遍，只把端口从 22 改为 12366 就可以了，注意 linux 是区分大小写的。添加新端口之后，按下键盘的“ESC”退出当前状态，再输入:“:wq”命令保存退出。</p><p>(5) 重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><p>(6) 检查防火墙状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables status</span><br></pre></td></tr></table></figure><p>(7) 重启服务器。</p><p>(8) 屏蔽22端口</p><p>当以上步骤没有问题，既能够通过自定义的端口来登录VPS后，可将sshd_config中的22端口注释并重启SSH服务即可。</p><h1 id="部署VPS服务器"><a href="#部署VPS服务器" class="headerlink" title="部署VPS服务器"></a>部署VPS服务器</h1><p>mac用户登录服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip <span class="comment"># “ip”替换成你VPS的ip,按回车键，然后复制粘贴密码，按回车键即可登录。</span></span><br></pre></td></tr></table></figure><p>（1）连接成功后，就可以复制粘贴代码部署了。</p><p>CentOS6/Debian6/Ubuntu14 ShadowsocksR一键部署管理脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget –no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br></pre></td></tr></table></figure><p>按回车键，脚本会自动安装，以后只需要运行这个快捷命令就可以进入界面设置，快捷管理命令为：bash ssr.sh。</p><p>（2）出现管理界面后，输入数字1来安装SSR服务端。如果输入1后不能进入下一步，那么请退出，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。</p><p>（3）依次输入自己想设置的端口和密码 (密码建议用复杂点的字母组合，端口号为40-65535之间的数字)，回车键用于确认。</p><p>注：关于端口的设置，总的网络总端口有6万多个，理论上可以任意设置，但不要以0开头！但是有的地区需要设置特殊的端口才有效，一些特殊的端口比如80、143、443、1433、3306、3389、8080。</p><p>（4）选择想设置的加密方式，比如7，按回车键确认：aes-256-cfb。</p><p>（5）接下来是选择协议插件。</p><p>（6）选择并确认后，提示你是否选择兼容原版，这里的原版指的是SS客户端（SS客户端没有协议和混淆的选项），可以根据需求进行选择，演示选择y，之后进行混淆插件的设置。</p><p>注意：如果协议是origin，那么混淆也必须是plain；如果协议不是origin，那么混淆可以是任意的。有的地区需要把混淆设置成plain才好用。因为混淆不总是有效果，要看各地区的策略，有时候不混淆（plain）让其看起来像随机数据更好。（特别注意：tls 1.2_ticket_auth容易受到干扰！请选择除tls开头以外的其它混淆！！！）</p><p>（7）进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p><p>注意：关于限制设备数，这个协议必须是非原版且不兼容原版才有效，也就是必须使用SSR协议的情况下，才有效！</p><p>（8）之后代码就正式自动部署了，提示你下载文件，输入：y。</p><p>（9）部署完成，就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件，这些信息需要填入你的SSR客户端。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。</p><p>注：此脚本是开机自动启动，部署一次即可。最后可以重启服务器确保部署生效（一般情况不重启也可以）。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署。</p><p>备用配置脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br><span class="line">chmod +x shadowsocksR.sh</span><br><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br></pre></td></tr></table></figure><h1 id="一键加速VPS服务器"><a href="#一键加速VPS服务器" class="headerlink" title="一键加速VPS服务器"></a>一键加速VPS服务器</h1><p>此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。</p><p>（1）谷歌BBR加速教程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line">chmod +x bbr.sh</span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure><p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。</p><p>(2) 服务器重启成功并重新连接服务器后，输入命令lsmod | grep bbr 如果出现tcp_bbr字样表示bbr已安装并启动成功。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">自建ss服务器教程</a></li><li><a href="https://segmentfault.com/a/1190000015558387" target="_blank" rel="noopener">超详细 Vultr（VPS）搭建 SS / 新手图文指导教程</a></li><li><a href="http://blog.51cto.com/13916921/2314289?source=dra" target="_blank" rel="noopener">搬瓦工VPS搭建SS-R以及开启魔改锐速/BBR全套教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见问题</title>
      <link href="/2018/09/25/programmings/linux/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2018/09/25/programmings/linux/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="git合并常见问题"><a href="#git合并常见问题" class="headerlink" title="git合并常见问题"></a>git合并常见问题</h1><h2 id="合并失败后报错："><a href="#合并失败后报错：" class="headerlink" title="合并失败后报错："></a>合并失败后报错：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">error: unable to index file OCARKitTest/ThirdParty/CocoaAsyncSocket</span><br><span class="line">fatal: updating files failed</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached -r OCARKitTest/ThirdParty/</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;&quot;</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h2 id="摆错二"><a href="#摆错二" class="headerlink" title="摆错二"></a>摆错二</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout devel</span><br><span class="line">error: The following untracked working tree files would be overwritten by checkout:</span><br><span class="line">OCARKitTest/OCARKitTest.xcodeproj/project.xcworkspace/contents.xcworkspacedata</span><br><span class="line">OCARKitTest/OCARKitTest.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist</span><br><span class="line">Please move or remove them before you switch branches.</span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure><p>通过错误提示可知，是由于一些untracked working tree files引起的问题。所以只要解决了这些untracked的文件就能解决这个问题。</p><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clean  -d  -fx .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git本地分支关联远程分支</title>
      <link href="/2018/09/23/programmings/linux/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
      <url>/2018/09/23/programmings/linux/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>本地新建分支，同步刅远程分支并关联远程分支。</p><h1 id="新建本地分支"><a href="#新建本地分支" class="headerlink" title="新建本地分支"></a>新建本地分支</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b devel</span><br></pre></td></tr></table></figure><h1 id="同步远程分支"><a href="#同步远程分支" class="headerlink" title="同步远程分支"></a>同步远程分支</h1><p>将本地新建分支push到自己的本地远程origin上，因为只在本地创建了一个新的分支，远程    origin 上还没有该分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin devel</span><br></pre></td></tr></table></figure><h1 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/devel</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多线程教程</title>
      <link href="/2018/09/14/programmings/c_plus_plus/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%99%E7%A8%8B/"/>
      <url>/2018/09/14/programmings/c_plus_plus/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>并发指的是两个或多个独立的活动在同一时段内发生。生活中并发的例子并不少，例如在跑步的时候你可能同时在听音乐；在看电脑显示器的同时你的手指在敲击键盘。这时我们称我们大脑并发地处理这些事件，只不过我们大脑的处理是有次重点的：有时候你会更关注你呼吸的频率，而有时候你更多地被美妙的音乐旋律所吸引。这时我们可以说大脑是一种并发设计的结构。这种次重点在计算机程序设计中，体现为某一个时刻只能处理一个操作。</p><p>与并发相近的另一个概念是并行。它们两者存在很大的差别。并行就是同时执行，计算机在同一时刻，在某个时间点上处理两个或以上的操作。判断一个程序是否并行执行，只需要看某个时刻上是否多两个或以上的工作单位在运行。一个程序如果是单线程的，那么它无法并行地运行。利用多线程与多进程可以使得计算机并行地处理程序（当然 ，前提是该计算机有多个处理核心）。</p><p>并发：同一时间段内可以交替处理多个操作。</p><p>并行：同一时刻内同时处理多个操作。</p><p>并发的程序设计，提供了一种方式让我们能够设计出一种方案将问题（非必须地）并行地解决。如果我们将程序的结构设计为可以并发执行的，那么在支持并行的机器上，我们可以将程序并行地执行。因此，并发重点指的是程序的设计结构，而并行指的是程序运行的状态。并发编程，是一种将一个程序分解成小片段独立执行的程序设计方法。</p><h1 id="并发的基本方式途径"><a href="#并发的基本方式途径" class="headerlink" title="并发的基本方式途径"></a>并发的基本方式途径</h1><p>C++标准并没有提供对多进程并发的原生支持，所以C++的多进程并发要靠其他API——这需要依赖相关平台。<br>C++11 标准提供了一个新的线程库，内容包括了管理线程、保护共享数据、线程间的同步操作、低级原子操作等各种类。标准极大地提高了程序的可移植性，以前的多线程依赖于具体的平台，而现在有了统一的接口进行实现。</p><p>C++11 新标准中引入了几个头文件来支持多线程编程：</p><p>&lt; thread &gt; :包含std::thread类以及std::this_thread命名空间。管理线程的函数和类在 中声明.<br>&lt; atomic &gt; :包含std::atomic和std::atomic_flag类，以及一套C风格的原子类型和与C兼容的原子操作的函数。<br>&lt; mutex &gt; :包含了与互斥量相关的类以及其他类型和函数<br>&lt; future &gt; :包含两个Provider类（std::promise和std::package_task）和两个Future类（std::future和std::shared_future）以及相关的类型和函数。<br>&lt; condition_variable &gt; :包含与条件变量相关的类，包括std::condition_variable和std::condition_variable_any。</p><h2 id="初试多线程"><a href="#初试多线程" class="headerlink" title="初试多线程"></a>初试多线程</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t</span> <span class="params">(hello)</span></span>;</span><br><span class="line">    t.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旭日东升<br>C++11 并发编程基础（一）：并发、并行与C++多线程<br>正文</p><p>C++11标准在标准库中为多线程提供了组件，这意味着使用C++编写与平台无关的多线程程序成为可能，而C++程序的可移植性也得到了有力的保证。另外，并发编程可提高应用的性能，这对对性能锱铢必较的C++程序员来说是值得关注的。</p><p>回到顶部</p><ol><li>何为并发<br>并发指的是两个或多个独立的活动在同一时段内发生。生活中并发的例子并不少，例如在跑步的时候你可能同时在听音乐；在看电脑显示器的同时你的手指在敲击键盘。这时我们称我们大脑并发地处理这些事件，只不过我们大脑的处理是有次重点的：有时候你会更关注你呼吸的频率，而有时候你更多地被美妙的音乐旋律所吸引。这时我们可以说大脑是一种并发设计的结构。这种次重点在计算机程序设计中，体现为某一个时刻只能处理一个操作。</li></ol><p>与并发相近的另一个概念是并行。它们两者存在很大的差别。并行就是同时执行，计算机在同一时刻，在某个时间点上处理两个或以上的操作。判断一个程序是否并行执行，只需要看某个时刻上是否多两个或以上的工作单位在运行。一个程序如果是单线程的，那么它无法并行地运行。利用多线程与多进程可以使得计算机并行地处理程序（当然 ，前提是该计算机有多个处理核心）。</p><p>并发：同一时间段内可以交替处理多个操作：</p><p>图中整个安检系统是一个并发设计的结构。两个安检队列队首的人竞争这一个安检窗口，两个队列可能约定交替着进行安检，也可能是大家同时竞争安检窗口（通信）。后一种方式可能引起冲突：因为无法同时进行两个安检操作。在逻辑上看来，这个安检窗口是同时处理这两个队列。</p><p>并行：同一时刻内同时处理多个操作：</p><p>图中整个安检系统是一个并行的系统。在这里，每个队列都有自己的安检窗口，两个队列中间没有竞争关系，队列中的某个排队者只需等待队列前面的人安检完成，然后再轮到自己安检。在物理上，安检窗口同时处理这两个队列。</p><p>并发的程序设计，提供了一种方式让我们能够设计出一种方案将问题（非必须地）并行地解决。如果我们将程序的结构设计为可以并发执行的，那么在支持并行的机器上，我们可以将程序并行地执行。因此，并发重点指的是程序的设计结构，而并行指的是程序运行的状态。并发编程，是一种将一个程序分解成小片段独立执行的程序设计方法。</p><p>回到顶部<br>2.并发的基本方式途径<br>多线程与多进程是并发的两种途径。<br>想象两个场景：</p><p>场景一：你和小伙伴要开发一个项目，但小伙伴们放寒假都回家了，你们只能通过QQ聊天、手机通话、发送思维导图等方式来进行交流，总之你们无法很方便地进行沟通。好处是你们各自工作时可以互不打扰。<br>场景二：你和小伙伴放假都呆在学校实验室中开发项目，你们可以聚在一起使用头脑风暴，可以使用白板进行观点的阐述，总之你们沟通变得更方便有效了。有点遗憾的是你在思考时可能有小伙伴过来问你问题，你受到了打扰。<br>这两个场景描绘了并发的两种基本途径。每个小伙伴代表一个线程，工作地点代表一个处理器。场景一中每个小伙伴是一个单线程的进程，他们拥有独立的处理器，多个进程同时执行；场景二中只有一个处理器，所有小伙伴都是属于同一进程的线程。</p><p>2.1 多进程并发<br>多个进程独立地运行，它们之间通过进程间常规的通信渠道传递讯息（信号，套接字，文件，管道等），这种进程间通信不是设置复杂就是速度慢，这是因为为了避免一个进程去修改另一个进程，操作系统在进程间提供了一定的保护措施，当然，这也使得编写安全的并发代码更容易。<br>运行多个进程也需要固定的开销：进程的启动时间，进程管理的资源消耗。</p><p>2.2 多线程并发<br>在当个进程中运行多个线程也可以并发。线程就像轻量级的进程，每个线程相互独立运行，但它们共享地址空间，所有线程访问到的大部分数据如指针、对象引用或其他数据可以在线程之间进行传递，它们都可以访问全局变量。进程之间通常共享内存，但这种共享通常难以建立且难以管理，缺少线程间数据的保护。因此，在多线程编程中，我们必须确保每个线程锁访问到的数据是一致的。</p><p>回到顶部</p><ol><li>C++中的并发与多线程<br>C++标准并没有提供对多进程并发的原生支持，所以C++的多进程并发要靠其他API——这需要依赖相关平台。<br>C++11 标准提供了一个新的线程库，内容包括了管理线程、保护共享数据、线程间的同步操作、低级原子操作等各种类。标准极大地提高了程序的可移植性，以前的多线程依赖于具体的平台，而现在有了统一的接口进行实现。</li></ol><p>C++11 新标准中引入了几个头文件来支持多线程编程：</p><p>&lt; thread &gt; :包含std::thread类以及std::this_thread命名空间。管理线程的函数和类在 中声明.<br>&lt; atomic &gt; :包含std::atomic和std::atomic_flag类，以及一套C风格的原子类型和与C兼容的原子操作的函数。<br>&lt; mutex &gt; :包含了与互斥量相关的类以及其他类型和函数<br>&lt; future &gt; :包含两个Provider类（std::promise和std::package_task）和两个Future类（std::future和std::shared_future）以及相关的类型和函数。<br>&lt; condition_variable &gt; :包含与条件变量相关的类，包括std::condition_variable和std::condition_variable_any。</p><p>3.1 初试多线程<br>我们从一个hello开始。在单线程时：</p><p>1 # include<iostream><br>2 using namespace std;<br>3 int main()<br>4 {<br>5     cout&lt;&lt;”hello world”&lt;&lt;endl;<br>6 }</iostream></p><p>在这里，进行由一个线程组成，该线程的初始函数是main。我们启动第二个线程来打印hello world：</p><p>按 Ctrl+C 复制代码</p><h1 id="include"><a href="#include" class="headerlink" title="include"></a>include<iostream></iostream></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include"></a>include<thread></thread></h1><p>using namespace std;<br>void hello()<br>{<br>    cout&lt;&lt;”hello world”&lt;&lt;endl;<br>}<br>int main()<br>{<br>    thread t (hello);<br>    t.join();<br>}<br>按 Ctrl+C 复制代码</p><p>在这里，我们将打印hello world的语句放在函数hello中。每个线程都必须有一个初始函数，新线程的执行开始于初始函数。对于第一段程序来说，它的初始函数是main，对于我们新创建的线程，可以在std::thread()对象的构造函数中指定。<br>在第二段程序里，程序由两个线程组成：初始线程始于main，新线程始于hello。这里将新线程t的初始函数指定为hello。<br>新线程启动之后会与初始进程一并运行，初始线程可以等待或不等待新进程的运行结束——如果需要等待线程，则新线程实例需要使用join(),否则可以使用detach()。如果不等待新线程，则初始线程自顾自地运行到main()结束。<br>关于&lt; thread &gt; 我们将在下一篇中进行详解。<br>由于我们的初始线程并没有做什么事情，启动新线程后，新线程将打印出hello world。</p><h1 id="使用互斥"><a href="#使用互斥" class="headerlink" title="使用互斥"></a>使用互斥</h1><p>C++中通过实例化std::mutex创建互斥量，通过调用成员函数lock()进行上锁，unlock()进行解锁。不过，不推荐实践中直接去调用成员函数，因为调用成员函数就意味着，必须记住在每个函数出口都要去调用unlock()，也包括异常的情况。C++标准库为互斥量提供了一个RAII语法的模板类std::lock_guard，其会在构造的时候提供已锁的互斥量，并在析构的时候进行解锁，从而保证了一个已锁的互斥量总是会被正确的解锁。下面的程序清单中，展示了如何在多线程程序中，使用std::mutex构造的std::lock_guard实例，对一个列表进行访问保护。std::mutex和std::lock_guard都在<mutex>头文件中声明。</mutex></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; some_list;    <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">std</span>::mutex some_mutex;    <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_list</span><span class="params">(<span class="keyword">int</span> new_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; guard(some_mutex);    <span class="comment">// 3</span></span><br><span class="line">  some_list.push_back(new_value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">list_contains</span><span class="params">(<span class="keyword">int</span> value_to_find)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; guard(some_mutex);    <span class="comment">// 4</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::find(some_list.begin(),some_list.end(),value_to_find) != some_list.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当其中一个成员函数返回的是保护数据的指针或引用时，会破坏对数据的保护。具有访问能力的指针或引用可以访问(并可能修改)被保护的数据，而不会被互斥锁限制。互斥量保护的数据需要对接口的设计相当谨慎，要确保互斥量能锁住任何对保护数据的访问，并且不留后门。</p><h1 id="使用锁"><a href="#使用锁" class="headerlink" title="使用锁"></a>使用锁</h1><p>试想有一个玩具，这个玩具由两部分组成，必须拿到这两个部分，才能够玩。例如，一个玩具鼓，需要一个鼓锤和一个鼓才能玩。现在有两个小孩，他们都很喜欢玩这个玩具。当其中一个孩子拿到了鼓和鼓锤时，那就可以尽情的玩耍了。当另一孩子想要玩，他就得等待另一孩子玩完才行。再试想，鼓和鼓锤被放在不同的玩具箱里，并且两个孩子在同一时间里都想要去敲鼓。之后，他们就去玩具箱里面找这个鼓。其中一个找到了鼓，并且另外一个找到了鼓锤。现在问题就来了，除非其中一个孩子决定让另一个先玩，他可以把自己的那部分给另外一个孩子；但当他们都紧握着自己所有的部分而不给予，那么这个鼓谁都没法玩。</p><p>很幸运，C++标准库有办法解决这个问题，std::lock——可以一次性锁住多个(两个以上)的互斥量，并且没有副作用(死锁风险)。</p><p>如何避免死锁？</p><p>避免嵌套锁<br>第一个建议往往是最简单的：一个线程已获得一个锁时，再别去获取第二个。如果能坚持这个建议，因为每个线程只持有一个锁，锁上就不会产生死锁。</p><p>使用固定顺序获取锁<br>当硬性条件要求你获取两个以上(包括两个)的锁，并且不能使用std::lock单独操作来获取它们;那么最好在每个线程上，用固定的顺序获取它们获取它们(锁)。</p><h1 id="同步等待"><a href="#同步等待" class="headerlink" title="同步等待"></a>同步等待</h1><p>假设你在旅游，而且正在一辆在夜间运行的火车上。在夜间，如何在正确的站点下车呢？一种方法是整晚都要醒着，然后注意到了哪一站。这样，你就不会错过你要到达的站点，但是这样会让你感到很疲倦。另外，你可以看一下时间表，估计一下火车到达目的地的时间，然后在一个稍早的时间点上设置闹铃，然后你就可以安心的睡会了。这个方法听起来也很不错，也没有错过你要下车的站点，但是当火车晚点的时候，你就要被过早的叫醒了。当然，闹钟的电池也可能会没电了，并导致你睡过站。理想的方式是，无论是早或晚，只要当火车到站的时候，有人或其他东西能把你唤醒，就好了。</p><p>C++标准库对条件变量有两套实现：std::condition_variable和std::condition_variable_any。这两个实现都包含在<condition_variable>头文件的声明中。两者都需要与一个互斥量一起才能工作(互斥量是为了同步)；前者仅限于与std::mutex一起工作，而后者可以和任何满足最低标准的互斥量一起工作，从而加上了_any的后缀。因为std::condition_variable_any更加通用，这就可能从体积、性能，以及系统资源的使用方面产生额外的开销，所以std::condition_variable一般作为首选的类型，当对灵活性有硬性要求时，我们才会去考虑std::condition_variable_any。</condition_variable></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/overlord_bingo/article/details/60955751" target="_blank" rel="noopener">C/C++ Linux下多线程编程 #include <pthread.h></pthread.h></a></li><li><a href="https://www.cnblogs.com/lpxblog/p/5190438.html" target="_blank" rel="noopener">++11 并发编程基础（一）：并发、并行与C++多线程</a></li><li><a href="https://www.jianshu.com/p/0589ae74ad72" target="_blank" rel="noopener">Linux多线程服务器编程基础 C++ 11 并发编程学习</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++宏定义教程</title>
      <link href="/2018/09/14/programmings/c_plus_plus/C-%E5%AE%8F%E5%AE%9A%E4%B9%89%E6%95%99%E7%A8%8B/"/>
      <url>/2018/09/14/programmings/c_plus_plus/C-%E5%AE%8F%E5%AE%9A%E4%B9%89%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="define基本用法"><a href="#define基本用法" class="headerlink" title="#define基本用法"></a>#define基本用法</h1><p>#define命令是C语言中的一个宏定义命令，它用来将一个标识符(宏名)定义为一个字符串，该标识符被称为宏名，被定义的字符串称为替换文本。程序编译之前，编译的时候所有的宏名都会被定义的字符串替换，这便是宏替换。</p><p>理解宏定义的关键在于 “替换”。</p><p>该命令有两种格式：一种是简单的宏定义，另一种是带参数的宏定义。</p><h2 id="简单的宏定义："><a href="#简单的宏定义：" class="headerlink" title="简单的宏定义："></a>简单的宏定义：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="keyword">float</span> pi2 = PI * <span class="number">2</span>;<span class="comment">//pi2 = 6.28</span></span><br></pre></td></tr></table></figure><h2 id="带参数的宏定义"><a href="#带参数的宏定义" class="headerlink" title="带参数的宏定义"></a>带参数的宏定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-string">&lt;宏名&gt; (&lt;参数表&gt;) &lt;宏体&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AddOne(x) (x+1) </span></span><br><span class="line"><span class="keyword">float</span> pi2 = PI * <span class="number">2</span>;<span class="comment">//pi2 = 6.28</span></span><br><span class="line">pi2 = AddOne(pi2);<span class="comment">// pi2 = 7.28</span></span><br></pre></td></tr></table></figure><h1 id="宏定义的特点"><a href="#宏定义的特点" class="headerlink" title="宏定义的特点"></a>宏定义的特点</h1><p>1）宏名一般用大写，且末尾不加分号。</p><p>（2）宏定义的参数是无类型的，不做语法检查，不做表达式求解，只做替换。</p><p>（3）宏定义通常在文件的最开头，可以使用#undef 宏名 命令终止宏定义的作用域。</p><p>(4）宏定义可以嵌套，但字符串” “中永远不包含宏。</p><p>（5）宏展开使源程序变长，函数调用不会；宏展开不占运行时间，只占编译时间，函数调用占运行时间（分配内存、保留现场、值传递、返回值）。</p><p>（6）函数调用在编译后程序运行时进行，并且分配内存。宏替换在编译前进行，不分配内存。</p><p>（7）使用宏可提高程序的通用性和易读性，减少不一致性，减少输入错误和便于修改。例如：数组大小常用宏定义，常量pi常用宏定义。</p><h1 id="宏替换发生的时机"><a href="#宏替换发生的时机" class="headerlink" title="宏替换发生的时机"></a>宏替换发生的时机</h1><p>为了能够真正理解#define的作用，让我们来了解一下对C语言源程序的处理过程。当我们在一个集成的开发环境如Turbo C中将编写好的源程序进行编译时，实际经过了预处理、编译、汇编和连接几个过程。其中预处理器产生编译器的输出，它实现以下的功能：</p><p>（1）文件包含</p><p>可以把源程序中的#include 扩展为文件正文，即把包含的.h文件找到并展开到#include 所在处。</p><p>（2）条件编译</p><p>预处理器根据#if和#ifdef等编译命令及其后的条件，将源程序中的某部分包含进来或排除在外，通常把排除在外的语句转换成空行。</p><p>（3）宏展开</p><p>预处理器将源程序文件中出现的对宏的引用展开成相应的宏定义，即本文所说的#define的功能，由预处理器来完成。经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能，所以在学习#define命令时只要能真正理解这一点，这样才不会对此命令引起误解并误用。</p><h1 id="宏替换错误举例"><a href="#宏替换错误举例" class="headerlink" title="宏替换错误举例"></a>宏替换错误举例</h1><p>只要严格遵守“直接替换”，就不会出现下面的问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Square(x) x*x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> temp = Square(<span class="number">3</span>+<span class="number">3</span>);</span><br><span class="line"><span class="comment">//程序的本意可能是要计算6*6=36，但由于宏定义执行的是直接替换，本身并不做计算，因此实际的结果为 3+3*3+3=15</span></span><br><span class="line"><span class="comment">//想要避免这个问题，只需要修改如下：</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Square(x) ((x)*(x))</span></span><br></pre></td></tr></table></figure><h1 id="define中的三个特殊符号：-，-，"><a href="#define中的三个特殊符号：-，-，" class="headerlink" title="define中的三个特殊符号：##，#，#@"></a>define中的三个特殊符号：##，#，#@</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*x连接y，例如：int n = Conn(123,456); 结果就是n=123456;char* str = Conn("asdf", "adf"); /*结果就是 str = "asdfadf";*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Conn(x,y) x##y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*给x加上单引号，结果返回是一个const char。例如：char a = ToChar(1);结果就是a='1';做个越界试验char a = ToChar(123);结果就错了;但是如果你的参数超过四个字符，编译器就给给你报错了！error C2015: too many characters in constant   ：P */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ToChar(x) #@x</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// x加双引号,例如：char* str = ToString(123132);就成了str="123132";</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ToString(x) #x</span></span><br></pre></td></tr></table></figure><h1 id="常用宏定义"><a href="#常用宏定义" class="headerlink" title="常用宏定义"></a>常用宏定义</h1><p>(1) 防止一个头文件被重复包含</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BODYDEF_H </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BODYDEF_H </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//头文件内容 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>(2) 得到指定地址上的一个字节或字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM_B( x ) ( *( (byte *) (x) ) ) </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM_W( x ) ( *( (word *) (x) ) )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">int</span> bTest = <span class="number">0x123456</span>;</span><br><span class="line"></span><br><span class="line">byte m = MEM_B((&amp;bTest));<span class="comment">/*m=0x56*/</span></span><br><span class="line"><span class="keyword">int</span> n = MEM_W((&amp;bTest));<span class="comment">/*n=0x3456*/</span></span><br></pre></td></tr></table></figure><p>(3) 得到一个field在结构体(struct)中的偏移量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OFFSETOF( type, field ) ( (size_t) &amp;(( type *) 0)-&gt; field )</span></span><br></pre></td></tr></table></figure><p>(4) 得到一个结构体中field所占用的字节数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FSIZ( type, field ) sizeof( ((type *) 0)-&gt;field )</span></span><br></pre></td></tr></table></figure><p>(5) 得到一个变量的地址（word宽度）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B_PTR( var ) ( (byte *) (void *) &amp;(var) ) </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> W_PTR( var ) ( (word *) (void *) &amp;(var) )</span></span><br></pre></td></tr></table></figure><p>(6) 将一个字母转换为大写</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define UPCASE( c ) ( ((c) &gt;= ''a'' &amp;&amp; (c) &lt;= ''z'') ? ((c) - 0x20) : (c) )</span><br></pre></td></tr></table></figure><p>(7) 防止溢出的一个方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INC_SAT( val ) (val = ((val)+1 &gt; (val)) ? (val)+1 : (val))</span></span><br></pre></td></tr></table></figure><p>(8) 返回数组元素的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARR_SIZE( a ) ( sizeof( (a) ) / sizeof( (a[0]) ) )</span></span><br></pre></td></tr></table></figure><p>(9) 使用一些宏跟踪调试</p><p>ANSI标准说明了五个预定义的宏名。它们是：</p><p><strong>LINE</strong>：在源代码中插入当前源代码行号；</p><p><strong>FILE</strong>：在源文件中插入当前源文件名；</p><p><strong>DATE</strong>：在源文件中插入当前的编译日期</p><p><strong>TIME</strong>：在源文件中插入当前编译时间；</p><p><strong>STDC</strong>：当要求程序严格遵循ANSI C标准时该标识被赋值为1；</p><p>__cplusplus：当编写C++程序时该标识符被定义</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/shuzfan/article/details/52860664" target="_blank" rel="noopener">C++ 宏定义</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2D-3D-S数据集介绍</title>
      <link href="/2018/09/14/machine_learning/2D-3D-S%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/09/14/machine_learning/2D-3D-S%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>数据集详情地址：<a href="http://3Dsemantics.stanford.edu/" target="_blank" rel="noopener">http://3Dsemantics.stanford.edu/</a></p><p>该数据集构建的主要目标是为场景理解、深度估计、法线估计、实体检测、分割和场景重建提供研究数据集，推动该领域的发展。</p><h1 id="相关数据集介绍"><a href="#相关数据集介绍" class="headerlink" title="相关数据集介绍"></a>相关数据集介绍</h1><p>现有的基于RGB-D数据集包括NYU Depth v2、SUN RGBD和SceneNN。然而，这些数据集对于处理特定的任务和2.5D的场景有限。</p><h1 id="采集和处理"><a href="#采集和处理" class="headerlink" title="采集和处理"></a>采集和处理</h1><h2 id="3D模式"><a href="#3D模式" class="headerlink" title="3D模式"></a>3D模式</h2><p>3D模式主要包含点云和mesh。文章利用Matterport Camera得到3D textured Mesh model，然后利用采样方法得到3D点运数据。此外，文章将点运数据与颜色进行对应来生成colored点云数据。</p><p>语义标记：文章对点云数据中的每个Mesh和Voxel进行语义信息的标记。语义主要包括ceiling, floor, wall, beam, column, window, door, table, chair, sofa, bookcase, board and clutter。此外，语义信息被投影到RGB图像中。进一步地，文章划分数据为如下室内场景：office, conference room, hallway, auditorium, open space, lobby, lounge, pantry, copy room, storage and WC。每个对象被存储在文件名为“class instanceNum roomType roomNum areaNum”中。</p><blockquote><p>The dataset contains colored point clouds and textured meshes for each scanned area. 3D semantic annotations for objects and scenes are offered for both modalities, with point-level and face-level labels correspondingly. The annotations were initially performed on the point cloud and then projected onto the closest surface on the 3D mesh model. Faces in the 3D mesh that account for no projected points belong to non-annotated parts of the dataset and are labeled with a default null value. We also provide the tightest axis-aligned bounding box of each object instance and further voxelize it into a 6x6x6 grid with binary occupancy and point correspondence.</p></blockquote><p>该数据集包含每个扫描区域的带有颜色信息的点云和纹理mesh，分别提供点粒度和面粒度的实体和场景的语义信息。最初，语义信息被提取自点云数据，之后映射到最相邻的三维mesh上。不能够被点云映射的面的语义信息置为空值。该数据集也提供了每隔实体样例的tightest axis-aligned bounding box和使用6x6x6二进制的网格来进行体素化表达。</p><h3 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h3><p>该数据集包含颜色点云和3D mesh。</p><h4 id="颜色点云数据"><a href="#颜色点云数据" class="headerlink" title="颜色点云数据"></a>颜色点云数据</h4><blockquote><p>The raw colored 3D point clouds along with both object and scene instance-level annotations per point, (tightest) axis-aligned bounding boxes and voxels with binary occupancy and point correpsondence are stored in the Area_#_PointCloud.mat file. The variables are stored in the form of nested structs</p></blockquote><p>具有实体和场景粒度的语义信息、axis-aligned bounding boex和具有点对应的二进制占据体素的三维点云数据被存储在“Area_#_PointCloud.mat”文件中。变量被存储为嵌套结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Area: --&gt; name: the area name as: Area_#</span><br><span class="line">--&gt; Disjoint-Space: <span class="class"><span class="keyword">struct</span> <span class="title">with</span> <span class="title">information</span> <span class="title">on</span> <span class="title">the</span> <span class="title">individual</span> <span class="title">spaces</span> <span class="title">in</span> <span class="title">the</span> <span class="title">building</span>.</span></span><br></pre></td></tr></table></figure><p>使用matlab读取后结构体显示如下：</p><p><img src alt></p><p>其中，Disjoint_Space结构体为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- Disjoint_Space:--&gt; name: the name of that space, <span class="function">with per area global <span class="title">index</span> <span class="params">(e.g. conferenceRoom_1, offie_13, etc.)</span></span></span><br><span class="line">--&gt;AlignmentAngle: rotation angle around Z axis, to align spaces based on the CVPR2016 paper *3D Semantic Parsing of Large-Scale Indoor Spaces*. </span><br><span class="line">--&gt; color: a unique RGB color value [<span class="number">0</span>,<span class="number">1</span>] <span class="keyword">for</span> that room, mainly <span class="keyword">for</span> visualization purposes</span><br><span class="line">--&gt; object: a <span class="class"><span class="keyword">struct</span> <span class="title">that</span> <span class="title">contains</span> <span class="title">all</span> <span class="title">objects</span> <span class="title">in</span> <span class="title">that</span> <span class="title">space</span>.</span></span><br></pre></td></tr></table></figure><p>使用matlab读取后结构体显示如下：</p><p><img src alt></p><p>object结构体为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- object:--&gt; name: the name of the object, wiith per space indexing* (e.g. chair<span class="number">-1</span>, wall_3, clutter_13, etc.)</span><br><span class="line">--&gt; points: the X,Y,Z coordinates of the <span class="number">3</span>D points that comprise <span class="keyword">this</span> object</span><br><span class="line">--&gt; RGB_color: the raw RGB color value [<span class="number">0</span>,<span class="number">255</span>] associated with each point.</span><br><span class="line">--&gt; global_name: the name of the object, with per area global index**</span><br><span class="line">--&gt; Bbox: [Xmin Xmax Ymin Ymax Zmin Zmax] of the object's boudning box</span><br><span class="line">--&gt; Voxels: [Xmin Xmax Ymin Ymax Zmin Zmax] <span class="keyword">for</span> each voxel in a <span class="number">6</span>x6x6 grid</span><br><span class="line">--&gt; Voxel_Occupancy: <span class="function">binary occupancy per <span class="title">voxel</span> <span class="params">(<span class="number">0</span>: empty, <span class="number">1</span>: contains points)</span></span></span><br><span class="line">--&gt; Points_per_Voxel: the object points that correspond to each voxel (in XYZ coordinates)</span><br></pre></td></tr></table></figure><p><img src alt></p><h4 id="3D-Semantic-mesh"><a href="#3D-Semantic-mesh" class="headerlink" title="3D Semantic mesh"></a>3D Semantic mesh</h4><blockquote><p>The 3D semantic mesh is labeled with instance-level per-face annotations. The mesh is stored in semantic.obj and semantic.mtl where face labels are stored as face’s material’s name. In Blender, for example, the material label can be retrieved with:</p></blockquote><p>三维语义mesh被使用具有实例粒度的每个面元的注释。mesh被存储在”semantic.obj”和”semantic.mtl”文件中。其中，面元标签被存储在面元的名字。在Blender中，标签可悲解析如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mesh_material_idx = mesh.data.polygons[ face_idx ].material_index</span><br><span class="line">material = mesh.data.materials[ mesh_material_idx ]</span><br><span class="line">label = material.name   # final label!</span><br></pre></td></tr></table></figure><p>标签格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class_instanceNum_roomType_roomNum_areaNum</span><br></pre></td></tr></table></figure><p>When using the mesh’s color, the material’s color should be remapped for the task at hand as the default color is designed for visualizations. One way to encode the label in the color is to set</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">material.diffuse_color = get_color( labels.index( material.name ) )</span><br></pre></td></tr></table></figure><p>by using labels from /assets/semantic_labels.json and get_color( color ) from /assets/utils.py.</p><h2 id="2D模态"><a href="#2D模态" class="headerlink" title="2D模态"></a>2D模态</h2><p>RGB图像：采集朝向：yaw角约[-180, 180], pitch角约为以0为均值15度为方差的高斯分布，roll角一直是0度。FOV角为以75度为均值和-30度为标准差的半高斯分布。为了过滤掉白墙等图像，文章基于语义信息商来过滤掉近70%的图像。</p><p>语义信息商的计算方法如下：首先，对于每一幅图像对13类别的语义信息进行像素统计。再利用像素分布计算香农商。最后，将低于15%的图像过滤掉。</p><p>此外，我们保留60%的图像。剩下的25%的图像我们通过半高斯分布采样方法来筛选。如此，文章保证了图像的多样性。</p><blockquote><p>The dataset contains densely sampled RGB images per scan location. These images were sampled from equirectangular images that were generated per scan location and modality using the raw data captured by the scanner. All images in the dataset are stored in full high-definition at 1080x1080 resolution. For more details on the random sampling of RGB images read section 4.2 in the paper. We provide the camera metadata for each generated image.</p><p>We also provide depth images that were computed on the 3D mesh instead of directly on the 3D mesh, as well as surface normal images. 2D semantic annotations are computed for each image by projecting the 3D mesh labels on the image plane. Due to certain geo- metric artifacts present at the mesh model mainly because of the level of detail in the reconstruction, the 2D annotations occasionally present small local misalignment to the underlying pixels, especially for points that have a short distance to the camera. This issue can be easily addressed by fusing image content with the projected annotations using graphical models. The dataset also includes 3D coordinate encoded images where each pixel encodes the X, Y, Z location of the point in the world coordinate system. Last, an equirectangular projection is also provided per scan location and modality.</p></blockquote><p>该数据集包含了每个采集区域的稠密的RGB图像。作者使用扫描仪输出的全景图像来生成这些图像。在数据集里的所有的图像的分辨率均为1080x1080。细节请参考论文。</p><p>此外，数据集也包含深度图像。作者使用三维mesh的语义信息，通过映射到图像平面来得到图像中的语义信息。数据集中每幅图像的三维坐标X,Y,Z均在世界坐标系下。</p><h3 id="技术细节-1"><a href="#技术细节-1" class="headerlink" title="技术细节"></a>技术细节</h3><h4 id="pose"><a href="#pose" class="headerlink" title="pose"></a>pose</h4><blockquote><p>The pose files contain camera metadata for each image and are given in the /pose subdirectories. They have filenames which are globally unique due to the fact that camera uuids are not shared between areas. They are stored in json files, and contain</p></blockquote><p>pose文件包含每一幅图像的camera元数据，被给定在“/pose”子文件夹下。他们有一个全局的文件名，被存储在json文件中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"camera_k_matrix"</span>:  # The <span class="number">3</span>x3 camera K matrix. Stored as a list-of-lists, </span><br><span class="line">  "field_of_view_rads": #  The Camera's field of view, in radians, </span><br><span class="line">  "camera_original_rotation": #  The camera's initial XYZ-Euler rotation in the .obj, </span><br><span class="line">  "rotation_from_original_to_point": </span><br><span class="line">  #  Apply this to the original rotation in order to orient the camera for the corresponding picture, </span><br><span class="line">  "point_uuid": #  alias for camera_uuid, </span><br><span class="line">  "camera_location": #  XYZ location of the camera, </span><br><span class="line">  "frame_num": #  The frame_num in the filename, </span><br><span class="line">  "camera_rt_matrix": #  The 4x3 camera RT matrix, stored as a list-of-lists, </span><br><span class="line">  "final_camera_rotation": #  The camera Euler in the corresponding picture, </span><br><span class="line">  "camera_uuid": #  The globally unique identifier for the camera location, </span><br><span class="line">  "room": #  The room that this camera is in. Stored as roomType_roomNum_areaNum </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h4><blockquote><p>RGB images are in the /rgb folder and contain synthesized but accurate RGB images of the scene.</p></blockquote><p>RGB图像被存储在“/rgb”文件夹中。</p><h4 id="Depth"><a href="#Depth" class="headerlink" title="Depth"></a>Depth</h4><blockquote><p>Depth images are stored as 16-bit PNGs and have a maximum depth of 128m and a sensitivity of 1/512m. Missing values are encoded with the value 2^16 - 1. Note that while depth is defined relative to the plane of the camera in the data (z-depth), it is defined as the distance from the point-center of the camera in the panoramics.</p></blockquote><h4 id="Global-XYZ"><a href="#Global-XYZ" class="headerlink" title="Global XYZ"></a>Global XYZ</h4><blockquote><p>Global XYZ images contain the ground-truth location of each pixel in the mesh. They are stored as 16-bit 3-channel OpenEXR files and a convenience readin function is provided in /assets/utils.py. These can be used for generating point correspondences, e.g. for optical flow. Missing values are encoded as #000000.</p></blockquote><h4 id="Normal"><a href="#Normal" class="headerlink" title="Normal"></a>Normal</h4><blockquote><p>Normals are 127.5-centered per-channel surface normal images. For panoramic images, these normals are relative to the global corodinate system. Since the global coordinate system is impossible to determine from a sampled image, the normal images in /data have their normals defined relative to the direction the camera is facing. The normals axis-color convention is the same one used by NYU RGB-D. Areas where the mesh is missing have pixel color #808080.</p></blockquote><h4 id="Semantic"><a href="#Semantic" class="headerlink" title="Semantic"></a>Semantic</h4><blockquote><p>Semantic images come in two variants, semantic and semantic_pretty. They both include information from the point cloud annotations, but only the semantic version should be used for learning. The labels can be found in assets/semantic_labels.json, and images can be parsed using some of the convenience functions in utils.py. Specifically: The semantic images are encoded as 3-channel 8-bit PNGs which are interpreted as 24-bit base-256 integers which are an index into the labels array in semantic_labels.json.</p></blockquote><p>Let’s say that you’ve loaded the image into memory and it’s stored as a numpy array called img and want the label for the pixel at (1500, 2000) which is the leftmost sofa chair in this image. utils.py provides get_index, load_labels and parse_labels for extracting the label information. Here is what your code might look like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</span><br><span class="line"><span class="keyword">from</span> assets.utils <span class="keyword">import</span> *  <span class="comment"># Assets should be downloaded from this repo</span></span><br><span class="line">labels = load_labels( <span class="string">'/path/to/assets/semantic_labels.json'</span> )</span><br><span class="line"></span><br><span class="line">img = imread(  <span class="string">'/path/to/image.png'</span> )</span><br><span class="line">pix = img[ <span class="number">1500</span>,<span class="number">2000</span> ]</span><br><span class="line">instance_label = labels[ get_index( pix ) ]</span><br><span class="line">instance_label_as_dict = parse_label( instance_label )</span><br><span class="line"><span class="keyword">print</span> instance_label_as_dict</span><br></pre></td></tr></table></figure><p>Gives {‘instance_num’: 5, ‘instance_class’: u’sofa’, ‘room_num’: 3, ‘room_type’: u’office’, ‘area_num’: 3} Here we can see that this is the 5th instance of class ‘sofa’ in area 3.</p><p>Finally, note that pixels where the data is missing are encoded with the color #0D0D0D which is larger than the len( labels ).</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-元素最近邻快速查找</title>
      <link href="/2018/09/11/data_structure_algorithm/%E7%AE%97%E6%B3%95-%E5%85%83%E7%B4%A0%E6%9C%80%E8%BF%91%E9%82%BB%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE/"/>
      <url>/2018/09/11/data_structure_algorithm/%E7%AE%97%E6%B3%95-%E5%85%83%E7%B4%A0%E6%9C%80%E8%BF%91%E9%82%BB%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>需求：给定一个元素，在指定集合中输出n个最近邻的元素。如果集合中没有重复元素，那么只有一个元素输出；如果集合中由重复元素，那么可能存在多个最近邻元素输出。</p><h1 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReadCsvData</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    time = []</span><br><span class="line">    loc = []</span><br><span class="line">    <span class="keyword">with</span> open(file_name,<span class="string">'r'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">        reader = csv.reader(csvfile)</span><br><span class="line">        rows= [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> rows:</span><br><span class="line">            data = np.array(data)</span><br><span class="line">            time.append(float(data[<span class="number">0</span>]))</span><br><span class="line">            loc.append([float(data[<span class="number">1</span>]), float(data[<span class="number">2</span>]), float(data[<span class="number">3</span>])])</span><br><span class="line">    time = np.array(time)</span><br><span class="line">    loc = np.array(loc)</span><br><span class="line">    <span class="keyword">return</span> time, loc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = len(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> end + <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rIndex</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    n = len(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    mid = searchInsert(nums, target)</span><br><span class="line">    rlist = []  <span class="comment"># 保持索引</span></span><br><span class="line">    i, j = <span class="number">-1</span>, n</span><br><span class="line">    left, rigth = <span class="number">0</span>, <span class="number">0</span>  <span class="comment"># 左右扩展的标志</span></span><br><span class="line">    mxg = float(<span class="string">'-inf'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; mid &lt; n:  <span class="comment"># 如果找到了</span></span><br><span class="line">        i, j = mid<span class="number">-1</span>, mid</span><br><span class="line">        mxg = min(abs(nums[i] - target), abs(nums[j] - target))</span><br><span class="line">        left, rigth = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> mid == <span class="number">0</span>:  <span class="comment"># 小于最左边的数字</span></span><br><span class="line">        j = mid</span><br><span class="line">        mxg = abs(nums[j] - target)</span><br><span class="line">        left, rigth = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> mid == n:  <span class="comment"># 大于最右边的数字</span></span><br><span class="line">        i = mid<span class="number">-1</span></span><br><span class="line">        mxg = abs(nums[i] - target)</span><br><span class="line">        left, rigth = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> left == <span class="number">1</span> <span class="keyword">or</span> rigth == <span class="number">1</span>:  <span class="comment"># 两边查找</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">-1</span>: left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> j == n: rigth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> left == <span class="number">1</span> <span class="keyword">and</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">            le = abs(nums[i] - target)</span><br><span class="line">            <span class="keyword">if</span> le == mxg:</span><br><span class="line">                rlist = [i] + rlist</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> rigth == <span class="number">1</span> <span class="keyword">and</span> j &lt; len(nums):</span><br><span class="line">            ri = abs(nums[j] - target)</span><br><span class="line">            <span class="keyword">if</span> mxg == ri:</span><br><span class="line">                rlist = rlist + [j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rigth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> rlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">################# File path #######################</span></span><br><span class="line">    gt_path = <span class="string">"../data/ADVIO/advio-02/ground-truth/pose.csv"</span></span><br><span class="line">    ARKit_path = <span class="string">"../data/ADVIO/advio-02/iphone/arkit.csv"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">################# Read data #######################</span></span><br><span class="line">    time_gt = []</span><br><span class="line">    loc_gt = []</span><br><span class="line">    time_ARKit = []</span><br><span class="line">    loc_ARKit = []</span><br><span class="line">    errors = []</span><br><span class="line">    time_gt, loc_gt = ReadCsvData(gt_path)</span><br><span class="line">    time_ARKit, loc_ARKit = ReadCsvData(ARKit_path)</span><br><span class="line">    <span class="keyword">print</span> len(time_gt), len(time_ARKit)</span><br><span class="line">    <span class="keyword">if</span> len(time_gt) &lt; len(time_ARKit):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(time_gt)):</span><br><span class="line">            index = rIndex(time_ARKit, time_gt[i])[<span class="number">0</span>]</span><br><span class="line">            error = math.sqrt((loc_gt[i][<span class="number">0</span>] - loc_ARKit[index][<span class="number">0</span>])**<span class="number">2</span> + (loc_gt[i][<span class="number">1</span>] - loc_ARKit[index][<span class="number">1</span>])**<span class="number">2</span> + (loc_gt[i][<span class="number">2</span>] - loc_ARKit[index][<span class="number">2</span>])**<span class="number">2</span>)</span><br><span class="line">            errors.append(error)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(time_ARKit)):</span><br><span class="line">            index = rIndex(time_gt, time_ARKit[i])[<span class="number">0</span>]</span><br><span class="line">            error = math.sqrt((loc_gt[index][<span class="number">0</span>] - loc_ARKit[i][<span class="number">0</span>])**<span class="number">2</span> + (loc_gt[index][<span class="number">1</span>] - loc_ARKit[i][<span class="number">1</span>])**<span class="number">2</span> + (loc_gt[index][<span class="number">2</span>] - loc_ARKit[i][<span class="number">2</span>])**<span class="number">2</span>)</span><br><span class="line">            errors.append(error)</span><br><span class="line">    errors = np.array(errors)</span><br><span class="line">    <span class="keyword">print</span> errors</span><br><span class="line">    plt.figure(<span class="number">1</span>)</span><br><span class="line">    plt.plot(loc_gt[:, <span class="number">0</span>], loc_gt[:, <span class="number">2</span>], c = <span class="string">'r'</span>)</span><br><span class="line">    plt.plot(loc_ARKit[:, <span class="number">0</span>], loc_ARKit[:, <span class="number">2</span>], c = <span class="string">'b'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">"X (m)"</span>)</span><br><span class="line">    plt.ylabel(<span class="string">"Y (m)"</span>)</span><br><span class="line">    plt.legend([<span class="string">"Groud-truth"</span>, <span class="string">"ARKit"</span>])</span><br><span class="line">    plt.figure(<span class="number">2</span>)</span><br><span class="line">    plt.plot(errors, c = <span class="string">'b'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Index'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Error (m)'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++回调机制教程</title>
      <link href="/2018/09/09/programmings/c_plus_plus/C-%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6%E6%95%99%E7%A8%8B/"/>
      <url>/2018/09/09/programmings/c_plus_plus/C-%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在 C++ 开发过程中，经常会遇到需要一个类在遇到某种情况下（比如触发了一个行为等等）需要驱使另一类去做某些行为的需求（也就是回调机制）。本文参考如下博文：<a href="https://blog.csdn.net/u012814856/article/details/73294124" target="_blank" rel="noopener">C++简单实现回调机制</a>进行讲解。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>A和B的打招呼程序。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><blockquote><p>现在有两个人，一位是 A 先生，另一位是 B 先生。<br>现在要求当 A 先生给 B 先生打了招呼之后，B 先生立马回复 A，向 A 问好。</p></blockquote><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>这个过程抽象为三个类进行模拟：</p><div class="table-container"><table><thead><tr><th>角色</th><th>功能</th></tr></thead><tbody><tr><td>A</td><td>向B打招呼</td></tr><tr><td>B</td><td>当A向自己打招呼时，向A打招呼</td></tr><tr><td>main</td><td>创造A和B对象和控制A和B的行为</td></tr></tbody></table></div><p>当我们看到上述的分析后，应该想到这么三个内容：</p><p>A 的作用：A 在这里干了什么呢？他是触发一次回调行为的触发点，也就是因为 A 进行了打招呼的行为，才有了 B 的回复的行为。也就是说：A 是触发方</p><p>B 的作用：B 在这里干的就多了。他在得知 A 向自己打招呼了之后，进行了回复。也就是说：B 是驱使方</p><p>回复事件：这是我们的回调行为本身，当 A 进行了打招呼的行为，B 进行了回调事件指定的行为</p><p>主过程：它掌控着时空，提供上述所有行为的必要条件</p><p>那么分析至此，我们已经拥有了写出这个程序的一切条件，接下来让我们一步一步分析一步一步实现吧。</p><h1 id="实现：A、B、Event、main"><a href="#实现：A、B、Event、main" class="headerlink" title="实现：A、B、Event、main"></a>实现：A、B、Event、main</h1><p>首先，我们需要定义一个抽象的事件类，用来定义回复事件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CEvent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hiReply</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个类是这个方法的核心：</p><blockquote><p>这个事件类是一个抽象的类：<br>1.驱使方应该继承这个类并实现其内的具体功能<br>2.触发方应该将此类包含为一个私有变量，当遇到触发事件的时候，通过此指针（父类指针）调用其具体实现的方法（由驱使方实现）<br>3.还需要注意的一点是，为了方便调用，这个类中的方法需要全部声明为公有的，也就是需要在前面加 public 修饰</p></blockquote><p>然后，我们需要实现 A 类，也就是事件触发方：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// person A class , call an event</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() : m_pEvent(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A: hello B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> != m_pEvent) &#123;</span><br><span class="line">            m_pEvent-&gt;hiReply();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEvent</span><span class="params">(CEvent *event)</span> </span>&#123;</span><br><span class="line">        m_pEvent = event;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CEvent *m_pEvent;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个类是触发方：</p><ul><li><p>将事件类作为其私有变量：用来接收 B （事件类的子类）的指针，用于实现多态方法调用</p></li><li><p>实现了 sayHi() 方法：用来触发 B 的回复行为。可以看到在这个函数里，我们使用了事件类对象调用其抽象方法进行了向 B 的事件通知</p></li><li><p>实现了 setEvent() 方法：用来传递 B 的指针，将其赋值给事件类的指针（父类指针），方便在 sayHi() 方法中多态调用回调方法</p></li></ul><p>接下来，我们需要实现 B 类，也就是驱使方：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// person B class , implement the event function</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> CEvent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B: hello A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hiReply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B: I'm fine, thanks, and you ?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>B 类中，我们继承了事件类，并且实现了里面的方法。</p><p>最后，让我们看看世界的主宰–主过程里干了什么：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    a.setEvent((CEvent*)&amp;b);</span><br><span class="line">    a.sayHi();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，主过程里我们干了这几件事：</p><p>绑定事件关系：将 b 的指针（事件类子类）传递给了 a 的私有变量 m_pEvent（事件类父类），具有了多态调用的必要条件；这里需要注意的是我们子类向父类的强制转换的写法 (CEvent*)&amp;b，不这么写的话，编译器会报错；想要详细了解 C++ 中父类和子类的转换的可以点击这里 C++中子类和父类之间的相互转化，这篇博客质量还是可以的</p><p>触发事件：让 a 向 b 打招呼</p><p>让我们运行下这个程序，看看运行结果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A: hello B</span><br><span class="line">B: I am fine.</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="demo完整代码实现"><a href="#demo完整代码实现" class="headerlink" title="demo完整代码实现"></a>demo完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// event class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CEvent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hiReply</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person A class , call an event</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A() : m_pEvent(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"A: hello B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != m_pEvent) &#123;</span><br><span class="line">m_pEvent-&gt;hiReply();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEvent</span><span class="params">(CEvent *event)</span> </span>&#123;</span><br><span class="line">m_pEvent = event;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">CEvent *m_pEvent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person B class , implement the event function</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> CEvent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hiReply</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"B: I'm fine, thanks, and you ?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line">a.setEvent((CEvent*)&amp;b);</span><br><span class="line">a.sayHi();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用总结"><a href="#应用总结" class="headerlink" title="应用总结"></a>应用总结</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>A持续set数据给B，B接收到数据后，将计算结果持续通知出去，采用回调机制。</p><h3 id="设计流程"><a href="#设计流程" class="headerlink" title="设计流程"></a>设计流程</h3><p>(1) 编写回调接口</p><p>StepInterface.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StepInterface</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~StepInterface() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">NotifyStep</span><span class="params">(<span class="keyword">int</span> step, <span class="keyword">float</span> diff)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(2) 实现A</p><p>A.h和A.cpp:</p><ul><li>继承回调接口</li><li>实现回调接口所声明的方法（NotifyXXX），即有了回调数据该干啥</li><li>将A的对象设置给B的回调监听器</li></ul><p>A.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"StepInterface.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"B.h"</span></span></span><br><span class="line"></span><br><span class="line">Class A : <span class="keyword">public</span> StepInterface &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A();</span><br><span class="line">B b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NotifyStep</span><span class="params">(<span class="keyword">int</span> step, <span class="keyword">float</span> diff)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>A.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"A.h"</span></span></span><br><span class="line"></span><br><span class="line">A::A() &#123;</span><br><span class="line">b.setStepListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::NotifyStep(<span class="keyword">int</span> step, <span class="keyword">float</span> diff) &#123;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 实现B</p><p>B.h和B.cpp:</p><ul><li>实例化接口抽象类</li><li>声明回调接口监听器</li><li>实现回调接口监听器</li><li>将计算结果回调给A</li></ul><p>B.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"StepInterface.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStepListener</span><span class="params">(StepInterface* frame)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">otherMethods</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">StepInterface* callR;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>B.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"B.h"</span></span></span><br><span class="line"></span><br><span class="line">B::SetStepListener(StepInterface* frame)&#123;</span><br><span class="line">callR = frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B::otherMethod() &#123;</span><br><span class="line"><span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> diff = <span class="number">0.0</span>;</span><br><span class="line">callR-&gt;NotifyStep(step, diff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/u012814856/article/details/73294124" target="_blank" rel="noopener">C++简单实现回调机制</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apolloScape竞赛</title>
      <link href="/2018/09/09/programmings/linux/apolloScape%E7%AB%9E%E8%B5%9B/"/>
      <url>/2018/09/09/programmings/linux/apolloScape%E7%AB%9E%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>百度ApolloScape重磅发布了自动驾驶开放数据集。自动驾驶开发测试中，海量、高质的真实数据是必不可缺的“原料”。但是，少有团队有能力开发并维持一个适用的自动驾驶平台，定期校准并收集新数据。</p><p>据介绍，Apollo开放平台此次发布的ApolloScape不仅开放了比Cityscapes等同类数据集大10倍以上的数据量，包括感知、仿真场景、路网数据等数十万帧逐像素语义分割标注的高分辨率图像数据，进一步涵盖更复杂的环境、天气和交通状况等。从数据难度上来看，ApolloScape数据集涵盖了更复杂的道路状况（例如，单张图像中多达162辆交通工具或80名行人），同时开放数据集采用了逐像素语义分割标注的方式，是目前环境最复杂、标注最精准、数据量最大的自动驾驶数据集。</p><p>Apollo开放平台还将与加州大学伯克利分校在CVPR 2018（IEEE国际计算机视觉与模式识别会议）期间联合举办自动驾驶研讨会（Workshop on Autonomous Driving），并将基于ApolloScape的大规模数据集定义了多项任务挑战，为全球自动驾驶开发者和研究人员提供共同探索前沿领域技术突破及应用创新的平台。</p><h1 id="参考一：PoseNet-implementation-for-self-driving-car-localization-using-Pytorch-on-Apolloscape-dataset"><a href="#参考一：PoseNet-implementation-for-self-driving-car-localization-using-Pytorch-on-Apolloscape-dataset" class="headerlink" title="参考一：PoseNet implementation for self-driving car localization using Pytorch on Apolloscape dataset"></a>参考一：<a href="https://capsulesbot.com/blog/2018/08/24/apolloscape-posenet-pytorch.html" target="_blank" rel="noopener">PoseNet implementation for self-driving car localization using Pytorch on Apolloscape dataset</a></h1><p>This article covers the very beginning of the journey and includes the reading and visualization of the Apolloscape dataset for localization task. Implement PoseNet [2] architecture for monocular image pose prediction and visualize results. I use Python and Pytorch for the task.</p><p>NOTE: If you want to jump straight to the code here is the GitHub repo. It’s is still an ongoing work where I intend to implement Vidloc [7], Pose Graph Optimization [3,8] and Structure from Motion [9] pipelines for Apolloscape Dataset in the context of the localization task.</p><h2 id="Apolloscape-Pytorch-Dataset"><a href="#Apolloscape-Pytorch-Dataset" class="headerlink" title="Apolloscape Pytorch Dataset"></a>Apolloscape Pytorch Dataset</h2><p>For Pytorch I need to have a Dataset object that prepares and feeds the data to the loader and then to the model. I want to have a robust dataset class that can:</p><ul><li>support stereo and mono images</li><li>support train/validation splits that came along with data or generate a new one</li><li>support pose normalization</li><li>support different pose representations (needed mainly for visualization and experiments with loss functions)</li><li>support filtering by record id</li><li>support general Apolloscape folder structure layout</li></ul><p>I am not putting here the full listing of the Apolloscape dataset and concentrate solely on how to use it and what data we can get from it. For the full source code, please refer to the Github file datasets/apolloscape.py.</p><p>Here how to create a dataset:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets.apolloscape <span class="keyword">import</span> Apolloscape</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to unpacked data folders</span></span><br><span class="line">APOLLO_PATH = <span class="string">"./data/apolloscape"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Resize transform that is applied on every image read</span></span><br><span class="line">transform = transforms.Compose([transforms.Resize(<span class="number">250</span>)])</span><br><span class="line"></span><br><span class="line">apollo_dataset = Apolloscape(root=os.path.join(APOLLO_PATH), road=<span class="string">"zpark-sample"</span>,</span><br><span class="line">                             transform=transform, train=<span class="keyword">True</span>, pose_format=<span class="string">'quat'</span>,</span><br><span class="line">                             stereo=<span class="keyword">True</span>)</span><br><span class="line">print(apollo_dataset)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dataset: Apolloscape</span><br><span class="line">    Road: zpark-sample</span><br><span class="line">    Record: <span class="keyword">None</span></span><br><span class="line">    Train: <span class="keyword">None</span></span><br><span class="line">    Normalize Poses: <span class="keyword">False</span></span><br><span class="line">    Stereo: <span class="keyword">True</span></span><br><span class="line">    Length: <span class="number">1499</span> of <span class="number">1499</span></span><br><span class="line">    Cameras: [<span class="string">'Camera_2'</span>, <span class="string">'Camera_1'</span>]</span><br><span class="line">    Records: [<span class="string">'Record001'</span>, <span class="string">'Record002'</span>, <span class="string">'Record003'</span>, <span class="string">'Record004'</span>, <span class="string">'Record006'</span>, <span class="string">'Record007'</span>, <span class="string">'Record008'</span>, <span class="string">'Record009'</span>, <span class="string">'Record010'</span>, <span class="string">'Record011'</span>, <span class="string">'Record012'</span>, <span class="string">'Record013'</span>, <span class="string">'Record014'</span>]</span><br></pre></td></tr></table></figure><p>POLLO_PATH is a folder with unpacked Apolloscape datasets, e.g. $APOLLO_PATH/road02_seg or $APOLLO_PATH/zpark. Download data from Apolloscape page and unpack iot. Let’s assume that we’ve also created a symlink ./data/apolloscape that points to $APOLLO_PATH folder.</p><p>We can view the list of available records with a number of data samples in each:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show records with numbers of data points</span></span><br><span class="line">recs_num = apollo_dataset.get_records_counts()</span><br><span class="line">recs_num = sorted(recs_num.items(), key=<span class="keyword">lambda</span> kv: kv[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line">print(<span class="string">"Records:"</span>)</span><br><span class="line">print(<span class="string">"\n"</span>.join([<span class="string">"\t&#123;&#125; - &#123;&#125;"</span>.format(r[<span class="number">0</span>], r[<span class="number">1</span>]) <span class="keyword">for</span> r <span class="keyword">in</span> recs_num ]))</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Records:</span><br><span class="line">Record008 - <span class="number">122</span></span><br><span class="line">Record007 - <span class="number">121</span></span><br><span class="line">Record006 - <span class="number">121</span></span><br><span class="line">Record012 - <span class="number">121</span></span><br><span class="line">Record001 - <span class="number">121</span></span><br><span class="line">Record009 - <span class="number">121</span></span><br><span class="line">Record010 - <span class="number">121</span></span><br><span class="line">Record003 - <span class="number">121</span></span><br><span class="line">Record013 - <span class="number">120</span></span><br><span class="line">Record004 - <span class="number">120</span></span><br><span class="line">Record002 - <span class="number">120</span></span><br><span class="line">Record011 - <span class="number">120</span></span><br><span class="line">Record014 - <span class="number">50</span></span><br></pre></td></tr></table></figure><p>We can draw a route for one record with a sampled camera image:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.common <span class="keyword">import</span> draw_record</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw path of a record with a sampled datapoint</span></span><br><span class="line">record = <span class="string">'Record008'</span></span><br><span class="line">draw_record(apollo_dataset, record)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>output:</p><p>Alternatively, we can see all records at once in one chart:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Draw all records for current dataset</span></span><br><span class="line">draw_record(apollo_dataset)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>output:</p><p>Another option is to see it in a video:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.common <span class="keyword">import</span> make_video</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate and save video for the record</span></span><br><span class="line">outfile = <span class="string">"./output_data/videos/video_&#123;&#125;_&#123;&#125;.mp4"</span>.format(apollo_dataset.road, apollo_dataset.record)</span><br><span class="line">make_video(apollo_dataset, outfile=outfile)</span><br></pre></td></tr></table></figure><p>Output (cut gif version of the generated video):</p><p>For the PoseNet training we will use mono images with zero-mean normalized poses and camera images center-cropped to 250px:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Resize and CenterCrop</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">260</span>),</span><br><span class="line">    transforms.CenterCrop(<span class="number">250</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create train dataset with mono images, normalized poses, enabled cache_transform</span></span><br><span class="line">train_dataset = Apolloscape(root=os.path.join(APOLLO_PATH), road=<span class="string">"zpark-sample"</span>,</span><br><span class="line">                             transform=transform, train=<span class="keyword">True</span>, pose_format=<span class="string">'quat'</span>,</span><br><span class="line">                             normalize_poses=<span class="keyword">True</span>, cache_transform=<span class="keyword">True</span>,</span><br><span class="line">                             stereo=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw path of a single record (mono with normalized poses)</span></span><br><span class="line">record = <span class="string">'Record008'</span></span><br><span class="line">draw_record(apollo_dataset, record)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>Output:</p><p>Implemented Apolloscape Pytorch dataset also supports cache_transform option which is when enabled saves all transformed pickled images to a disk and retrieves it later for the subsequent epochs without the need to redo convert and transform operations every image read event. Cache saves up to 50% of the time during training time though it’s not working with image augmentation transforms like torchvision.transforms.ColorJitter.</p><p>Also, we can get the mean and the standard deviation that we need later to recover true poses translations:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">poses_mean = train_dataset.poses_mean</span><br><span class="line">poses_std = train_dataset.poses_std</span><br><span class="line">print(<span class="string">'Translation poses_mean = &#123;&#125; in meters'</span>.format(poses_mean))</span><br><span class="line">print(<span class="string">'Translation poses_std  = &#123;&#125; in meters'</span>.format(poses_std))</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Translation poses_mean = [  <span class="number">449.95782055</span> <span class="number">-2251.24771214</span>    <span class="number">40.17147932</span>] <span class="keyword">in</span> meters</span><br><span class="line">Translation poses_std  = [<span class="number">123.39589457</span> <span class="number">252.42350964</span>   <span class="number">0.28021513</span>] <span class="keyword">in</span> meters</span><br></pre></td></tr></table></figure><p>You can find all mentioned examples in Apolloscape_View_Records.ipynb notebook.</p><p>And now let’s turn to something useful and more interesting, for example, training PoseNet deep convolutional network to regress poses from camera images.</p><h2 id="PoseNet-localization-task"><a href="#PoseNet-localization-task" class="headerlink" title="PoseNet localization task"></a>PoseNet localization task</h2><p>参考：<a href="https://capsulesbot.com/blog/2018/08/24/apolloscape-posenet-pytorch.html" target="_blank" rel="noopener">PoseNet implementation for self-driving car localization using Pytorch on Apolloscape dataset</a></p><p>A Pytorch implementation of the PoseNet model using a mono image:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoseNet</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, feature_extractor, num_features=<span class="number">128</span>, dropout=<span class="number">0.5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 track_running_stats=False, pretrained=False)</span>:</span></span><br><span class="line">        super(PoseNet, self).__init__()</span><br><span class="line">        self.dropout = dropout</span><br><span class="line">        self.feature_extractor = feature_extractor</span><br><span class="line">        self.feature_extractor.avgpool = torch.nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">        fc_in_features = self.feature_extractor.fc.in_features</span><br><span class="line">        self.feature_extractor.fc = torch.nn.Linear(fc_in_features, num_features)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Translation</span></span><br><span class="line">        self.fc_xyz = torch.nn.Linear(num_features, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Rotation in quaternions</span></span><br><span class="line">        self.fc_quat = torch.nn.Linear(num_features, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extract_features</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x_features = self.feature_extractor(x)</span><br><span class="line">        x_features = F.relu(x_features)</span><br><span class="line">        <span class="keyword">if</span> self.dropout &gt; <span class="number">0</span>:</span><br><span class="line">            x_features = F.dropout(x_features, p=self.dropout, training=self.training)</span><br><span class="line">        <span class="keyword">return</span> x_features</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x_features = self.extract_features(x)</span><br><span class="line">        x_translations = self.fc_xyz(x_features)</span><br><span class="line">        x_rotations = self.fc_quat(x_features)</span><br><span class="line">        x_poses = torch.cat((x_translations, x_rotations), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x_poses</span><br></pre></td></tr></table></figure><p>For further experiments I’ve also implemented stereo version (currently it’s simply processes two images in parallel without any additional constraints), option to switch off stats tracking for BatchNorm layers and Kaiming He normal for weight initialization [4]. Full source code is here models/posenet.py</p><h2 id="PoseNet-Loss-Functions"><a href="#PoseNet-Loss-Functions" class="headerlink" title="PoseNet Loss Functions"></a>PoseNet Loss Functions</h2><p>For more details on where it came from and intro to Bayesian Deep Learning (BDL) you can refer to an excellent post by Alex Kendall where he explains different types of uncertainties and its implications to the multi-task models. And even more results you can find in papers “Multi-task learning using uncertainty to weigh losses for scene geometry and semantics.” [5] and “What uncertainties do we need in Bayesian deep learning for computer vision?.” [6].</p><p>Pytorch implementation for both versions of a loss function is the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoseNetCriterion</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, beta = <span class="number">512.0</span>, learn_beta=False, sx=<span class="number">0.0</span>, sq=<span class="number">-3.0</span>)</span>:</span></span><br><span class="line">        super(PoseNetCriterion, self).__init__()</span><br><span class="line">        self.loss_fn = torch.nn.L1Loss()</span><br><span class="line">        self.learn_beta = learn_beta</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> learn_beta:</span><br><span class="line">            self.beta = beta</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.beta = <span class="number">1.0</span></span><br><span class="line">        self.sx = torch.nn.Parameter(torch.Tensor([sx]), requires_grad=learn_beta)</span><br><span class="line">        self.sq = torch.nn.Parameter(torch.Tensor([sq]), requires_grad=learn_beta)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="comment"># Translation loss</span></span><br><span class="line">        loss = torch.exp(-self.sx) * self.loss_fn(x[:, :<span class="number">3</span>], y[:, :<span class="number">3</span>])</span><br><span class="line">        <span class="comment"># Rotation loss</span></span><br><span class="line">        loss += torch.exp(-self.sq) * self.beta * self.loss_fn(x[:, <span class="number">3</span>:], y[:, <span class="number">3</span>:]) + self.sq</span><br><span class="line">        <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure><p>If learn_beta param is False it’s a simple weighted sum version of the loss and if learn_beta is True it’s using sx and sq params with enabled gradients that trains together with other network parameter with the same optimizer.</p><h2 id="PoseNet-Training-Implementation-Details"><a href="#PoseNet-Training-Implementation-Details" class="headerlink" title="PoseNet Training Implementation Details"></a>PoseNet Training Implementation Details</h2><p>Now let’s combine it all to the training loop. I use torch.optim.Adam optimizer with learning rate 1e-5, ResNet34 pretrained on ImageNet as a feature extractor and 2048 features on the last FC layer before pose regressors.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, models</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">from</span> datasets.apolloscape <span class="keyword">import</span> Apolloscape</span><br><span class="line"><span class="keyword">from</span> utils.common <span class="keyword">import</span> save_checkpoint</span><br><span class="line"><span class="keyword">from</span> models.posenet <span class="keyword">import</span> PoseNet, PoseNetCriterion</span><br><span class="line"></span><br><span class="line">APOLLO_PATH = <span class="string">"./data/apolloscape"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ImageNet normalization params because we are using pre-trained</span></span><br><span class="line"><span class="comment"># feature extractor</span></span><br><span class="line">normalize = transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                                     std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Resize data before using</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">260</span>),</span><br><span class="line">    transforms.CenterCrop(<span class="number">250</span>),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    normalize</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create datasets</span></span><br><span class="line">train_dataset = Apolloscape(root=os.path.join(APOLLO_PATH), road=<span class="string">"zpark-sample"</span>,</span><br><span class="line">    transform=transform, normalize_poses=<span class="keyword">True</span>, pose_format=<span class="string">'quat'</span>, train=<span class="keyword">True</span>, cache_transform=<span class="keyword">True</span>, stereo=<span class="keyword">False</span>)</span><br><span class="line">val_dataset = Apolloscape(root=os.path.join(APOLLO_PATH), road=<span class="string">"zpark-sample"</span>,</span><br><span class="line">    transform=transform, normalize_poses=<span class="keyword">True</span>, pose_format=<span class="string">'quat'</span>, train=<span class="keyword">False</span>, cache_transform=<span class="keyword">True</span>, stereo=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dataloaders</span></span><br><span class="line">train_dataloader = DataLoader(train_dataset, batch_size=<span class="number">80</span>, shuffle=<span class="keyword">True</span>)</span><br><span class="line">val_dataloader = DataLoader(val_dataset, batch_size=<span class="number">80</span>, shuffle=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select primary device</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    device = torch.device(<span class="string">'cuda'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    device = torch.device(<span class="string">'cpu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create pretrained feature extractor</span></span><br><span class="line">feature_extractor = models.resnet34(pretrained=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Num features for the last layer before pose regressor</span></span><br><span class="line">num_features = <span class="number">2048</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create model</span></span><br><span class="line">model = PoseNet(feature_extractor, num_features=num_features, pretrained=<span class="keyword">True</span>)</span><br><span class="line">model = model.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Criterion</span></span><br><span class="line">criterion = PoseNetCriterion(stereo=<span class="keyword">False</span>, learn_beta=<span class="keyword">True</span>)</span><br><span class="line">criterion = criterion.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add all params for optimization</span></span><br><span class="line">param_list = [&#123;<span class="string">'params'</span>: model.parameters()&#125;]</span><br><span class="line"><span class="keyword">if</span> criterion.learn_beta:</span><br><span class="line">    <span class="comment"># Add sx and sq from loss function to optimizer params</span></span><br><span class="line">    param_list.append(&#123;<span class="string">'params'</span>: criterion.parameters()&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create optimizer</span></span><br><span class="line">optimizer = optim.Adam(params=param_list, lr=<span class="number">1e-5</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Epochs to train</span></span><br><span class="line">n_epochs = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Main training loop</span></span><br><span class="line">val_freq = <span class="number">200</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">0</span>, n_epochs):</span><br><span class="line">    train(train_dataloader, model, criterion, optimizer, e, n_epochs, log_freq=<span class="number">0</span>,</span><br><span class="line">         poses_mean=train_dataset.poses_mean, poses_std=train_dataset.poses_std,</span><br><span class="line">         stereo=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> e % val_freq == <span class="number">0</span>:</span><br><span class="line">        validate(val_dataloader, model, criterion, e, log_freq=<span class="number">0</span>,</span><br><span class="line">            stereo=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save checkpoint</span></span><br><span class="line">save_checkpoint(model, optimizer, criterion, <span class="string">'zpark_experiment'</span>, n_epochs)</span><br></pre></td></tr></table></figure><p>A little bit simplified train function below with error calculation that is used solely for logging purposes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(train_loader, model, criterion, optimizer, epoch, max_epoch,</span></span></span><br><span class="line"><span class="function"><span class="params">          log_freq=<span class="number">1</span>, print_sum=True, poses_mean=None, poses_std=None,</span></span></span><br><span class="line"><span class="function"><span class="params">          stereo=True)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch model to training</span></span><br><span class="line">    model.train()</span><br><span class="line"></span><br><span class="line">    losses = AverageMeter()</span><br><span class="line"></span><br><span class="line">    epoch_time = time.time()</span><br><span class="line"></span><br><span class="line">    gt_poses = np.empty((<span class="number">0</span>, <span class="number">7</span>))</span><br><span class="line">    pred_poses = np.empty((<span class="number">0</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">for</span> idx, (batch_images, batch_poses) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        data_time = (time.time() - end)</span><br><span class="line"></span><br><span class="line">        batch_images = batch_images.to(device)</span><br><span class="line">        batch_poses = batch_poses.to(device)</span><br><span class="line"></span><br><span class="line">        out = model(batch_images)</span><br><span class="line">        loss = criterion(out, batch_poses)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Training step</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        losses.update(loss.data[<span class="number">0</span>], len(batch_images) * batch_images[<span class="number">0</span>].size(<span class="number">0</span>) <span class="keyword">if</span> stereo</span><br><span class="line">                <span class="keyword">else</span> batch_images.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># move data to cpu &amp; numpy</span></span><br><span class="line">        bp = batch_poses.detach().cpu().numpy()</span><br><span class="line">        outp = out.detach().cpu().numpy()</span><br><span class="line">        gt_poses = np.vstack((gt_poses, bp))</span><br><span class="line">        pred_poses = np.vstack((pred_poses, outp))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get final times</span></span><br><span class="line">        batch_time = (time.time() - end)</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> log_freq != <span class="number">0</span> <span class="keyword">and</span> idx % log_freq == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Epoch: [&#123;&#125;/&#123;&#125;]\tBatch: [&#123;&#125;/&#123;&#125;]\t'</span></span><br><span class="line">                  <span class="string">'Time: &#123;batch_time:.3f&#125;\t'</span></span><br><span class="line">                  <span class="string">'Data Time: &#123;data_time:.3f&#125;\t'</span></span><br><span class="line">                  <span class="string">'Loss: &#123;losses.val:.3f&#125;\t'</span></span><br><span class="line">                  <span class="string">'Avg Loss: &#123;losses.avg:.3f&#125;\t'</span>.format(</span><br><span class="line">                   epoch, max_epoch - <span class="number">1</span>, idx, len(train_loader) - <span class="number">1</span>,</span><br><span class="line">                   batch_time=batch_time, data_time=data_time, losses=losses))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># un-normalize translation</span></span><br><span class="line">    unnorm = (poses_mean <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>) <span class="keyword">and</span> (poses_std <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">if</span> unnorm:</span><br><span class="line">        gt_poses[:, :<span class="number">3</span>] = gt_poses[:, :<span class="number">3</span>] * poses_std + poses_mean</span><br><span class="line">        pred_poses[:, :<span class="number">3</span>] = pred_poses[:, :<span class="number">3</span>] * poses_std + poses_mean</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Translation error</span></span><br><span class="line">    t_loss = np.asarray([np.linalg.norm(p - t) <span class="keyword">for</span> p, t <span class="keyword">in</span> zip(pred_poses[:, :<span class="number">3</span>], gt_poses[:, :<span class="number">3</span>])])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rotation error</span></span><br><span class="line">    q_loss = np.asarray([quaternion_angular_error(p, t) <span class="keyword">for</span> p, t <span class="keyword">in</span> zip(pred_poses[:, <span class="number">3</span>:], gt_poses[:, <span class="number">3</span>:])])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> print_sum:</span><br><span class="line">        print(<span class="string">'Ep: [&#123;&#125;/&#123;&#125;]\tTrain Loss: &#123;:.3f&#125;\tTe: &#123;:.3f&#125;\tRe: &#123;:.3f&#125;\t Et: &#123;:.2f&#125;s\t&#123;criterion_sx:.5f&#125;:&#123;criterion_sq:.5f&#125;'</span>.format(</span><br><span class="line">            epoch, max_epoch - <span class="number">1</span>, losses.avg, np.mean(t_loss), np.mean(q_loss),</span><br><span class="line">            (time.time() - epoch_time), criterion_sx=criterion.sx.data[<span class="number">0</span>], criterion_sq=criterion.sq.data[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>validate function is similar to train except model.eval()/model.train() modes, logging and error calculations. Please refer to /utils/training.py on GitHub for full-versions of train and validate functions.</p><p>The training converges after about 1-2k epochs. On my machine, with GTX 1080 Ti it takes about 22 seconds per epoch on ZPark sample train dataset with 2242 images pre-processed and scaled to 250x250 pixels. Total training time – 6-12 hours.</p><h2 id="PoseNet-Results-on-Apolloscape-dataset-ZPark-sample-road"><a href="#PoseNet-Results-on-Apolloscape-dataset-ZPark-sample-road" class="headerlink" title="PoseNet Results on Apolloscape dataset. ZPark sample road."></a>PoseNet Results on Apolloscape dataset. ZPark sample road.</h2><p>After 2k epochs of training, the model was managed to get a prediction of pose translation with a mean 40.6 meters and rotation with a mean 1.69 degrees.</p><h2 id="Further-development"><a href="#Further-development" class="headerlink" title="Further development"></a>Further development</h2><p>Established results are far from one that can be used in autonomous navigation where a system needs to now its location within accuracy of 15cm. Such precision is vital for a car to act safely, correctly predict the behaviors of others and plan actions accordingly. In any case, it’s a good baseline and building blocks of the pipeline to work with Apolloscape dataset that I can develop and improve further.</p><p>There many things to try next:</p><ul><li>Use temporal nature of a video.</li><li>Rely on geometrical features of stereo cameras.</li><li>Pose graph optimization techniques.</li><li>Loss based on 3D reprojection errors.</li><li>Structure from motion methods to build 3D map representation.</li></ul><p>And what’s more importantly, all above-mentioned methods need no additional information but that we already have in ZPark sample road from Apolloscape dataset.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><ol><li>Kendall, Alex, and Roberto Cipolla. “Geometric loss functions for camera pose regression with deep learning.” (2017).</li></ol></li><li><ol><li>Kendall, Alex, Matthew Grimes, and Roberto Cipolla. “Posenet: A convolutional network for real-time 6-dof camera relocalization.” (2015).</li></ol></li><li><ol><li>Brahmbhatt, Samarth, et al. “Mapnet: Geometry-aware learning of maps for camera localization.” (2017).</li></ol></li><li><ol><li>He, Kaiming, et al. “Delving deep into rectifiers: Surpassing human-level performance on imagenet classification.” (2015).</li></ol></li><li><ol><li>Kendall, Alex, Yarin Gal, and Roberto Cipolla. “Multi-task learning using uncertainty to weigh losses for scene geometry and semantics.” (2017).</li></ol></li><li><ol><li>Kendall, Alex, and Yarin Gal. “What uncertainties do we need in bayesian deep learning for computer vision?.” (2017).</li></ol></li><li><ol><li>Clark, Ronald, et al. “VidLoc: A deep spatio-temporal model for 6-dof video-clip relocalization.” (2017).</li></ol></li><li><ol><li>Calafiore, Giuseppe, Luca Carlone, and Frank Dellaert. “Pose graph optimization in the complex domain: Lagrangian duality, conditions for zero duality gap, and optimal solutions.” (2015).</li></ol></li><li><ol><li>Martinec, Daniel, and Tomas Pajdla. “Robust rotation and translation estimation in multiview reconstruction.” (2007).</li></ol></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://capsulesbot.com/blog/2018/08/24/apolloscape-posenet-pytorch.html" target="_blank" rel="noopener">PoseNet implementation for self-driving car localization using Pytorch on Apolloscape dataset</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS免费搭建ss教程</title>
      <link href="/2018/06/11/others/AWS%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BAss%E6%95%99%E7%A8%8B/"/>
      <url>/2018/06/11/others/AWS%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BAss%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="注册免费的AWS服务器"><a href="#注册免费的AWS服务器" class="headerlink" title="注册免费的AWS服务器"></a>注册免费的AWS服务器</h1><p>注册地址：<a href="https://aws.amazon.com/cn/ec2/pricing/?sc_channel=PS&amp;sc_campaign=acquisition_CN&amp;sc_publisher=baidu&amp;sc_category=pc&amp;sc_medium=ec2_b&amp;sc_content=ec2_e&amp;sc_detail=ec2&amp;sc_segment=100009040&amp;sc_matchtype=phrase&amp;sc_country=CN&amp;s_kwcid=AL!4422!88!5666095499!!17798814222&amp;ef_id=WjtnMQAAAdinHin@:20180611133737:s" target="_blank" rel="noopener">ec2 免费试用全球云服务-亚马逊AWS</a></p><p>填写注册信息、输入信用卡（成功后扣除1美元）、电话语音确认。</p><p>上述过程成功后，即可进入EC2创建服务器实例。如下图所示：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-27-AWS_SS_1.jpeg" alt></p><h1 id="创建服务器实例"><a href="#创建服务器实例" class="headerlink" title="创建服务器实例"></a>创建服务器实例</h1><p>选择Ubuntu16.04 LTS系统：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-27-AWS_SS_2.jpeg" alt></p><p>选择实例类型：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-27-AWS_SS_3.jpeg" alt></p><p>根据自己的需求添加存储，免费用户最大30GB存储：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-27-AWS_SS_4.jpeg" alt></p><p>创建秘钥对：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-27-AWS_SS_5.jpeg" alt></p><p>编辑安全组规则：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-27-AWS_SS_6.jpeg" alt></p><h1 id="登录实例并配置ss环境"><a href="#登录实例并配置ss环境" class="headerlink" title="登录实例并配置ss环境"></a>登录实例并配置ss环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod 400 XXX.pem <span class="comment"># 更改秘钥权限</span></span><br><span class="line">$ ssh -i XXX.pem ubuntu@[IP] <span class="comment"># 利用公有IP登录实例</span></span><br></pre></td></tr></table></figure><p>安装Shadowsocks:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取root权限</span></span><br><span class="line">sudo -s</span><br><span class="line"><span class="comment"># 更新apt-get</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment"># 安装python包管理工具</span></span><br><span class="line">apt-get install python-setuptools</span><br><span class="line">apt-get install python-pip</span><br><span class="line"><span class="comment"># 安装shadowsocks</span></span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>创建配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/shadowsocks</span><br><span class="line">vim /etc/shadowsocks/ss.json</span><br></pre></td></tr></table></figure><p>配置文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:443, //ss连接服务器的端口</span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"abcd1234"</span>, // 设置ss连接时的密码</span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="string">"workers"</span>: 1</span><br><span class="line">&#125;/Users/xiaoqiangteng/programmings/growing-up/xiaoqiangteng.github.io/<span class="built_in">source</span>/_posts/vultr的ss服务器教程.md</span><br></pre></td></tr></table></figure><p>启动Shadowsocks:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动：sudo /usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks/ss.json -d start</span><br><span class="line"></span><br><span class="line">停止：sudo /usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks/ss.json -d stop  </span><br><span class="line">重启：sudo /usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks/ss.json -d restart</span><br></pre></td></tr></table></figure><h1 id="配置自动切换模式"><a href="#配置自动切换模式" class="headerlink" title="配置自动切换模式"></a>配置自动切换模式</h1><p>配置好 ss 情景模式后虽然可以使用 Chrome 浏览器科学上网了，但是这样的话无论你访问什么网站都会走代理，有时候访问国内的一些网站反而会很慢，这时候自动切换模式就解决了这个问题。下面介绍一下如何配置自动切换模式。</p><p>点击左侧的 自动切换，或者自己新建情景模式，类型选择第二个 自动切换模式。然后做如下配置：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-27-AWS_SS_7.jpeg" alt></p><p>导入在线规则列表，类型选择AutoProxy，可以选择导入gfwlist - <a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a> 或者自己自定义的AutoProxy文件。</p><p>保存设置并更新情景模式，若更新失败则开启全局代理后更新。</p><p>设置规则匹配则使用代理模式，否则直接连接。保存退出。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://blog.csdn.net/miracleswang/article/details/78959305" target="_blank" rel="noopener">https://blog.csdn.net/miracleswang/article/details/78959305</a></li><li><a href="https://blog.csdn.net/kntanchao/article/details/79191149" target="_blank" rel="noopener">https://blog.csdn.net/kntanchao/article/details/79191149</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> AWS </category>
          
          <category> SS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> AWS </tag>
            
            <tag> ss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[darknet系列]yolov3训练自己的数据集</title>
      <link href="/2018/06/09/machine_learning/darknet%E7%B3%BB%E5%88%97-yolov3%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
      <url>/2018/06/09/machine_learning/darknet%E7%B3%BB%E5%88%97-yolov3%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>darknet版本： 2018年6月 <a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">yolov3</a></p><p>系统配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu 16.04</span><br><span class="line">12GB Titan GPU</span><br></pre></td></tr></table></figure><p>数据集：ILSVRC2015 (ILSVRC2015转VOC数据格式详见：<a href="http://mapstec.com/2018/04/05/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/" target="_blank" rel="noopener">http://mapstec.com/2018/04/05/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/</a>)</p><h1 id="darknet配置"><a href="#darknet配置" class="headerlink" title="darknet配置"></a>darknet配置</h1><p>下载工程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pjreddie/darknet</span><br></pre></td></tr></table></figure><p>修改Makefile,参考我的makefile文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">GPU=1</span><br><span class="line">CUDNN=0</span><br><span class="line">OPENCV=1</span><br><span class="line">OPENMP=0</span><br><span class="line">DEBUG=0</span><br><span class="line"></span><br><span class="line">ARCH= -gencode arch=compute_30,code=sm_30 \</span><br><span class="line">      -gencode arch=compute_35,code=sm_35 \</span><br><span class="line">      -gencode arch=compute_50,code=[sm_50,compute_50] \</span><br><span class="line">      -gencode arch=compute_52,code=[sm_52,compute_52]</span><br><span class="line"><span class="comment">#      -gencode arch=compute_20,code=[sm_20,sm_21] \ This one is deprecated?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is what I use, uncomment if you know your arch and want to specify</span></span><br><span class="line"><span class="comment"># ARCH= -gencode arch=compute_52,code=compute_52</span></span><br><span class="line"></span><br><span class="line">VPATH=./src/:./examples</span><br><span class="line">SLIB=libdarknet.so</span><br><span class="line">ALIB=libdarknet.a</span><br><span class="line">EXEC=darknet</span><br><span class="line">OBJDIR=./obj/</span><br><span class="line"></span><br><span class="line">CC=gcc</span><br><span class="line">NVCC=/usr/<span class="built_in">local</span>/cuda-8.0/bin/nvcc </span><br><span class="line">AR=ar</span><br><span class="line">ARFLAGS=rcs</span><br><span class="line">OPTS=-Ofast</span><br><span class="line">LDFLAGS= -lm -pthread </span><br><span class="line">COMMON= -Iinclude/ -Isrc/</span><br><span class="line">CFLAGS=-Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC</span><br><span class="line"></span><br><span class="line">ifeq ($(OPENMP), 1) </span><br><span class="line">CFLAGS+= -fopenmp</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">ifeq ($(DEBUG), 1) </span><br><span class="line">OPTS=-O0 -g</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">CFLAGS+=$(OPTS)</span><br><span class="line"></span><br><span class="line">ifeq ($(OPENCV), 1) </span><br><span class="line">COMMON+= -DOPENCV</span><br><span class="line">CFLAGS+= -DOPENCV</span><br><span class="line">LDFLAGS+= `pkg-config --libs opencv` </span><br><span class="line">COMMON+= `pkg-config --cflags opencv` </span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">ifeq ($(GPU), 1) </span><br><span class="line">COMMON+= -DGPU -I/usr/<span class="built_in">local</span>/cuda/include/</span><br><span class="line">CFLAGS+= -DGPU</span><br><span class="line">LDFLAGS+= -L/usr/<span class="built_in">local</span>/cuda/lib64 -lcuda -lcudart -lcublas -lcurand</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">ifeq ($(CUDNN), 1) </span><br><span class="line">COMMON+= -DCUDNN </span><br><span class="line">CFLAGS+= -DCUDNN</span><br><span class="line">LDFLAGS+= -lcudnn</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">OBJ=gemm.o utils.o cuda.o deconvolutional_layer.o convolutional_layer.o list.o image.o activations.o im2col.o col2im.o blas.o crop_layer.o dropout_layer.o maxpool_layer.o softmax_layer.o data.o matrix.o network.o connected_layer.o cost_layer.o parser.o option_list.o detection_layer.o route_layer.o upsample_layer.o box.o normalization_layer.o avgpool_layer.o layer.o local_layer.o shortcut_layer.o logistic_layer.o activation_layer.o rnn_layer.o gru_layer.o crnn_layer.o demo.o batchnorm_layer.o region_layer.o reorg_layer.o tree.o  lstm_layer.o l2norm_layer.o yolo_layer.o</span><br><span class="line">EXECOBJA=captcha.o lsd.o super.o art.o tag.o cifar.o go.o rnn.o segmenter.o regressor.o classifier.o coco.o yolo.o detector.o nightmare.o darknet.o</span><br><span class="line">ifeq ($(GPU), 1) </span><br><span class="line">LDFLAGS+= -lstdc++ </span><br><span class="line">OBJ+=convolutional_kernels.o deconvolutional_kernels.o activation_kernels.o im2col_kernels.o col2im_kernels.o blas_kernels.o crop_layer_kernels.o dropout_layer_kernels.o maxpool_layer_kernels.o avgpool_layer_kernels.o</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">EXECOBJ = $(addprefix $(OBJDIR), $(EXECOBJA))</span><br><span class="line">OBJS = $(addprefix $(OBJDIR), $(OBJ))</span><br><span class="line">DEPS = $(wildcard src/*.h) Makefile include/darknet.h</span><br><span class="line"></span><br><span class="line"><span class="comment">#all: obj backup results $(SLIB) $(ALIB) $(EXEC)</span></span><br><span class="line">all: obj  results $(SLIB) $(ALIB) $(EXEC)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(EXEC): $(EXECOBJ) $(ALIB)</span><br><span class="line">$(CC) $(COMMON) $(CFLAGS) $^ -o <span class="variable">$@</span> $(LDFLAGS) $(ALIB)</span><br><span class="line"></span><br><span class="line">$(ALIB): $(OBJS)</span><br><span class="line">$(AR) $(ARFLAGS) <span class="variable">$@</span> $^</span><br><span class="line"></span><br><span class="line">$(SLIB): $(OBJS)</span><br><span class="line">$(CC) $(CFLAGS) -shared $^ -o <span class="variable">$@</span> $(LDFLAGS)</span><br><span class="line"></span><br><span class="line">$(OBJDIR)%.o: %.c $(DEPS)</span><br><span class="line">$(CC) $(COMMON) $(CFLAGS) -c $&lt; -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line">$(OBJDIR)%.o: %.cu $(DEPS)</span><br><span class="line">$(NVCC) $(ARCH) $(COMMON) --compiler-options <span class="string">"<span class="variable">$(CFLAGS)</span>"</span> -c $&lt; -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line">obj:</span><br><span class="line">mkdir -p obj</span><br><span class="line">backup:</span><br><span class="line">mkdir -p backup</span><br><span class="line">results:</span><br><span class="line">mkdir -p results</span><br><span class="line"></span><br><span class="line">.PHONY: clean</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">rm -rf $(OBJS) $(SLIB) $(ALIB) $(EXEC) $(EXECOBJ) $(OBJDIR)/*</span><br></pre></td></tr></table></figure><p>编译darknet：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>配置完以后可以下载作者的预训练模型测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://pjreddie.com/media/files/yolov3.weights</span><br></pre></td></tr></table></figure><p>下载之后用图片进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg</span><br></pre></td></tr></table></figure><h1 id="制作自己的数据集"><a href="#制作自己的数据集" class="headerlink" title="制作自己的数据集"></a>制作自己的数据集</h1><p>本教授使用Imagenet数据集作为训练数据集，详细制作过程参考：<a href="http://mapstec.com/2018/04/05/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/" target="_blank" rel="noopener">http://mapstec.com/2018/04/05/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/</a></p><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>按darknet的说明编译好后，接下来在darknet-master/scripts文件夹中新建文件夹VOCdevkit，然后将整个VOC2007文件夹都拷到VOCdevkit文件夹下。</p><p>然后，需要利用scripts文件夹中的voc_label.py文件生成一系列训练文件和label，具体操作如下：</p><p>首先需要修改voc_label.py中的代码，这里主要修改数据集名，以及类别信息，我的是VOC2007，并且所有样本用来训练，没有val或test，有1000类目标，因此按如下设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir, getcwd</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line"><span class="comment">#sets=[('2012', 'train'), ('2012', 'val'), ('2007', 'train'), ('2007', 'val'), ('2007', 'test')]</span></span><br><span class="line">sets = [(<span class="string">'2007'</span>, <span class="string">'train'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]</span></span><br><span class="line">classes = [<span class="string">"tench"</span>,<span class="string">"goldfish"</span>,<span class="string">"great_white_shark"</span>,<span class="string">"tiger_shark"</span>,<span class="string">"hammerhead"</span>,<span class="string">"electric_ray"</span>,<span class="string">"stingray"</span>,<span class="string">"cock"</span>,<span class="string">"hen"</span>,<span class="string">"ostrich"</span>,<span class="string">"brambling"</span>,<span class="string">"goldfinch"</span>,<span class="string">"house_finch"</span>,<span class="string">"junco"</span>,<span class="string">"indigo_bunting"</span>,<span class="string">"robin"</span>,<span class="string">"bulbul"</span>,<span class="string">"jay"</span>,<span class="string">"magpie"</span>,<span class="string">"chickadee"</span>,<span class="string">"water_ouzel"</span>,<span class="string">"kite"</span>,<span class="string">"bald_eagle"</span>,<span class="string">"vulture"</span>,<span class="string">"great_grey_owl"</span>,<span class="string">"European_fire_salamander"</span>,<span class="string">"common_newt"</span>,<span class="string">"eft"</span>,<span class="string">"spotted_salamander"</span>,<span class="string">"axolotl"</span>,<span class="string">"bullfrog"</span>,<span class="string">"tree_frog"</span>,<span class="string">"tailed_frog"</span>,<span class="string">"loggerhead"</span>,<span class="string">"leatherback_turtle"</span>,<span class="string">"mud_turtle"</span>,<span class="string">"terrapin"</span>,<span class="string">"box_turtle"</span>,<span class="string">"banded_gecko"</span>,<span class="string">"common_iguana"</span>,<span class="string">"American_chameleon"</span>,<span class="string">"whiptail"</span>,<span class="string">"agama"</span>,<span class="string">"frilled_lizard"</span>,<span class="string">"alligator_lizard"</span>,<span class="string">"Gila_monster"</span>,<span class="string">"green_lizard"</span>,<span class="string">"African_chameleon"</span>,<span class="string">"Komodo_dragon"</span>,<span class="string">"African_crocodile"</span>,<span class="string">"American_alligator"</span>,<span class="string">"triceratops"</span>,<span class="string">"thunder_snake"</span>,<span class="string">"ringneck_snake"</span>,<span class="string">"hognose_snake"</span>,<span class="string">"green_snake"</span>,<span class="string">"king_snake"</span>,<span class="string">"garter_snake"</span>,<span class="string">"water_snake"</span>,<span class="string">"vine_snake"</span>,<span class="string">"night_snake"</span>,<span class="string">"boa_constrictor"</span>,<span class="string">"rock_python"</span>,<span class="string">"Indian_cobra"</span>,<span class="string">"green_mamba"</span>,<span class="string">"sea_snake"</span>,<span class="string">"horned_viper"</span>,<span class="string">"diamondback"</span>,<span class="string">"sidewinder"</span>,<span class="string">"trilobite"</span>,<span class="string">"harvestman"</span>,<span class="string">"scorpion"</span>,<span class="string">"black_and_gold_garden_spider"</span>,<span class="string">"barn_spider"</span>,<span class="string">"garden_spider"</span>,<span class="string">"black_widow"</span>,<span class="string">"tarantula"</span>,<span class="string">"wolf_spider"</span>,<span class="string">"tick"</span>,<span class="string">"centipede"</span>,<span class="string">"black_grouse"</span>,<span class="string">"ptarmigan"</span>,<span class="string">"ruffed_grouse"</span>,<span class="string">"prairie_chicken"</span>,<span class="string">"peacock"</span>,<span class="string">"quail"</span>,<span class="string">"partridge"</span>,<span class="string">"African_grey"</span>,<span class="string">"macaw"</span>,<span class="string">"sulphur-crested_cockatoo"</span>,<span class="string">"lorikeet"</span>,<span class="string">"coucal"</span>,<span class="string">"bee_eater"</span>,<span class="string">"hornbill"</span>,<span class="string">"hummingbird"</span>,<span class="string">"jacamar"</span>,<span class="string">"toucan"</span>,<span class="string">"drake"</span>,<span class="string">"red-breasted_merganser"</span>,<span class="string">"goose"</span>,<span class="string">"black_swan"</span>,<span class="string">"tusker"</span>,<span class="string">"echidna"</span>,<span class="string">"platypus"</span>,<span class="string">"wallaby"</span>,<span class="string">"koala"</span>,<span class="string">"wombat"</span>,<span class="string">"jellyfish"</span>,<span class="string">"sea_anemone"</span>,<span class="string">"brain_coral"</span>,<span class="string">"flatworm"</span>,<span class="string">"nematode"</span>,<span class="string">"conch"</span>,<span class="string">"snail"</span>,<span class="string">"slug"</span>,<span class="string">"sea_slug"</span>,<span class="string">"chiton"</span>,<span class="string">"chambered_nautilus"</span>,<span class="string">"Dungeness_crab"</span>,<span class="string">"rock_crab"</span>,<span class="string">"fiddler_crab"</span>,<span class="string">"king_crab"</span>,<span class="string">"American_lobster"</span>,<span class="string">"spiny_lobster"</span>,<span class="string">"crayfish"</span>,<span class="string">"hermit_crab"</span>,<span class="string">"isopod"</span>,<span class="string">"white_stork"</span>,<span class="string">"black_stork"</span>,<span class="string">"spoonbill"</span>,<span class="string">"flamingo"</span>,<span class="string">"little_blue_heron"</span>,<span class="string">"American_egret"</span>,<span class="string">"bittern"</span>,<span class="string">"crane"</span>,<span class="string">"limpkin"</span>,<span class="string">"European_gallinule"</span>,<span class="string">"American_coot"</span>,<span class="string">"bustard"</span>,<span class="string">"ruddy_turnstone"</span>,<span class="string">"red-backed_sandpiper"</span>,<span class="string">"redshank"</span>,<span class="string">"dowitcher"</span>,<span class="string">"oystercatcher"</span>,<span class="string">"pelican"</span>,<span class="string">"king_penguin"</span>,<span class="string">"albatross"</span>,<span class="string">"grey_whale"</span>,<span class="string">"killer_whale"</span>,<span class="string">"dugong"</span>,<span class="string">"sea_lion"</span>,<span class="string">"Chihuahua"</span>,<span class="string">"Japanese_spaniel"</span>,<span class="string">"Maltese_dog"</span>,<span class="string">"Pekinese"</span>,<span class="string">"Shih-Tzu"</span>,<span class="string">"Blenheim_spaniel"</span>,<span class="string">"papillon"</span>,<span class="string">"toy_terrier"</span>,<span class="string">"Rhodesian_ridgeback"</span>,<span class="string">"Afghan_hound"</span>,<span class="string">"basset"</span>,<span class="string">"beagle"</span>,<span class="string">"bloodhound"</span>,<span class="string">"bluetick"</span>,<span class="string">"black-and-tan_coonhound"</span>,<span class="string">"Walker_hound"</span>,<span class="string">"English_foxhound"</span>,<span class="string">"redbone"</span>,<span class="string">"borzoi"</span>,<span class="string">"Irish_wolfhound"</span>,<span class="string">"Italian_greyhound"</span>,<span class="string">"whippet"</span>,<span class="string">"Ibizan_hound"</span>,<span class="string">"Norwegian_elkhound"</span>,<span class="string">"otterhound"</span>,<span class="string">"Saluki"</span>,<span class="string">"Scottish_deerhound"</span>,<span class="string">"Weimaraner"</span>,<span class="string">"Staffordshire_bullterrier"</span>,<span class="string">"American_Staffordshire_terrier"</span>,<span class="string">"Bedlington_terrier"</span>,<span class="string">"Border_terrier"</span>,<span class="string">"Kerry_blue_terrier"</span>,<span class="string">"Irish_terrier"</span>,<span class="string">"Norfolk_terrier"</span>,<span class="string">"Norwich_terrier"</span>,<span class="string">"Yorkshire_terrier"</span>,<span class="string">"wire-haired_fox_terrier"</span>,<span class="string">"Lakeland_terrier"</span>,<span class="string">"Sealyham_terrier"</span>,<span class="string">"Airedale"</span>,<span class="string">"cairn"</span>,<span class="string">"Australian_terrier"</span>,<span class="string">"Dandie_Dinmont"</span>,<span class="string">"Boston_bull"</span>,<span class="string">"miniature_schnauzer"</span>,<span class="string">"giant_schnauzer"</span>,<span class="string">"standard_schnauzer"</span>,<span class="string">"Scotch_terrier"</span>,<span class="string">"Tibetan_terrier"</span>,<span class="string">"silky_terrier"</span>,<span class="string">"soft-coated_wheaten_terrier"</span>,<span class="string">"West_Highland_white_terrier"</span>,<span class="string">"Lhasa"</span>,<span class="string">"flat-coated_retriever"</span>,<span class="string">"curly-coated_retriever"</span>,<span class="string">"golden_retriever"</span>,<span class="string">"Labrador_retriever"</span>,<span class="string">"Chesapeake_Bay_retriever"</span>,<span class="string">"German_short-haired_pointer"</span>,<span class="string">"vizsla"</span>,<span class="string">"English_setter"</span>,<span class="string">"Irish_setter"</span>,<span class="string">"Gordon_setter"</span>,<span class="string">"Brittany_spaniel"</span>,<span class="string">"clumber"</span>,<span class="string">"English_springer"</span>,<span class="string">"Welsh_springer_spaniel"</span>,<span class="string">"cocker_spaniel"</span>,<span class="string">"Sussex_spaniel"</span>,<span class="string">"Irish_water_spaniel"</span>,<span class="string">"kuvasz"</span>,<span class="string">"schipperke"</span>,<span class="string">"groenendael"</span>,<span class="string">"malinois"</span>,<span class="string">"briard"</span>,<span class="string">"kelpie"</span>,<span class="string">"komondor"</span>,<span class="string">"Old_English_sheepdog"</span>,<span class="string">"Shetland_sheepdog"</span>,<span class="string">"collie"</span>,<span class="string">"Border_collie"</span>,<span class="string">"Bouvier_des_Flandres"</span>,<span class="string">"Rottweiler"</span>,<span class="string">"German_shepherd"</span>,<span class="string">"Doberman"</span>,<span class="string">"miniature_pinscher"</span>,<span class="string">"Greater_Swiss_Mountain_dog"</span>,<span class="string">"Bernese_mountain_dog"</span>,<span class="string">"Appenzeller"</span>,<span class="string">"EntleBucher"</span>,<span class="string">"boxer"</span>,<span class="string">"bull_mastiff"</span>,<span class="string">"Tibetan_mastiff"</span>,<span class="string">"French_bulldog"</span>,<span class="string">"Great_Dane"</span>,<span class="string">"Saint_Bernard"</span>,<span class="string">"Eskimo_dog"</span>,<span class="string">"malamute"</span>,<span class="string">"Siberian_husky"</span>,<span class="string">"dalmatian"</span>,<span class="string">"affenpinscher"</span>,<span class="string">"basenji"</span>,<span class="string">"pug"</span>,<span class="string">"Leonberg"</span>,<span class="string">"Newfoundland"</span>,<span class="string">"Great_Pyrenees"</span>,<span class="string">"Samoyed"</span>,<span class="string">"Pomeranian"</span>,<span class="string">"chow"</span>,<span class="string">"keeshond"</span>,<span class="string">"Brabancon_griffon"</span>,<span class="string">"Pembroke"</span>,<span class="string">"Cardigan"</span>,<span class="string">"toy_poodle"</span>,<span class="string">"miniature_poodle"</span>,<span class="string">"standard_poodle"</span>,<span class="string">"Mexican_hairless"</span>,<span class="string">"timber_wolf"</span>,<span class="string">"white_wolf"</span>,<span class="string">"red_wolf"</span>,<span class="string">"coyote"</span>,<span class="string">"dingo"</span>,<span class="string">"dhole"</span>,<span class="string">"African_hunting_dog"</span>,<span class="string">"hyena"</span>,<span class="string">"red_fox"</span>,<span class="string">"kit_fox"</span>,<span class="string">"Arctic_fox"</span>,<span class="string">"grey_fox"</span>,<span class="string">"tabby"</span>,<span class="string">"tiger_cat"</span>,<span class="string">"Persian_cat"</span>,<span class="string">"Siamese_cat"</span>,<span class="string">"Egyptian_cat"</span>,<span class="string">"cougar"</span>,<span class="string">"lynx"</span>,<span class="string">"leopard"</span>,<span class="string">"snow_leopard"</span>,<span class="string">"jaguar"</span>,<span class="string">"lion"</span>,<span class="string">"tiger"</span>,<span class="string">"cheetah"</span>,<span class="string">"brown_bear"</span>,<span class="string">"American_black_bear"</span>,<span class="string">"ice_bear"</span>,<span class="string">"sloth_bear"</span>,<span class="string">"mongoose"</span>,<span class="string">"meerkat"</span>,<span class="string">"tiger_beetle"</span>,<span class="string">"ladybug"</span>,<span class="string">"ground_beetle"</span>,<span class="string">"long-horned_beetle"</span>,<span class="string">"leaf_beetle"</span>,<span class="string">"dung_beetle"</span>,<span class="string">"rhinoceros_beetle"</span>,<span class="string">"weevil"</span>,<span class="string">"fly"</span>,<span class="string">"bee"</span>,<span class="string">"ant"</span>,<span class="string">"grasshopper"</span>,<span class="string">"cricket"</span>,<span class="string">"walking_stick"</span>,<span class="string">"cockroach"</span>,<span class="string">"mantis"</span>,<span class="string">"cicada"</span>,<span class="string">"leafhopper"</span>,<span class="string">"lacewing"</span>,<span class="string">"dragonfly"</span>,<span class="string">"damselfly"</span>,<span class="string">"admiral"</span>,<span class="string">"ringlet"</span>,<span class="string">"monarch"</span>,<span class="string">"cabbage_butterfly"</span>,<span class="string">"sulphur_butterfly"</span>,<span class="string">"lycaenid"</span>,<span class="string">"starfish"</span>,<span class="string">"sea_urchin"</span>,<span class="string">"sea_cucumber"</span>,<span class="string">"wood_rabbit"</span>,<span class="string">"hare"</span>,<span class="string">"Angora"</span>,<span class="string">"hamster"</span>,<span class="string">"porcupine"</span>,<span class="string">"fox_squirrel"</span>,<span class="string">"marmot"</span>,<span class="string">"beaver"</span>,<span class="string">"guinea_pig"</span>,<span class="string">"sorrel"</span>,<span class="string">"zebra"</span>,<span class="string">"hog"</span>,<span class="string">"wild_boar"</span>,<span class="string">"warthog"</span>,<span class="string">"hippopotamus"</span>,<span class="string">"ox"</span>,<span class="string">"water_buffalo"</span>,<span class="string">"bison"</span>,<span class="string">"ram"</span>,<span class="string">"bighorn"</span>,<span class="string">"ibex"</span>,<span class="string">"hartebeest"</span>,<span class="string">"impala"</span>,<span class="string">"gazelle"</span>,<span class="string">"Arabian_camel"</span>,<span class="string">"llama"</span>,<span class="string">"weasel"</span>,<span class="string">"mink"</span>,<span class="string">"polecat"</span>,<span class="string">"black-footed_ferret"</span>,<span class="string">"otter"</span>,<span class="string">"skunk"</span>,<span class="string">"badger"</span>,<span class="string">"armadillo"</span>,<span class="string">"three-toed_sloth"</span>,<span class="string">"orangutan"</span>,<span class="string">"gorilla"</span>,<span class="string">"chimpanzee"</span>,<span class="string">"gibbon"</span>,<span class="string">"siamang"</span>,<span class="string">"guenon"</span>,<span class="string">"patas"</span>,<span class="string">"baboon"</span>,<span class="string">"macaque"</span>,<span class="string">"langur"</span>,<span class="string">"colobus"</span>,<span class="string">"proboscis_monkey"</span>,<span class="string">"marmoset"</span>,<span class="string">"capuchin"</span>,<span class="string">"howler_monkey"</span>,<span class="string">"titi"</span>,<span class="string">"spider_monkey"</span>,<span class="string">"squirrel_monkey"</span>,<span class="string">"Madagascar_cat"</span>,<span class="string">"indri"</span>,<span class="string">"Indian_elephant"</span>,<span class="string">"African_elephant"</span>,<span class="string">"lesser_panda"</span>,<span class="string">"giant_panda"</span>,<span class="string">"barracouta"</span>,<span class="string">"eel"</span>,<span class="string">"coho"</span>,<span class="string">"rock_beauty"</span>,<span class="string">"anemone_fish"</span>,<span class="string">"sturgeon"</span>,<span class="string">"gar"</span>,<span class="string">"lionfish"</span>,<span class="string">"puffer"</span>,<span class="string">"abacus"</span>,<span class="string">"abaya"</span>,<span class="string">"academic_gown"</span>,<span class="string">"accordion"</span>,<span class="string">"acoustic_guitar"</span>,<span class="string">"aircraft_carrier"</span>,<span class="string">"airliner"</span>,<span class="string">"airship"</span>,<span class="string">"altar"</span>,<span class="string">"ambulance"</span>,<span class="string">"amphibian"</span>,<span class="string">"analog_clock"</span>,<span class="string">"apiary"</span>,<span class="string">"apron"</span>,<span class="string">"ashcan"</span>,<span class="string">"assault_rifle"</span>,<span class="string">"backpack"</span>,<span class="string">"bakery"</span>,<span class="string">"balance_beam"</span>,<span class="string">"balloon"</span>,<span class="string">"ballpoint"</span>,<span class="string">"Band_Aid"</span>,<span class="string">"banjo"</span>,<span class="string">"bannister"</span>,<span class="string">"barbell"</span>,<span class="string">"barber_chair"</span>,<span class="string">"barbershop"</span>,<span class="string">"barn"</span>,<span class="string">"barometer"</span>,<span class="string">"barrel"</span>,<span class="string">"barrow"</span>,<span class="string">"baseball"</span>,<span class="string">"basketball"</span>,<span class="string">"bassinet"</span>,<span class="string">"bassoon"</span>,<span class="string">"bathing_cap"</span>,<span class="string">"bath_towel"</span>,<span class="string">"bathtub"</span>,<span class="string">"beach_wagon"</span>,<span class="string">"beacon"</span>,<span class="string">"beaker"</span>,<span class="string">"bearskin"</span>,<span class="string">"beer_bottle"</span>,<span class="string">"beer_glass"</span>,<span class="string">"bell_cote"</span>,<span class="string">"bib"</span>,<span class="string">"bicycle-built-for-two"</span>,<span class="string">"bikini"</span>,<span class="string">"binder"</span>,<span class="string">"binoculars"</span>,<span class="string">"birdhouse"</span>,<span class="string">"boathouse"</span>,<span class="string">"bobsled"</span>,<span class="string">"bolo_tie"</span>,<span class="string">"bonnet"</span>,<span class="string">"bookcase"</span>,<span class="string">"bookshop"</span>,<span class="string">"bottlecap"</span>,<span class="string">"bow"</span>,<span class="string">"bow_tie"</span>,<span class="string">"brass"</span>,<span class="string">"brassiere"</span>,<span class="string">"breakwater"</span>,<span class="string">"breastplate"</span>,<span class="string">"broom"</span>,<span class="string">"bucket"</span>,<span class="string">"buckle"</span>,<span class="string">"bulletproof_vest"</span>,<span class="string">"bullet_train"</span>,<span class="string">"butcher_shop"</span>,<span class="string">"cab"</span>,<span class="string">"caldron"</span>,<span class="string">"candle"</span>,<span class="string">"cannon"</span>,<span class="string">"canoe"</span>,<span class="string">"can_opener"</span>,<span class="string">"cardigan"</span>,<span class="string">"car_mirror"</span>,<span class="string">"carousel"</span>,<span class="string">"carpenters_kit"</span>,<span class="string">"carton"</span>,<span class="string">"car_wheel"</span>,<span class="string">"cash_machine"</span>,<span class="string">"cassette"</span>,<span class="string">"cassette_player"</span>,<span class="string">"castle"</span>,<span class="string">"catamaran"</span>,<span class="string">"CD_player"</span>,<span class="string">"cello"</span>,<span class="string">"cellular_telephone"</span>,<span class="string">"chain"</span>,<span class="string">"chainlink_fence"</span>,<span class="string">"chain_mail"</span>,<span class="string">"chain_saw"</span>,<span class="string">"chest"</span>,<span class="string">"chiffonier"</span>,<span class="string">"chime"</span>,<span class="string">"china_cabinet"</span>,<span class="string">"Christmas_stocking"</span>,<span class="string">"church"</span>,<span class="string">"cinema"</span>,<span class="string">"cleaver"</span>,<span class="string">"cliff_dwelling"</span>,<span class="string">"cloak"</span>,<span class="string">"clog"</span>,<span class="string">"cocktail_shaker"</span>,<span class="string">"coffee_mug"</span>,<span class="string">"coffeepot"</span>,<span class="string">"coil"</span>,<span class="string">"combination_lock"</span>,<span class="string">"computer_keyboard"</span>,<span class="string">"confectionery"</span>,<span class="string">"container_ship"</span>,<span class="string">"convertible"</span>,<span class="string">"corkscrew"</span>,<span class="string">"cornet"</span>,<span class="string">"cowboy_boot"</span>,<span class="string">"cowboy_hat"</span>,<span class="string">"cradle"</span>,<span class="string">"crane"</span>,<span class="string">"crash_helmet"</span>,<span class="string">"crate"</span>,<span class="string">"crib"</span>,<span class="string">"Crock_Pot"</span>,<span class="string">"croquet_ball"</span>,<span class="string">"crutch"</span>,<span class="string">"cuirass"</span>,<span class="string">"dam"</span>,<span class="string">"desk"</span>,<span class="string">"desktop_computer"</span>,<span class="string">"dial_telephone"</span>,<span class="string">"diaper"</span>,<span class="string">"digital_clock"</span>,<span class="string">"digital_watch"</span>,<span class="string">"dining_table"</span>,<span class="string">"dishrag"</span>,<span class="string">"dishwasher"</span>,<span class="string">"disk_brake"</span>,<span class="string">"dock"</span>,<span class="string">"dogsled"</span>,<span class="string">"dome"</span>,<span class="string">"doormat"</span>,<span class="string">"drilling_platform"</span>,<span class="string">"drum"</span>,<span class="string">"drumstick"</span>,<span class="string">"dumbbell"</span>,<span class="string">"Dutch_oven"</span>,<span class="string">"electric_fan"</span>,<span class="string">"electric_guitar"</span>,<span class="string">"electric_locomotive"</span>,<span class="string">"entertainment_center"</span>,<span class="string">"envelope"</span>,<span class="string">"espresso_maker"</span>,<span class="string">"face_powder"</span>,<span class="string">"feather_boa"</span>,<span class="string">"file"</span>,<span class="string">"fireboat"</span>,<span class="string">"fire_engine"</span>,<span class="string">"fire_screen"</span>,<span class="string">"flagpole"</span>,<span class="string">"flute"</span>,<span class="string">"folding_chair"</span>,<span class="string">"football_helmet"</span>,<span class="string">"forklift"</span>,<span class="string">"fountain"</span>,<span class="string">"fountain_pen"</span>,<span class="string">"four-poster"</span>,<span class="string">"freight_car"</span>,<span class="string">"French_horn"</span>,<span class="string">"frying_pan"</span>,<span class="string">"fur_coat"</span>,<span class="string">"garbage_truck"</span>,<span class="string">"gasmask"</span>,<span class="string">"gas_pump"</span>,<span class="string">"goblet"</span>,<span class="string">"go-kart"</span>,<span class="string">"golf_ball"</span>,<span class="string">"golfcart"</span>,<span class="string">"gondola"</span>,<span class="string">"gong"</span>,<span class="string">"gown"</span>,<span class="string">"grand_piano"</span>,<span class="string">"greenhouse"</span>,<span class="string">"grille"</span>,<span class="string">"grocery_store"</span>,<span class="string">"guillotine"</span>,<span class="string">"hair_slide"</span>,<span class="string">"hair_spray"</span>,<span class="string">"half_track"</span>,<span class="string">"hammer"</span>,<span class="string">"hamper"</span>,<span class="string">"hand_blower"</span>,<span class="string">"hand-held_computer"</span>,<span class="string">"handkerchief"</span>,<span class="string">"hard_disc"</span>,<span class="string">"harmonica"</span>,<span class="string">"harp"</span>,<span class="string">"harvester"</span>,<span class="string">"hatchet"</span>,<span class="string">"holster"</span>,<span class="string">"home_theater"</span>,<span class="string">"honeycomb"</span>,<span class="string">"hook"</span>,<span class="string">"hoopskirt"</span>,<span class="string">"horizontal_bar"</span>,<span class="string">"horse_cart"</span>,<span class="string">"hourglass"</span>,<span class="string">"iPod"</span>,<span class="string">"iron"</span>,<span class="string">"jack-o-lantern"</span>,<span class="string">"jean"</span>,<span class="string">"jeep"</span>,<span class="string">"jersey"</span>,<span class="string">"jigsaw_puzzle"</span>,<span class="string">"jinrikisha"</span>,<span class="string">"joystick"</span>,<span class="string">"kimono"</span>,<span class="string">"knee_pad"</span>,<span class="string">"knot"</span>,<span class="string">"lab_coat"</span>,<span class="string">"ladle"</span>,<span class="string">"lampshade"</span>,<span class="string">"laptop"</span>,<span class="string">"lawn_mower"</span>,<span class="string">"lens_cap"</span>,<span class="string">"letter_opener"</span>,<span class="string">"library"</span>,<span class="string">"lifeboat"</span>,<span class="string">"lighter"</span>,<span class="string">"limousine"</span>,<span class="string">"liner"</span>,<span class="string">"lipstick"</span>,<span class="string">"Loafer"</span>,<span class="string">"lotion"</span>,<span class="string">"loudspeaker"</span>,<span class="string">"loupe"</span>,<span class="string">"lumbermill"</span>,<span class="string">"magnetic_compass"</span>,<span class="string">"mailbag"</span>,<span class="string">"mailbox"</span>,<span class="string">"maillot"</span>,<span class="string">"maillot"</span>,<span class="string">"manhole_cover"</span>,<span class="string">"maraca"</span>,<span class="string">"marimba"</span>,<span class="string">"mask"</span>,<span class="string">"matchstick"</span>,<span class="string">"maypole"</span>,<span class="string">"maze"</span>,<span class="string">"measuring_cup"</span>,<span class="string">"medicine_chest"</span>,<span class="string">"megalith"</span>,<span class="string">"microphone"</span>,<span class="string">"microwave"</span>,<span class="string">"military_uniform"</span>,<span class="string">"milk_can"</span>,<span class="string">"minibus"</span>,<span class="string">"miniskirt"</span>,<span class="string">"minivan"</span>,<span class="string">"missile"</span>,<span class="string">"mitten"</span>,<span class="string">"mixing_bowl"</span>,<span class="string">"mobile_home"</span>,<span class="string">"Model_T"</span>,<span class="string">"modem"</span>,<span class="string">"monastery"</span>,<span class="string">"monitor"</span>,<span class="string">"moped"</span>,<span class="string">"mortar"</span>,<span class="string">"mortarboard"</span>,<span class="string">"mosque"</span>,<span class="string">"mosquito_net"</span>,<span class="string">"motor_scooter"</span>,<span class="string">"mountain_bike"</span>,<span class="string">"mountain_tent"</span>,<span class="string">"mouse"</span>,<span class="string">"mousetrap"</span>,<span class="string">"moving_van"</span>,<span class="string">"muzzle"</span>,<span class="string">"nail"</span>,<span class="string">"neck_brace"</span>,<span class="string">"necklace"</span>,<span class="string">"nipple"</span>,<span class="string">"notebook"</span>,<span class="string">"obelisk"</span>,<span class="string">"oboe"</span>,<span class="string">"ocarina"</span>,<span class="string">"odometer"</span>,<span class="string">"oil_filter"</span>,<span class="string">"organ"</span>,<span class="string">"oscilloscope"</span>,<span class="string">"overskirt"</span>,<span class="string">"oxcart"</span>,<span class="string">"oxygen_mask"</span>,<span class="string">"packet"</span>,<span class="string">"paddle"</span>,<span class="string">"paddlewheel"</span>,<span class="string">"padlock"</span>,<span class="string">"paintbrush"</span>,<span class="string">"pajama"</span>,<span class="string">"palace"</span>,<span class="string">"panpipe"</span>,<span class="string">"paper_towel"</span>,<span class="string">"parachute"</span>,<span class="string">"parallel_bars"</span>,<span class="string">"park_bench"</span>,<span class="string">"parking_meter"</span>,<span class="string">"passenger_car"</span>,<span class="string">"patio"</span>,<span class="string">"pay-phone"</span>,<span class="string">"pedestal"</span>,<span class="string">"pencil_box"</span>,<span class="string">"pencil_sharpener"</span>,<span class="string">"perfume"</span>,<span class="string">"Petri_dish"</span>,<span class="string">"photocopier"</span>,<span class="string">"pick"</span>,<span class="string">"pickelhaube"</span>,<span class="string">"picket_fence"</span>,<span class="string">"pickup"</span>,<span class="string">"pier"</span>,<span class="string">"piggy_bank"</span>,<span class="string">"pill_bottle"</span>,<span class="string">"pillow"</span>,<span class="string">"ping-pong_ball"</span>,<span class="string">"pinwheel"</span>,<span class="string">"pirate"</span>,<span class="string">"pitcher"</span>,<span class="string">"plane"</span>,<span class="string">"planetarium"</span>,<span class="string">"plastic_bag"</span>,<span class="string">"plate_rack"</span>,<span class="string">"plow"</span>,<span class="string">"plunger"</span>,<span class="string">"Polaroid_camera"</span>,<span class="string">"pole"</span>,<span class="string">"police_van"</span>,<span class="string">"poncho"</span>,<span class="string">"pool_table"</span>,<span class="string">"pop_bottle"</span>,<span class="string">"pot"</span>,<span class="string">"potters_wheel"</span>,<span class="string">"power_drill"</span>,<span class="string">"prayer_rug"</span>,<span class="string">"printer"</span>,<span class="string">"prison"</span>,<span class="string">"projectile"</span>,<span class="string">"projector"</span>,<span class="string">"puck"</span>,<span class="string">"punching_bag"</span>,<span class="string">"purse"</span>,<span class="string">"quill"</span>,<span class="string">"quilt"</span>,<span class="string">"racer"</span>,<span class="string">"racket"</span>,<span class="string">"radiator"</span>,<span class="string">"radio"</span>,<span class="string">"radio_telescope"</span>,<span class="string">"rain_barrel"</span>,<span class="string">"recreational_vehicle"</span>,<span class="string">"reel"</span>,<span class="string">"reflex_camera"</span>,<span class="string">"refrigerator"</span>,<span class="string">"remote_control"</span>,<span class="string">"restaurant"</span>,<span class="string">"revolver"</span>,<span class="string">"rifle"</span>,<span class="string">"rocking_chair"</span>,<span class="string">"rotisserie"</span>,<span class="string">"rubber_eraser"</span>,<span class="string">"rugby_ball"</span>,<span class="string">"rule"</span>,<span class="string">"running_shoe"</span>,<span class="string">"safe"</span>,<span class="string">"safety_pin"</span>,<span class="string">"saltshaker"</span>,<span class="string">"sandal"</span>,<span class="string">"sarong"</span>,<span class="string">"sax"</span>,<span class="string">"scabbard"</span>,<span class="string">"scale"</span>,<span class="string">"school_bus"</span>,<span class="string">"schooner"</span>,<span class="string">"scoreboard"</span>,<span class="string">"screen"</span>,<span class="string">"screw"</span>,<span class="string">"screwdriver"</span>,<span class="string">"seat_belt"</span>,<span class="string">"sewing_machine"</span>,<span class="string">"shield"</span>,<span class="string">"shoe_shop"</span>,<span class="string">"shoji"</span>,<span class="string">"shopping_basket"</span>,<span class="string">"shopping_cart"</span>,<span class="string">"shovel"</span>,<span class="string">"shower_cap"</span>,<span class="string">"shower_curtain"</span>,<span class="string">"ski"</span>,<span class="string">"ski_mask"</span>,<span class="string">"sleeping_bag"</span>,<span class="string">"slide_rule"</span>,<span class="string">"sliding_door"</span>,<span class="string">"slot"</span>,<span class="string">"snorkel"</span>,<span class="string">"snowmobile"</span>,<span class="string">"snowplow"</span>,<span class="string">"soap_dispenser"</span>,<span class="string">"soccer_ball"</span>,<span class="string">"sock"</span>,<span class="string">"solar_dish"</span>,<span class="string">"sombrero"</span>,<span class="string">"soup_bowl"</span>,<span class="string">"space_bar"</span>,<span class="string">"space_heater"</span>,<span class="string">"space_shuttle"</span>,<span class="string">"spatula"</span>,<span class="string">"speedboat"</span>,<span class="string">"spider_web"</span>,<span class="string">"spindle"</span>,<span class="string">"sports_car"</span>,<span class="string">"spotlight"</span>,<span class="string">"stage"</span>,<span class="string">"steam_locomotive"</span>,<span class="string">"steel_arch_bridge"</span>,<span class="string">"steel_drum"</span>,<span class="string">"stethoscope"</span>,<span class="string">"stole"</span>,<span class="string">"stone_wall"</span>,<span class="string">"stopwatch"</span>,<span class="string">"stove"</span>,<span class="string">"strainer"</span>,<span class="string">"streetcar"</span>,<span class="string">"stretcher"</span>,<span class="string">"studio_couch"</span>,<span class="string">"stupa"</span>,<span class="string">"submarine"</span>,<span class="string">"suit"</span>,<span class="string">"sundial"</span>,<span class="string">"sunglass"</span>,<span class="string">"sunglasses"</span>,<span class="string">"sunscreen"</span>,<span class="string">"suspension_bridge"</span>,<span class="string">"swab"</span>,<span class="string">"sweatshirt"</span>,<span class="string">"swimming_trunks"</span>,<span class="string">"swing"</span>,<span class="string">"switch"</span>,<span class="string">"syringe"</span>,<span class="string">"table_lamp"</span>,<span class="string">"tank"</span>,<span class="string">"tape_player"</span>,<span class="string">"teapot"</span>,<span class="string">"teddy"</span>,<span class="string">"television"</span>,<span class="string">"tennis_ball"</span>,<span class="string">"thatch"</span>,<span class="string">"theater_curtain"</span>,<span class="string">"thimble"</span>,<span class="string">"thresher"</span>,<span class="string">"throne"</span>,<span class="string">"tile_roof"</span>,<span class="string">"toaster"</span>,<span class="string">"tobacco_shop"</span>,<span class="string">"toilet_seat"</span>,<span class="string">"torch"</span>,<span class="string">"totem_pole"</span>,<span class="string">"tow_truck"</span>,<span class="string">"toyshop"</span>,<span class="string">"tractor"</span>,<span class="string">"trailer_truck"</span>,<span class="string">"tray"</span>,<span class="string">"trench_coat"</span>,<span class="string">"tricycle"</span>,<span class="string">"trimaran"</span>,<span class="string">"tripod"</span>,<span class="string">"triumphal_arch"</span>,<span class="string">"trolleybus"</span>,<span class="string">"trombone"</span>,<span class="string">"tub"</span>,<span class="string">"turnstile"</span>,<span class="string">"typewriter_keyboard"</span>,<span class="string">"umbrella"</span>,<span class="string">"unicycle"</span>,<span class="string">"upright"</span>,<span class="string">"vacuum"</span>,<span class="string">"vase"</span>,<span class="string">"vault"</span>,<span class="string">"velvet"</span>,<span class="string">"vending_machine"</span>,<span class="string">"vestment"</span>,<span class="string">"viaduct"</span>,<span class="string">"violin"</span>,<span class="string">"volleyball"</span>,<span class="string">"waffle_iron"</span>,<span class="string">"wall_clock"</span>,<span class="string">"wallet"</span>,<span class="string">"wardrobe"</span>,<span class="string">"warplane"</span>,<span class="string">"washbasin"</span>,<span class="string">"washer"</span>,<span class="string">"water_bottle"</span>,<span class="string">"water_jug"</span>,<span class="string">"water_tower"</span>,<span class="string">"whiskey_jug"</span>,<span class="string">"whistle"</span>,<span class="string">"wig"</span>,<span class="string">"window_screen"</span>,<span class="string">"window_shade"</span>,<span class="string">"Windsor_tie"</span>,<span class="string">"wine_bottle"</span>,<span class="string">"wing"</span>,<span class="string">"wok"</span>,<span class="string">"wooden_spoon"</span>,<span class="string">"wool"</span>,<span class="string">"worm_fence"</span>,<span class="string">"wreck"</span>,<span class="string">"yawl"</span>,<span class="string">"yurt"</span>,<span class="string">"web_site"</span>,<span class="string">"comic_book"</span>,<span class="string">"crossword_puzzle"</span>,<span class="string">"street_sign"</span>,<span class="string">"traffic_light"</span>,<span class="string">"book_jacket"</span>,<span class="string">"menu"</span>,<span class="string">"plate"</span>,<span class="string">"guacamole"</span>,<span class="string">"consomme"</span>,<span class="string">"hot_pot"</span>,<span class="string">"trifle"</span>,<span class="string">"ice_cream"</span>,<span class="string">"ice_lolly"</span>,<span class="string">"French_loaf"</span>,<span class="string">"bagel"</span>,<span class="string">"pretzel"</span>,<span class="string">"cheeseburger"</span>,<span class="string">"hotdog"</span>,<span class="string">"mashed_potato"</span>,<span class="string">"head_cabbage"</span>,<span class="string">"broccoli"</span>,<span class="string">"cauliflower"</span>,<span class="string">"zucchini"</span>,<span class="string">"spaghetti_squash"</span>,<span class="string">"acorn_squash"</span>,<span class="string">"butternut_squash"</span>,<span class="string">"cucumber"</span>,<span class="string">"artichoke"</span>,<span class="string">"bell_pepper"</span>,<span class="string">"cardoon"</span>,<span class="string">"mushroom"</span>,<span class="string">"Granny_Smith"</span>,<span class="string">"strawberry"</span>,<span class="string">"orange"</span>,<span class="string">"lemon"</span>,<span class="string">"fig"</span>,<span class="string">"pineapple"</span>,<span class="string">"banana"</span>,<span class="string">"jackfruit"</span>,<span class="string">"custard_apple"</span>,<span class="string">"pomegranate"</span>,<span class="string">"hay"</span>,<span class="string">"carbonara"</span>,<span class="string">"chocolate_sauce"</span>,<span class="string">"dough"</span>,<span class="string">"meat_loaf"</span>,<span class="string">"pizza"</span>,<span class="string">"potpie"</span>,<span class="string">"burrito"</span>,<span class="string">"red_wine"</span>,<span class="string">"espresso"</span>,<span class="string">"cup"</span>,<span class="string">"eggnog"</span>,<span class="string">"alp"</span>,<span class="string">"bubble"</span>,<span class="string">"cliff"</span>,<span class="string">"coral_reef"</span>,<span class="string">"geyser"</span>,<span class="string">"lakeside"</span>,<span class="string">"promontory"</span>,<span class="string">"sandbar"</span>,<span class="string">"seashore"</span>,<span class="string">"valley"</span>,<span class="string">"volcano"</span>,<span class="string">"ballplayer"</span>,<span class="string">"groom"</span>,<span class="string">"scuba_diver"</span>,<span class="string">"rapeseed"</span>,<span class="string">"daisy"</span>,<span class="string">"yellow_ladys_slipper"</span>,<span class="string">"corn"</span>,<span class="string">"acorn"</span>,<span class="string">"hip"</span>,<span class="string">"buckeye"</span>,<span class="string">"coral_fungus"</span>,<span class="string">"agaric"</span>,<span class="string">"gyromitra"</span>,<span class="string">"stinkhorn"</span>,<span class="string">"earthstar"</span>,<span class="string">"hen-of-the-woods"</span>,<span class="string">"bolete"</span>,<span class="string">"ear"</span>,<span class="string">"toilet_tissue"</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(size, box)</span>:</span></span><br><span class="line">    dw = <span class="number">1.</span>/(size[<span class="number">0</span>])</span><br><span class="line">    dh = <span class="number">1.</span>/(size[<span class="number">1</span>])</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">1</span>])/<span class="number">2.0</span> - <span class="number">1</span></span><br><span class="line">    y = (box[<span class="number">2</span>] + box[<span class="number">3</span>])/<span class="number">2.0</span> - <span class="number">1</span></span><br><span class="line">    w = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    x = x*dw</span><br><span class="line">    w = w*dw</span><br><span class="line">    y = y*dh</span><br><span class="line">    h = h*dh</span><br><span class="line">    <span class="keyword">return</span> (x,y,w,h)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_annotation</span><span class="params">(year, image_id)</span>:</span></span><br><span class="line">    in_file = open(<span class="string">'VOCdevkit/VOC%s/Annotations/%s.xml'</span>%(year, image_id))</span><br><span class="line">    out_file = open(<span class="string">'VOCdevkit/VOC%s/labels/%s.txt'</span>%(year, image_id), <span class="string">'w'</span>)</span><br><span class="line">    tree=ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(<span class="string">'size'</span>)</span><br><span class="line">    w = int(size.find(<span class="string">'width'</span>).text)</span><br><span class="line">    h = int(size.find(<span class="string">'height'</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.iter(<span class="string">'object'</span>):</span><br><span class="line">        difficult = obj.find(<span class="string">'difficult'</span>).text</span><br><span class="line">        cls = obj.find(<span class="string">'name'</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes <span class="keyword">or</span> int(difficult)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">'bndbox'</span>)</span><br><span class="line">        b = (float(xmlbox.find(<span class="string">'xmin'</span>).text), float(xmlbox.find(<span class="string">'xmax'</span>).text), float(xmlbox.find(<span class="string">'ymin'</span>).text), float(xmlbox.find(<span class="string">'ymax'</span>).text))</span><br><span class="line">        bb = convert((w,h), b)</span><br><span class="line">        out_file.write(str(cls_id) + <span class="string">" "</span> + <span class="string">" "</span>.join([str(a) <span class="keyword">for</span> a <span class="keyword">in</span> bb]) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">wd = getcwd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> year, image_set <span class="keyword">in</span> sets:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'VOCdevkit/VOC%s/labels/'</span>%(year)):</span><br><span class="line">        os.makedirs(<span class="string">'VOCdevkit/VOC%s/labels/'</span>%(year))</span><br><span class="line">    image_ids = open(<span class="string">'VOCdevkit/VOC%s/ImageSets/Main/%s.txt'</span>%(year, image_set)).read().strip().split()</span><br><span class="line">    list_file = open(<span class="string">'%s_%s.txt'</span>%(year, image_set), <span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">for</span> image_id <span class="keyword">in</span> image_ids:</span><br><span class="line">        list_file.write(<span class="string">'%s/VOCdevkit/VOC%s/JPEGImages/%s.JPEG\n'</span>%(wd, year, image_id))</span><br><span class="line">        convert_annotation(year, image_id)</span><br><span class="line">    list_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#os.system("cat 2007_train.txt 2007_val.txt 2012_train.txt 2012_val.txt &gt; train.txt")</span></span><br><span class="line"><span class="comment">#os.system("cat 2007_train.txt 2007_val.txt 2007_test.txt 2012_train.txt 2012_val.txt &gt; train.all.txt")</span></span><br></pre></td></tr></table></figure><p>修改好后在该目录下运行命令：python voc_label.py，之后则在文件夹scripts\VOCdevkit\VOC2007下生成了文件夹lable。这里包含了类别和对应归一化后的位置（i guess，如有错请指正）。同时在scripts\下应该也生成了train_2007.txt这个文件，里面包含了所有训练样本的绝对路径。</p><p>修改.data文件，以cfg/voc.data为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 classes= 20</span><br><span class="line">2 train  = &lt;path-to-voc&gt;/train.txt</span><br><span class="line">3 valid  = &lt;path-to-voc&gt;2007_test.txt</span><br><span class="line">4 names = data/voc.names</span><br><span class="line">5 backup = backup</span><br></pre></td></tr></table></figure><p>使用自己的路径替换<path-to-voc>，例如我的配置如下：</path-to-voc></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classes= 1000</span><br><span class="line">train  = /home/teng/programmings/semap/darknet/scripts/2007_train.txt</span><br><span class="line">names = /home/teng/programmings/semap/darknet/data/voc.names</span><br><span class="line">backup = /home/teng/programmings/semap/darknet/backup</span><br></pre></td></tr></table></figure><p>修改.names文件，即训练的label：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tench</span><br><span class="line">goldfish</span><br><span class="line">great_white_shark</span><br><span class="line">...</span><br><span class="line">bolete</span><br><span class="line">ear</span><br><span class="line">toilet_tissue</span><br></pre></td></tr></table></figure><h1 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h1><p>做好了上述准备，就可以根据不同的网络设置（cfg文件）来训练了。在文件夹cfg中有很多cfg文件，应该跟caffe中的prototxt文件是一个意思。这里以yolo-voc.cfg为例，主要修改参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[net]</span><br><span class="line"><span class="comment"># Testing</span></span><br><span class="line"><span class="comment"># batch=1</span></span><br><span class="line"><span class="comment"># subdivisions=1    #训练时候把上面Testing的参数注释</span></span><br><span class="line"><span class="comment"># Training</span></span><br><span class="line">batch=64</span><br><span class="line">subdivisions=32     <span class="comment">#这个参数根据自己GPU的显存进行修改，显存不够就改大一些</span></span><br><span class="line">...                 <span class="comment">#因为训练时每批的数量 = batch/subdivisions</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">learning_rate=0.001  <span class="comment">#根据自己的需求还有训练速度学习率可以调整一下</span></span><br><span class="line">burn_in=1000</span><br><span class="line">max_batches = 30000  <span class="comment">#根据自己的需求还有训练速度max_batches可以调整一下</span></span><br><span class="line">policy=steps</span><br><span class="line">steps=10000,20000    <span class="comment">#跟着max_batches做相应调整</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">[convolutional]</span><br><span class="line">size=1</span><br><span class="line">stride=1</span><br><span class="line">pad=1</span><br><span class="line">filters=30         <span class="comment">#filters = 3*(classes + 5)</span></span><br><span class="line">activation=linear</span><br><span class="line"></span><br><span class="line">[yolo]</span><br><span class="line">mask = 0,1,2</span><br><span class="line">anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326</span><br><span class="line">classes=5          <span class="comment">#修改类别数</span></span><br><span class="line">num=9</span><br><span class="line">jitter=.3</span><br><span class="line">ignore_thresh = .5</span><br><span class="line">truth_thresh = 1</span><br><span class="line">random=1           <span class="comment">#显存小的话 =0</span></span><br><span class="line"><span class="comment">#这个文件的最下面有3个YOLO层，这里我才放上来了一个，这三个地方的classes做相应修改</span></span><br><span class="line"><span class="comment">#每个YOLO层的上一层的convolutional层的filters也要修改</span></span><br></pre></td></tr></table></figure><h1 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h1><p>下载预训练模型（权重）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://pjreddie.com/media/files/darknet53.conv.74</span><br></pre></td></tr></table></figure><p>训练：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./darknet detector train cfg/voc.data cfg/yolov3-voc.cfg darknet53.conv.74</span><br></pre></td></tr></table></figure><h1 id="训练过程参数详解"><a href="#训练过程参数详解" class="headerlink" title="训练过程参数详解"></a>训练过程参数详解</h1><p>Region xx: cfg文件中yolo-layer的索引；</p><p>Avg IOU:当前迭代中，预测的box与标注的box的平均交并比，越大越好，期望数值为1；</p><p>Class: 标注物体的分类准确率，越大越好，期望数值为1；</p><p>obj: 越大越好，期望数值为1；</p><p>No obj: 越小越好；</p><p>.5R: 以IOU=0.5为阈值时候的recall; recall = 检出的正样本/实际的正样本</p><p>0.75R: 以IOU=0.75为阈值时候的recall;</p><p>count:正样本数目。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolo/</a></li><li><a href="https://blog.csdn.net/lilai619/article/details/79695109" target="_blank" rel="noopener">https://blog.csdn.net/lilai619/article/details/79695109</a></li><li><a href="https://zhuanlan.zhihu.com/p/35490655" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35490655</a></li><li><a href="https://blog.csdn.net/ch_liu23/article/details/53558549" target="_blank" rel="noopener">https://blog.csdn.net/ch_liu23/article/details/53558549</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 深度学习 </category>
          
          <category> yolo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> yolo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell-批量重命名的方法总览</title>
      <link href="/2018/06/05/programmings/linux/Shell-%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E8%A7%88/"/>
      <url>/2018/06/05/programmings/linux/Shell-%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="删除所有的-bak-后缀"><a href="#删除所有的-bak-后缀" class="headerlink" title="删除所有的 .bak 后缀"></a>删除所有的 .bak 后缀</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="string">'s/\.bak$//'</span> *.bak</span><br></pre></td></tr></table></figure><h1 id="把-JPEG-文件后缀修改为-jpg"><a href="#把-JPEG-文件后缀修改为-jpg" class="headerlink" title="把 .JPEG 文件后缀修改为 .jpg"></a>把 .JPEG 文件后缀修改为 .jpg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="string">'s/\.JPEG$/\.jpg/'</span> *.JPEG</span><br></pre></td></tr></table></figure><h1 id="把所有文件的文件名改为小写"><a href="#把所有文件的文件名改为小写" class="headerlink" title="把所有文件的文件名改为小写"></a>把所有文件的文件名改为小写</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="string">'y/A-Z/a-z/'</span> *</span><br></pre></td></tr></table></figure><h1 id="将-abcd-jpg-重命名为-abcd-efg-jpg"><a href="#将-abcd-jpg-重命名为-abcd-efg-jpg" class="headerlink" title="将 abcd.jpg 重命名为 abcd_efg.jpg"></a>将 abcd.jpg 重命名为 abcd_efg.jpg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> *.jpg; <span class="keyword">do</span> mv <span class="string">"<span class="variable">$var</span>"</span> <span class="string">"<span class="variable">$&#123;var%.jpg&#125;</span>_efg.jpg"</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="将-abcd-efg-jpg-重命名为-abcd-lmn-jpg"><a href="#将-abcd-efg-jpg-重命名为-abcd-lmn-jpg" class="headerlink" title="将 abcd_efg.jpg 重命名为 abcd_lmn.jpg"></a>将 abcd_efg.jpg 重命名为 abcd_lmn.jpg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> *.jpg; <span class="keyword">do</span> mv <span class="string">"<span class="variable">$var</span>"</span> <span class="string">"<span class="variable">$&#123;var%_efg.jpg&#125;</span>_lmn.jpg"</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="把文件名中所有小写字母改为大写字母"><a href="#把文件名中所有小写字母改为大写字母" class="headerlink" title="把文件名中所有小写字母改为大写字母"></a>把文件名中所有小写字母改为大写字母</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `ls`; <span class="keyword">do</span> mv -f <span class="string">"<span class="variable">$var</span>"</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span> |tr a-z A-Z`; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="把格式-jpg-的文件改为-0-jpg"><a href="#把格式-jpg-的文件改为-0-jpg" class="headerlink" title="把格式 *_?.jpg 的文件改为 *_0?.jpg"></a>把格式 *_?.jpg 的文件改为 *_0?.jpg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `ls *_?.jpg`; <span class="keyword">do</span> mv <span class="string">"<span class="variable">$var</span>"</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span> |awk -F <span class="string">'_'</span> <span class="string">'&#123;print $1 "_0" $2&#125;'</span>`; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="把文件名的后四个字母变为-vzomik"><a href="#把文件名的后四个字母变为-vzomik" class="headerlink" title="把文件名的后四个字母变为 vzomik"></a>把文件名的后四个字母变为 vzomik</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `ls`; <span class="keyword">do</span> mv -f <span class="string">"<span class="variable">$var</span>"</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span> |sed <span class="string">'s/....$/vzomik/'</span>`; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="把-txt变成-txt-bak-的后缀"><a href="#把-txt变成-txt-bak-的后缀" class="headerlink" title="把.txt变成.txt_bak 的后缀"></a>把.txt变成.txt_bak 的后缀</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls *.txt|xargs -n1 -i&#123;&#125; mv &#123;&#125; &#123;&#125;_bak</span><br><span class="line"><span class="comment"># xargs -n1 –i&#123;&#125; 类似for循环，-n1意思是一个一个对象的去处理，-i&#123;&#125; 把前面的对象使用&#123;&#125;取代，mv &#123;&#125; &#123;&#125;_bak 相当于 mv 1.txt 1.txt_bak</span></span><br><span class="line"></span><br><span class="line">$ find ./*.txt -<span class="built_in">exec</span> mv &#123;&#125; &#123;&#125;_bak \;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令中也是把&#123;&#125;作为前面find出来的文件的替代符，后面的”\”为”;”的脱意符，不然shell会把分号作为该行命令的结尾.</span></span><br></pre></td></tr></table></figure><h1 id="批量替换文件名"><a href="#批量替换文件名" class="headerlink" title="批量替换文件名"></a>批量替换文件名</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">oldext=<span class="string">"JPG"</span></span><br><span class="line">newext=<span class="string">"jpg"</span></span><br><span class="line">dir=$(<span class="built_in">eval</span> <span class="built_in">pwd</span>)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls <span class="variable">$dir</span> | grep .<span class="variable">$oldext</span>)</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        name=$(ls <span class="variable">$file</span> | cut -d. -f1)</span><br><span class="line">        mv <span class="variable">$file</span> <span class="variable">$&#123;name&#125;</span>.<span class="variable">$newext</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"change JPG=====&gt;jpg done!"</span></span><br></pre></td></tr></table></figure><p>1.变量oldext和newext分别指定旧的扩展名和新的扩展名。dir指定文件所在目录；</p><p>2.“ls $dir | grep .$oldext”用来在指定目录dir中获取扩展名为旧扩展名的所有文件；</p><p>3.在循环体内先利用cut命令将文件名中“.”之前的字符串剪切出来，并赋值给name变量；接着将当前的文件名重命名为新的文件名。</p><p>通过这个脚本，所有照片的扩展名都成功修改。为了使这个脚本更具有通用型，我们可以增加几条read命令实现脚本和用户之间的交互。改进版的脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"old extension:"</span> oldext</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"new extension:"</span> newext</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"The directory:"</span> dir</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls <span class="variable">$dir</span> | grep .<span class="variable">$oldext</span>)</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        name=$(ls <span class="variable">$file</span> | cut -d. -f1)</span><br><span class="line">        mv <span class="variable">$file</span> <span class="variable">$&#123;name&#125;</span>.<span class="variable">$newext</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$name</span>.<span class="variable">$oldext</span> ====&gt; <span class="variable">$name</span>.<span class="variable">$newext</span>"</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"all files has been modified."</span></span><br></pre></td></tr></table></figure><p>修改后的脚本可以批量修改任意扩展名。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://edsionte.com/techblog/archives/category/shell%e7%bc%96%e7%a8%8b" target="_blank" rel="noopener">http://edsionte.com/techblog/archives/category/shell%e7%bc%96%e7%a8%8b</a></li><li><a href="https://my.oschina.net/musings/blog/380939" target="_blank" rel="noopener">https://my.oschina.net/musings/blog/380939</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>colmap-posenet教程</title>
      <link href="/2018/05/17/machine_learning/colmap-posenet%E6%95%99%E7%A8%8B/"/>
      <url>/2018/05/17/machine_learning/colmap-posenet%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Colmap-教程"><a href="#Colmap-教程" class="headerlink" title="Colmap 教程"></a>Colmap 教程</h1><h1 id="Posenet-教程"><a href="#Posenet-教程" class="headerlink" title="Posenet 教程"></a>Posenet 教程</h1><h2 id="转换colmap数据至文本文件"><a href="#转换colmap数据至文本文件" class="headerlink" title="转换colmap数据至文本文件"></a>转换colmap数据至文本文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./colmap-path/build/src/exe/model_converter --input_path ./ --output_path ./ --ouput_type TXT</span><br></pre></td></tr></table></figure><h2 id="根据TXT文件生成posenet的训练数据集和测试数据集"><a href="#根据TXT文件生成posenet的训练数据集和测试数据集" class="headerlink" title="根据TXT文件生成posenet的训练数据集和测试数据集"></a>根据TXT文件生成posenet的训练数据集和测试数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Created on 2017年11月26日</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: teng</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReadLog</span><span class="params">(log_file)</span>:</span></span><br><span class="line">    lines = []</span><br><span class="line">    <span class="keyword">with</span> open(log_file, <span class="string">'r'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        lines=fin.readlines()</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    imagesFile = []</span><br><span class="line">    q = []</span><br><span class="line">    loc = []</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    count_data = <span class="number">0</span></span><br><span class="line">    lines = ReadLog(<span class="string">'images.txt'</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">4</span>:]:</span><br><span class="line">        <span class="keyword">if</span> count % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            data = line.strip().split()</span><br><span class="line">            imagesFile.append(str(data[<span class="number">9</span>]))</span><br><span class="line">            q.append([float(data[<span class="number">1</span>]), float(data[<span class="number">2</span>]), float(data[<span class="number">3</span>]), float(data[<span class="number">4</span>])])</span><br><span class="line">            loc.append([float(data[<span class="number">5</span>]), float(data[<span class="number">6</span>]), float(data[<span class="number">7</span>])])</span><br><span class="line">            count_data += <span class="number">1</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    randomTest = []</span><br><span class="line">    randomVal = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(count_data/<span class="number">10</span>)):</span><br><span class="line">        randomTest.append(random.randint(<span class="number">0</span>, count_data<span class="number">-1</span>))</span><br><span class="line">        randomVal.append(random.randint(<span class="number">0</span>, count_data<span class="number">-1</span>))</span><br><span class="line">     </span><br><span class="line">    output = open(<span class="string">'train.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    output1 = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    output2 = open(<span class="string">'val.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(loc)):</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> randomTest:</span><br><span class="line">            output1.write(<span class="string">"images/"</span> + str(imagesFile[i]) + <span class="string">" "</span> + str(loc[i][<span class="number">0</span>]) + <span class="string">" "</span> + \</span><br><span class="line">            str(loc[i][<span class="number">1</span>]) + <span class="string">" "</span> + str(loc[i][<span class="number">2</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">0</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">1</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">2</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">3</span>]) + <span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">elif</span> i <span class="keyword">in</span> randomVal:</span><br><span class="line">            output2.write(<span class="string">"images/"</span> + str(imagesFile[i]) + <span class="string">" "</span> + str(loc[i][<span class="number">0</span>]) + <span class="string">" "</span> + \</span><br><span class="line">            str(loc[i][<span class="number">1</span>]) + <span class="string">" "</span> + str(loc[i][<span class="number">2</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">0</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">1</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">2</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">3</span>]) + <span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.write(<span class="string">"images/"</span> + str(imagesFile[i]) + <span class="string">" "</span> + str(loc[i][<span class="number">0</span>]) + <span class="string">" "</span> + \</span><br><span class="line">            str(loc[i][<span class="number">1</span>]) + <span class="string">" "</span> + str(loc[i][<span class="number">2</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">0</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">1</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">2</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">3</span>]) + <span class="string">"\n"</span>)</span><br><span class="line">    output.close()</span><br><span class="line">    output1.close()</span><br><span class="line">    output2.close()</span><br></pre></td></tr></table></figure><h1 id="posenet-教程"><a href="#posenet-教程" class="headerlink" title="posenet 教程"></a>posenet 教程</h1><h2 id="生成lmdb文件"><a href="#生成lmdb文件" class="headerlink" title="生成lmdb文件"></a>生成lmdb文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">caffe_root = <span class="string">'/home/teng/programmings/semap/caffe-posenet/'</span>  <span class="comment"># Change to your directory to caffe-posenet</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, caffe_root + <span class="string">'python'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> lmdb</span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">directory = <span class="string">'/home/teng/programmings/semap/caffe-posenet/posenet/models/611/'</span></span><br><span class="line">dataset = <span class="string">'train.txt'</span></span><br><span class="line"></span><br><span class="line">poses = []</span><br><span class="line">images = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(directory+dataset) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        fname, p0,p1,p2,p3,p4,p5,p6 = line.split()</span><br><span class="line">        p0 = float(p0)</span><br><span class="line">        p1 = float(p1)</span><br><span class="line">        p2 = float(p2)</span><br><span class="line">        p3 = float(p3)</span><br><span class="line">        p4 = float(p4)</span><br><span class="line">        p5 = float(p5)</span><br><span class="line">        p6 = float(p6)</span><br><span class="line">        poses.append((p0,p1,p2,p3,p4,p5,p6))</span><br><span class="line">        images.append(directory+fname)</span><br><span class="line"></span><br><span class="line">r = list(range(len(images)))</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line"><span class="keyword">print</span> <span class="string">'r = \n'</span></span><br><span class="line">random.shuffle(r)</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Creating PoseNet Dataset.'</span></span><br><span class="line">env = lmdb.open(<span class="string">'train_lmdb'</span>, map_size=int(<span class="number">1e12</span>))</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">    print(<span class="string">'i = &#123;&#125;, r = &#123;&#125;'</span>).format(i, len(r))</span><br><span class="line">    <span class="keyword">if</span> (count+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Saving image: '</span>, count+<span class="number">1</span></span><br><span class="line">    X = cv2.imread(images[i])</span><br><span class="line">    print(<span class="string">'images[i] = \n X = &#123;&#125;'</span>).format(images[i], X)</span><br><span class="line">    X = cv2.resize(X, (<span class="number">455</span>,<span class="number">256</span>))    <span class="comment"># to reproduce PoseNet results, please resize the images so that the shortest side is 256 pixels</span></span><br><span class="line">    X = np.transpose(X,(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    im_dat = caffe.io.array_to_datum(np.array(X).astype(np.uint8))</span><br><span class="line">    im_dat.float_data.extend(poses[i])</span><br><span class="line">    str_id = <span class="string">'&#123;:0&gt;10d&#125;'</span>.format(count)</span><br><span class="line">    <span class="keyword">with</span> env.begin(write=<span class="keyword">True</span>) <span class="keyword">as</span> txn:</span><br><span class="line">        txn.put(str_id, im_dat.SerializeToString())</span><br><span class="line">    count = count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">env.close()</span><br></pre></td></tr></table></figure><h3 id="test文件"><a href="#test文件" class="headerlink" title="test文件"></a>test文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">caffe_root = <span class="string">'/home/teng/programmings/semap/caffe-posenet/'</span>  <span class="comment"># Change to your directory to caffe-posenet</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, caffe_root + <span class="string">'python'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> lmdb</span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">directory = <span class="string">'/home/teng/programmings/semap/caffe-posenet/posenet/models/611/'</span></span><br><span class="line">dataset = <span class="string">'test.txt'</span></span><br><span class="line"></span><br><span class="line">poses = []</span><br><span class="line">images = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(directory+dataset) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        fname, p0,p1,p2,p3,p4,p5,p6 = line.split()</span><br><span class="line">        p0 = float(p0)</span><br><span class="line">        p1 = float(p1)</span><br><span class="line">        p2 = float(p2)</span><br><span class="line">        p3 = float(p3)</span><br><span class="line">        p4 = float(p4)</span><br><span class="line">        p5 = float(p5)</span><br><span class="line">        p6 = float(p6)</span><br><span class="line">        poses.append((p0,p1,p2,p3,p4,p5,p6))</span><br><span class="line">        images.append(directory+fname)</span><br><span class="line"></span><br><span class="line">r = list(range(len(images)))</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line"><span class="keyword">print</span> <span class="string">'r = \n'</span></span><br><span class="line">random.shuffle(r)</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Creating PoseNet Dataset.'</span></span><br><span class="line">env = lmdb.open(<span class="string">'test_lmdb'</span>, map_size=int(<span class="number">1e12</span>))</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">    print(<span class="string">'i = &#123;&#125;, r = &#123;&#125;'</span>).format(i, len(r))</span><br><span class="line">    <span class="keyword">if</span> (count+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Saving image: '</span>, count+<span class="number">1</span></span><br><span class="line">    X = cv2.imread(images[i])</span><br><span class="line">    print(<span class="string">'images[i] = \n X = &#123;&#125;'</span>).format(images[i], X)</span><br><span class="line">    X = cv2.resize(X, (<span class="number">455</span>,<span class="number">256</span>))    <span class="comment"># to reproduce PoseNet results, please resize the images so that the shortest side is 256 pixels</span></span><br><span class="line">    X = np.transpose(X,(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    im_dat = caffe.io.array_to_datum(np.array(X).astype(np.uint8))</span><br><span class="line">    im_dat.float_data.extend(poses[i])</span><br><span class="line">    str_id = <span class="string">'&#123;:0&gt;10d&#125;'</span>.format(count)</span><br><span class="line">    <span class="keyword">with</span> env.begin(write=<span class="keyword">True</span>) <span class="keyword">as</span> txn:</span><br><span class="line">        txn.put(str_id, im_dat.SerializeToString())</span><br><span class="line">    count = count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">env.close()</span><br></pre></td></tr></table></figure><h2 id="计算均值文件"><a href="#计算均值文件" class="headerlink" title="计算均值文件"></a>计算均值文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./caffe-posenet-path/build/tools/compute_image_mean train_lmdb/ train.binaryproto</span><br><span class="line">$ ./caffe-posenet-path/biuld/tools/compute_image_mean test_lmdb/ test.binaryproto</span><br></pre></td></tr></table></figure><h2 id="修改训练配置文件"><a href="#修改训练配置文件" class="headerlink" title="修改训练配置文件"></a>修改训练配置文件</h2><h3 id="修改-train-bayesian-posenet-prototxt"><a href="#修改-train-bayesian-posenet-prototxt" class="headerlink" title="修改 train_bayesian_posenet.prototxt"></a>修改 train_bayesian_posenet.prototxt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">name: <span class="string">"GoogLeNet"</span></span><br><span class="line">layers &#123;</span><br><span class="line">  top: <span class="string">"data"</span></span><br><span class="line">  top: <span class="string">"label"</span></span><br><span class="line">  name: <span class="string">"data"</span></span><br><span class="line">  <span class="built_in">type</span>: DATA</span><br><span class="line">  data_param &#123;</span><br><span class="line">    <span class="built_in">source</span>: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/lmdb/train_lmdb/"</span> <span class="comment"># revised</span></span><br><span class="line">    batch_size: 64</span><br><span class="line">    backend: LMDB</span><br><span class="line">  &#125;</span><br><span class="line">  include &#123;</span><br><span class="line">    phase: TRAIN</span><br><span class="line">  &#125;</span><br><span class="line">  transform_param &#123;</span><br><span class="line">    mirror: <span class="literal">false</span></span><br><span class="line">    crop_size: 224</span><br><span class="line">    mean_file: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/lmdb/train.binaryproto"</span> <span class="comment"># revised</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layers &#123;</span><br><span class="line">  top: <span class="string">"data"</span></span><br><span class="line">  top: <span class="string">"label"</span></span><br><span class="line">  name: <span class="string">"data"</span></span><br><span class="line">  <span class="built_in">type</span>: DATA</span><br><span class="line">  data_param &#123;</span><br><span class="line">    <span class="built_in">source</span>: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/lmdb/test_lmdb"</span> <span class="comment"># revised</span></span><br><span class="line">    batch_size: 32</span><br><span class="line">    backend: LMDB</span><br><span class="line">  &#125;</span><br><span class="line">  include &#123;</span><br><span class="line">    phase: TEST</span><br><span class="line">  &#125;</span><br><span class="line">  transform_param &#123;</span><br><span class="line">    mirror: <span class="literal">false</span></span><br><span class="line">    crop_size: 224</span><br><span class="line">    mean_file: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/lmdb/test.binaryproto"</span> <span class="comment"># revised</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layers &#123;</span><br><span class="line">    name: <span class="string">"slice_label"</span></span><br><span class="line">    <span class="built_in">type</span>: SLICE</span><br><span class="line">    bottom: <span class="string">"label"</span></span><br><span class="line">    top: <span class="string">"label_xyz"</span></span><br><span class="line">    top: <span class="string">"label_wpqr"</span></span><br><span class="line">    slice_param &#123;</span><br><span class="line">        slice_dim: 1</span><br><span class="line">        slice_point: 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="修改-solver-bayesian-posenet-prototxt"><a href="#修改-solver-bayesian-posenet-prototxt" class="headerlink" title="修改 solver_bayesian_posenet.prototxt"></a>修改 solver_bayesian_posenet.prototxt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">net: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/train/ train_bayesian_posenet.prototxt"</span> <span class="comment">#训练或者测试配置文件</span></span><br><span class="line">test_initialization: <span class="literal">false</span></span><br><span class="line">test_iter: 7 <span class="comment">#完成一次测试需要的迭代次数</span></span><br><span class="line">test_interval: 36 <span class="comment">#测试间隔</span></span><br><span class="line">base_lr: 0.00001 <span class="comment">#基础学习率</span></span><br><span class="line">lr_policy: <span class="string">"step"</span> <span class="comment">#学习率变化规律</span></span><br><span class="line">gamma: 0.9 <span class="comment">#学习率变化指数</span></span><br><span class="line">stepsize: 20000 <span class="comment">#学习率变化频率</span></span><br><span class="line">momentum: 0.9 <span class="comment">#动量</span></span><br><span class="line">display: 20 <span class="comment">#屏幕显示间隔</span></span><br><span class="line">max_iter: 120000 <span class="comment">#最大迭代次数</span></span><br><span class="line">solver_type: SGD</span><br><span class="line">weight_decay: 0.005 <span class="comment">#权重衰减</span></span><br><span class="line">snapshot: 5000 <span class="comment">#保存模型间隔</span></span><br><span class="line">snapshot_prefix: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/train/models/posenet"</span> <span class="comment">#权重衰减</span></span><br><span class="line">solver_mode: GPU <span class="comment">#是否使用GPU</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>训练样本</p><p>总共:2280个</p><p>batch_szie:64</p><p>将所有样本处理完一次（称为一代，即epoch)需要：2280/64=36 次迭代才能完成</p><p>所以这里将test_interval设置为36，即处理完一次所有的训练数据后，才去进行测试。所以这个数要大于等于36.<br>如果想训练100代，则最大迭代次数为3600；</p><p>测试样本</p><p>同理，如果有212个测试样本，batch_size为32，那么需要7次才能完整的测试一次。 所以test_iter为7；这个数要大于等于7.</p><p>学习率</p><p>学习率变化规律我们设置为随着迭代次数的增加，慢慢变低。总共迭代120000次，我们将变化6次，所以stepsize设置为120000/6=20000，即每迭代20000次，我们就降低一次学习率。</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./caffe-posenet-path/build/tools/caffe train -solver=examples/mnist/lenet_solver.prototxt 2&gt;&amp;1 | tee <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 从中断点的 snapshot 继续训练</span></span><br><span class="line">$ ./caffe-posenet-path/build/tools/caffe train -solver examples/mnist/lenet_solver.prototxt -snapshot examples/mnist/lenet_iter_5000.solverstate</span><br><span class="line"><span class="comment"># 观察各个阶段的运行时间可以使用</span></span><br><span class="line">$ ./caffe-posenet-path/build/tools/caffe time -model examples/mnist/lenet_train_test.prototxt -iterations 10</span><br><span class="line"><span class="comment"># 使用已有模型提取特征</span></span><br><span class="line">$ ./caffe-posenet-path/build/tools/extract_features.bin models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel examples/feature_extraction/train_val.prototxt fc7 examples/temp_features 10 lmdb</span><br></pre></td></tr></table></figure><p>1） fc7表示提取全连接第七层特征，conv5表示提取第五个卷积层的特征， examples/temp_features表示存放结果的目录（目录不需要提前构建）</p><p>2.）10：输入的包的数量，我们test时的batchsize是50，这里输入10，表示会提取50*10=500张图片的特征</p><p>3.）imageNet网络有很多层（data conv1 conv2 conv3 conv4 conv5 fc6 fc7 fc8 prob），我们可以选取任意一层；fc7是最后一层特征，fc8输出的就是softmax的输出了，所以提取fc7层</p><p>4.）lmdb：输出的数据格式是lmdb，还可以是leveldb</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> colmap-posenet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> colmap-posenet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-深度学习环境配置-Centos</title>
      <link href="/2018/04/08/machine_learning/linux-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-Centos/"/>
      <url>/2018/04/08/machine_learning/linux-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-Centos/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos-7-环境安装"><a href="#Centos-7-环境安装" class="headerlink" title="Centos 7 环境安装"></a>Centos 7 环境安装</h1><p>下载<a href="https://www.centos.org/download/" target="_blank" rel="noopener">Centos 7</a>安装镜像，制作启动优盘。</p><p>Install CentOS 7 安装CentOS 7。</p><ul><li><p>第一步，配置日期、语言和键盘。</p></li><li><p>第二步，选择-系统-安装位置，进入磁盘分区界面。选择-其它存储选项-分区-我要配置分区，点左上角的“完成”，进入下面的界面:</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分区前先规划好:</span></span><br><span class="line"><span class="comment"># swap #交换分区，一般设置为内存的2倍</span></span><br><span class="line"><span class="comment"># / #剩余所有空间</span></span><br><span class="line"><span class="comment"># 挂载点：swap, 期望容量：2048</span></span><br></pre></td></tr></table></figure><p>点左上角的“完成”，接受更改。</p><ul><li><p>第三步，在这步中，你可以通过选择列表中安全配置来设置你的系统“安全策略Security Policy”，点击选择配置按钮来选择你想要的安全配置并点击“应用安全策略Apply security policy”按钮到 On。点击“完成Done”按钮后继续安装流程。</p></li><li><p>第四步，点击“软件选择Software Selection”按钮来配置你的基础机器环境。左边的列表是你可以选择安装桌面环境（Gnome、KDE Plasma 或者创意工作站）或者安装一个服务器环境（Web 服务器、计算节点、虚拟化主机、基础设施服务器、带图形界面的服务器或者文件及打印服务器）或者执行一个最小化的安装。为了随后能自定义你的系统，选择最小化安装并附加兼容库，点击“完成Done”按钮继续。对于完整的 Gnome 或者 KDE 桌面环境。选择：</p><ul><li>GNOM Applications</li><li>Internet Applications</li><li>Compatibility Libries</li><li>Compatibility Libries</li></ul></li><li><p>第五步，设置你的主机名并启用网络服务。点击“网络和主机名Network &amp; Hostname”，在主机名中输入你的 FQDN（完整限定网域名称），如果你在局域网中有一个 DHCP 服务器，将以太网按钮从 OFF 切换到 ON 来激活网络接口。为了静态配置你的网络接口，点击“配置Configure”按钮，添加 IP 设置，并点击“保存Save”按钮来应用更改。完成后，点击“完成Done”按钮来回到主安装菜单。</p></li><li><p>第六步，最后检查下所有到目前为止的配置，如果一切没问题，点击“开始安装Begin Installation”按钮开始安装</p></li></ul><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="Centos-7-更换阿里源"><a href="#Centos-7-更换阿里源" class="headerlink" title="Centos 7 更换阿里源"></a>Centos 7 更换阿里源</h2><p>备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><p>下载新的CentOS-Base.repo 到/etc/yum.repos.d/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS 5</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 6</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 7</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>之后运行yum makecache生成缓存.</p><h2 id="安装常用工具"><a href="#安装常用工具" class="headerlink" title="安装常用工具"></a>安装常用工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nano vim wget curl net-tools lsof gcc gcc-c++ll</span><br></pre></td></tr></table></figure><p>等待安装完成即可。如果提示有错可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>重建缓存即可。</p><h1 id="NVIDIA显卡驱动安装"><a href="#NVIDIA显卡驱动安装" class="headerlink" title="NVIDIA显卡驱动安装"></a>NVIDIA显卡驱动安装</h1><h2 id="检查是否安装了GPU"><a href="#检查是否安装了GPU" class="headerlink" title="检查是否安装了GPU"></a>检查是否安装了GPU</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure><h2 id="安装kernel-devel和kernel-headers"><a href="#安装kernel-devel和kernel-headers" class="headerlink" title="安装kernel-devel和kernel-headers"></a>安装kernel-devel和kernel-headers</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install kernel-devel  </span><br><span class="line">yum install kernel-headers</span><br></pre></td></tr></table></figure><h2 id="修改-etc-modprobe-d-blacklist-conf-文件，以阻止-nouveau-模块的加载"><a href="#修改-etc-modprobe-d-blacklist-conf-文件，以阻止-nouveau-模块的加载" class="headerlink" title="修改/etc/modprobe.d/blacklist.conf 文件，以阻止 nouveau 模块的加载"></a>修改/etc/modprobe.d/blacklist.conf 文件，以阻止 nouveau 模块的加载</h2><p>方法： 添加blacklist nouveau，注释掉blacklist nvidiafb（如果存在）<br>blacklist.conf不存在时，执行下面的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo -e "blacklist nouveau\noptions nouveau modeset=0" &gt; /etc/modprobe.d/blacklist.conf</span></span><br></pre></td></tr></table></figure><h2 id="重新建立initramfs-image文件"><a href="#重新建立initramfs-image文件" class="headerlink" title="重新建立initramfs image文件"></a>重新建立initramfs image文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.bak</span></span><br><span class="line"><span class="comment"># dracut /boot/initramfs-$(uname -r).img $(uname -r)</span></span><br></pre></td></tr></table></figure><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt +F2    <span class="comment">#纯文本命令模式  </span></span><br><span class="line">登陆----获取root权限  </span><br><span class="line">init 3  </span><br><span class="line">切换至安装包文件夹  </span><br><span class="line">./NVIDIA-Linux-x86_64-375.66.run   <span class="comment">#根据提示安装  </span></span><br><span class="line">cuda_8.0.61_375.26_linux.run   <span class="comment">#根据提示安装</span></span><br></pre></td></tr></table></figure><h2 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -i cuda-repo-rhel7-8-0-local-ga2-8.0.61-1.x86_64.rpm</span><br><span class="line">$ sudo yum clean all</span><br><span class="line">$ sudo yum install cuda</span><br></pre></td></tr></table></figure><p>报错了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error: Package: 1:nvidia-kmod-375.26-2.el7.x86_64 (cuda-8-0-local-ga2)</span><br><span class="line">           Requires: dkms</span><br><span class="line"> You could try using --skip-broken to work around the problem</span><br><span class="line"> You could try running: rpm -Va --nofiles --nodigest</span><br></pre></td></tr></table></figure><p>缺少2个包，装第一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/yum.repos.d/linuxtech.testing.repo</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[linuxtech-testing]</span><br><span class="line">name=LinuxTECH Testing</span><br><span class="line">baseurl=http://pkgrepo.linuxtech.net/el6/testing/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://pkgrepo.linuxtech.net/el6/release/RPM-GPG-KEY-LinuxTECH.NET</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum --enablerepo=linuxtech-testing install libvdpau</span><br></pre></td></tr></table></figure><p>第二个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install --enablerepo=epel dkms</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.bashrc </span><br><span class="line"><span class="comment">#写入bashrc文件保存  </span></span><br><span class="line"><span class="comment">#gpu driver  </span></span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda-8.0  </span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-8.0/bin:<span class="variable">$PATH</span>  </span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-8.0/lib64:<span class="variable">$LD_LIBRARY_PATH</span>  </span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"/usr/local/cuda-8.0/lib:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>"</span> </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://my.oschina.net/u/2449787/blog/778145" target="_blank" rel="noopener">https://my.oschina.net/u/2449787/blog/778145</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Linux </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Linux </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git教程</title>
      <link href="/2018/04/06/programmings/linux/git%E6%95%99%E7%A8%8B/"/>
      <url>/2018/04/06/programmings/linux/git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Github常用命令总结"><a href="#Github常用命令总结" class="headerlink" title="Github常用命令总结"></a>Github常用命令总结</h1><h2 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h2><p>本小节将远程仓库变为自己可推送数据的仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/schacon/ticgit.git</span><br><span class="line">$ <span class="built_in">cd</span> grit</span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote add pb git://github.com/paulboone/ticgit.git</span><br><span class="line">$ git fetch pb</span><br><span class="line">$ git push origin master</span><br><span class="line">$ git remote show origin</span><br></pre></td></tr></table></figure><h1 id="Git命令总结"><a href="#Git命令总结" class="headerlink" title="Git命令总结"></a>Git命令总结</h1><ul><li>git init  命令把这个目录变成Git可以管理的仓库</li><li>git add  文件添加到仓库</li><li>git commit  文件提交到仓库</li><li>git log  历史记录</li><li>git log —pretty=oneline  历史记录</li><li>HEAD  当前版本</li><li>HEAD^  上一个版本</li><li>HEAD^^  上上一个版本</li><li>HEAD~100  往上100个版本</li><li>git reset —hard HEAD^  回退到上一个版本</li><li>git reflog  记录你的每一次命令</li><li>git diff HEAD — readme.txt  查看工作区和版本库里面最新版本的区别</li><li>git status  版本的状态</li><li>git checkout — file  丢弃工作区的修改</li><li>git reset HEAD file  暂存区的修改撤销掉（unstage），重新放回工作区</li><li>git reset  既可以回退版本，也可以把暂存区的修改回退到工作区</li><li>git rm  从版本库中删除该文件</li><li>git remote add origin git@github.com:michaelliao/learngit.git  关联远程库</li><li>git push -u origin master  本地库的所有内容推送到远程库上</li><li>git push  本地库的内容推送到远程</li><li>git push origin master  推送最新修改</li><li>git clone git@github.com:michaelliao/gitskills.git  克隆一个本地库</li><li>git checkout -b dev  创建dev分支，然后切换到dev分支</li><li>git branch  查看当前分支</li><li>git checkout master  切换回master分支</li><li>git merge dev  把dev分支的工作成果合并到master分支上</li><li>git merge  合并指定分支到当前分支</li><li>git branch -d dev  删除dev分支</li><li>git branch <name>  创建分支</name></li><li>git checkout <name>  切换分支</name></li><li>git log —grap  分支合并图</li><li>git merge —no-ff -m “merge with no-ff” dev  强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息</li><li>git stash  把当前工作现场“储藏”起来，等以后恢复现场后继续工作</li><li>git stash list  工作现场</li><li>git stash apply  恢复stash内容并不删除</li><li>git stash drop  删除工作现场</li><li>git stash pop  恢复的同时把stash内容也删了</li><li>git branch -D <name>  丢弃一个没有被合并过的分支</name></li><li>git remote  查看远程库的信息</li><li>git remote -v  显示更详细的信息</li><li>git pull  最新的提交从origin/dev抓下来</li><li>git branch —set-upstream dev origin/dev  git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接，建立本地分支和远程分支的关联</li><li>git checkout -b branch-name origin/branch-name  在本地创建和远程分支对应的分支，本地和远程分支的名称最好一致</li><li>git tag <name>  打一个新标签</name></li><li>git tag  查看所有标签</li><li>git log —pretty=oneline —abbrev-commit  找到历史提交的commit id</li><li>git show <tagname>  查看标签信息</tagname></li><li>git tag -a <tagname> -m “blablabla…”  指定标签信息</tagname></li><li>git tag -s <tagname> -m “blablabla…”  用PGP签名标签</tagname></li><li>git push origin <tagname>  推送某个标签到远程</tagname></li><li>git push origin —tags  一次性推送全部尚未推送到远程的本地标签</li><li>git tag -d <tagname>  删除一个本地标签</tagname></li><li>git push origin :refs/tags/<tagname>  删除一个远程标签</tagname></li><li>git config —global alias.st status  告诉Git，以后st就表示status </li></ul><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><ul><li><p>Linux上安装Git</p><p>  $ sudo apt-get install git</p></li><li><p>Mac OS X上安装Git</p><p>  $ brew install git</p></li><li><p>Windows上安装Git</p><p>  在Windows上使用Git，可以从Git官网直接下载安装程序，（网速慢的同学请移步国内镜像），然后按默认选项安装即可。</p><p>  安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p></li><li><p>安装完成后，还需要最后一步设置，在命令行输入：</p><p>  $ git config —global user.name “Your Name”</p><p>  $ git config —global user.email “email@example.com”</p><p>  因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>  注意git config命令的—global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></li></ul><h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>版本库又名仓库，英文名repository。首先，选择一个合适的地方，创建一个空目录：</p><pre><code>$ mkdir learngit$ cd learngit$ pwd/Users/michael/learngit</code></pre><p>第二步，通过git init命令把这个目录变成Git可以管理的仓库：</p><pre><code>$ git initInitialized empty Git repository in /Users/michael/learngit/.git/</code></pre><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。</p><p>把文件添加到版本库,现在我们编写一个readme.txt文件，内容如下：</p><pre><code>Git is a version control system.Git is free software.</code></pre><p>用命令git add告诉Git，把文件添加到仓库：</p><pre><code>$ git add readme.txt</code></pre><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p>用命令git commit告诉Git，把文件提交到仓库：</p><pre><code>$ git commit -m &quot;wrote a readme file&quot;[master (root-commit) cb926e7] wrote a readme file1 file changed, 2 insertions(+)create mode 100644 readme.txt</code></pre><p>简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。</p><p>为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：</p><pre><code>$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m &quot;add 3 files.&quot;</code></pre><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看</p><pre><code>$ git logcommit 3628164fb26d48395383f8f31179f24e0882e1e0Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Tue Aug 20 15:11:49 2013 +0800append GPLcommit ea34578d5496d7dd233c827ed32a8cd576c5ee85Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Tue Aug 20 14:53:12 2013 +0800add distributedcommit cb926e7ea50ad11b8f9e909c05226233bf755030Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Mon Aug 19 17:51:55 2013 +0800wrote a readme file</code></pre><p>git log命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是append GPL，上一次是add distributed，最早的一次是wrote a readme file。<br>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上—pretty=oneline参数：</p><pre><code>$ git log --pretty=oneline3628164fb26d48395383f8f31179f24e0882e1e0 append GPLea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributedcb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file</code></pre><p>需要友情提示的是，你看到的一大串类似3628164…882e1e0的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p><p>好了，现在我们启动时光穿梭机，准备把readme.txt回退到上一个版本，也就是“add distributed”的那个版本，怎么做呢？</p><p>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164…882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p><p>现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：</p><pre><code>$ git reset --hard HEAD^HEAD is now at ea34578 add distributed</code></pre><p>看看readme.txt的内容是不是版本add distributed：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software.</code></pre><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？</p><p>在Git中，总是有后悔药可以吃的。当你用$ git reset —hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：</p><pre><code>$ git reflogea34578 HEAD@{0}: reset: moving to HEAD^3628164 HEAD@{1}: commit: append GPLea34578 HEAD@{2}: commit: add distributedcb926e7 HEAD@{3}: commit (initial): wrote a readme file</code></pre><h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><ul><li><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout — file。</p></li><li><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p></li><li><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p></li></ul><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了</p><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了</p><p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：</p><pre><code>$ git rm test.txtrm &#39;test.txt&#39;$ git commit -m &quot;remove test.txt&quot;[master d17efd8] remove test.txt 1 file changed, 1 deletion(-) delete mode 100644 test.txt</code></pre><p> 现在，文件就从版本库中被删除了。</p><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><pre><code>$ git checkout -- test.txt</code></pre><p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><h1 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h1><p>在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库</p><p>目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：</p><pre><code>$ git remote add origin git@github.com:michaelliao/learngit.git</code></pre><p>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><pre><code>$ git push -u origin masterCounting objects: 19, done.Delta compression using up to 4 threads.Compressing objects: 100% (19/19), done.Writing objects: 100% (19/19), 13.73 KiB, done.</code></pre><p>   Total 23 (delta 6), reused 0 (delta 0)<br>   To git@github.com:michaelliao/learngit.git</p><pre><code> * [new branch]      master -&gt; master Branch master set up to track remote branch master from origin.</code></pre><p>把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>从现在起，只要本地作了提交，就可以通过命令：</p><pre><code>$ git push origin master</code></pre><p>把本地master分支的最新修改推送至GitHub</p><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><ol><li>原理：</li></ol><p>在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点，每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长</p><p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev，你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变</p><p>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并，所以Git合并分支也很快！就改改指针，工作区内容也不变！合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：</p><ol><li>实战</li></ol><p>首先，我们创建dev分支，然后切换到dev分支：</p><pre><code>$ git checkout -b devSwitched to a new branch &#39;dev&#39;</code></pre><p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：</p><pre><code>$ git branch dev$ git checkout devSwitched to branch &#39;dev&#39;</code></pre><p>然后，用git branch命令查看当前分支</p><pre><code>$ git branch* dev  master</code></pre><p>git branch命令会列出所有分支，当前分支前面会标一个*号。</p><p>然后，我们就可以在dev分支上正常提交</p><pre><code>$ git add readme.txt $ git commit -m &quot;branch test&quot;[dev fec145a] branch test 1 file changed, 1 insertion(+)</code></pre><p>现在，dev分支的工作完成，我们就可以切换回master分支</p><pre><code>$ git checkout masterSwitched to branch &#39;master&#39;</code></pre><p>切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变</p><p>现在，我们把dev分支的工作成果合并到master分支上：</p><pre><code>$ git merge devUpdating d17efd8..fec145aFast-forward readme.txt |    1 + 1 file changed, 1 insertion(+)</code></pre><p>git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。</p><p>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。</p><p>合并完成后，就可以放心地删除dev分支了：</p><pre><code>$ git branch -d devDeleted branch dev (was fec145a).</code></pre><p>删除后，查看branch，就只剩下master分支了：</p><pre><code>$ git branch* master</code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。</p><ol><li>小结</li></ol><p>Git鼓励大量使用分支：</p><p>查看分支：git branch</p><p>创建分支：git branch <name></name></p><p>切换分支：git checkout <name></name></p><p>创建+切换分支：git checkout -b <name></name></p><p>合并某分支到当前分支：git merge <name></name></p><p>删除分支：git branch -d <name></name></p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>用git log —graph命令可以看到分支合并图。</p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p>下面我们实战一下—no-ff方式的git merge：</p><p>首先，仍然创建并切换dev分支：</p><pre><code>$ git checkout -b devSwitched to a new branch &#39;dev&#39;</code></pre><p>修改readme.txt文件，并提交一个新的commit：</p><pre><code>$ git add readme.txt $ git commit -m &quot;add merge&quot;[dev 6224937] add merge 1 file changed, 1 insertion(+)</code></pre><p>现在，我们切换回master：</p><p>   $ git checkout master<br>   Switched to branch ‘master’<br>准备合并dev分支，请注意—no-ff参数，表示禁用Fast forward：</p><pre><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; devMerge made by the &#39;recursive&#39; strategy. readme.txt |    1 + 1 file changed, 1 insertion(+)</code></pre><p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</p><p>合并后，我们用git log看看分支历史：</p><pre><code> $ git log --graph --pretty=oneline --abbrev-commit*   7825a50 merge with no-ff|\| * 6224937 add merge|/*   59bc1cb conflict fixed...</code></pre><p>可以看到，不使用Fast forward模式，merge后就像这样：</p><p>分支策略<br>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p><h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交，并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p><pre><code>$ git stashSaved working directory and index state WIP on dev: 6224937 add mergeHEAD is now at 6224937 add merge</code></pre><p>现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p><p>首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：</p><pre><code>$ git checkout masterSwitched to branch &#39;master&#39;Your branch is ahead of &#39;origin/master&#39; by 6 commits.$ git checkout -b issue-101Switched to a new branch &#39;issue-101&#39;</code></pre><p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p><pre><code>$ git add readme.txt $ git commit -m &quot;fix bug 101&quot;[issue-101 cc17032] fix bug 101 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：</p><pre><code>$ git checkout masterSwitched to branch &#39;master&#39;Your branch is ahead of &#39;origin/master&#39; by 2 commits.$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101Merge made by the &#39;recursive&#39; strategy. readme.txt |    2 +- 1 file changed, 1 insertion(+), 1 deletion(-)$ git branch -d issue-101Deleted branch issue-101 (was cc17032).</code></pre><p>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！</p><pre><code>$ git checkout devSwitched to branch &#39;dev&#39;$ git status# On branch devnothing to commit (working directory clean)</code></pre><p>工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：</p><pre><code>$ git stash liststash@{0}: WIP on dev: 6224937 add merge</code></pre><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><p>一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；</p><p>另一种方式是用git stash pop，恢复的同时把stash内容也删了：</p><pre><code>$ git stash pop# On branch dev# Changes to be committed:#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)##       new file:   hello.py## Changes not staged for commit:#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)##       modified:   readme.txt#Dropped refs/stash@{0} (f624f8e5f082f2df2bed8a4e09c12fd2943bdd40)</code></pre><p>再用git stash list查看，就看不到任何stash内容了：</p><pre><code>$ git stash list</code></pre><p>你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：</p><pre><code>$ git stash apply stash@{0}</code></pre><h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><p>软件开发中，总有无穷无尽的新的功能要不断添加进来。</p><p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p><p>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p><p>于是准备开发：</p><pre><code>$ git checkout -b feature-vulcanSwitched to a new branch &#39;feature-vulcan&#39;</code></pre><p>5分钟后，开发完毕：</p><pre><code>$ git add vulcan.py$ git status# On branch feature-vulcan# Changes to be committed:#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)##       new file:   vulcan.py#$ git commit -m &quot;add feature vulcan&quot;[feature-vulcan 756d4af] add feature vulcan 1 file changed, 2 insertions(+) create mode 100644 vulcan.py</code></pre><p>切回dev，准备合并：</p><pre><code>$ git checkout dev</code></pre><p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p><p>但是，就在此时，接到上级命令，因经费不足，新功能必须取消！虽然白干了，但是这个分支还是必须就地销毁：</p><pre><code>$ git branch -d feature-vulcanerror: The branch &#39;feature-vulcan&#39; is not fully merged.If you are sure you want to delete it, run &#39;git branch -D feature-vulcan&#39;.</code></pre><p>销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。</p><p>现在我们强行删除：</p><pre><code>$ git branch -D feature-vulcanDeleted branch feature-vulcan (was 756d4af).</code></pre><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p><p>要查看远程库的信息，用git remote：</p><pre><code>$ git remoteorigin</code></pre><p>或者，用git remote -v显示更详细的信息</p><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><pre><code>$ git push origin master</code></pre><p>如果要推送其他分支，比如dev，就改成：</p><pre><code>$ git push origin dev</code></pre><p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看：</p><pre><code>$ git branch* master* </code></pre><p>现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：</p><pre><code>$ git checkout -b dev origin/dev</code></pre><p>现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程</p><p>你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p><pre><code>$ git add hello.py $ git commit -m &quot;add coding: utf-8&quot;[dev bd6ae48] add coding: utf-8 1 file changed, 1 insertion(+) $ git push origin devTo git@github.com:michaelliao/learngit.git ! [rejected]        dev -&gt; dev (non-fast-forward)error: failed to push some refs to &#39;git@github.com:michaelliao/learngit.git&#39;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Merge the remote changes (e.g. &#39;git pull&#39;)hint: before pushing again.hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</code></pre><p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：</p><pre><code>$ git pullremote: Counting objects: 5, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 3 (delta 0)Unpacking objects: 100% (3/3), done.From github.com:michaelliao/learngit   fc38031..291bea8  dev        -&gt; origin/devThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for details    git pull &lt;remote&gt; &lt;branch&gt;If you wish to set tracking information for this branch you can do so with:    git branch --set-upstream dev origin/&lt;branch&gt;</code></pre><p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</p><pre><code>$ git branch --set-upstream dev origin/devBranch dev set up to track remote branch dev from origin.</code></pre><p>再pull：</p><pre><code>$ git pullAuto-merging hello.pyCONFLICT (content): Merge conflict in hello.pyAutomatic merge failed; fix conflicts and then commit the result.</code></pre><p>这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：</p><pre><code>$ git commit -m &quot;merge &amp; fix hello.py&quot;[dev adca45d] merge &amp; fix hello.py$ git push origin devCounting objects: 10, done.Delta compression using up to 4 threads.Compressing objects: 100% (5/5), done.Writing objects: 100% (6/6), 747 bytes, done.Total 6 (delta 0), reused 0 (delta 0)To git@github.com:michaelliao/learngit.git   291bea8..adca45d  dev -&gt; dev</code></pre><p>因此，多人协作的工作模式通常是这样：</p><p>首先，可以试图用git push origin branch-name推送自己的修改；</p><ol><li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p></li><li><p>如果合并有冲突，则解决冲突，并在本地提交；</p></li><li><p>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</p></li><li><p>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch —set-upstream branch-name origin/branch-name。</p></li></ol><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><p>小结</p><ul><li><p>查看远程库信息，使用git remote -v；</p></li><li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p></li><li><p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</p></li><li><p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</p></li><li><p>建立本地分支和远程分支的关联，使用git branch —set-upstream branch-name origin/branch-name；</p></li><li><p>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li><li><a href="https://git-scm.com" target="_blank" rel="noopener">https://git-scm.com</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ILSVRC2015数据集转VOC2007数据集格式</title>
      <link href="/2018/04/05/machine_learning/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/"/>
      <url>/2018/04/05/machine_learning/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="下载imageNet2015数据集"><a href="#下载imageNet2015数据集" class="headerlink" title="下载imageNet2015数据集"></a>下载imageNet2015数据集</h1><p>image-net官网下载：image-net.org</p><h1 id="VOC2007数据格式介绍"><a href="#VOC2007数据格式介绍" class="headerlink" title="VOC2007数据格式介绍"></a>VOC2007数据格式介绍</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── Annotations</span><br><span class="line">│   ├── 000001.xml</span><br><span class="line">│   └── 000002.xml</span><br><span class="line">|   |__ ...</span><br><span class="line">├── ImageSets</span><br><span class="line">│   └── Main</span><br><span class="line">│       ├── test.txt</span><br><span class="line">│       ├── train.txt</span><br><span class="line">│       └── val.txt</span><br><span class="line">└── JPEGImages</span><br><span class="line">    ├── 000001.jpg</span><br><span class="line">    └── 000002.jpg</span><br><span class="line">    |__ ...</span><br></pre></td></tr></table></figure><p>JPEGImages文件夹中包含了PASCAL VOC所提供的所有的图片信息，包括了训练图片和测试图片。</p><p>Annotations文件夹中存放的是xml格式的标签文件，每一个xml文件都对应于JPEGImages文件夹中的一张图片。</p><p>xml文件的具体格式如下：（对于2007_000392.jpg）:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">folder</span>&gt;</span>VOC2012<span class="tag">&lt;/<span class="name">folder</span>&gt;</span>                           </span><br><span class="line"><span class="tag">&lt;<span class="name">filename</span>&gt;</span>2007_000392.jpg<span class="tag">&lt;/<span class="name">filename</span>&gt;</span>                               //文件名</span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>                                                           //图像来源（不重要）</span><br><span class="line"><span class="tag">&lt;<span class="name">database</span>&gt;</span>The VOC2007 Database<span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">annotation</span>&gt;</span>PASCAL VOC2007<span class="tag">&lt;/<span class="name">annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span>flickr<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">size</span>&gt;</span>                           //图像尺寸（长宽以及通道数）</span><br><span class="line"><span class="tag">&lt;<span class="name">width</span>&gt;</span>500<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">height</span>&gt;</span>332<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depth</span>&gt;</span>3<span class="tag">&lt;/<span class="name">depth</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">segmented</span>&gt;</span>1<span class="tag">&lt;/<span class="name">segmented</span>&gt;</span>                           //是否用于分割（在图像物体识别中01无所谓）</span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span>                                                           //检测到的物体</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>horse<span class="tag">&lt;/<span class="name">name</span>&gt;</span>                                         //物体类别</span><br><span class="line"><span class="tag">&lt;<span class="name">pose</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">pose</span>&gt;</span>                                         //拍摄角度</span><br><span class="line"><span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span>                                   //是否被截断（0表示完整）</span><br><span class="line"><span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span>                                   //目标是否难以识别（0表示容易识别）</span><br><span class="line"><span class="tag">&lt;<span class="name">bndbox</span>&gt;</span>                                                   //bounding-box（包含左下角和右上角xy坐标）</span><br><span class="line"><span class="tag">&lt;<span class="name">xmin</span>&gt;</span>100<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymin</span>&gt;</span>96<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmax</span>&gt;</span>355<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymax</span>&gt;</span>324<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span>                                                           //检测到多个物体</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>person<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pose</span>&gt;</span>Unspecified<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmin</span>&gt;</span>198<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymin</span>&gt;</span>58<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmax</span>&gt;</span>286<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymax</span>&gt;</span>197<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">annotation</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ImageSets存放的是每一种类型的challenge对应的图像数据。<br>在ImageSets下有四个文件夹：</p><p>其中Action下存放的是人的动作（例如running、jumping等等，这也是VOC challenge的一部分）</p><p>Layout下存放的是具有人体部位的数据（人的head、hand、feet等等，这也是VOC challenge的一部分）</p><p>Main下存放的是图像物体识别的数据，总共分为20类。</p><p>Segmentation下存放的是可用于分割的数据。</p><p>在这里主要考察Main文件夹。</p><p>Main文件夹下包含了20个分类的***_train.txt、***_val.txt和***_trainval.txt。</p><p>这些txt中的内容都差不多如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">000012</span><br><span class="line">000017</span><br><span class="line">000023</span><br><span class="line">000026</span><br><span class="line">000032</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>表示图像的name。</p><h1 id="ILSVRC2015数据集介绍"><a href="#ILSVRC2015数据集介绍" class="headerlink" title="ILSVRC2015数据集介绍"></a>ILSVRC2015数据集介绍</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">├── Annotations</span><br><span class="line">│   └── CLS-LOC</span><br><span class="line">│       └── train</span><br><span class="line">│           ├── n01440764</span><br><span class="line">│           │   ├── n01440764_18.xml</span><br><span class="line">│           │   └── n01440764_37.xml</span><br><span class="line">|           |   |__ ...</span><br><span class="line">│           └── n01443537</span><br><span class="line">│               ├── n01443537_16.xml</span><br><span class="line">│               └── n01443537_2.xml</span><br><span class="line">|               |__ ...</span><br><span class="line">├── Data</span><br><span class="line">│   └── CLS-LOC</span><br><span class="line">│       ├── <span class="built_in">test</span></span><br><span class="line">│       ├── train</span><br><span class="line">│       │   ├── n01440764</span><br><span class="line">│       │   │   ├── n01440764_36.JPEG</span><br><span class="line">│       │   │   └── n01440764_37.JPEG</span><br><span class="line">|       |       |__ ...</span><br><span class="line">│       │   └── n01443537</span><br><span class="line">│       │       ├── n01443537_16.JPEG</span><br><span class="line">│       │       └── n01443537_2.JPEG</span><br><span class="line">|       |       |__ ...</span><br><span class="line">│       └── val</span><br><span class="line">├── ImageSets</span><br><span class="line">│   └── CLS-LOC</span><br><span class="line">│       ├── test.txt</span><br><span class="line">│       ├── train_cls.txt</span><br><span class="line">│       ├── train_loc.txt</span><br><span class="line">│       └── val.txt</span><br><span class="line">└── devkit</span><br><span class="line">    ├── COPYING</span><br><span class="line">    ├── data</span><br><span class="line">    │   └── map_clsloc.txt</span><br><span class="line">    |   |__ ...</span><br><span class="line">    ├── evaluation</span><br><span class="line">    │   └── VOCreadxml.m</span><br><span class="line">    |   |__ ...</span><br><span class="line">    └── readme.txt</span><br></pre></td></tr></table></figure><p>ILSVRC2015_devkit\devkit\data\map_clsloc.txt文件描述了类别对应关系。</p><h1 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h1><h2 id="图片JPEG转jpg格式"><a href="#图片JPEG转jpg格式" class="headerlink" title="图片JPEG转jpg格式"></a>图片JPEG转jpg格式</h2><p>VOC2007中的原图片的数据格式为.jpg格式，而ILSVRC2015数据集中的原始图片为.JPEG格式。考虑到有些深度神经网络只支持.jpg格式的图片。因此，首先将.JPEG格式图片转换为.jpg格式的图片。转换代码可参考如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">clc;</span><br><span class="line">clear all;</span><br><span class="line"> </span><br><span class="line">maindir = <span class="string">'/Users/xiaoqiangteng/Downloads/imageset/JPEGImages1/'</span>;</span><br><span class="line">subdir =  dir( maindir ); <span class="comment">% 遍历所有子文件夹</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">length</span>( subdir )</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'.'</span> ) || ...</span><br><span class="line">        <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'..'</span> ) || ...</span><br><span class="line">        ~subdir( <span class="built_in">i</span> ).isdir )   <span class="comment">% 过滤空文件夹</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">     </span><br><span class="line">    subdirpath = fullfile( maindir, subdir( <span class="built_in">i</span> ).name, <span class="string">'*.JPEG'</span> ); <span class="comment">%subdir( i ).name = 'n00007846'; subdirpath = S:\ImageNet\JPEGImages1\n00007846\*.JPEG;</span></span><br><span class="line">    images = dir( subdirpath );</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> : <span class="built_in">length</span>( images )</span><br><span class="line">        imagepath = fullfile(maindir, subdir( <span class="built_in">i</span> ).name, images( <span class="built_in">j</span> ).name);</span><br><span class="line">        imgdata = imread( imagepath);</span><br><span class="line">        subdirpath1 = strcat(maindir, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">        subdirpath = strcat(subdirpath1, <span class="string">'/'</span>);</span><br><span class="line">        jpgPath = [subdirpath, images( <span class="built_in">j</span> ).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-5</span>), <span class="string">'.jpg'</span>];</span><br><span class="line">        imwrite(imgdata, jpgPath, <span class="string">'mode'</span>,<span class="string">'lossless'</span>);</span><br><span class="line">        delete(imagepath, images( <span class="built_in">j</span> ).name);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>待解决的问题：</p><p>函数imwrite(imgdata, jpgPath);默认参数会改变图片大小。</p><p>imwrite(imgdata, jpgPath, ‘mode’,’lossless’);加入特定模式后，图片损坏。</p><h2 id="转换XML文件"><a href="#转换XML文件" class="headerlink" title="转换XML文件"></a>转换XML文件</h2><p>参考这篇<a href="http://blog.csdn.net/samylee/article/details/51201744，他是将每个图片的数据写成了一个txt文件，然后用txt转化为xml文件。我模仿这种方法，那么我得先获得txt文件，所以现在的第一步是要将我的imageNet的annotation，即xml文件转化为参考博客所提到的txt文件。" target="_blank" rel="noopener">http://blog.csdn.net/samylee/article/details/51201744，他是将每个图片的数据写成了一个txt文件，然后用txt转化为xml文件。我模仿这种方法，那么我得先获得txt文件，所以现在的第一步是要将我的imageNet的annotation，即xml文件转化为参考博客所提到的txt文件。</a></p><h3 id="XML文件转txt文件"><a href="#XML文件转txt文件" class="headerlink" title="XML文件转txt文件"></a>XML文件转txt文件</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%createtxt.m</span></span><br><span class="line">clc;</span><br><span class="line">clear all;</span><br><span class="line"> </span><br><span class="line">RootPath = <span class="string">'/Users/xiaoqiangteng/Downloads/imageset/'</span>;</span><br><span class="line">[dir_name, count, label] = importDataFiles(RootPath);</span><br><span class="line"></span><br><span class="line">path_image = <span class="string">'/Users/xiaoqiangteng/Downloads/imageset/JPEGImages2/'</span>;<span class="comment">%原始图片文件夹</span></span><br><span class="line">path_xml = <span class="string">'/Users/xiaoqiangteng/Downloads/imageset/Annotations1/'</span>;</span><br><span class="line">path_label = <span class="string">'/Users/xiaoqiangteng/Downloads/imageset/labels/'</span>;<span class="comment">%生成的txt文件夹</span></span><br><span class="line">subdir = dir(path_xml);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">3</span> : <span class="built_in">length</span>( subdir )</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'.'</span> ) || ...</span><br><span class="line">        <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'..'</span> ) || ...</span><br><span class="line">        ~subdir( <span class="built_in">i</span> ).isdir )   <span class="comment">% 过滤空文件夹</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">    subdirpath = fullfile(path_xml, subdir( <span class="built_in">i</span> ).name, <span class="string">'*.xml'</span>);</span><br><span class="line">    xml_files1 = dir( subdirpath );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">%XML文件排序</span></span><br><span class="line">    xml_files2 = [];</span><br><span class="line">    int_xml_files = [];</span><br><span class="line">    int_xml = [];</span><br><span class="line">    xml_files = [];</span><br><span class="line">    length_xml = <span class="built_in">length</span>(xml_files1);</span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">length</span>(xml_files1)</span><br><span class="line">        xml_files2(k).name = xml_files1(k).name(<span class="number">11</span>:<span class="keyword">end</span><span class="number">-4</span>);</span><br><span class="line">        int_xml_files(k) = str2num(xml_files2(k).name);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    int_xml = <span class="built_in">sort</span>(int_xml_files);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ii = <span class="number">1</span>:<span class="built_in">length</span>(xml_files1)</span><br><span class="line">        xml_files3 = strcat(subdir( <span class="built_in">i</span> ).name, <span class="string">'_'</span>);</span><br><span class="line">        xml_files4 = strcat(xml_files3, num2str(int_xml(ii)));</span><br><span class="line">        xml_files(ii).name = strcat(xml_files4, <span class="string">'.xml'</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    mkdir(path_label, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">    pathtxt1 = strcat(path_label, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">    pathtxt2 = strcat(pathtxt1, <span class="string">'/'</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 遍历XML文件</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> : <span class="built_in">length</span>(xml_files)</span><br><span class="line">        <span class="built_in">disp</span>(<span class="built_in">j</span>);</span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">            pathtxt = [pathtxt2 xml_files( <span class="built_in">j</span> ).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>) <span class="string">'.txt'</span>];</span><br><span class="line">            subdir_xml = fullfile(path_xml, subdir( <span class="built_in">i</span> ).name, xml_files( <span class="built_in">j</span> ).name);</span><br><span class="line">            str = fileread(subdir_xml);</span><br><span class="line">            v = xml_parse( str );</span><br><span class="line">            xmin = v.object.bndbox.xmin;</span><br><span class="line">            ymin = v.object.bndbox.ymin;</span><br><span class="line">            xmax = v.object.bndbox.xmax;</span><br><span class="line">            ymax = v.object.bndbox.ymax;</span><br><span class="line">            filename = v.filename;</span><br><span class="line">            fid = fopen(pathtxt,<span class="string">'wt'</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%s%s'</span>,filename,<span class="string">'.JPEG'</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,<span class="string">' '</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%s'</span>, label&#123;<span class="built_in">i</span><span class="number">-2</span>&#125;);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,<span class="string">' '</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,xmin);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,<span class="string">' '</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,ymin);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,<span class="string">' '</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,xmax);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,<span class="string">' '</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,ymax);</span><br><span class="line">            fclose(fid);</span><br><span class="line">         <span class="keyword">catch</span></span><br><span class="line"><span class="comment">%             delete_image1 = strcat(path_image, subdir( i ).name);</span></span><br><span class="line"><span class="comment">%             delete_image2 = strcat(delete_image1, '/');</span></span><br><span class="line"><span class="comment">%             delete_image = [delete_image2, xml_files( j ).name(1:end-4), '.JPEG'];</span></span><br><span class="line"><span class="comment">%             delete(delete_image);</span></span><br><span class="line">             delete_xml1 = strcat(path_xml, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">             delete_xml2 = strcat(delete_xml1, <span class="string">'/'</span>);</span><br><span class="line">             delete_xml = [delete_xml2, xml_files( <span class="built_in">j</span> ).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>), <span class="string">'.xml'</span>];</span><br><span class="line">             delete(delete_xml);</span><br><span class="line">             <span class="built_in">disp</span>(<span class="string">'Wrong'</span>);</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>importDataFiles(RootPath)函数：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[dir_name, count, label]</span>=<span class="title">importDataFiles</span><span class="params">(RootPath)</span></span></span><br><span class="line">DirOutput = dir(fullfile(RootPath));</span><br><span class="line">SimpleName = &#123;DirOutput(<span class="number">3</span>:<span class="keyword">end</span>).name&#125;';</span><br><span class="line">LenSimFile = <span class="built_in">length</span>(SimpleName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:LenSimFile</span><br><span class="line">    fileName = fullfile(RootPath,SimpleName&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">    <span class="keyword">switch</span> SimpleName&#123;<span class="built_in">i</span>&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'map_clsloc.txt'</span></span><br><span class="line">            [dir_name, count, label] = textread(fileName,<span class="string">'%s%d%s'</span>);</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>改代码通过遍历xml文件来生成txt文件。原因在于原始图片文件夹内的图片多余对应的xml文件。</p><p>可能存在的问题：</p><p>（1）以上matlab代码通过使用XML 函数来解析XML文件，即xml_parse()函数。需要先下载该函数的工具包，下载地址：<a href="https://cn.mathworks.com/matlabcentral/fileexchange/4278-xml-toolbox?focused=5055046&amp;tab=function" target="_blank" rel="noopener">https://cn.mathworks.com/matlabcentral/fileexchange/4278-xml-toolbox?focused=5055046&amp;tab=function</a></p><p>但是该工具包在高版本的matlab已不支持，请尝试低版本的Matlab。楼主使用matlab 2014a版本，可运行。</p><p>（2）待解决的问题</p><p>以上代码仅仅支持XML中存在一个object对象。若存在多个object对象，即会报错，运行catch语句块，将不能够读取的xml文件从原文件夹中删除，以此来保证xml文件的数量同txt文件的数量相同。但是，该问题应该很好能够解决。</p><h3 id="TXT转XML"><a href="#TXT转XML" class="headerlink" title="TXT转XML"></a>TXT转XML</h3><p>接下来就可以进行将txt转化为pascal voc格式的xml文件了，在当前目录下创建一个Annotations的文件夹，代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%writeanno.m</span></span><br><span class="line">clc;</span><br><span class="line">clear all;</span><br><span class="line"> </span><br><span class="line">path_image = <span class="string">'/home/teng/programmings/datasets/imagenet/imagenet/JPEGImages/'</span>;</span><br><span class="line">path_label = <span class="string">'/home/teng/programmings/datasets/imagenet/imagenet/labels/'</span>;</span><br><span class="line">path_xml = <span class="string">'/home/teng/programmings/datasets/imagenet/imagenet/Annotations/'</span>;</span><br><span class="line">subdir = dir(path_label);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">3</span> : <span class="built_in">length</span>( subdir )</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'.'</span> ) || ...</span><br><span class="line">        <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'..'</span> ) || ...</span><br><span class="line">        ~subdir( <span class="built_in">i</span> ).isdir )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">    subdirpath = fullfile(path_label, subdir( <span class="built_in">i</span> ).name, <span class="string">'*.txt'</span>);</span><br><span class="line">    txt_files = dir( subdirpath );</span><br><span class="line">    </span><br><span class="line">    mkdir(path_xml, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">length</span>(txt_files)</span><br><span class="line">        <span class="built_in">disp</span>(<span class="built_in">i</span>, <span class="built_in">j</span>)</span><br><span class="line">        path_label_dir1 = strcat(path_label, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">        path_label_dir = strcat(path_label_dir1, <span class="string">'/'</span>);</span><br><span class="line">        msg = textread(strcat(path_label_dir, txt_files(<span class="built_in">j</span>).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>),<span class="string">'.txt'</span>),<span class="string">'%s'</span>);</span><br><span class="line">        clear rec;</span><br><span class="line">        path_xml_subdir1 = strcat(path_xml, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">        path_xml_subdir = strcat(path_xml_subdir1, <span class="string">'/'</span>);</span><br><span class="line">        path = [path_xml_subdir txt_files(<span class="built_in">j</span>).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>) <span class="string">'.xml'</span>];</span><br><span class="line">        fid=fopen(path,<span class="string">'w'</span>);</span><br><span class="line">        rec.annotation.folder = <span class="string">'VOC2007'</span>;<span class="comment">%数据集名</span></span><br><span class="line">        rec.annotation.filename = strcat(txt_files(<span class="built_in">j</span>).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>), <span class="string">'.JPEG'</span>);</span><br><span class="line">        rec.annotation.source.database = <span class="string">'The VOC2007 Database'</span>;    </span><br><span class="line">        rec.annotation.source.annotation = <span class="string">'PASCAL VOC2007'</span>;    </span><br><span class="line">        rec.annotation.source.image = <span class="string">'flickr'</span>;</span><br><span class="line">        rec.annotation.source.flickrid = <span class="string">'0'</span>;</span><br><span class="line">        rec.annotation.owner.flickrid = <span class="string">'I do not know'</span>;    </span><br><span class="line">        rec.annotation.owner.name = <span class="string">'I do not know'</span>;</span><br><span class="line"></span><br><span class="line">        path_image_subdir1 = strcat(path_image, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">        path_image_subdir = strcat(path_image_subdir1, <span class="string">'/'</span>);</span><br><span class="line">        img = imread([path_image_subdir txt_files(<span class="built_in">j</span>).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>) <span class="string">'.JPEG'</span>]);</span><br><span class="line">        rec.annotation.<span class="built_in">size</span>.width = int2str(<span class="built_in">size</span>(img,<span class="number">2</span>));</span><br><span class="line">        rec.annotation.<span class="built_in">size</span>.height = int2str(<span class="built_in">size</span>(img,<span class="number">1</span>));</span><br><span class="line">        rec.annotation.<span class="built_in">size</span>.depth = int2str(<span class="built_in">size</span>(img,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        rec.annotation.segmented = <span class="string">'0'</span>;  </span><br><span class="line">        rec.annotation.object.name = msg&#123;<span class="number">2</span>&#125;;   </span><br><span class="line">        rec.annotation.object.pose = <span class="string">'Left'</span>;    </span><br><span class="line">        rec.annotation.object.truncated = <span class="string">'1'</span>;    </span><br><span class="line">        rec.annotation.object.difficult = <span class="string">'0'</span>;    </span><br><span class="line">        rec.annotation.object.bndbox.xmin = msg&#123;<span class="number">3</span>&#125;;<span class="comment">%坐标x1</span></span><br><span class="line">        rec.annotation.object.bndbox.ymin = msg&#123;<span class="number">4</span>&#125;;<span class="comment">%坐标y1</span></span><br><span class="line">        rec.annotation.object.bndbox.xmax = msg&#123;<span class="number">5</span>&#125;;<span class="comment">%坐标x2</span></span><br><span class="line">        rec.annotation.object.bndbox.ymax = msg&#123;<span class="number">6</span>&#125;;<span class="comment">%坐标y2</span></span><br><span class="line">        writexml(fid,rec,<span class="number">0</span>);</span><br><span class="line">        fclose(fid);</span><br><span class="line">    <span class="keyword">end</span>   </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>writexml函数：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%writexml.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xml</span> = <span class="title">writexml</span><span class="params">(fid,rec,depth)</span></span></span><br><span class="line"></span><br><span class="line">fn=fieldnames(rec);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(fn)</span><br><span class="line">    f=rec.(fn&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span> ~<span class="built_in">isempty</span>(f)</span><br><span class="line">        <span class="keyword">if</span> isstruct(f)</span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">length</span>(f)            </span><br><span class="line">                fprintf(fid,<span class="string">'%s'</span>,<span class="built_in">repmat</span>(char(<span class="number">9</span>),<span class="number">1</span>,depth));</span><br><span class="line">                a=<span class="built_in">repmat</span>(char(<span class="number">9</span>),<span class="number">1</span>,depth);</span><br><span class="line">                fprintf(fid,<span class="string">'&lt;%s&gt;\n'</span>,fn&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">                writexml(fid,rec.(fn&#123;<span class="built_in">i</span>&#125;)(<span class="built_in">j</span>),depth+<span class="number">1</span>);</span><br><span class="line">                fprintf(fid,<span class="string">'%s'</span>,<span class="built_in">repmat</span>(char(<span class="number">9</span>),<span class="number">1</span>,depth));</span><br><span class="line">                fprintf(fid,<span class="string">'&lt;/%s&gt;\n'</span>,fn&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> ~iscell(f)</span><br><span class="line">                f=&#123;f&#125;;</span><br><span class="line">            <span class="keyword">end</span>       </span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">length</span>(f)</span><br><span class="line">                fprintf(fid,<span class="string">'%s'</span>,<span class="built_in">repmat</span>(char(<span class="number">9</span>),<span class="number">1</span>,depth));</span><br><span class="line">                fprintf(fid,<span class="string">'&lt;%s&gt;'</span>,fn&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">                <span class="keyword">if</span> ischar(f&#123;<span class="built_in">j</span>&#125;)</span><br><span class="line">                    fprintf(fid,<span class="string">'%s'</span>,f&#123;<span class="built_in">j</span>&#125;);</span><br><span class="line">                <span class="keyword">elseif</span> isnumeric(f&#123;<span class="built_in">j</span>&#125;)&amp;&amp;<span class="built_in">numel</span>(f&#123;<span class="built_in">j</span>&#125;)==<span class="number">1</span></span><br><span class="line">                    fprintf(fid,<span class="string">'%s'</span>,num2str(f&#123;<span class="built_in">j</span>&#125;));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    error(<span class="string">'unsupported type'</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                fprintf(fid,<span class="string">'&lt;/%s&gt;\n'</span>,fn&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="移动目录内所有文件夹内的文件至上层目录"><a href="#移动目录内所有文件夹内的文件至上层目录" class="headerlink" title="移动目录内所有文件夹内的文件至上层目录"></a>移动目录内所有文件夹内的文件至上层目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">read_dir</span></span>()&#123;</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls <span class="variable">$1</span>`       <span class="comment">#注意此处这是两个反引号，表示运行系统命令</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span> ]  <span class="comment">#注意此处之间一定要加上空格，否则会报错</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span><span class="variable">$file</span></span><br><span class="line">read_dir <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mv <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span> /home/teng/programmings/datasets/imagenet/imagenet/Annotations</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">delete_dir</span></span>()&#123;</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls <span class="variable">$1</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span>$<span class="string">"/"</span>file</span><br><span class="line">rm -rf <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#读取第一个参数</span></span><br><span class="line">read_dir <span class="variable">$1</span></span><br><span class="line">delete_dir <span class="variable">$1</span></span><br></pre></td></tr></table></figure><p>这一步的目的在于将Annotations文件夹内的所有xml文件置于一个目录下。</p><h2 id="imageSets文件夹"><a href="#imageSets文件夹" class="headerlink" title="imageSets文件夹"></a>imageSets文件夹</h2><p>代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%createimagesets.m</span></span><br><span class="line">clc;</span><br><span class="line">clear all;</span><br><span class="line">  </span><br><span class="line">file = dir(<span class="string">'/home/teng/programmings/datasets/imagenet/imagenet/Annotations/'</span>);</span><br><span class="line">len = <span class="built_in">length</span>(file)<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_trainval=<span class="built_in">sort</span>(randperm(len, <span class="built_in">floor</span>(<span class="number">9</span>*len/<span class="number">10</span>)));<span class="comment">%trainval集占所有数据的9/10，可以根据需要设置</span></span><br><span class="line">num_train=<span class="built_in">sort</span>(num_trainval(randperm(<span class="built_in">length</span>(num_trainval), <span class="built_in">floor</span>(<span class="number">5</span>*<span class="built_in">length</span>(num_trainval)/<span class="number">6</span>))));<span class="comment">%train集占trainval集的5/6，可以根据需要设置</span></span><br><span class="line">num_val=setdiff(num_trainval,num_train);<span class="comment">%trainval集剩下的作为val集</span></span><br><span class="line">num_test=setdiff(<span class="number">1</span>:len,num_trainval);<span class="comment">%所有数据中剩下的作为test集</span></span><br><span class="line">path = <span class="string">'/home/teng/programmings/datasets/imagenet/imagenet/ImageSets/Main/'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fid=fopen(strcat(path, <span class="string">'trainval.txt'</span>),<span class="string">'a+'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(num_trainval)</span><br><span class="line">    s = sprintf(<span class="string">'%s'</span>,file(num_trainval(<span class="built_in">i</span>)+<span class="number">2</span>).name);</span><br><span class="line">    fprintf(fid,[s(<span class="number">1</span>:<span class="built_in">length</span>(s)<span class="number">-4</span>) <span class="string">'\r\n'</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fid=fopen(strcat(path, <span class="string">'train.txt'</span>),<span class="string">'a+'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(num_train)</span><br><span class="line">    s = sprintf(<span class="string">'%s'</span>,file(num_train(<span class="built_in">i</span>)+<span class="number">2</span>).name);</span><br><span class="line">    fprintf(fid,[s(<span class="number">1</span>:<span class="built_in">length</span>(s)<span class="number">-4</span>) <span class="string">'\r\n'</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fid=fopen(strcat(path, <span class="string">'val.txt'</span>),<span class="string">'a+'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(num_val)</span><br><span class="line">    s = sprintf(<span class="string">'%s'</span>,file(num_val(<span class="built_in">i</span>)+<span class="number">2</span>).name);</span><br><span class="line">    fprintf(fid,[s(<span class="number">1</span>:<span class="built_in">length</span>(s)<span class="number">-4</span>) <span class="string">'\r\n'</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fid=fopen(strcat(path, <span class="string">'test.txt'</span>),<span class="string">'a+'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(num_test)</span><br><span class="line">    s = sprintf(<span class="string">'%s'</span>,file(num_test(<span class="built_in">i</span>)+<span class="number">2</span>).name);</span><br><span class="line">    fprintf(fid,[s(<span class="number">1</span>:<span class="built_in">length</span>(s)<span class="number">-4</span>) <span class="string">'\r\n'</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br></pre></td></tr></table></figure><p>这样所需的文件夹我们都已备齐，将imageSets，Annotations和JPEGiImage文件夹分别放入voc数据集的对应位置，在这之前先将其原来的文件夹删除。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ol><li><a href="https://blog.csdn.net/xbcReal/article/details/51259558" target="_blank" rel="noopener">https://blog.csdn.net/xbcReal/article/details/51259558</a></li><li><a href="https://blog.csdn.net/samylee/article/details/51201744" target="_blank" rel="noopener">https://blog.csdn.net/samylee/article/details/51201744</a></li><li><a href="https://blog.csdn.net/sinat_30071459/article/details/50723212" target="_blank" rel="noopener">https://blog.csdn.net/sinat_30071459/article/details/50723212</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 深度学习 </category>
          
          <category> 数据集制作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake教程</title>
      <link href="/2018/04/03/programmings/c_plus_plus/CMake%E6%95%99%E7%A8%8B/"/>
      <url>/2018/04/03/programmings/c_plus_plus/CMake%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Cmake入门"><a href="#Cmake入门" class="headerlink" title="Cmake入门"></a>Cmake入门</h1><h2 id="CMake编译原理"><a href="#CMake编译原理" class="headerlink" title="CMake编译原理"></a>CMake编译原理</h2><p>CMake是一种跨平台编译工具，比make更为高级，使用起来要方便得多。CMake主要是编写CMakeLists.txt文件，然后用cmake命令将CMakeLists.txt文件转化为make所需要的makefile文件，最后用make命令编译源码生成可执行程序或共享库（so(shared object)）。因此CMake的编译基本就两个步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>cmake  指向CMakeLists.txt所在的目录，例如cmake .. 表示CMakeLists.txt在当前目录的上一级目录。cmake后会生成很多编译的中间文件以及makefile文件，所以一般建议新建一个新的目录，专门用来编译，例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>make根据生成makefile文件，编译程序。</p><h2 id="使用Cmake编译程序"><a href="#使用Cmake编译程序" class="headerlink" title="使用Cmake编译程序"></a>使用Cmake编译程序</h2><h3 id="源码文件介绍"><a href="#源码文件介绍" class="headerlink" title="源码文件介绍"></a>源码文件介绍</h3><p>本文以一个例子入手介绍，即开平方。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── CMakeLists.txt</span><br><span class="line">└── src</span><br><span class="line">    ├── main.cpp</span><br><span class="line">    ├── test_math.cpp</span><br><span class="line">    └── test_math.h</span><br></pre></td></tr></table></figure><p>其中，src目录存放所有的源代码，即test_math.cpp、test_math.h和main.cpp。每个源代码文件内容如下：</p><p>test_math.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEST4_TEST_MATH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST4_TEST_MATH_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal_sqrt</span><span class="params">(<span class="keyword">double</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//TEST4_TEST_MATH_H</span></span></span><br></pre></td></tr></table></figure><p>test_math.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test_math.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal_sqrt</span><span class="params">(<span class="keyword">double</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test_math.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">49.0</span>;</span><br><span class="line">    <span class="keyword">double</span> b = <span class="number">0.0</span>;</span><br><span class="line">    b = cal_sqrt(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sqrt result:%f\n"</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写CMakeLists-txt"><a href="#编写CMakeLists-txt" class="headerlink" title="编写CMakeLists.txt"></a>编写CMakeLists.txt</h3><p>CMakeLists.txt文件，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>cmake verson，指定cmake版本</span><br><span class="line">cmake_minimum_required(VERSION <span class="number">3.8</span>)</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>project name，指定项目的名称，一般和项目的文件夹名称对应</span><br><span class="line">project(test4)</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>head file path，头文件目录</span><br><span class="line">#INCLUDE_DIRECTORIES(include)</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>source directory，源文件目录</span><br><span class="line">AUX_SOURCE_DIRECTORY(src DIR_SRCS)</span><br><span class="line"></span><br><span class="line">#<span class="number">5.</span><span class="built_in">set</span> environment variable，设置环境变量，编译用到的源文件全部都要放到这里，否则编译能够通过，但是执行的时候会出现各种问题，比如<span class="string">"symbol lookup error xxxxx , undefined symbol"</span></span><br><span class="line">SET(TEST_MATH $&#123;DIR_SRCS&#125;)</span><br><span class="line"></span><br><span class="line">#<span class="number">7.</span>add link library，添加可执行文件所需要的库，比如我们用到了libm.so（命名规则：lib+name+.so），就添加该库的名称</span><br><span class="line">#TARGET_LINK_LIBRARIES($&#123;PROJECT_NAME&#125; m)</span><br><span class="line"></span><br><span class="line">#<span class="number">6.</span>add executable file，添加要编译的可执行文件</span><br><span class="line">ADD_EXECUTABLE($&#123;PROJECT_NAME&#125; $&#123;TEST_MATH&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br></pre></td></tr></table></figure><h3 id="编译和运行程序"><a href="#编译和运行程序" class="headerlink" title="编译和运行程序"></a>编译和运行程序</h3><p>由于编译中出现许多中间的文件，因此最好新建一个独立的目录build，在该目录下进行编译，编译步骤如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>build下生成的目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">├── CMakeLists.txt</span><br><span class="line">├── cmake-build-debug</span><br><span class="line">│   ├── CMakeCache.txt</span><br><span class="line">│   ├── CMakeFiles</span><br><span class="line">│   │   ├── 3.8.2</span><br><span class="line">│   │   │   ├── CMakeCCompiler.cmake</span><br><span class="line">│   │   │   ├── CMakeCXXCompiler.cmake</span><br><span class="line">│   │   │   ├── CMakeDetermineCompilerABI_C.bin</span><br><span class="line">│   │   │   ├── CMakeDetermineCompilerABI_CXX.bin</span><br><span class="line">│   │   │   ├── CMakeSystem.cmake</span><br><span class="line">│   │   │   ├── CompilerIdC</span><br><span class="line">│   │   │   │   ├── CMakeCCompilerId.c</span><br><span class="line">│   │   │   │   ├── a.out</span><br><span class="line">│   │   │   │   └── tmp</span><br><span class="line">│   │   │   └── CompilerIdCXX</span><br><span class="line">│   │   │       ├── CMakeCXXCompilerId.cpp</span><br><span class="line">│   │   │       ├── a.out</span><br><span class="line">│   │   │       └── tmp</span><br><span class="line">│   │   ├── CMakeDirectoryInformation.cmake</span><br><span class="line">│   │   ├── CMakeOutput.log</span><br><span class="line">│   │   ├── CMakeTmp</span><br><span class="line">│   │   ├── Makefile.cmake</span><br><span class="line">│   │   ├── Makefile2</span><br><span class="line">│   │   ├── TargetDirectories.txt</span><br><span class="line">│   │   ├── clion-environment.txt</span><br><span class="line">│   │   ├── clion-log.txt</span><br><span class="line">│   │   ├── cmake.check_cache</span><br><span class="line">│   │   ├── feature_tests.bin</span><br><span class="line">│   │   ├── feature_tests.c</span><br><span class="line">│   │   ├── feature_tests.cxx</span><br><span class="line">│   │   ├── progress.marks</span><br><span class="line">│   │   └── test4.dir</span><br><span class="line">│   │       ├── CXX.includecache</span><br><span class="line">│   │       ├── DependInfo.cmake</span><br><span class="line">│   │       ├── build.make</span><br><span class="line">│   │       ├── cmake_clean.cmake</span><br><span class="line">│   │       ├── depend.internal</span><br><span class="line">│   │       ├── depend.make</span><br><span class="line">│   │       ├── flags.make</span><br><span class="line">│   │       ├── link.txt</span><br><span class="line">│   │       ├── progress.make</span><br><span class="line">│   │       └── src</span><br><span class="line">│   │           ├── main.cpp.o</span><br><span class="line">│   │           └── test_math.cpp.o</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── cmake_install.cmake</span><br><span class="line">│   ├── test4</span><br><span class="line">│   └── test4.cbp</span><br><span class="line">└── src</span><br><span class="line">    ├── main.cpp</span><br><span class="line">    ├── test_math.cpp</span><br><span class="line">    └── test_math.h</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.cnblogs.com/cv-pr/p/6206921.html" target="_blank" rel="noopener">http://www.cnblogs.com/cv-pr/p/6206921.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
          <category> cmake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-深度学习环境配置-Ubuntu</title>
      <link href="/2018/03/31/machine_learning/linux-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-Ubuntu/"/>
      <url>/2018/03/31/machine_learning/linux-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-Ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu16-04-cuda8-0-GPU驱动配置"><a href="#Ubuntu16-04-cuda8-0-GPU驱动配置" class="headerlink" title="Ubuntu16.04 cuda8.0 GPU驱动配置"></a>Ubuntu16.04 cuda8.0 GPU驱动配置</h1><ul><li>ubuntu 16.04 64bit </li><li>显卡：NVIDIA Tesla k40m + 集成显卡</li></ul><h2 id="更换阿里源"><a href="#更换阿里源" class="headerlink" title="更换阿里源"></a>更换阿里源</h2><p>更换之前要先备份之前的源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/source.list /etc/apt/source.list.bak</span><br></pre></td></tr></table></figure><p>编辑源列表文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim/etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>原来的列表删除，替换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span></span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure><p>更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="Ubuntu16-04挂载新硬盘并格式化硬盘"><a href="#Ubuntu16-04挂载新硬盘并格式化硬盘" class="headerlink" title="Ubuntu16.04挂载新硬盘并格式化硬盘"></a>Ubuntu16.04挂载新硬盘并格式化硬盘</h2><p>查看硬盘:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure><p>新建分区:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure><p>之后进入command状态，大概是这么操作的：</p><ul><li>输入 m 查看帮助</li><li>输入 p 查看 /dev/sdb 分区的状态</li><li>输入 n 创建sdb这块硬盘的分区</li><li>选 p primary =&gt;输入　p</li><li>Partition number =&gt;分一个区所以输入　1</li><li>其他的默认回车即可</li><li>最后输入 w 保存并退出 Command 状态。</li></ul><p>操作示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line"><span class="comment"># n创建分区</span></span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): p</span><br><span class="line"><span class="comment"># p(primary主分区） e(extended拓展分区)</span></span><br><span class="line">Partition number (1-4, default 1): 1</span><br><span class="line"><span class="comment"># 分区号</span></span><br><span class="line">First sector (2048-83886079, default 2048): </span><br><span class="line"><span class="comment"># 默认</span></span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-83886079, default 83886079): </span><br><span class="line"><span class="comment"># 大小，可自定义，保持默认</span></span><br><span class="line">Created a new partition 1 of <span class="built_in">type</span> <span class="string">'Linux'</span> and of size 40 GiB.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"><span class="comment"># 查看分区情况</span></span><br><span class="line">Disk /dev/sdb: 40 GiB, 42949672960 bytes, 83886080 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0xbb6c1792</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors Size Id Type</span><br><span class="line">/dev/sdb1        2048 83886079 83884032  40G 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><p>在通过查看命令即可查看，新增的硬盘.</p><p>格式化:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkfs.ext4 /dev/sdb1 <span class="comment"># ext4为分区格式</span></span><br></pre></td></tr></table></figure><p>挂载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/data</span><br><span class="line">sudo mount /dev/sdb1 /home/data</span><br></pre></td></tr></table></figure><p>开机自动挂载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo blkid</span><br></pre></td></tr></table></figure><p>添加UUID到/etc/fstab 添加UUID=63295b70-daec-4253-b659-821f51200be9 /home/data ext4 defaults,errors=remount-ro 0 1到/etc/fstab 其中UUID后面跟sdb1的UUID 重启。</p><h2 id="安装必要的软件"><a href="#安装必要的软件" class="headerlink" title="安装必要的软件"></a>安装必要的软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim git openssh-server</span><br></pre></td></tr></table></figure><h2 id="检查是否正确识别显卡"><a href="#检查是否正确识别显卡" class="headerlink" title="检查是否正确识别显卡"></a>检查是否正确识别显卡</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure><h2 id="查看是否已有安装的NVIDIA驱动"><a href="#查看是否已有安装的NVIDIA驱动" class="headerlink" title="查看是否已有安装的NVIDIA驱动"></a>查看是否已有安装的NVIDIA驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep nvidia</span><br></pre></td></tr></table></figure><h2 id="查看集显驱动"><a href="#查看集显驱动" class="headerlink" title="查看集显驱动"></a>查看集显驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure><h2 id="禁用nouveau驱动和相关的驱动包"><a href="#禁用nouveau驱动和相关的驱动包" class="headerlink" title="禁用nouveau驱动和相关的驱动包"></a>禁用nouveau驱动和相关的驱动包</h2><p>用编辑器打开blacklist.conf配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>在文件的最后一行加入下面的命令，屏蔽有影响的驱动包（这里有的博客添加了blacklist amd76x_edac，但是经测试后不加也是可以安装成功的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">blacklist rivafb</span><br><span class="line">blacklist vga16fb</span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist nvidiafb</span><br><span class="line">blacklist rivatv</span><br><span class="line">options nouveau modeset=0</span><br><span class="line"><span class="built_in">alias</span> nouveau off</span><br><span class="line"><span class="built_in">alias</span> lbm-nouveau off</span><br></pre></td></tr></table></figure><p>禁用 nouveau 内核模块:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$echo</span> options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf</span><br><span class="line"><span class="variable">$sudo</span> update-initramfs -u</span><br></pre></td></tr></table></figure><h2 id="卸载所有安装的nvidia驱动"><a href="#卸载所有安装的nvidia驱动" class="headerlink" title="卸载所有安装的nvidia驱动"></a>卸载所有安装的nvidia驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove –purge nvidia*</span><br></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h2 id="GPU驱动配置"><a href="#GPU驱动配置" class="headerlink" title="GPU驱动配置"></a>GPU驱动配置</h2><p>根据GPU型号从相应网站下载驱动，例如使用NVIDIA Tesla M60，从<a href="http://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">NVIDIA网站</a>选择对应的型号和操作系统，CUDA Toolkit版本，下载驱动文件，如NVIDIA-Linux-x86_64-375.66.run，运行驱动文件，根据提示安装：</p><h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><p>安装驱动可能需要的依赖(可选):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt-get update</span><br><span class="line"><span class="variable">$sudo</span> apt-get install dkms build-essential linux-headers-generic</span><br><span class="line"><span class="variable">$sudo</span> gedit ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/lib/x86_64-linux-gnu:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="variable">$source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>进入命令行界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ctrl-Alt+F1 </span><br><span class="line">sudo /etc/init.d/lightdm stop <span class="comment">#关闭当前图形环境令</span></span><br></pre></td></tr></table></figure><p>关闭桌面服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure><p>给驱动run文件赋予执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x NVIDIA-Linux-x86_64-384.66.run</span><br></pre></td></tr></table></figure><p>安装: 注意下面参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ./NVIDIA-Linux-x86_64-384.66.run –no-x-check –no-nouveau-check –no-opengl-files </span><br><span class="line"><span class="comment"># –no-x-check安装驱动时关闭X服务 </span></span><br><span class="line"><span class="comment"># –no-nouveau-check 安装驱动时禁用nouveau </span></span><br><span class="line"><span class="comment"># –no-opengl-files 只安装驱动文件，不安装OpenGL文件</span></span><br></pre></td></tr></table></figure><p>注意：安装CUDA时一定使用runfile文件，这样可以进行选择。不再选择安装驱动，以及在弹出xorg.conf时选择NO.不要使用ubuntu设置中附加驱动中驱动</p><p>报错：</p><p>（1）ERROR: Unable to load the kernel module ‘nvidia.ko’. This happens most frequently when this kernel module was built against the wrong or improperly configured kernel sources, with a version of gcc that differs from the one used to build the target kernel, or if a driver such as rivafb, nvidiafb, or nouveau is present and prevents the NVIDIA kernel module from obtaining ownership of the NVIDIA graphics device(s), or no NVIDIA GPU installed in this system is supported by this NVIDIA Linux graphics driver release.</p><p>解决方法：</p><ul><li>禁用nouveau驱动和相关的驱动</li><li>首先，Ctrl+Alt+F1进入命令提示符界面 </li><li>然后，输入对应的username和passwd进入命令行. </li><li>最后，使用指令sudo service lightdm stop 关闭图形界面，再利用cd指令进入下载好的驱动目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 NVIDIA-Linux-x86_64-384.111.run  <span class="comment">#修改权限（否则没有访问权限，无法进行指令安装）</span></span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-384.111.run –no-x-check –no-nouveau-check –no-opengl-files <span class="comment">#安装驱动</span></span><br><span class="line"><span class="comment">#–no-x-check 关闭X服务</span></span><br><span class="line"><span class="comment">#–no-nouveau-check 禁用nouveau</span></span><br><span class="line"><span class="comment">#–no-opengl-files 不安装OpenGL文件</span></span><br><span class="line"><span class="comment">#...安装完成后</span></span><br><span class="line">sudo update-initramfs -u</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>(2) WARNING: Unable to find a suitable destination to install 32-bit compatibility libraries. Your system may not be set up for 32-bit compatibility. 32-bit compatibility files will not be installed; if you wish to install them, re-run the installation and set a valid directory with the —compat32-libdir option.</p><p>解决方法：</p><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install ia32-libs</span><br></pre></td></tr></table></figure><h2 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装<a href="https://developer.nvidia.com/cuda-80-ga2-download-archive" target="_blank" rel="noopener">cuda</a></h2><p>注意这里下载的是cuda8.0的runfile（local）文件。 </p><p>这里是nvidia给出的官方安装指南（遇到问题时可以查阅) </p><p>下载完cuda8.0后，执行如下语句，运行runfile文件： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_8.0.27_linux.run</span><br></pre></td></tr></table></figure><p>因为驱动之前已经安装，这里就不要选择安装驱动。其余的都直接默认或者选择是即可。</p><p>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure><p>打开“profile”文件，在末尾处添加（注意不要有空格，不然会报错):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-8.0/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-8.0/lib64<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure><p>重启电脑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>测试cuda的Samples:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda-8.0/samples/1_Utilities/deviceQuery</span><br><span class="line">sudo make</span><br><span class="line">./deviceQuery</span><br></pre></td></tr></table></figure><h1 id="OpenCV3-1配置"><a href="#OpenCV3-1配置" class="headerlink" title="OpenCV3.1配置"></a>OpenCV3.1配置</h1><h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line"><span class="comment"># 必须的，gcc编译环境</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"><span class="comment"># 必须的,包括cmake等工具</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br><span class="line"><span class="comment"># 可选的，看个人需要，总共5M左右</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install libv4l-dev</span><br></pre></td></tr></table></figure><h2 id="下载-源码"><a href="#下载-源码" class="headerlink" title="下载 源码"></a>下载 源码</h2><p><a href="https://opencv.org/releases.html" target="_blank" rel="noopener">OpenCV</a></p><p>或着用git clone：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv310</span><br><span class="line">    <span class="comment"># opencv310为自己建的，源码将放在这里</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Itseez/opencv.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Itseez/opencv_contrib.git</span><br></pre></td></tr></table></figure><h2 id="CMake-Opencv源码"><a href="#CMake-Opencv源码" class="headerlink" title="CMake Opencv源码"></a>CMake Opencv源码</h2><p>建立一个编译目录（例如：/build）把cmake后的文件都放在这里边。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv</span><br><span class="line">mkdir build  //建立一个build目录，把cmake的文件都放着里边</span><br><span class="line"><span class="built_in">cd</span> build　　　//进入build目录</span><br></pre></td></tr></table></figure><p>cmake时ippicv_linux_20151201.tgz总是不能成功下载，故cmake之前将./downloads/linux-808b791a6eac9ed78d32a7666804320e 文件拷贝至./opencv-3.1.0/3rdparty/ippicv/ 路径下(先执行一次cmake 命令生成文件路径，在将ippicv_linux_20151201.tgz复制进去) 首先，手动下载<a href="https://raw.githubusercontent.com/Itseez/opencv_3rdparty/81a676001ca8075ada498583e4166079e5744668/ippicv/ippicv_linux_20151201.tgz" target="_blank" rel="noopener">ippicv</a></p><p>然后开始cmake，这里需要注意几个cmake的参数，比较重要。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> WITH_LIBV4L=ON ..</span><br></pre></td></tr></table></figure><p>切记最后’..’两个点之前要加空格！！</p><h2 id="把代码编译成可执行文件"><a href="#把代码编译成可执行文件" class="headerlink" title="把代码编译成可执行文件"></a>把代码编译成可执行文件</h2><p>这里官方推荐使用多进程编译，推荐七个进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错：</span></span><br><span class="line"><span class="comment"># modules/cudalegacy/src/graphcuts.cpp:120:54: error: </span></span><br><span class="line"><span class="comment"># ‘NppiGraphcutState’ has not been declared</span></span><br><span class="line"><span class="comment"># typedef NppStatus (*init_func_t)(NppiSize oSize, </span></span><br><span class="line"><span class="comment"># NppiGraphcutState** ppState, Npp8u* pDeviceMem);</span></span><br><span class="line"><span class="comment"># 这是因为opecv3.0与cuda8.0不兼容导致的。解决办法： </span></span><br><span class="line"><span class="comment"># 修改 ～/opencv/modules/cudalegacy/src/graphcuts.cpp文件内容</span></span><br><span class="line"><span class="comment"># 将  </span></span><br><span class="line"><span class="comment"># #if !defined (HAVE_CUDA) || defined (CUDA_DISABLER)   </span></span><br><span class="line"><span class="comment"># 改为  </span></span><br><span class="line"><span class="comment"># #if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) || (CUDART_VERSION &gt;= 8000) </span></span><br><span class="line">make -j7 <span class="comment"># 并行运行七个jobs，这一步也在build目录中进行</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">如果你要在python下运行opencv库的情况下，那就必须安装安装python-opencv</span><br><span class="line">sudo apt-get install python-opencv</span><br></pre></td></tr></table></figure><h2 id="配置库文件路径"><a href="#配置库文件路径" class="headerlink" title="配置库文件路径"></a>配置库文件路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">'echo "/usr/local/lib" &gt; /etc/ld.so.conf.d/opencv.conf'</span></span><br><span class="line"><span class="comment">#或者直接打开/etc/ld.so.conf.d/opencv.conf，添加/usr/local/lib</span></span><br><span class="line"><span class="comment">#使配置生效</span></span><br><span class="line">sudo  ldconfig(重要)</span><br></pre></td></tr></table></figure><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim/etc/bash.bashrc   </span><br><span class="line"><span class="comment">#在最后加入以下两行代码</span></span><br><span class="line">PKG_CONFIG_PATH=<span class="variable">$PKG_CONFIG_PATH</span>:/usr/<span class="built_in">local</span>/lib/pkgconfig </span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH  </span><br><span class="line"><span class="comment">#使配置生效</span></span><br><span class="line">sudo <span class="built_in">source</span> /etc/bash.bashrc </span><br><span class="line">（该步骤可能会报错找不到命令，原因是<span class="built_in">source</span>为root命令</span><br><span class="line">su（进入root权限）</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg-config --modversion opencv</span><br><span class="line">pkg-config --cflags opencv</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>我是用python+opencv的，我这里直接运行opencv自带的python的例子程序，TX1自带摄像头不能用，需要使用外接USB摄像头，插入USB接口即可，无需安装驱动，也无需改动测试代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;opencv3.1.0_dir&gt;/samples/python/</span><br><span class="line">python video.py</span><br><span class="line">python edge.py</span><br><span class="line">python facedetect.py</span><br></pre></td></tr></table></figure><h1 id="colmap配置"><a href="#colmap配置" class="headerlink" title="colmap配置"></a><a href="https://colmap.github.io/tutorial.html" target="_blank" rel="noopener">colmap</a>配置</h1><p>clone colmap源码到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/colmap/colmap</span><br></pre></td></tr></table></figure><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmake build-essential libboost-all-dev libeigen3-dev libsuitesparse-dev libfreeimage-dev libgoogle-glog-dev libgflags-dev libglew-dev qtbase5-dev libqt5opengl5-dev</span><br></pre></td></tr></table></figure><p>配置Ceres Solver:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libatlas-base-dev libsuitesparse-dev</span><br><span class="line">git <span class="built_in">clone</span> https://ceres-solver.googlesource.com/ceres-solver</span><br><span class="line"><span class="built_in">cd</span> ceres-solver</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"><span class="comment"># 注：如果该安装包无法下载，请离线下载安装，需翻墙</span></span><br></pre></td></tr></table></figure><p>配置和编译colmap:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> path/to/colmap</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>运行colmap:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colmap -h</span><br><span class="line">colmap gui</span><br></pre></td></tr></table></figure><h1 id="Caffe配置"><a href="#Caffe配置" class="headerlink" title="Caffe配置"></a>Caffe配置</h1><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line">sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class="line">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br><span class="line">sudo apt-get install git cmake build-essential</span><br></pre></td></tr></table></figure><p>有一定几率安装失败而导致后续步骤出现问题，所以要确保以上依赖包都已安装成功，验证方法就是重新运行安装命令，如验证 git cmake build-essential是否安装成功共则再次运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git cmake build-essential</span><br></pre></td></tr></table></figure><p>安装的路径下 clone ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/BVLC/caffe.git</span><br></pre></td></tr></table></figure><p>进入 caffe ，将 Makefile.config.example 文件复制一份并更名为 Makefile.config ，也可以在 caffe 目录下直接调用以下命令完成复制操作 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp Makefile.config.example Makefile.config</span><br></pre></td></tr></table></figure><p>复制一份的原因是编译 caffe 时需要的是 Makefile.config 文件，而Makefile.config.example 只是caffe 给出的配置文件例子，不能用来编译 caffe。</p><p>参考我的Makefile.config：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Refer to http://caffe.berkeleyvision.org/installation.html</span></span><br><span class="line"><span class="comment"># Contributions simplifying and improving our build system are welcome!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cuDNN acceleration switch (uncomment to build with cuDNN).</span></span><br><span class="line"><span class="comment"># USE_CUDNN := 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU-only switch (uncomment to build without GPU support).</span></span><br><span class="line"><span class="comment"># CPU_ONLY := 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment to disable IO dependencies and corresponding data layers</span></span><br><span class="line"><span class="comment"># USE_OPENCV := 0</span></span><br><span class="line"><span class="comment"># USE_LEVELDB := 0</span></span><br><span class="line"><span class="comment"># USE_LMDB := 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary)</span></span><br><span class="line"><span class="comment">#You should not set this flag if you will be reading LMDBs with any</span></span><br><span class="line"><span class="comment">#possibility of simultaneous read and write</span></span><br><span class="line"><span class="comment"># ALLOW_LMDB_NOLOCK := 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment if you're using OpenCV 3</span></span><br><span class="line">OPENCV_VERSION := 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># To customize your choice of compiler, uncomment and set the following.</span></span><br><span class="line"><span class="comment"># N.B. the default for Linux is g++ and the default for OSX is clang++</span></span><br><span class="line"><span class="comment"># CUSTOM_CXX := g++</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CUDA directory contains bin/ and lib/ directories that we need.</span></span><br><span class="line">CUDA_DIR := /usr/<span class="built_in">local</span>/cuda</span><br><span class="line"><span class="comment"># On Ubuntu 14.04, if cuda tools are installed via</span></span><br><span class="line"><span class="comment"># "sudo apt-get install nvidia-cuda-toolkit" then use this instead:</span></span><br><span class="line"><span class="comment"># CUDA_DIR := /usr</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CUDA architecture setting: going with all of them.</span></span><br><span class="line"><span class="comment"># For CUDA &lt; 6.0, comment the *_50 lines for compatibility.</span></span><br><span class="line">CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \</span><br><span class="line">-gencode arch=compute_20,code=sm_21 \</span><br><span class="line">-gencode arch=compute_30,code=sm_30 \</span><br><span class="line">-gencode arch=compute_35,code=sm_35 \</span><br><span class="line">-gencode arch=compute_50,code=sm_50 \</span><br><span class="line">-gencode arch=compute_50,code=compute_50</span><br><span class="line"></span><br><span class="line"><span class="comment"># BLAS choice:</span></span><br><span class="line"><span class="comment"># atlas for ATLAS (default)</span></span><br><span class="line"><span class="comment"># mkl for MKL</span></span><br><span class="line"><span class="comment"># open for OpenBlas</span></span><br><span class="line">BLAS := open</span><br><span class="line"><span class="comment"># Custom (MKL/ATLAS/OpenBLAS) include and lib directories.</span></span><br><span class="line"><span class="comment"># Leave commented to accept the defaults for your choice of BLAS</span></span><br><span class="line"><span class="comment"># (which should work)!</span></span><br><span class="line"><span class="comment"># BLAS_INCLUDE := /path/to/your/blas</span></span><br><span class="line"><span class="comment"># BLAS_LIB := /path/to/your/blas</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew puts openblas in a directory that is not on the standard search path</span></span><br><span class="line"><span class="comment"># BLAS_INCLUDE := $(shell brew --prefix openblas)/include</span></span><br><span class="line"><span class="comment"># BLAS_LIB := $(shell brew --prefix openblas)/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is required only if you will compile the matlab interface.</span></span><br><span class="line"><span class="comment"># MATLAB directory should contain the mex binary in /bin.</span></span><br><span class="line"><span class="comment"># MATLAB_DIR := /usr/local</span></span><br><span class="line"><span class="comment"># MATLAB_DIR := /Applications/MATLAB_R2012b.app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> this is required only if you will compile the python interface.</span></span><br><span class="line"><span class="comment"># We need to be able to find Python.h and numpy/arrayobject.h.</span></span><br><span class="line">PYTHON_INCLUDE := /usr/include/python2.7 \</span><br><span class="line">/usr/lib64/python2.7/site-packages/numpy/core/include</span><br><span class="line"><span class="comment"># Anaconda Python distribution is quite popular. Include path:</span></span><br><span class="line"><span class="comment"># Verify anaconda location, sometimes it's in root.</span></span><br><span class="line"><span class="comment"># ANACONDA_HOME := $(HOME)/anaconda</span></span><br><span class="line"><span class="comment"># PYTHON_INCLUDE := $(ANACONDA_HOME)/include \</span></span><br><span class="line"><span class="comment"># $(ANACONDA_HOME)/include/python2.7 \</span></span><br><span class="line"><span class="comment"># $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include \</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We need to be able to find libpythonX.X.so or .dylib.</span></span><br><span class="line">PYTHON_LIB := /usr/lib</span><br><span class="line"><span class="comment"># PYTHON_LIB := $(ANACONDA_HOME)/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew installs numpy in a non standard path (keg only)</span></span><br><span class="line"><span class="comment"># PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include</span></span><br><span class="line"><span class="comment"># PYTHON_LIB += $(shell brew --prefix numpy)/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to support layers written in Python (will link against Python libs)</span></span><br><span class="line">WITH_PYTHON_LAYER := 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Whatever else you find you need goes here.</span></span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/<span class="built_in">local</span>/include /usr/include/hdf5/serial/</span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) /usr/<span class="built_in">local</span>/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</span><br><span class="line"></span><br><span class="line"><span class="comment"># If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies</span></span><br><span class="line"><span class="comment"># INCLUDE_DIRS += $(shell brew --prefix)/include</span></span><br><span class="line"><span class="comment"># LIBRARY_DIRS += $(shell brew --prefix)/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to use `pkg-config` to specify OpenCV library paths.</span></span><br><span class="line"><span class="comment"># (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)</span></span><br><span class="line"><span class="comment"># USE_PKG_CONFIG := 1</span></span><br><span class="line"></span><br><span class="line">BUILD_DIR := build</span><br><span class="line">DISTRIBUTE_DIR := distribute</span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171</span></span><br><span class="line"><span class="comment"># DEBUG := 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The ID of the GPU that 'make runtest' will use to run unit tests.</span></span><br><span class="line">TEST_GPUID := 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable pretty build (comment to see full commands)</span></span><br><span class="line">Q ?= @</span><br></pre></td></tr></table></figure><p>可以开始编译了，在 caffe 目录下执行 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make all -j8</span><br><span class="line">sudo make runtest -j8</span><br><span class="line">sudo make pycaffe -j8 <span class="comment"># 安装 pycaffe notebook 接口环境</span></span><br></pre></td></tr></table></figure><h1 id="darknet配置"><a href="#darknet配置" class="headerlink" title="darknet配置"></a><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">darknet</a>配置</h1><p>环境: Ubuntu16.04 + Titan X + Cuda8.0 + OpenCV3.1 + Python2.7</p><p>请参考前文。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pjreddie/darknet</span><br><span class="line"><span class="built_in">cd</span> darknet</span><br><span class="line"><span class="comment"># 配置Makefile</span></span><br><span class="line"><span class="comment"># GPU=1</span></span><br><span class="line"><span class="comment"># CUDNN=0</span></span><br><span class="line"><span class="comment"># OPENCV=1</span></span><br><span class="line"><span class="comment"># DEBUG=0</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>可能出现的报错：</p><p>（1）error:/usr/bin/ld: 找不到 -lippicv&lt;/br &gt;<br>collect2: error: ld returned 1 exit status &lt;/br &gt;<br>Makefile:82: recipe for target ‘libdarknet.so’ failed &lt;/br &gt;</p><p>解决方法：找到-lippicv对应的库（libippicv.a），该库位于 安装目录./opencv-3.1.0/3rdparty/ippicv/unpack/ippicv_lnx/lib/intel64文件夹下 ，进入该文件夹下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo cp sudo cp libippicv.a /usr/<span class="built_in">local</span>/lib/</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">继续执行make 即可。</span><br><span class="line"></span><br><span class="line">（2）找不到nvcc</span><br><span class="line"></span><br><span class="line">解决方法：修改darknet下的Makefile文件，将其中的NVCC=nvcc改为/usr/<span class="built_in">local</span>/cuda-*/bin/nvcc即安装的cuda版本信息</span><br><span class="line"></span><br><span class="line">保存  继续执行make 即可。</span><br><span class="line"></span><br><span class="line">下载权重测试:</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">wget http://pjreddie.com/media/files/yolo.weights  </span><br><span class="line">./darknet yolo <span class="built_in">test</span> cfg/yolo.cfg yolo.weights data/dog.jpg   </span><br><span class="line">./darknet detect cfg/yolo.cfg yolo.weights data/dog.jpg</span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/ch_liu23/article/details/53558549" target="_blank" rel="noopener">YOLOv2训练自己的数据集（VOC格式）</a></li><li><a href="https://blog.csdn.net/jozeeh/article/details/79087311" target="_blank" rel="noopener">YOLOv2目标检测_单目标_训练自己数据全过程（自用）</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.liaohuqiu.net/cn/posts/ssh-public-key-auto-login/" target="_blank" rel="noopener">https://www.liaohuqiu.net/cn/posts/ssh-public-key-auto-login/</a></li><li><a href="https://blog.csdn.net/asukasmallriver/article/details/72927860" target="_blank" rel="noopener">https://blog.csdn.net/asukasmallriver/article/details/72927860</a></li><li><a href="https://blog.csdn.net/u011440558/article/details/78358447" target="_blank" rel="noopener">https://blog.csdn.net/u011440558/article/details/78358447</a></li><li><a href="https://www.mtyun.com/library/how-to-install-caffe-on-centos7" target="_blank" rel="noopener">https://www.mtyun.com/library/how-to-install-caffe-on-centos7</a></li><li><a href="https://blog.csdn.net/qq_28413479/article/details/76377184" target="_blank" rel="noopener">https://blog.csdn.net/qq_28413479/article/details/76377184</a></li><li><a href="https://blog.csdn.net/yhaolpz/article/details/71375762" target="_blank" rel="noopener">https://blog.csdn.net/yhaolpz/article/details/71375762</a></li><li><a href="https://www.jianshu.com/p/10ed332caf07" target="_blank" rel="noopener">https://www.jianshu.com/p/10ed332caf07</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Linux </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Linux </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-TensorFlow教程</title>
      <link href="/2018/03/30/machine_learning/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-TensorFlow%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/30/machine_learning/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-TensorFlow%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="TensorFlow简介"><a href="#TensorFlow简介" class="headerlink" title="TensorFlow简介"></a>TensorFlow简介</h1><p>TensorFlow是Google开发的一款神经网络的Python外部的结构包, 也是一个采用数据流图来进行数值计算的开源软件库.TensorFlow 让我们可以先绘制计算结构图, 也可以称是一系列可人机交互的计算操作, 然后把编辑好的Python文件 转换成 更高效的C++, 并在后端进行计算.</p><h1 id="TensorFlow安装"><a href="#TensorFlow安装" class="headerlink" title="TensorFlow安装"></a>TensorFlow安装</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="Dock安装"><a href="#Dock安装" class="headerlink" title="Dock安装"></a>Dock安装</h3><p>Docker安装请参考<a href="http://mapstec.com/2018/03/29/%E5%AE%9E%E9%AA%8C%E5%AE%A4GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">实验室GPU服务器部署教程</a></p><p>Docker 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组，参考：<a href="https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noopener">docker docs</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><h3 id="安装NVIDIA-Docker"><a href="#安装NVIDIA-Docker" class="headerlink" title="安装NVIDIA-Docker"></a>安装NVIDIA-Docker</h3><p>安装完成docker并检查安装正确（能跑出来hello-world）后，如果需要docker容器中有gpu支持，需要再安装NVIDIA-Docker，同样找到并打开该项目的主页：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NVIDIA/nvidia-docker: Build and run Docker containers leveraging NVIDIA GPUs</span><br><span class="line">https://github.com/NVIDIA/nvidia-docker</span><br></pre></td></tr></table></figure><p>可以看到在Quick start小节，根据系统版本执行命令：</p><p>Ubuntu 14.04/16.04/18.04, Debian Jessie/Stretch：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers</span></span><br><span class="line">docker volume ls -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker rm -f</span><br><span class="line">sudo apt-get purge -y nvidia-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the package repositories</span></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \</span><br><span class="line">  sudo apt-key add -</span><br><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> <span class="variable">$ID</span><span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.list | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install nvidia-docker2 and reload the Docker daemon configuration</span></span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line">sudo pkill -SIGHUP dockerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test nvidia-smi with the latest official CUDA image</span></span><br><span class="line">docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure><p>CentOS 7 (docker-ce), RHEL 7.4/7.5 (docker-ce), Amazon Linux 1/2:</p><p>If you are not using the official docker-ce package on CentOS/RHEL, use the next section.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers</span></span><br><span class="line">docker volume ls -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker rm -f</span><br><span class="line">sudo yum remove nvidia-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the package repositories</span></span><br><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> <span class="variable">$ID</span><span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.repo | \</span><br><span class="line">  sudo tee /etc/yum.repos.d/nvidia-docker.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install nvidia-docker2 and reload the Docker daemon configuration</span></span><br><span class="line">sudo yum install -y nvidia-docker2</span><br><span class="line">sudo pkill -SIGHUP dockerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test nvidia-smi with the latest official CUDA image</span></span><br><span class="line">docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure><p>If yum reports a conflict on /etc/docker/daemon.json with the docker package, you need to use the next section instead.</p><p>CentOS 7 (docker), RHEL 7.4/7.5 (docker):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers</span></span><br><span class="line">docker volume ls -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker rm -f</span><br><span class="line">sudo yum remove nvidia-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the package repositories</span></span><br><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> <span class="variable">$ID</span><span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-container-runtime/<span class="variable">$distribution</span>/nvidia-container-runtime.repo | \</span><br><span class="line">  sudo tee /etc/yum.repos.d/nvidia-container-runtime.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the nvidia runtime hook</span></span><br><span class="line">sudo yum install -y nvidia-container-runtime-hook</span><br><span class="line">sudo mkdir -p /usr/libexec/oci/hooks.d</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">'#!/bin/sh\nPATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" exec nvidia-container-runtime-hook "$@"'</span> | \</span><br><span class="line">  sudo tee /usr/libexec/oci/hooks.d/nvidia</span><br><span class="line">sudo chmod +x /usr/libexec/oci/hooks.d/nvidia</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test nvidia-smi with the latest official CUDA image</span></span><br><span class="line"><span class="comment"># You can't use `--runtime=nvidia` with this setup.</span></span><br><span class="line">docker run --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure><p>上面最后一条命令是检查是否安装成功，安装成功，则会显示关于GPU的信息。</p><p>然后在执行下面这句，默认用nvdia-docker替代docker命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'alias docker=nvidia-docker'</span> &gt;&gt; ~/.bashrc</span><br><span class="line">bash</span><br></pre></td></tr></table></figure><h3 id="下载使用TensorFlow镜像"><a href="#下载使用TensorFlow镜像" class="headerlink" title="下载使用TensorFlow镜像"></a>下载使用TensorFlow镜像</h3><p>打开dockerhub关于tensorflow的页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensorflow/tensorflow – Docker Hub</span><br><span class="line">https://hub.docker.com/r/tensorflow/tensorflow/</span><br></pre></td></tr></table></figure><p>根据需要的版本下载tensorflow镜像并开启tensorflow容器：</p><p>CPU版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8888:8888 tensorflow/tensorflow</span><br></pre></td></tr></table></figure><p>GPU版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu</span><br></pre></td></tr></table></figure><p>如何使用,执行以上命令的结果类似如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ nvidia-docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu</span><br><span class="line">[I 02:51:21.230 NotebookApp] Writing notebook server cookie secret to /root/.<span class="built_in">local</span>/share/jupyter/runtime/notebook_cookie_secret</span><br><span class="line">[W 02:51:21.242 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using encryption. This is not recommended.</span><br><span class="line">[I 02:51:21.249 NotebookApp] Serving notebooks from <span class="built_in">local</span> directory: /notebooks</span><br><span class="line">[I 02:51:21.249 NotebookApp] 0 active kernels </span><br><span class="line">[I 02:51:21.249 NotebookApp] The Jupyter Notebook is running at: http://[all ip addresses on your system]:8888/?token=8f90cc7b9ad6ccc4f36f53f347c7a314220bbcb82dd416ea</span><br><span class="line">[I 02:51:21.249 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).</span><br><span class="line">[C 02:51:21.249 NotebookApp] </span><br><span class="line">    </span><br><span class="line">    Copy/paste this URL into your browser when you connect <span class="keyword">for</span> the first time,</span><br><span class="line">    to login with a token:</span><br><span class="line">        http://localhost:8888/?token=8f90cc7b9ad6ccc4f36f53f347c7a314220bbcb82dd416ea</span><br><span class="line">[I 02:51:31.832 NotebookApp] 302 GET / (172.17.0.1) 0.74ms</span><br><span class="line">[I 02:51:31.943 NotebookApp] 302 GET /tree? (172.17.0.1) 1.44ms</span><br></pre></td></tr></table></figure><p>其中看到有个网址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/?token=8f90cc7b9ad6ccc4f36f53f347c7a314220bbcb82dd416ea</span><br></pre></td></tr></table></figure><p>每个人的网址在token=后面的内容是不一样的，现在我们打开浏览器，输入网址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/</span><br></pre></td></tr></table></figure><p>输入刚刚token后面的值后,点击第一个1_hello_tensorflow.ipynb，然后可以选择执行所有代码.</p><p>常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull library/hello-world</span><br></pre></td></tr></table></figure><p>上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><p>抓取成功以后，就可以在本机看到这个 image 文件了。运行这个 image 文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run hello-world</span><br></pre></td></tr></table></figure><p>docker container run命令会从 image 文件，生成一个正在运行的容器实例。</p><p>注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。</p><p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -it ubuntu bash</span><br></pre></td></tr></table></figure><p>对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">kill</span> [containID]</span><br></pre></td></tr></table></figure><p>image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本机正在运行的容器</span></span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出本机所有容器，包括终止运行的容器</span></span><br><span class="line">$ docker container ls --all</span><br></pre></td></tr></table></figure><p>上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的docker container kill命令。</p><p>终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container rm [containerID]</span><br></pre></td></tr></table></figure><p>运行上面的命令之后，再使用docker container ls —all命令，就会发现被删除的容器文件已经消失了。</p><p>创建tensorflow docker容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker container run --name [name] -it -p 8888:8888 tensorflow/tensorflow:latest-gpu /bin/bash</span><br><span class="line"><span class="comment"># [name]-- 容器的名字</span></span><br><span class="line"><span class="comment"># -it -- 保留命令行运行</span></span><br><span class="line"><span class="comment"># -p 8888:8888 —— 将本地的8888端口和http://localhost:8888/映射</span></span><br><span class="line"><span class="comment"># tensorflow/tensorflow:latest-gpu ：默认是tensorflow/tensorflow:latest,指定使用的镜像</span></span><br></pre></td></tr></table></figure><p>启动docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [name]</span><br></pre></td></tr></table></figure><p>进入docker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach [name]</span><br></pre></td></tr></table></figure><p>重命名docker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename  old_name new_name</span><br></pre></td></tr></table></figure><h3 id="如何进入正在执行的-docker-container"><a href="#如何进入正在执行的-docker-container" class="headerlink" title="如何进入正在执行的 docker container"></a>如何进入正在执行的 docker container</h3><h4 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h4><p>这个是官方提供的一种方法。</p><p>测试，首先启动一个container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t ubuntu bash</span><br><span class="line">root@4556f5ad6067:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>不要退出，打开另一个终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">4556f5ad6067        ubuntu:14.04        <span class="string">"bash"</span>              45 seconds ago      Up 43 seconds                           jolly_ardinghelli</span><br><span class="line"></span><br><span class="line">$ docker attach 4556f5ad6067</span><br><span class="line">root@4556f5ad6067:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>这样就连接进去了。这时候如果我们输入一些命令，就能看到在两个终端都有显示和输出。这种方式有比较大的局限性，如果知道了entrypoint或者有程序正在执行，通过docker attach进入之后是不能执行操作的，一个终端退出之后整个container就终止了。不推荐使用这种方式。</p><h4 id="lxc-attach"><a href="#lxc-attach" class="headerlink" title="lxc-attach"></a>lxc-attach</h4><p>如果使用这种方式，首先要保证docker是以lxc方式启动的，具体可以这样做：</p><p>修改/etc/default/docker增加DOCKER_OPTS=”-e lxc”</p><p>重启docker服务sudo service docker restart</p><p>启动container的方式和之前一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t ubuntu bash</span><br><span class="line">root@e7f01f0ff598:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>进入container可以这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">e7f01f0ff598        ubuntu:14.04        <span class="string">"bash"</span>              17 seconds ago      Up 15 seconds                           grave_jones</span><br><span class="line"></span><br><span class="line">$ ps aux | grep e7f01f0ff598</span><br><span class="line">root     23691  0.0  0.0  43140  1876 pts/9    Ss   21:47   0:00 lxc-start -n e7f01f0ff598c80d70a996135c98fbaeddc6daa61436bbbfa735233e8b6f8ebe -f /var/lib/docker/containers/e7f01f0ff598c80d70a996135c98fbaeddc6daa61436bbbfa735233e8b6f8ebe/config.lxc -- /.dockerinit -g 172.17.42.1 -i 172.17.0.3/16 -mtu 1500 -- bash</span><br><span class="line">ma6174   23756  0.0  0.0  13428   928 pts/12   S+   21:47   0:00 grep --color=auto e7f01f0ff598</span><br><span class="line"></span><br><span class="line">$ sudo lxc-attach -n e7f01f0ff598c80d70a996135c98fbaeddc6daa61436bbbfa735233e8b6f8ebe</span><br><span class="line">root@e7f01f0ff598:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>这种方式还是很方便的。前提是需要重启docker服务以lxc的方式执行，进入container之后会有一个终端可以执行命令，不影响正在执行的程序。</p><h4 id="nsenter"><a href="#nsenter" class="headerlink" title="nsenter"></a>nsenter</h4><p>如果docker不是以lxc方式启动的，这时候还想进入一个正在执行的container的话，可以考虑使用nsenter</p><p>这个程序的安装方式很独特，使用docker进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -v /usr/<span class="built_in">local</span>/bin:/target jpetazzo/nsenter</span><br></pre></td></tr></table></figure><p>使用方法也很简单，首先你要进入的container的PID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ PID=$(docker inspect --format &#123;&#123;.State.Pid&#125;&#125; &lt;container_name_or_ID&gt;)</span><br></pre></td></tr></table></figure><p>然后就可以用这个命令进入container了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nsenter --target <span class="variable">$PID</span> --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure><p>为了使用方便可以写一个脚本自动完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat /bin/docker_enter</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sudo nsenter --target `docker inspect --format &#123;&#123;.State.Pid&#125;&#125; <span class="variable">$1</span>` --mount --uts --ipc --net --pid bash</span><br></pre></td></tr></table></figure><p>这样每次要进入某个container只需要执行docker_enter <container_name_or_id>就可以了。</container_name_or_id></p><h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><p>这个原理也很简单，在container里面启动ssh服务，然后通过ssh的方式去登陆到container里面，不推荐这种方式，主要是配置ssh登陆比较繁琐，开启ssh服务也会耗费资源，完全没有必要。</p><h3 id="TensorFlow安装方式一"><a href="#TensorFlow安装方式一" class="headerlink" title="TensorFlow安装方式一"></a>TensorFlow安装方式一</h3><ol><li><p>下载镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tensorflow/tensorflow</span><br></pre></td></tr></table></figure></li><li><p>创建Tensorflow容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-tensorflow -it -p 8888:8888 -v ~/tensorflow:/<span class="built_in">test</span>/data tensorflow/tensorflow</span><br><span class="line"><span class="comment"># --name：创建的容器名，即my-tensorflow</span></span><br><span class="line"><span class="comment"># -it：保留命令行运行</span></span><br><span class="line"><span class="comment"># p 8888:8888：将本地的8888端口和http://localhost:8888/映射</span></span><br><span class="line"><span class="comment"># -v ~/tensorflow:/test/data:将本地的~/tensorflow挂载到容器内的/# test/data下</span></span><br><span class="line"><span class="comment"># tensorflow/tensorflow ：默认是tensorflow/tensorflow:latest,指定使用的镜像</span></span><br></pre></td></tr></table></figure></li><li><p>拷贝带token的URL在浏览器打开</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[all ip addresses on your system]:8888/?token=649d7cab1734e01db75b6c2b476ea87aa0b24dde56662a27</span><br></pre></td></tr></table></figure></li><li><p>显示Jupyter Notebook，Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本。示例中已经显示了Tensorflow的入门教程，点开一个可以看见。</p></li><li><p>关闭容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop my-tensortflow</span><br></pre></td></tr></table></figure></li><li><p>再次打开</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start my-tensortflow</span><br></pre></td></tr></table></figure></li></ol><h3 id="TensorFlow安装方式二"><a href="#TensorFlow安装方式二" class="headerlink" title="TensorFlow安装方式二"></a>TensorFlow安装方式二</h3><ol><li><p>下载镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tensorflow/tensorflow</span><br></pre></td></tr></table></figure></li><li><p>创建Tensorflow容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name bash_tensorflow tensorflow/tensorflow /bin/bash</span><br><span class="line"><span class="comment"># 这样我们就创建了名为bash_tensorflow的容器</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>start命令启动容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start bash_tensorflow</span><br></pre></td></tr></table></figure></li><li><p>再连接上容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker attach bash_tensorflow</span><br><span class="line"><span class="comment"># 可以看到我们用终端连接上了容器，和操作Linux一样了。</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Pip安装"><a href="#Pip安装" class="headerlink" title="Pip安装"></a>Pip安装</h2><h3 id="Linux-和-MacOS"><a href="#Linux-和-MacOS" class="headerlink" title="Linux 和 MacOS"></a>Linux 和 MacOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Linux 64-位 系统的执行代码:</span></span><br><span class="line">$ sudo apt-get install python-pip python-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac OS X 系统的执行代码:</span></span><br><span class="line">$ sudo easy_install --upgrade pip</span><br><span class="line">$ sudo easy_install --upgrade six</span><br></pre></td></tr></table></figure><ol><li><p>CPU 版</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 2+ 的用户:</span></span><br><span class="line">$ pip install tensorflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># python 3+ 的用户:</span></span><br><span class="line">$ pip3 install tensorflow</span><br></pre></td></tr></table></figure></li><li><p>GPU 版</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libcupti-dev</span><br><span class="line">$ sudo apt-get install python-pip python-dev   <span class="comment"># for Python 2.7</span></span><br><span class="line">$ sudo apt-get install python3-pip python3-dev <span class="comment"># for Python 3.n</span></span><br><span class="line">$ pip install tensorflow      <span class="comment"># Python 2.7; CPU support (no GPU support)</span></span><br><span class="line">$ pip3 install tensorflow     <span class="comment"># Python 3.n; CPU support (no GPU support)</span></span><br><span class="line">$ pip install tensorflow-gpu  <span class="comment"># Python 2.7;  GPU support</span></span><br><span class="line">$ pip3 install tensorflow-gpu <span class="comment"># Python 3.n; GPU support</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>测试</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow</span><br></pre></td></tr></table></figure></li></ol><h1 id="TensorFlow-教程"><a href="#TensorFlow-教程" class="headerlink" title="TensorFlow 教程"></a>TensorFlow 教程</h1><h2 id="Session-会话控制"><a href="#Session-会话控制" class="headerlink" title="Session 会话控制"></a>Session 会话控制</h2><p>参考：</p><ul><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-3-session/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-3-session/</a></li></ul><p>Session 是 Tensorflow 为了控制,和输出文件的执行的语句. 运行 session.run() 可以获得你要得知的运算结果, 或者是你所要运算的部分.</p><p>例子讲解：建立两个 matrix ,输出两个 matrix 矩阵相乘的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># create two matrixes</span></span><br><span class="line"></span><br><span class="line">matrix1 = tf.constant([[<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">matrix2 = tf.constant([[<span class="number">2</span>],</span><br><span class="line">                       [<span class="number">2</span>]])</span><br><span class="line">product = tf.matmul(matrix1,matrix2)</span><br></pre></td></tr></table></figure><p>因为 product 不是直接计算的步骤, 所以我们会要使用 Session 来激活 product 并得到计算结果. 有两种形式使用会话控制 Session 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line">result = sess.run(product)</span><br><span class="line">print(result)</span><br><span class="line">sess.close()</span><br><span class="line"><span class="comment"># [[12]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result2 = sess.run(product)</span><br><span class="line">    print(result2)</span><br><span class="line"><span class="comment"># [[12]]</span></span><br></pre></td></tr></table></figure><h2 id="Variable-变量"><a href="#Variable-变量" class="headerlink" title="Variable 变量"></a>Variable 变量</h2><p>参考：</p><ul><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-4-variable/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-4-variable/</a></li></ul><p>在 Tensorflow 中，定义了某字符串是变量，它才是变量。定义语法： state = tf.Variable()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">state = tf.Variable(<span class="number">0</span>, name=<span class="string">'counter'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义常量 one</span></span><br><span class="line">one = tf.constant(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义加法步骤 (注: 此步并没有直接计算)</span></span><br><span class="line">new_value = tf.add(state, one)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 State 更新成 new_value</span></span><br><span class="line">update = tf.assign(state, new_value)</span><br></pre></td></tr></table></figure><p>如果你在 Tensorflow 中设定了变量，那么初始化变量是最重要的！！所以定义了变量以后, 一定要定义 init = tf.initialize_all_variables() .</p><p>到这里变量还是没有被激活，需要再在 sess 里, sess.run(init) , 激活 init 这一步.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果定义 Variable, 就一定要 initialize</span></span><br><span class="line"><span class="comment"># init = tf.initialize_all_variables() # tf 马上就要废弃这种写法</span></span><br><span class="line">init = tf.global_variables_initializer()  <span class="comment"># 替换成这样就好</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 Session</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        sess.run(update)</span><br><span class="line">        print(sess.run(state))</span><br></pre></td></tr></table></figure><p>注意：直接 print(state) 不起作用！！</p><p>一定要把 sess 的指针指向 state 再进行 print 才能得到想要的结果！</p><h2 id="Placeholder-传入值"><a href="#Placeholder-传入值" class="headerlink" title="Placeholder 传入值"></a>Placeholder 传入值</h2><p>参考：</p><ul><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-5-placeholde/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-5-placeholde/</a></li></ul><p>placeholder 是 Tensorflow 中的占位符，暂时储存变量.</p><p>Tensorflow 如果想要从外部传入data, 那就需要用到 tf.placeholder(), 然后以这种形式传输数据 sess.run(<strong>*, feed_dict={input: </strong>}).</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#在 Tensorflow 中需要定义 placeholder 的 type ，一般为 float32 形式</span></span><br><span class="line">input1 = tf.placeholder(tf.float32)</span><br><span class="line">input2 = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mul = multiply 是将input1和input2 做乘法运算，并输出为 output </span></span><br><span class="line">ouput = tf.multiply(input1, input2)</span><br></pre></td></tr></table></figure><p>接下来, 传值的工作交给了 sess.run() , 需要传入的值放在了feed_dict={} 并一一对应每一个 input. placeholder 与 feed_dict={} 是绑定在一起出现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run(ouput, feed_dict=&#123;input1: [<span class="number">7.</span>], input2: [<span class="number">2.</span>]&#125;))</span><br><span class="line"><span class="comment"># [ 14.]</span></span><br></pre></td></tr></table></figure><h2 id="建造神经网络"><a href="#建造神经网络" class="headerlink" title="建造神经网络"></a>建造神经网络</h2><p>参考：</p><ul><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-2-create-NN/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-2-create-NN/</a></li></ul><h3 id="add-layer-功能"><a href="#add-layer-功能" class="headerlink" title="add_layer 功能"></a>add_layer 功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    Weights = tf.Variable(tf.random_normal([in_size, out_size]))</span><br><span class="line">    biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size]) + <span class="number">0.1</span>)</span><br><span class="line">    Wx_plus_b = tf.matmul(inputs, Weights) + biases</span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p>构建所需的数据。 这里的x_data和y_data并不是严格的一元二次函数的关系，因为我们多加了一个noise,这样看起来会更像真实情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_data = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">300</span>, dtype=np.float32)[:, np.newaxis]</span><br><span class="line">noise = np.random.normal(<span class="number">0</span>, <span class="number">0.05</span>, x_data.shape).astype(np.float32)</span><br><span class="line">y_data = np.square(x_data) - <span class="number">0.5</span> + noise</span><br></pre></td></tr></table></figure><p>利用占位符定义我们所需的神经网络的输入。 tf.placeholder()就是代表占位符，这里的None代表无论输入有多少都可以，因为输入只有一个特征，所以这里是1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>接下来，我们就可以开始定义神经层了。 通常神经层都包括输入层、隐藏层和输出层。这里的输入层只有一个属性， 所以我们就只有一个输入；隐藏层我们可以自己假设，这里我们假设隐藏层有10个神经元； 输出层和输入层的结构是一样的，所以我们的输出层也是只有一层。 所以，我们构建的是——输入层1个、隐藏层10个、输出层1个的神经网络。</p><h3 id="搭建网络"><a href="#搭建网络" class="headerlink" title="搭建网络"></a>搭建网络</h3><p>利用之前的add_layer()函数，这里使用 Tensorflow 自带的激励函数tf.nn.relu。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l1 = add_layer(xs, <span class="number">1</span>, <span class="number">10</span>, activation_function=tf.nn.relu)</span><br></pre></td></tr></table></figure><p>接着，定义输出层。此时的输入就是隐藏层的输出——l1，输入有10层（隐藏层的输出层），输出有1层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction = add_layer(l1, <span class="number">10</span>, <span class="number">1</span>, activation_function=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>计算预测值prediction和真实值的误差，对二者差的平方求和再取平均。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),</span><br><span class="line">                     reduction_indices=[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>接下来，是很关键的一步，如何让机器学习提升它的准确率。tf.train.GradientDescentOptimizer()中的值通常都小于1，这里取的是0.1，代表以0.1的效率来最小化误差loss。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br></pre></td></tr></table></figure><p>使用变量时，都要对它进行初始化，这是必不可少的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># init = tf.initialize_all_variables() # tf 马上就要废弃这种写法</span></span><br><span class="line">init = tf.global_variables_initializer()  <span class="comment"># 替换成这样就好</span></span><br></pre></td></tr></table></figure><p>定义Session，并用 Session 来执行 init 初始化步骤。 （注意：在tensorflow中，只有session.run()才会执行我们定义的运算。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>机器学习的内容是train_step, 用 Session 来 run 每一次 training 的数据，逐步提升神经网络的预测准确性。 (注意：当运算要用到placeholder时，就需要feed_dict这个字典来指定输入。)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># training</span></span><br><span class="line">    sess.run(train_step, feed_dict=&#123;xs: x_data, ys: y_data&#125;)</span><br></pre></td></tr></table></figure><p>每50步我们输出一下机器学习的误差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># to see the step improvement</span></span><br><span class="line">    print(sess.run(loss, feed_dict=&#123;xs: x_data, ys: y_data&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.021204619</span></span><br><span class="line"><span class="number">0.009980676</span></span><br><span class="line"><span class="number">0.007174721</span></span><br><span class="line"><span class="number">0.006633012</span></span><br><span class="line"><span class="number">0.00622975</span></span><br><span class="line"><span class="number">0.005894037</span></span><br><span class="line"><span class="number">0.005621146</span></span><br><span class="line"><span class="number">0.0053801737</span></span><br><span class="line"><span class="number">0.00519997</span></span><br><span class="line"><span class="number">0.005050111</span></span><br><span class="line"><span class="number">0.004922069</span></span><br><span class="line"><span class="number">0.0048095705</span></span><br><span class="line"><span class="number">0.0047140927</span></span><br><span class="line"><span class="number">0.0046234317</span></span><br><span class="line"><span class="number">0.0045334958</span></span><br><span class="line"><span class="number">0.0044504963</span></span><br><span class="line"><span class="number">0.004378309</span></span><br><span class="line"><span class="number">0.0043256846</span></span><br><span class="line"><span class="number">0.0042802156</span></span><br><span class="line"><span class="number">0.0042369063</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 深度学习 </category>
          
          <category> TF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> TF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验室GPU服务器部署教程</title>
      <link href="/2018/03/29/machine_learning/%E5%AE%9E%E9%AA%8C%E5%AE%A4GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/29/machine_learning/%E5%AE%9E%E9%AA%8C%E5%AE%A4GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a><a href="https://docs.docker.com/install/linux/ubuntu/" target="_blank" rel="noopener">Docker</a> 安装</h1><p>参考：<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository</a></p><ol><li><p>Prerequisites</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">To install Docker CE, you need the 64-bit version of one of these Ubuntu versions:</span><br><span class="line"></span><br><span class="line">Artful 17.10 (Docker CE 17.11 Edge and higher only)</span><br><span class="line">Xenial 16.04 (LTS)</span><br><span class="line">Trusty 14.04 (LTS)</span><br></pre></td></tr></table></figure></li><li><p>Uninstall old versions</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure></li><li><p>Install Docker CE</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"><span class="comment"># Install packages to allow apt to use a repository over HTTPS</span></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line"><span class="comment"># Add Docker’s official GPG key:</span></span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"><span class="comment"># Use the following command to set up the stable repository.</span></span><br><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"><span class="comment"># Install the latest version of Docker CE</span></span><br><span class="line">$ sudo apt-get install docker-ce</span><br><span class="line"><span class="comment"># Verify that Docker CE is installed correctly by running the hello-world image.</span></span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>UPGRADE DOCKER CE</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Uninstall Docker CE</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge docker-ce</span><br><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ol><h1 id="Docker-备份、恢复和迁移"><a href="#Docker-备份、恢复和迁移" class="headerlink" title="Docker 备份、恢复和迁移"></a>Docker 备份、恢复和迁移</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>首先，为了备份Docker中的容器，我们会想看看我们想要备份的容器列表。要达成该目的，我们需要在我们运行着Docker引擎，并已创建了容器的Linux机器中运行 docker ps 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br></pre></td></tr></table></figure><p>在此之后，我们要选择我们想要备份的容器，然后去创建该容器的快照。我们可以使用 docker commit 命令来创建快照。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker commit -p 30b8f18f20b4 container-backup</span></span><br></pre></td></tr></table></figure><p>该命令会生成一个作为Docker镜像的容器快照，我们可以通过运行 docker images 命令来查看Docker镜像，如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br></pre></td></tr></table></figure><p>正如我们所看见的，上面做的快照已经作为Docker镜像保存了。现在，为了备份该快照，我们有两个选择，一个是我们可以登录进Docker注册中心，并推送该镜像；另一个是我们可以将Docker镜像打包成tar包备份，以供今后使用。</p><p>如果我们想要在<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker注册中心</a>上传或备份镜像，我们只需要运行 docker login 命令来登录进Docker注册中心，然后推送所需的镜像即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker login</span></span><br><span class="line"><span class="comment"># docker tag a25ddfec4d2a arunpyasi/container-backup:test</span></span><br><span class="line"><span class="comment"># docker push arunpyasi/container-backup</span></span><br></pre></td></tr></table></figure><p>如果我们不想备份到docker注册中心，而是想要将此镜像保存在本地机器中，以供日后使用，那么我们可以将其作为tar包备份。要完成该操作，我们需要运行以下 docker save 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker save -o ~/container-backup.tar container-backup</span></span><br></pre></td></tr></table></figure><p>要验证tar包是否已经生成，我们只需要在保存tar包的目录中运行 ls 命令即可。</p><h2 id="恢复容器"><a href="#恢复容器" class="headerlink" title="恢复容器"></a>恢复容器</h2><p>接下来，在我们成功备份了我们的Docker容器后，我们现在来恢复这些制作了Docker镜像快照的容器。如果我们已经在注册中心推送了这些Docker镜像，那么我们仅仅需要把那个Docker镜像拖回并直接运行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker pull arunpyasi/container-backup:test</span></span><br></pre></td></tr></table></figure><p>但是，如果我们将这些Docker镜像作为tar包文件备份到了本地，那么我们只要使用 docker load 命令，后面加上tar包的备份路径，就可以加载该Docker镜像了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker load -i ~/container-backup.tar</span></span><br></pre></td></tr></table></figure><p>现在，为了确保这些Docker镜像已经加载成功，我们来运行 docker images 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br></pre></td></tr></table></figure><p>在镜像被加载后，我们将用加载的镜像去运行Docker容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 80:80 container-backup</span></span><br></pre></td></tr></table></figure><h2 id="迁移Docker容器"><a href="#迁移Docker容器" class="headerlink" title="迁移Docker容器"></a>迁移Docker容器</h2><p>迁移容器同时涉及到了上面两个操作，备份和恢复。我们可以将任何一个Docker容器从一台机器迁移到另一台机器。在迁移过程中，首先我们将把容器备份为Docker镜像快照。然后，该Docker镜像或者是被推送到了Docker注册中心，或者被作为tar包文件保存到了本地。如果我们将镜像推送到了Docker注册中心，我们简单地从任何我们想要的机器上使用 docker run 命令来恢复并运行该容器。但是，如果我们将镜像打包成tar包备份到了本地，我们只需要拷贝或移动该镜像到我们想要的机器上，加载该镜像并运行需要的容器即可。</p><h1 id="Docker-SSH-访问"><a href="#Docker-SSH-访问" class="headerlink" title="Docker SSH 访问"></a>Docker SSH 访问</h1><p>假设我们已经pull了一个docker 镜像，如下图所示的tensorflow/tensorflow。</p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-tensorflow -it -p 8888:8888 -v ~/tensorflow:/<span class="built_in">test</span>/data tensorflow/tensorflow</span><br><span class="line"><span class="comment"># --name：创建的容器名，即my-tensorflow</span></span><br><span class="line"><span class="comment"># -it：保留命令行运行</span></span><br><span class="line"><span class="comment"># p 8888:8888：将本地的8888端口和http://localhost:8888/映射</span></span><br><span class="line"><span class="comment"># -v ~/tensorflow:/test/data:将本地的~/tensorflow挂载到容器内的/# test/data下</span></span><br><span class="line"><span class="comment"># tensorflow/tensorflow ：默认是tensorflow/tensorflow:latest,指定使用的镜像</span></span><br></pre></td></tr></table></figure></code></pre><p>如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name tf tensorflow/tensorflow /bin/bash</span><br><span class="line"><span class="comment"># 这样我们就创建了名为tf的容器</span></span><br><span class="line">docker start tf</span><br><span class="line">docker attach tf</span><br></pre></td></tr></table></figure><h2 id="修改容器的root密码"><a href="#修改容器的root密码" class="headerlink" title="修改容器的root密码"></a>修改容器的root密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vim -y</span><br><span class="line">apt-get install openssh-server -y</span><br><span class="line">apt-get install passwd</span><br><span class="line">passwd root</span><br></pre></td></tr></table></figure><h2 id="修改ssh配置"><a href="#修改ssh配置" class="headerlink" title="修改ssh配置"></a>修改ssh配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 修改PermitRootLogin yes  </span></span><br><span class="line">UsePAM no</span><br></pre></td></tr></table></figure><h2 id="启动ssh服务"><a href="#启动ssh服务" class="headerlink" title="启动ssh服务"></a>启动ssh服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="提交容器成为新的镜像"><a href="#提交容器成为新的镜像" class="headerlink" title="提交容器成为新的镜像"></a>提交容器成为新的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如叫做ubuntu-ssh，输入docker commit 容器ID ubuntu-ssh</span><br></pre></td></tr></table></figure><h2 id="启动这个镜像的容器，并映射本地的一个闲置的端口"><a href="#启动这个镜像的容器，并映射本地的一个闲置的端口" class="headerlink" title="启动这个镜像的容器，并映射本地的一个闲置的端口"></a>启动这个镜像的容器，并映射本地的一个闲置的端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 50001:22 tf-ssh /bin/bash</span><br></pre></td></tr></table></figure><h2 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@127.0.0.1 -p 50001</span><br></pre></td></tr></table></figure><h2 id="Docker后台运行"><a href="#Docker后台运行" class="headerlink" title="Docker后台运行"></a>Docker后台运行</h2><h1 id="阿里云加速器设置"><a href="#阿里云加速器设置" class="headerlink" title="阿里云加速器设置"></a>阿里云加速器设置</h1><p>由于官方Docker Hub网络速度较慢，这里使用阿里云提供的<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>. 需要配置阿里云加速器，官方说明如下：</p><ol><li><p>针对Docker客户端版本大于1.10的用户： </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</span></span><br><span class="line">$ sudo mkdir -p /etc/docker</span><br><span class="line">$ sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’ </span><br><span class="line">  &#123; </span><br><span class="line">  “registry-mirrors”: [“https://fird1mfg.mirror.aliyuncs.com“] </span><br><span class="line">  &#125; </span><br><span class="line">  EOF</span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>针对Docker客户的版本小于等于1.10的用户或者想配置启动参数，可以使用下面的命令将配置添加到docker daemon的启动参数中.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 12.04 14.04的用户:</span></span><br><span class="line">$ <span class="built_in">echo</span> “DOCKER_OPTS=/”<span class="variable">$DOCKER_OPTS</span> –registry-mirror=https://fird1mfg.mirror.aliyuncs.com/”” | sudo tee -a /etc/default/docker</span><br><span class="line">$ sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 15.04 16.04的用户</span></span><br><span class="line">$ sudo mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">$ sudo tee /etc/systemd/system/docker.service.d/mirror.conf &lt;&lt;-‘EOF’ </span><br><span class="line">[Service] </span><br><span class="line">ExecStart=/usr/bin/docker daemon -H fd:// –registry-mirror=https://fird1mfg.mirror.aliyuncs.com </span><br><span class="line">EOF</span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><h1 id="NVIDIA-Docker安装"><a href="#NVIDIA-Docker安装" class="headerlink" title="NVIDIA-Docker安装"></a><a href="https://github.com/NVIDIA/nvidia-docker/wiki" target="_blank" rel="noopener">NVIDIA-Docker</a>安装</h1><ol><li><p>Prerequisties</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GNU/Linux x86_64 with kernel version &gt; 3.10 </span><br><span class="line">Docker &gt;= 1.9 (official docker-engine, docker-ce or docker-ee only) </span><br><span class="line">NVIDIA GPU with Architecture &gt; Fermi (2.1) </span><br><span class="line">NVIDIA drivers &gt;= 340.29 with binary nvidia-modprobe (驱动版本与CUDA计算能力相关)</span><br></pre></td></tr></table></figure></li><li><p>CUDA与NVIDIA driver安装 <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">cuda</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">处理NVIDIA-Docker依赖项 NVIDIA drivers &gt;= 340.29 with binary nvidia-modprobe 要求. </span><br><span class="line">根据显卡，下载对应版本的CUDA并进行安装.</span><br></pre></td></tr></table></figure></li><li><p>NVIDIA-Docker安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Install nvidia-docker and nvidia-docker-plugin</span></span><br><span class="line"></span><br><span class="line">wget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker_1.0.1-1_amd64.deb</span><br><span class="line">sudo dpkg -i /tmp/nvidia-docker*.deb &amp;&amp; rm /tmp/nvidia-docker*.deb</span><br><span class="line"><span class="comment">#Test nvidia-smi</span></span><br><span class="line"></span><br><span class="line">sudo nvidia-docker run –rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>默认用nvdia-docker替代docker命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'alias docker=nvidia-docker'</span> &gt;&gt; ~/.bashrc</span><br><span class="line">bash</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://jingyan.baidu.com/article/a3aad71aa180e7b1fa009676.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/a3aad71aa180e7b1fa009676.html</a></li><li><a href="https://github.com/ufoym/deepo#Installation" target="_blank" rel="noopener">https://github.com/ufoym/deepo#Installation</a></li><li><a href="https://hub.docker.com/r/ufoym/deepo/" target="_blank" rel="noopener">https://hub.docker.com/r/ufoym/deepo/</a></li><li><a href="https://github.com/fatedier/frp/blob/master/README_zh.md#frp-%E7%9A%84%E4%BD%9C%E7%94%A8" target="_blank" rel="noopener">https://github.com/fatedier/frp/blob/master/README_zh.md#frp-%E7%9A%84%E4%BD%9C%E7%94%A8</a></li><li><a href="https://ranpox.github.io/2018/01/14/notification-of-gpu-server/" target="_blank" rel="noopener">https://ranpox.github.io/2018/01/14/notification-of-gpu-server/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 深度学习 </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python多线程教程</title>
      <link href="/2018/03/26/programmings/python/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/26/programmings/python/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么多线程"><a href="#什么多线程" class="headerlink" title="什么多线程"></a>什么多线程</h1><p>多线程是加速程序计算的有效方式</p><h2 id="添加线程-Thread"><a href="#添加线程-Thread" class="headerlink" title="添加线程 Thread"></a>添加线程 Thread</h2><ul><li>导入模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure><ul><li>获取已激活的线程数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threading.active_count()</span><br></pre></td></tr></table></figure><ul><li>查看所有线程信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threading.enumerate()</span><br></pre></td></tr></table></figure><ul><li>查看现在正在运行的线程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threading.current_thread()</span><br></pre></td></tr></table></figure><ul><li>添加线程</li></ul><p>threading.Thread()接收参数target代表这个线程要完成的任务，需自行定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'This is a thread of %s'</span> % threading.current_thread())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    thread = threading.Thread(target=thread_job,)   <span class="comment"># 定义线程 </span></span><br><span class="line">    thread.start()  <span class="comment"># 让线程开始工作</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="join-功能"><a href="#join-功能" class="headerlink" title="join 功能"></a>join 功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"T1 start\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>) <span class="comment"># 任务间隔0.1s</span></span><br><span class="line">    print(<span class="string">"T1 finish\n"</span>)</span><br><span class="line"></span><br><span class="line">added_thread = threading.Thread(target=thread_job, name=<span class="string">'T1'</span>)</span><br><span class="line">added_thread.start()</span><br><span class="line">print(<span class="string">"all done\n"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">thread_1.start() <span class="comment"># start T1</span></span><br><span class="line">thread_2.start() <span class="comment"># start T2</span></span><br><span class="line">thread_2.join() <span class="comment"># join for T2</span></span><br><span class="line">thread_1.join() <span class="comment"># join for T1</span></span><br><span class="line">print(<span class="string">"all done\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">T1 start</span></span><br><span class="line"><span class="string">T2 start</span></span><br><span class="line"><span class="string">T2 finish</span></span><br><span class="line"><span class="string">T1 finish</span></span><br><span class="line"><span class="string">all done</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="储存进程结果-Queue"><a href="#储存进程结果-Queue" class="headerlink" title="储存进程结果 Queue"></a>储存进程结果 Queue</h2><ul><li>导入线程,队列的标准模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br></pre></td></tr></table></figure><ul><li>定义一个被多线程调用的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(l,q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (len(l)):</span><br><span class="line">        l[i] = l[i]**<span class="number">2</span></span><br><span class="line">    q.put(l)   <span class="comment">#多线程调用的函数不能用return返回值</span></span><br></pre></td></tr></table></figure><p>完整的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(l,q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (len(l)):</span><br><span class="line">        l[i] = l[i]**<span class="number">2</span></span><br><span class="line">    q.put(l)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multithreading</span><span class="params">()</span>:</span></span><br><span class="line">    q =Queue()</span><br><span class="line">    threads = []</span><br><span class="line">    data = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        t = threading.Thread(target=job,args=(data[i],q))</span><br><span class="line">        t.start()</span><br><span class="line">        threads.append(t)</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        results.append(q.get())</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name___==<span class="string">'__main__'</span>:</span><br><span class="line">    multithreading()</span><br></pre></td></tr></table></figure><h2 id="线程锁-Lock"><a href="#线程锁-Lock" class="headerlink" title="线程锁 Lock"></a>线程锁 Lock</h2><ul><li>不使用 Lock 的情况</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> A</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        A+=<span class="number">1</span></span><br><span class="line">        print(<span class="string">'job1'</span>,A)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> A</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        A+=<span class="number">10</span></span><br><span class="line">        print(<span class="string">'job2'</span>,A)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">'__main__'</span>:</span><br><span class="line">    lock=threading.Lock()</span><br><span class="line">    A=<span class="number">0</span></span><br><span class="line">    t1=threading.Thread(target=job1)</span><br><span class="line">    t2=threading.Thread(target=job2)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">job1job2 <span class="number">11</span></span><br><span class="line">job2 <span class="number">21</span></span><br><span class="line">job2 <span class="number">31</span></span><br><span class="line">job2 <span class="number">41</span></span><br><span class="line">job2 <span class="number">51</span></span><br><span class="line">job2 <span class="number">61</span></span><br><span class="line">job2 <span class="number">71</span></span><br><span class="line">job2 <span class="number">81</span></span><br><span class="line">job2 <span class="number">91</span></span><br><span class="line">job2 <span class="number">101</span></span><br><span class="line"> <span class="number">1</span></span><br><span class="line">job1 <span class="number">102</span></span><br><span class="line">job1 <span class="number">103</span></span><br><span class="line">job1 <span class="number">104</span></span><br><span class="line">job1 <span class="number">105</span></span><br><span class="line">job1 <span class="number">106</span></span><br><span class="line">job1 <span class="number">107</span></span><br><span class="line">job1 <span class="number">108</span></span><br><span class="line">job1 <span class="number">109</span></span><br><span class="line">job1 <span class="number">110</span></span><br></pre></td></tr></table></figure><ul><li>使用 Lock 的情况</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> A,lock</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        A+=<span class="number">1</span></span><br><span class="line">        print(<span class="string">'job1'</span>,A)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> A,lock</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        A+=<span class="number">10</span></span><br><span class="line">        print(<span class="string">'job2'</span>,A)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">'__main__'</span>:</span><br><span class="line">    lock=threading.Lock()</span><br><span class="line">    A=<span class="number">0</span></span><br><span class="line">    t1=threading.Thread(target=job1)</span><br><span class="line">    t2=threading.Thread(target=job2)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">job1 <span class="number">1</span></span><br><span class="line">job1 <span class="number">2</span></span><br><span class="line">job1 <span class="number">3</span></span><br><span class="line">job1 <span class="number">4</span></span><br><span class="line">job1 <span class="number">5</span></span><br><span class="line">job1 <span class="number">6</span></span><br><span class="line">job1 <span class="number">7</span></span><br><span class="line">job1 <span class="number">8</span></span><br><span class="line">job1 <span class="number">9</span></span><br><span class="line">job1 <span class="number">10</span></span><br><span class="line">job2 <span class="number">20</span></span><br><span class="line">job2 <span class="number">30</span></span><br><span class="line">job2 <span class="number">40</span></span><br><span class="line">job2 <span class="number">50</span></span><br><span class="line">job2 <span class="number">60</span></span><br><span class="line">job2 <span class="number">70</span></span><br><span class="line">job2 <span class="number">80</span></span><br><span class="line">job2 <span class="number">90</span></span><br><span class="line">job2 <span class="number">100</span></span><br><span class="line">job2 <span class="number">110</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://morvanzhou.github.io/tutorials/python-basic/threading/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/python-basic/threading/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Python </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Numpy和Pandas教程</title>
      <link href="/2018/03/26/programmings/python/Python-Numpy%E5%92%8CPandas%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/26/programmings/python/Python-Numpy%E5%92%8CPandas%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-numpy和pandas"><a href="#安装-numpy和pandas" class="headerlink" title="安装 numpy和pandas"></a>安装 numpy和pandas</h1><p><a href="http://www.numpy.org/" target="_blank" rel="noopener">numpy</a> 和 <a href="https://pandas.pydata.org/" target="_blank" rel="noopener">pandas</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install numpy</span><br><span class="line">sudo pip install pandas</span><br></pre></td></tr></table></figure><h1 id="Numpy教程"><a href="#Numpy教程" class="headerlink" title="Numpy教程"></a>Numpy教程</h1><h2 id="Numpy-属性"><a href="#Numpy-属性" class="headerlink" title="Numpy 属性"></a>Numpy 属性</h2><ul><li>ndim：维度</li><li>shape：行数和列数</li><li>size：元素个数</li></ul><h2 id="Numpy-的创建-array"><a href="#Numpy-的创建-array" class="headerlink" title="Numpy 的创建 array"></a>Numpy 的创建 array</h2><ul><li>array：创建数组</li><li>dtype：指定数据类型</li><li>zeros：创建数据全为0</li><li>ones：创建数据全为1</li><li>empty：创建数据接近0</li><li>arrange：按指定范围创建数据</li><li>linspace：创建线段</li></ul><h2 id="Numpy-基础运算"><a href="#Numpy-基础运算" class="headerlink" title="Numpy 基础运算"></a>Numpy 基础运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])   <span class="comment"># array([10, 20, 30, 40])</span></span><br><span class="line">b=np.arange(<span class="number">4</span>)              <span class="comment"># array([0, 1, 2, 3])</span></span><br></pre></td></tr></table></figure><ul><li>减法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=a-b  <span class="comment"># array([10, 19, 28, 37])</span></span><br></pre></td></tr></table></figure><ul><li>加法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=a+b   <span class="comment"># array([10, 21, 32, 43])</span></span><br></pre></td></tr></table></figure><ul><li>乘法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=a*b   <span class="comment"># array([  0,  20,  60, 120])</span></span><br></pre></td></tr></table></figure><p>有所不同的是，在Numpy中，想要求出矩阵中各个元素的乘方需要依赖双星符号 **</p><ul><li>乘法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=b**<span class="number">2</span>  <span class="comment"># array([0, 1, 4, 9])</span></span><br></pre></td></tr></table></figure><ul><li>三角函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="number">10</span>*np.sin(a)  <span class="comment"># cos tan</span></span><br><span class="line"><span class="comment"># array([-5.44021111,  9.12945251, -9.88031624,  7.4511316 ])</span></span><br></pre></td></tr></table></figure><ul><li>逻辑判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(b&lt;<span class="number">3</span>)  </span><br><span class="line"><span class="comment"># array([ True,  True,  True, False], dtype=bool)</span></span><br></pre></td></tr></table></figure><p>上述运算均是建立在一维矩阵，即只有一行的矩阵上面的计算，如果我们想要对多行多维度的矩阵进行操作，需要对开始的脚本进行一些修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">b=np.arange(<span class="number">4</span>).reshape((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># array([[1, 1],</span></span><br><span class="line"><span class="comment">#       [0, 1]])</span></span><br><span class="line"></span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># array([[0, 1],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br></pre></td></tr></table></figure><p>此时构造出来的矩阵a和b便是2行2列的，其中 reshape 操作是对矩阵的形状进行重构， 其重构的形状便是括号中给出的数字。</p><ul><li>矩阵乘法运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c_dot = np.dot(a,b)</span><br><span class="line"><span class="comment"># array([[2, 4],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br><span class="line">c_dot_2 = a.dot(b)</span><br><span class="line"><span class="comment"># array([[2, 4],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br></pre></td></tr></table></figure><ul><li>特定运算<ul><li>求和：np.sum(A)</li><li>最小值：np.min(A)</li><li>最大值：np.max(A)</li><li>最小值索引：np.argmin(A)</li><li>最大值索引：np.argmax(A)</li><li>平均值：np.mean(A)</li><li>中位数：np.medium(A)</li><li>累加：np.cumsum(A)</li><li>累差：np.diff(A)</li><li>非零数：np.nonzero(A)</li><li>排序：np.sort(A)</li><li>矩阵反向（转置）：np.transpose(A)或A.T</li><li>截断：np.clip(A,5,9) # 小于5为5，大于9为9</li></ul></li></ul><h2 id="Numpy-索引"><a href="#Numpy-索引" class="headerlink" title="Numpy 索引"></a>Numpy 索引</h2><h3 id="一维索引"><a href="#一维索引" class="headerlink" title="一维索引"></a>一维索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span></span><br><span class="line">         </span><br><span class="line">print(A[<span class="number">3</span>])    <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h3 id="二维索引"><a href="#二维索引" class="headerlink" title="二维索引"></a>二维索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(A[<span class="number">1</span>][<span class="number">1</span>])      <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><p>这一脚本中的flatten是一个展开性质的函数，将多维的矩阵进行展开成1行的数列。而flat是一个迭代器，本身是一个object属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">         </span><br><span class="line">print(A.flatten())   </span><br><span class="line"><span class="comment"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A.flat:</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">……</span><br><span class="line"><span class="comment"># 14</span></span><br></pre></td></tr></table></figure><h2 id="Numpy-array-合并"><a href="#Numpy-array-合并" class="headerlink" title="Numpy array 合并"></a>Numpy array 合并</h2><ul><li>上下合并 - np.vstack()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">         </span><br><span class="line">print(np.vstack((A,B)))    <span class="comment"># vertical stack</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1,1,1]</span></span><br><span class="line"><span class="string"> [2,2,2]]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>左右合并 - np.hstack()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D = np.hstack((A,B))       <span class="comment"># horizontal stack</span></span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="comment"># [1,1,1,2,2,2]</span></span><br><span class="line"></span><br><span class="line">print(A.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,) (6,)</span></span><br></pre></td></tr></table></figure><ul><li>转置操作 - np.newaxis()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(A[np.newaxis,:])</span><br><span class="line"><span class="comment"># [[1 1 1]]</span></span><br><span class="line"></span><br><span class="line">print(A[np.newaxis,:].shape)</span><br><span class="line"><span class="comment"># (1,3)</span></span><br><span class="line"></span><br><span class="line">print(A[:,np.newaxis])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1]</span></span><br><span class="line"><span class="string">[1]</span></span><br><span class="line"><span class="string">[1]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(A[:,np.newaxis].shape)</span><br><span class="line"><span class="comment"># (3,1)</span></span><br></pre></td></tr></table></figure><p>此时我们便将具有3个元素的array转换为了1行3列以及3行1列的矩阵了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])[:,np.newaxis]</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])[:,np.newaxis]</span><br><span class="line">         </span><br><span class="line">C = np.vstack((A,B))   <span class="comment"># vertical stack</span></span><br><span class="line">D = np.hstack((A,B))   <span class="comment"># horizontal stack</span></span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string">[1 2]</span></span><br><span class="line"><span class="string">[1 2]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(A.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,1) (3,2)</span></span><br></pre></td></tr></table></figure><ul><li>合并操作需要针对多个矩阵或序列 - np.concatenate()</li></ul><p>当你的合并操作需要针对多个矩阵或序列时，借助concatenate函数可能会让你使用起来比前述的函数更加方便：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">C = np.concatenate((A,B,B,A),axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(C)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">D = np.concatenate((A,B,B,A),axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1, 2, 2, 1],</span></span><br><span class="line"><span class="string">       [1, 2, 2, 1],</span></span><br><span class="line"><span class="string">       [1, 2, 2, 1]])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>axis参数很好的控制了矩阵的纵向或是横向打印，相比较vstack和hstack函数显得更加方便。</p><h2 id="Numpy-array-分割"><a href="#Numpy-array-分割" class="headerlink" title="Numpy array 分割"></a>Numpy array 分割</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(A)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3],</span></span><br><span class="line"><span class="string">    [ 4,  5,  6,  7],</span></span><br><span class="line"><span class="string">    [ 8,  9, 10, 11]])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>纵向分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(np.split(A, <span class="number">2</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">        [4, 5],</span></span><br><span class="line"><span class="string">        [8, 9]]), array([[ 2,  3],</span></span><br><span class="line"><span class="string">        [ 6,  7],</span></span><br><span class="line"><span class="string">        [10, 11]])]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>横向分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(np.split(A, <span class="number">3</span>, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br></pre></td></tr></table></figure><ul><li>错误的分割 </li></ul><p>范例的Array只有4列，只能等量对分，因此输入以上程序代码后Python就会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(np.split(A, <span class="number">3</span>, axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ValueError: array split does not result in an equal division</span></span><br></pre></td></tr></table></figure><ul><li>不等量的分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(np.array_split(A, <span class="number">3</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">        [4, 5],</span></span><br><span class="line"><span class="string">        [8, 9]]), array([[ 2],</span></span><br><span class="line"><span class="string">        [ 6],</span></span><br><span class="line"><span class="string">        [10]]), array([[ 3],</span></span><br><span class="line"><span class="string">        [ 7],</span></span><br><span class="line"><span class="string">        [11]])]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>其他的分割方式</li></ul><p>在Numpy里还有np.vsplit()与横np.hsplit()方式可用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">print(np.vsplit(A, <span class="number">3</span>)) <span class="comment">#等于 print(np.split(A, 3, axis=0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(np.hsplit(A, <span class="number">2</span>)) <span class="comment">#等于 print(np.split(A, 2, axis=1))</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">       [4, 5],</span></span><br><span class="line"><span class="string">       [8, 9]]), array([[ 2,  3],</span></span><br><span class="line"><span class="string">        [ 6,  7],</span></span><br><span class="line"><span class="string">        [10, 11]])]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="Numpy-copy-amp-deep-copy"><a href="#Numpy-copy-amp-deep-copy" class="headerlink" title="Numpy copy &amp; deep copy"></a>Numpy copy &amp; deep copy</h2><ul><li>copy() 的赋值方式没有关联性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = a.copy()    <span class="comment"># deep copy</span></span><br><span class="line">print(b)        <span class="comment"># array([11, 22, 33,  3])</span></span><br><span class="line">a[<span class="number">3</span>] = <span class="number">44</span></span><br><span class="line">print(a)        <span class="comment"># array([11, 22, 33, 44])</span></span><br><span class="line">print(b)        <span class="comment"># array([11, 22, 33,  3])</span></span><br></pre></td></tr></table></figure><h1 id="Pandas-教程"><a href="#Pandas-教程" class="headerlink" title="Pandas 教程"></a>Pandas 教程</h1><h2 id="Numpy-和-Pandas-有什么不同"><a href="#Numpy-和-Pandas-有什么不同" class="headerlink" title="Numpy 和 Pandas 有什么不同"></a>Numpy 和 Pandas 有什么不同</h2><p>如果用 python 的列表和字典来作比较, 那么可以说 Numpy 是列表形式的，没有数值标签，而 Pandas 就是字典形式。Pandas是基于Numpy构建的，让Numpy为中心的应用变得更加简单。</p><ul><li>Series</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,np.nan,<span class="number">44</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(s)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0     1.0</span></span><br><span class="line"><span class="string">1     3.0</span></span><br><span class="line"><span class="string">2     6.0</span></span><br><span class="line"><span class="string">3     NaN</span></span><br><span class="line"><span class="string">4    44.0</span></span><br><span class="line"><span class="string">5     1.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>Series的字符串表现形式为：索引在左边，值在右边。由于我们没有为数据指定索引。于是会自动创建一个0到N-1（N为长度）的整数型索引。</p><ul><li>DataFrame</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dates = pd.date_range(<span class="string">'20160101'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>),index=dates,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">                   a         b         c         d</span></span><br><span class="line"><span class="string">2016-01-01 -0.253065 -2.071051 -0.640515  0.613663</span></span><br><span class="line"><span class="string">2016-01-02 -1.147178  1.532470  0.989255 -0.499761</span></span><br><span class="line"><span class="string">2016-01-03  1.221656 -2.390171  1.862914  0.778070</span></span><br><span class="line"><span class="string">2016-01-04  1.473877 -0.046419  0.610046  0.204672</span></span><br><span class="line"><span class="string">2016-01-05 -1.584752 -0.700592  1.487264 -1.778293</span></span><br><span class="line"><span class="string">2016-01-06  0.633675 -1.414157 -0.277066 -0.442545</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>DataFrame是一个表格型的数据结构，它包含有一组有序的列，每列可以是不同的值类型（数值，字符串，布尔值等）。DataFrame既有行索引也有列索引， 它可以被看做由Series组成的大字典。</p><ul><li>DataFrame 的一些简单运用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(df[<span class="string">'b'</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">2016-01-01   -2.071051</span></span><br><span class="line"><span class="string">2016-01-02    1.532470</span></span><br><span class="line"><span class="string">2016-01-03   -2.390171</span></span><br><span class="line"><span class="string">2016-01-04   -0.046419</span></span><br><span class="line"><span class="string">2016-01-05   -0.700592</span></span><br><span class="line"><span class="string">2016-01-06   -1.414157</span></span><br><span class="line"><span class="string">Freq: D, Name: b, dtype: float64</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>我们在创建一组没有给定行标签和列标签的数据 df1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line">print(df1)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">   0  1   2   3</span></span><br><span class="line"><span class="string">0  0  1   2   3</span></span><br><span class="line"><span class="string">1  4  5   6   7</span></span><br><span class="line"><span class="string">2  8  9  10  11</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>默认的从0开始 index. 还有一种生成 df 的方法, 如下 df2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'A'</span> : <span class="number">1.</span>,</span><br><span class="line">                    <span class="string">'B'</span> : pd.Timestamp(<span class="string">'20130102'</span>),</span><br><span class="line">                    <span class="string">'C'</span> : pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">                    <span class="string">'D'</span> : np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">                    <span class="string">'E'</span> : pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</span><br><span class="line">                    <span class="string">'F'</span> : <span class="string">'foo'</span>&#125;)</span><br><span class="line">                    </span><br><span class="line">print(df2)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">     A          B    C  D      E    F</span></span><br><span class="line"><span class="string">0  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">1  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">2  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">3  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>这种方法能对每一列的数据进行特殊对待. 如果想要查看数据中的类型, 我们可以用 dtype 这个属性:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(df2.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">df2.dtypes</span></span><br><span class="line"><span class="string">A           float64</span></span><br><span class="line"><span class="string">B    datetime64[ns]</span></span><br><span class="line"><span class="string">C           float32</span></span><br><span class="line"><span class="string">D             int32</span></span><br><span class="line"><span class="string">E          category</span></span><br><span class="line"><span class="string">F            object</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>如果想看对列的序号:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(df2.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Int64Index([0, 1, 2, 3], dtype='int64')</span></span><br></pre></td></tr></table></figure><p>同样, 每种数据的名称也能看到:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(df2.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Index(['A', 'B', 'C', 'D', 'E', 'F'], dtype='object')</span></span><br></pre></td></tr></table></figure><p>果只想看所有df2的值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(df2.values)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],</span></span><br><span class="line"><span class="string">       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo'],</span></span><br><span class="line"><span class="string">       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],</span></span><br><span class="line"><span class="string">       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo']], dtype=object)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>想知道数据的总结, 可以用 describe():</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df2.describe()</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">         A    C    D</span></span><br><span class="line"><span class="string">count  4.0  4.0  4.0</span></span><br><span class="line"><span class="string">mean   1.0  1.0  3.0</span></span><br><span class="line"><span class="string">std    0.0  0.0  0.0</span></span><br><span class="line"><span class="string">min    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">25%    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">50%    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">75%    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">max    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>如果想翻转数据, transpose:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">print(df2.T)</span><br><span class="line"></span><br><span class="line"><span class="string">"""                   </span></span><br><span class="line"><span class="string">0                    1                    2  \</span></span><br><span class="line"><span class="string">A                    1                    1                    1   </span></span><br><span class="line"><span class="string">B  2013-01-02 00:00:00  2013-01-02 00:00:00  2013-01-02 00:00:00   </span></span><br><span class="line"><span class="string">C                    1                    1                    1   </span></span><br><span class="line"><span class="string">D                    3                    3                    3   </span></span><br><span class="line"><span class="string">E                 test                train                 test   </span></span><br><span class="line"><span class="string">F                  foo                  foo                  foo   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                     3  </span></span><br><span class="line"><span class="string">A                    1  </span></span><br><span class="line"><span class="string">B  2013-01-02 00:00:00  </span></span><br><span class="line"><span class="string">C                    1  </span></span><br><span class="line"><span class="string">D                    3  </span></span><br><span class="line"><span class="string">E                train  </span></span><br><span class="line"><span class="string">F                  foo  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>如果想对数据的 index 进行排序并输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(df2.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">     F      E  D    C          B    A</span></span><br><span class="line"><span class="string">0  foo   test  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">1  foo  train  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">2  foo   test  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">3  foo  train  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">如果是对数据 值 排序输出:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">print(df2.sort_values(by=<span class="string">'B'</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">     A          B    C  D      E    F</span></span><br><span class="line"><span class="string">0  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">1  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">2  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">3  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/3-1-pd-intro/" target="_blank" rel="noopener">Pandas 基本介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux入门教程</title>
      <link href="/2018/03/25/programmings/linux/linux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/25/programmings/linux/linux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux入门教程"><a href="#Linux入门教程" class="headerlink" title="Linux入门教程"></a>Linux入门教程</h1><h2 id="SSH-远程连接-Linux"><a href="#SSH-远程连接-Linux" class="headerlink" title="SSH 远程连接 Linux"></a>SSH 远程连接 Linux</h2><h3 id="Linux端配置"><a href="#Linux端配置" class="headerlink" title="Linux端配置"></a>Linux端配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>查看IP地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></p><h3 id="Mac端配置"><a href="#Mac端配置" class="headerlink" title="Mac端配置"></a>Mac端配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@IP地址 <span class="comment">#输入密码确认</span></span><br></pre></td></tr></table></figure><h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><p>Mac端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f <span class="built_in">test</span> -C <span class="string">"test-key"</span> <span class="comment"># 一直回车</span></span><br><span class="line">cat test.pub <span class="comment"># 查看公钥内容</span></span><br></pre></td></tr></table></figure><p>配置公钥到服务器：将公钥内容添加到服务器的~/.ssh/authorized_keys 文件中.</p><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp   /home/yourname/.ssh/authorized_keys yourname@192.168.38.58:/home/yourname/.ssh/</span><br></pre></td></tr></table></figure><p>alias 实现命令快速登陆：做好配置之后，通过ssh可以直接登录了。对经常登录的服务器，可以将ssh登录命令的alias加到 ~/.bash_profile文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.bash_profile | grep 101</span><br><span class="line"><span class="built_in">alias</span> to-101=<span class="string">'ssh huqiu@192.168.154.101'</span></span><br></pre></td></tr></table></figure><p>登录的时候:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ to-101</span><br></pre></td></tr></table></figure><p>无法登录一般的原因：</p><ul><li><p>客户端的私钥和公钥文件位置必须位于 ~/.ssh 下。</p></li><li><p>确保双方 ~/.ssh 目录，父目录，公钥私钥，authorized_keys 文件的权限对当前用户至少要有执行权限，对其他用户最多只能有执行权限。</p></li><li><p>注意git登录，要求对公钥和私钥以及config文件，其他用户不能有任何权限。</p></li><li><p>服务器端 ~/.ssh/authorized_keys 文件名确保没错 :).</p></li></ul><p>ssh-copy-id：ssh-copy-id 是一个小脚本，你可以用这个小脚本完成以上工作。这个脚本在linux系统上一般都有。</p><p><a href="https://www.liaohuqiu.net/cn/posts/ssh-keygen-abc/" target="_blank" rel="noopener">ssh-keygen 基本用法</a></p><p>1) 使用 ssh-keygen 时，请先进入到 ~/.ssh 目录，不存在的话，请先创建。并且保证 ~/.ssh 以及所有父目录的权限不能大于 711</p><p>2) 使用 ssh-kengen 会在~/.ssh/目录下生成两个文件，不指定文件名和密钥类型的时候，默认生成的两个文件是：</p><ul><li>id_rsa</li><li>id_rsa.pub</li></ul><p>第一个是私钥文件，第二个是公钥文件。</p><p>生成ssh key的时候，可以通过 -f 选项指定生成文件的文件名，如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f <span class="built_in">test</span>   -C <span class="string">"test key"</span> <span class="comment"># test - 文件名，"test key" - 备注</span></span><br></pre></td></tr></table></figure><h3 id="SSH-config"><a href="#SSH-config" class="headerlink" title="SSH config"></a>SSH config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host example                       <span class="comment"># 关键词</span></span><br><span class="line">HostName example.com           <span class="comment"># 主机地址</span></span><br><span class="line">User root                      <span class="comment"># 用户名</span></span><br><span class="line">IdentityFile ~/.ssh/id_ecdsa <span class="comment"># 认证文件</span></span><br><span class="line">Port 22                      <span class="comment"># 指定端口</span></span><br><span class="line">ControlMaster auto</span><br><span class="line">ControlPath /tmp/%r@%h:%p</span><br></pre></td></tr></table></figure><h1 id="OpenCV3-1配置"><a href="#OpenCV3-1配置" class="headerlink" title="OpenCV3.1配置"></a>OpenCV3.1配置</h1><h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line"><span class="comment"># 必须的，gcc编译环境</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"><span class="comment"># 必须的,包括cmake等工具</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br><span class="line"><span class="comment"># 可选的，看个人需要，总共5M左右</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install libv4l-dev</span><br></pre></td></tr></table></figure><h2 id="下载-源码"><a href="#下载-源码" class="headerlink" title="下载 源码"></a>下载 源码</h2><p><a href="https://opencv.org/releases.html" target="_blank" rel="noopener">OpenCV</a></p><p>或着用git clone：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv310</span><br><span class="line">    <span class="comment"># opencv310为自己建的，源码将放在这里</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Itseez/opencv.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Itseez/opencv_contrib.git</span><br></pre></td></tr></table></figure><h2 id="CMake-Opencv源码"><a href="#CMake-Opencv源码" class="headerlink" title="CMake Opencv源码"></a>CMake Opencv源码</h2><p>建立一个编译目录（例如：/build）把cmake后的文件都放在这里边。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv</span><br><span class="line">mkdir build  //建立一个build目录，把cmake的文件都放着里边</span><br><span class="line"><span class="built_in">cd</span> build　　　//进入build目录</span><br></pre></td></tr></table></figure><p>cmake时ippicv_linux_20151201.tgz总是不能成功下载，故cmake之前将./downloads/linux-808b791a6eac9ed78d32a7666804320e 文件拷贝至./opencv-3.1.0/3rdparty/ippicv/ 路径下(先执行一次cmake 命令生成文件路径，在将ippicv_linux_20151201.tgz复制进去) ippicv_linux_20151201.tgz下载链接:链接: <a href="https://pan.baidu.com/s/1jBBPxXX_NqCodS5bAln4-g" target="_blank" rel="noopener">https://pan.baidu.com/s/1jBBPxXX_NqCodS5bAln4-g</a> 密码: x4sn</p><p>然后开始cmake，这里需要注意几个cmake的参数，比较重要。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> WITH_LIBV4L=ON ..</span><br></pre></td></tr></table></figure><p>切记最后’..’两个点之前要加空格！！</p><h2 id="把代码编译成可执行文件"><a href="#把代码编译成可执行文件" class="headerlink" title="把代码编译成可执行文件"></a>把代码编译成可执行文件</h2><p>这里官方推荐使用多进程编译，推荐七个进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j7 <span class="comment"># 并行运行七个jobs，这一步也在build目录中进行</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">如果你要在python下运行opencv库的情况下，那就必须安装安装python-opencv</span><br><span class="line">sudo apt-get install python-opencv</span><br></pre></td></tr></table></figure><h2 id="配置库文件路径"><a href="#配置库文件路径" class="headerlink" title="配置库文件路径"></a>配置库文件路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">'echo "/usr/local/lib" &gt; /etc/ld.so.conf.d/opencv.conf'</span></span><br><span class="line"><span class="comment">#或者直接打开/etc/ld.so.conf.d/opencv.conf，添加/usr/local/lib</span></span><br><span class="line"><span class="comment">#使配置生效</span></span><br><span class="line">sudo  ldconfig(重要)</span><br></pre></td></tr></table></figure><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim/etc/bash.bashrc   </span><br><span class="line"><span class="comment">#在最后加入以下两行代码</span></span><br><span class="line">PKG_CONFIG_PATH=<span class="variable">$PKG_CONFIG_PATH</span>:/usr/<span class="built_in">local</span>/lib/pkgconfig </span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH  </span><br><span class="line"><span class="comment">#使配置生效</span></span><br><span class="line">sudo <span class="built_in">source</span> /etc/bash.bashrc </span><br><span class="line">（该步骤可能会报错找不到命令，原因是<span class="built_in">source</span>为root命令</span><br><span class="line">su（进入root权限）</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg-config --modversion opencv</span><br><span class="line">pkg-config --cflags opencv</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>我是用python+opencv的，我这里直接运行opencv自带的python的例子程序，TX1自带摄像头不能用，需要使用外接USB摄像头，插入USB接口即可，无需安装驱动，也无需改动测试代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;opencv3.1.0_dir&gt;/samples/python/</span><br><span class="line">python video.py</span><br><span class="line">python edge.py</span><br><span class="line">python facedetect.py</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.liaohuqiu.net/cn/posts/ssh-public-key-auto-login/" target="_blank" rel="noopener">https://www.liaohuqiu.net/cn/posts/ssh-public-key-auto-login/</a></li><li><a href="https://blog.csdn.net/asukasmallriver/article/details/72927860" target="_blank" rel="noopener">https://blog.csdn.net/asukasmallriver/article/details/72927860</a></li><li><a href="https://blog.csdn.net/u011440558/article/details/78358447" target="_blank" rel="noopener">https://blog.csdn.net/u011440558/article/details/78358447</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Linux </category>
          
          <category> 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/2018/03/24/categories/"/>
      <url>/2018/03/24/categories/</url>
      
        <content type="html"><![CDATA[<h1 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h1><ul><li><p><font color="“blue”"><strong>编程: programming</strong></font></p><ul><li>C++</li><li>Java</li><li>Python</li><li>Matlab</li><li>Android</li><li>Linux</li><li>Git</li><li>Latex</li><li>PHP</li><li>IOS</li><li>数据库</li><li>网络编程</li><li>多线程</li><li>QT编程</li><li>MarkDown</li><li>DP<ul><li>Caffe</li><li>TF</li><li>PyTorch</li></ul></li><li>数据结构</li><li>算法</li></ul></li><li><p><font color="“blue”"><strong>学术: science</strong></font></p><ul><li>计算机视觉<ul><li>ICCV</li><li>CVPR</li><li>ECCV</li></ul></li><li>移动计算<ul><li>MobiCom</li><li>SigComm</li><li>InfoCom</li><li>NSDI</li><li>SenSys</li><li>PerCom</li><li>UbiComp</li></ul></li><li>机器学习&amp;深度学习<ul><li>AAAI</li><li>IJCAI</li></ul></li></ul></li><li><p><font color="“blue”"><strong>理论: theory</strong></font></p><ul><li>计算机视觉</li><li>移动计算</li><li>数学</li><li>优化算法</li><li>机器学习</li></ul></li><li><p><font color="“blue”"><strong>其他: other</strong></font></p><ul><li>Hexo博客</li><li>生活</li></ul></li></ul><h1 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h1><ul><li>论文</li><li>理论</li><li>其他</li><li>等等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> categories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> categories </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo+github免费搭建个人博客</title>
      <link href="/2018/03/04/others/%E5%9F%BA%E4%BA%8EHexo+GitHub%20Pages%20%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/03/04/others/%E5%9F%BA%E4%BA%8EHexo+GitHub%20Pages%20%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hexo简介"><a href="#1-Hexo简介" class="headerlink" title="1. Hexo简介"></a>1. Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我们选用的是GitHub。Hexo同时也是GitHub上的开源项目，参见：<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexojs/hexo</a> 如果想要更加全面的了解Hexo，可以到其官网 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h1 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h1><h2 id="2-1-本机环境配置"><a href="#2-1-本机环境配置" class="headerlink" title="2.1 本机环境配置"></a>2.1 本机环境配置</h2><ol><li><p>安装Node.js</p><p> 下载<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>,注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v. 检测npm是否安装成功，在命令行中输入npm -v</p></li><li><p>安装Hexo</p></li></ol><ul><li><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中,使用npm命令安装Hexo，输入：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo <span class="comment">#等待一会就会完成下载安装。</span></span><br><span class="line">hexo init <span class="comment">#该命令会在目标文件夹内建立网站所需要的所有文件</span></span><br><span class="line">npm install <span class="comment">#安装依赖包</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>到这里本地博客就搭建好了。执行以下命令（在你博客的对应文件夹路径下）:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment"># Or hexo g</span></span><br><span class="line">hexo server   <span class="comment"># Or hexo s</span></span><br></pre></td></tr></table></figure></li><li><p>在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以进行查看了。当然这个博客是本地的，别人是无法访问的，之后我们需要部署到GitHub上。常用的Hexo 命令:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g <span class="comment">#安装Hexo</span></span><br><span class="line">npm update hexo -g <span class="comment">#升级</span></span><br><span class="line">hexo init <span class="comment">#初始化博客</span></span><br><span class="line"><span class="comment"># 命令简写</span></span><br><span class="line">hexo n <span class="string">"我的博客"</span> == hexo new <span class="string">"我的博客"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo g == hexo generate <span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#部署</span></span><br><span class="line">hexo server <span class="comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-git环境配置"><a href="#2-2-git环境配置" class="headerlink" title="2.2 git环境配置"></a>2.2 git环境配置</h2><ol><li><p>注册Github账号并新建仓库</p><ul><li>注册过程就不多说了，注册完成之后需要新建一个仓库。需要注意的是新创建的仓库的名字，必须是username.github.io。例如我的username是XXX，那么新创建的仓库的名字便是XXX.github.io。</li></ul></li><li><p>配置SSH Key</p></li></ol><ul><li><p>这一步不是必须的，配置SSH Key的话之后每次更新博客就不用都输入用户名和密码，可以方便一些。</p><p>  (1)检查本机上是否已经存在SSH Key。打开终端，输入如下命令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">ls -la</span><br></pre></td></tr></table></figure><p>  检查终端输出的文件列表中是否已经存在id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，则直接进入第三步。</p><p>  (2)创建一个SSH Key。在终端输入如下命令:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><pre><code>  按下回车，让你输入文件名，直接回车会创建使用默认文件名的文件(推荐使用默认文件名)，然后会提示你输入两次密码，可以为空。</code></pre><p>  (3)添加SSH Key到Github</p><pre><code>  如果你没有指定文件名（也就是使用的默认文件名），那么你的.ssh文件夹下，应该有一个id_rsa.pub文件了，打开该文件，复制里面的文本。然后登录Github，点击右上角头像右边的三角图标，点击Settings，然后在左边菜单栏点击SSH and GPG keys，点击New SSH key，Title 随便填一个，在Key栏填入你复制的内容，点击Add SSH key，就添加成功了。</code></pre><p>  (4)检验SSH Key是否配置成功。在终端输入如下命令:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ul><pre><code>    如果出现:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure>    请输入yes再按回车。如果最后出现:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>    就说明你的SSH Key配置成功了。</code></pre><h2 id="2-3-同步本地博客到Github"><a href="#2-3-同步本地博客到Github" class="headerlink" title="2.3 同步本地博客到Github"></a>2.3 同步本地博客到Github</h2><ol><li><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为站点配置文件.</p></li><li><p>我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">type: git</span><br><span class="line">repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</span><br><span class="line">branch: master参考如下：</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>例子：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repo: https://github.com/xiaoqiangteng/xiaoqiangteng.github.io.git</span><br><span class="line">brabch: master</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>保存站点配置文件。其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>这时，我们分别输入三条命令：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><pre><code>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径</code></pre><ol><li><p>发布新的博客</p><ul><li><p>既然博客已经搭建好了，那么不发几篇博文有就没有意义了，使用下面的命令来新建一篇叫做”brightloong”的文章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">'brightloong'</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>- 命令执行之后，你会在你文件博客根目录的source/_post目录下找到你刚刚新建的md后缀的文件，hexo博客是使用markdown语法来书写的，如果不熟悉markdown语法可以快速的看一下[markdown](https://www.appinn.com/markdown/)语法说明.&gt; 注意：在冒号后面一定要加上一个空格，否则在生成静态文件的时候会报错，并且也不能将其成功推送到github。<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: brightloong #文章标题</span><br><span class="line">date: 2017-02-24 12:03:12 #创建时间</span><br><span class="line">tags: #文章标签，如果有多个标签可以使用[1,2,3]的形式，还有其他形式自己摸索吧</span><br><span class="line">---</span><br><span class="line"><span class="section">#这之后是正文</span></span><br></pre></td></tr></table></figure>- 文章编写好之后，只用以下命令生成静态文件并推送到github上，执行完成后打开自己的博客页面，是不是发现刚刚编写的文章出现了；如果你想删除某一篇文章，那么在source/_post目录下找到对应的文章将其删除后，同样执行一下命令就OK了。</code></pre><ol><li><p>站点配置文件_config.yml</p><ul><li><p>站点配置文件_config.yml是在你博客保存目录的根目录下，注意将它与主题配置文件进行区分，我使用的主题是Next主题。下面我先介绍下站点配置文件，我将一些主要的配置做了注释，如果你想了解更多的配置的含义和作用，请访问<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">Hexo官方教程</a>查看。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">BrightLoong's</span> <span class="string">Blog</span> <span class="comment">#博客的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment">#子标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Remember</span> <span class="string">what</span> <span class="string">should</span> <span class="string">be</span> <span class="string">remembered,</span> <span class="string">and</span> <span class="string">forget</span> <span class="string">what</span> <span class="string">should</span> <span class="string">be</span> <span class="string">forgotten.Alter</span> <span class="string">what</span> <span class="string">is</span> <span class="string">changeable,</span> <span class="string">and</span> <span class="string">accept</span> <span class="string">what</span> <span class="string">is</span> <span class="string">mutable.</span> <span class="comment">#博客描述，可以是一段你喜欢的话，也可以是你博客的描述，只要你开心就好。</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">BrightLoong</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment">#语言（我使用的是简体中文）</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="comment">#时区（默认使用电脑时间）</span></span><br><span class="line"><span class="comment">##之下的保持默认就好，没有什么需要更改的</span></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' #and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://brightloong.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span> <span class="comment">#source目录</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span> <span class="comment">#标签目录</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span> </span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span> <span class="comment">#分类目录</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">static/**</span> <span class="comment">#注意这个属性（跳过渲染），你暂时不用配置，我之后会讲到，这个也是我遇到的坑</span></span><br><span class="line"><span class="comment">##之下的保持默认就好，没有什么需要更改的</span></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment">#你设置的主题，接下来我会说到这个</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/BrightLoong/BrightLoong.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="3-设置专属域名"><a href="#3-设置专属域名" class="headerlink" title="3. 设置专属域名"></a>3. 设置专属域名</h1><p>博客搭建好后，我们可以通过之前设置好的GitHub仓库地址来访问，比如：<a href="http://XXX.github.io，而且GitHub是免费替我们托管的的，如果我们想要设置自己的专属的域名，我们可以去阿里云购买域名，我们点击添加记录，设置主机记录为@，类型为A，到IP" target="_blank" rel="noopener">http://XXX.github.io，而且GitHub是免费替我们托管的的，如果我们想要设置自己的专属的域名，我们可以去阿里云购买域名，我们点击添加记录，设置主机记录为@，类型为A，到IP</a> 192.30.252.153（固定值）。按照如上设置完成之后， 可能不会立即生效，等个几分钟，在./source目录下新建文件CNAME（没有后缀名），文件中写上我们要绑定的域名，例如: XXX.com.部署到GitHub上。这时就可以通过<a href="http://XXX.com访问。" target="_blank" rel="noopener">http://XXX.com访问。</a></p><p>GitHub Pages默认是支持https的，即我们可通常<a href="https://XXX.github.io来访问博客。如果想要实现自定义域名访问，需要将自定义域名正确解析到XXX.github.io中。" target="_blank" rel="noopener">https://XXX.github.io来访问博客。如果想要实现自定义域名访问，需要将自定义域名正确解析到XXX.github.io中。</a></p><h1 id="4-Hexo配置"><a href="#4-Hexo配置" class="headerlink" title="4. Hexo配置"></a>4. Hexo配置</h1><h2 id="4-1-主题设置"><a href="#4-1-主题设置" class="headerlink" title="4.1 主题设置"></a>4.1 主题设置</h2><p>搭建自己的博客，最吸引人的莫过于那千变万化的主题了，大家可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网</a>上看到无数漂亮、大方、简洁的主题。本人使用的是简洁的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next主题</a>，你可以选择你喜欢的下载下来，将其解压放入themes目录中，比如我的目录是.\themes，然后修改我在上面提到的站点配置文件中的theme属性，为你刚刚放入themes目录中文件的名字（最好是对解压文件修改一个名字，否则名字可能会比较长，我把我下载下来的主题改文了next）,做完这些之后并不代表你完成了，你还需要参考你所下载的主题所说的配置步骤进行相关的配置，由于不同的主题配置过程也尽不相同，大家根据自己下载的主题去配置，我在这里只说我使用的Next主题如何配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：从下面开始所说的都是Next主题的相关配置。</p></blockquote><p>如果你使用的和我一样，也是Next的主题，那么你最好还是看官方提供<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next使用文档</a>，并且文档是中文版的,我也仅仅是讲一些容易被忽略的配置，以及我使用的配置，以及在使用过程中遇到的问题;至于如何更换头像，添加分类和标签页面、切换主题样式（Next主题包含3中样式）之类的，大家还是照着官方的做更好。</p><ol><li><p>配置网站图标 </p><p> 如何让网站前能显示自己想要的图标，我当时也是找了很久，最后发现是在主题配置文件（我的是F:\myblog\themes\next_config.yml）的最前面，有一个favicon属性，我把一个名字叫favicon.ico的图片放到了F:\myblog\source下，然后配置如下：</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>首页显示阅读全文按钮</p><p> 首页的文章是不是默认展开了，显示出了整篇文章，怎么才能显示出如下的阅读全文的按钮。在主题配置文件中找到auto_excerpt属性进行配置:</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#改写为true</span></span><br><span class="line"><span class="attr">   length:</span> <span class="number">150</span> <span class="comment">#默认展示的高度</span></span><br></pre></td></tr></table></figure></li></ol><pre><code>你也可以在自己的博文中添加\&lt;!--more--&gt;来决定在首页展示到什么位置（我就喜欢用这种方式），这个标签后的内容就不会展示到首页啦。</code></pre><h2 id="4-2-修改文章内链接文本样式"><a href="#4-2-修改文章内链接文本样式" class="headerlink" title="4.2 修改文章内链接文本样式"></a>4.2 修改文章内链接文本样式</h2><p>修改文件 themes\next\source\css_common\components\post\post.styl，在末尾添加如下css样式，：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><h2 id="4-3-字数统计和阅读时长设置"><a href="#4-3-字数统计和阅读时长设置" class="headerlink" title="4.3 字数统计和阅读时长设置"></a>4.3 字数统计和阅读时长设置</h2><ul><li>安装插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><ul><li>然后修改主题配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">    separated_meta: <span class="literal">true</span>   ＃显示属性名称,设为<span class="literal">false</span>后只显示图标和统计数字,不显示属性的文字</span><br><span class="line">    item_text_post: <span class="literal">true</span>   ＃显示属性名称,设为<span class="literal">false</span>后只显示图标和统计数字,不显示属性的文字</span><br><span class="line">    item_text_total: <span class="literal">true</span> ＃底部footer是否显示字数统计属性文字(如站点总字数,站点阅读时长 ≈ 1 分钟)</span><br><span class="line">    awl: 4     ＃计算字数的一个设置,没设置过</span><br><span class="line">    wpm: 275  ＃一分钟阅读的字数</span><br></pre></td></tr></table></figure><ul><li><p>站点配置文件中添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line"> <span class="comment">#文章内是否显示</span></span><br><span class="line">  symbols: <span class="literal">true</span></span><br><span class="line">  time: <span class="literal">true</span></span><br><span class="line"> <span class="comment"># 网页底部是否显示</span></span><br><span class="line">  total_symbols: <span class="literal">true</span></span><br><span class="line">  total_time: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-4-添加站点访问计数"><a href="#4-4-添加站点访问计数" class="headerlink" title="4.4 添加站点访问计数"></a>4.4 添加站点访问计数</h2><ul><li><p>安装脚本</p><p>打开 <strong>themes/next/layout/_partial/footer.swig</strong>，将下面这段代码添加到里面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;script async src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;span id=<span class="string">"busuanzi_container_site_pv"</span> style=<span class="string">'display:none'</span>&gt;</span><br><span class="line">    本站总访问量 &lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;&lt;/span&gt; 次</span><br><span class="line">    &lt;span class=<span class="string">"post-meta-divider"</span>&gt;|&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span id=<span class="string">"busuanzi_container_site_uv"</span> style=<span class="string">'display:none'</span>&gt;</span><br><span class="line">    有&lt;span id=<span class="string">"busuanzi_value_site_uv"</span>&gt;&lt;/span&gt;人看过我的博客啦</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>插入的位置：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-28-153017.png" alt="image-20190728233014614"></p></li></ul><ul><li>打开 <strong>themes/next/layout/post.swig</strong>，这个文件是文章的模板，给render方法传入参数（对应刚才添加的<code>is_pv</code>字段）</li></ul><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-28-153306.png" alt="image-20190728233304559"></p><ul><li><p>再打开 <strong>themes/next/layout/index.swig</strong>，这个文件是首页的模板，给render方法传入参数（对应刚才添加的is_pv字段）</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-28-153538.png" alt="image-20190728233537104"></p></li></ul><h1 id="5-外链设置"><a href="#5-外链设置" class="headerlink" title="5. 外链设置"></a>5. 外链设置</h1><p>最初使用七牛云作为图床外链，由于其测试域名回收，导致大部分外链失效。隧抛弃七牛云，开始寻找稳定可靠的图床外链存储服务。</p><h2 id="5-1-购买阿里云对象存储服务"><a href="#5-1-购买阿里云对象存储服务" class="headerlink" title="5.1 购买阿里云对象存储服务"></a>5.1 购买阿里云对象存储服务</h2><p>访问<a href="https://www.aliyun.com/product/oss?spm=5176.12825654.eofdhaal5.81.e9392c4ao0cQj6" target="_blank" rel="noopener">阿里云OSS对象云存储</a>站点，创建Bucket。所谓的Bucket类似于一个存储空间，可以将自己要存储的对象放在该空间里，例如图片。阿里云OSS服务根据该空间的存储大小进行收费。当然，其收费的服务不仅仅是存储空间大小，还包括流量等费用，后续会提及。</p><p>创建Bucket时，需要填写Bucket名称，自定义的。所属区域，例如香港。存储类型，例如标准存储。</p><p>如果不购买阿里云OSS服务流量包，其收费默认是按量收费，即用多少收取对应的费用。当然，也可以购买流量包。一般而言，流量包相对便宜些。</p><p>关于流量包的使用。购买后从控制台OSS对象存储处即可看到购买的流量包。无需关联。当OSS收取服务费用时，会检测相应的流量包。如果流量包满足使用条件，则自动从流量包中抵扣。</p><h2 id="5-2-上传对象至阿里云OSS服务"><a href="#5-2-上传对象至阿里云OSS服务" class="headerlink" title="5.2 上传对象至阿里云OSS服务"></a>5.2 上传对象至阿里云OSS服务</h2><p>1）进入创建的Bucket中，点击文件管理，创建文件夹。</p><p>2）上传图片至相应位置，即可生成外链。</p><h2 id="5-3-阿里云OSS绑定域名"><a href="#5-3-阿里云OSS绑定域名" class="headerlink" title="5.3 阿里云OSS绑定域名"></a>5.3 阿里云OSS绑定域名</h2><p>1）在bucket 的域名管理中绑定域名。</p><p>2）进入域名解析界面，对域名进行解析。</p><p>首先进入OSS概览页面，找到外网访问地址。</p><p>其次，进入域名解析界面，添加如下设置：</p><p>记录类型：CNAME</p><p>主机记录：oss</p><p>记录值：为外网访问地址。</p><h2 id="5-4-使用iPic实现快速上传图片"><a href="#5-4-使用iPic实现快速上传图片" class="headerlink" title="5.4 使用iPic实现快速上传图片"></a>5.4 使用iPic实现快速上传图片</h2><p>iPic下载和配置地址：<a href="https://toolinbox.net/iPic/" target="_blank" rel="noopener">https://toolinbox.net/iPic/</a></p><p>其中，阿里云OSS服务开启”公共读”权限，使得复制的外链可直接使用。</p><p>在<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>中配置iPic上传图片。在Typora中进行如下配置：</p><p><img src="https://toddler.oss-cn-hongkong.aliyuncs.com/images/2019-07-28-150811.png" alt="image-20190728230801412"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用攻略-添加分类标签和搜索功能</title>
      <link href="/2018/03/04/others/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/"/>
      <url>/2018/03/04/others/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo使用攻略-添加分类及标签"><a href="#Hexo使用攻略-添加分类及标签" class="headerlink" title="Hexo使用攻略-添加分类及标签"></a>Hexo使用攻略-添加分类及标签</h1><h2 id="创建“分类”选项"><a href="#创建“分类”选项" class="headerlink" title="创建“分类”选项"></a>创建“分类”选项</h2><h3 id="生成“分类”页并添加tpye属性"><a href="#生成“分类”页并添加tpye属性" class="headerlink" title="生成“分类”页并添加tpye属性"></a>生成“分类”页并添加tpye属性</h3><p>打开命令行，进入博客所在文件夹。执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>成功后会提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure></p><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h3 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h3><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p><p>注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>或</p><h3 id="设置分类列表"><a href="#设置分类列表" class="headerlink" title="设置分类列表"></a>设置分类列表</h3><p>在我们编辑文章的时候，直接在categories:项填写属于哪个分类，但如果分类是中文的时候，路径也会包含中文。<br>比如分类我们设置的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: 编程</span><br></pre></td></tr></table></figure><p>那在生成页面后，分类列表就会出现编程这个选项，他的访问路径是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">那在生成页面后，分类列表就会出现编程这个选项，他的访问路径是：</span><br></pre></td></tr></table></figure><p>如果我们想要把路径名和分类名分别设置，需要怎么办呢？</p><p>打开根目录下的配置文件_config.yml，找到如下位置做更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">编程: programming</span><br><span class="line">生活: life</span><br><span class="line">其他: other</span><br><span class="line">tag_map:</span><br></pre></td></tr></table></figure><p>在这里category_map:是设置分类的地方，每行一个分类，冒号前面是分类名称，后面是访问路径。</p><p>可以提前在这里设置好一些分类，当编辑的文章填写了对应的分类名时，就会自动的按照对应的路径来访问。</p><h2 id="创建“标签”选项"><a href="#创建“标签”选项" class="headerlink" title="创建“标签”选项"></a>创建“标签”选项</h2><h3 id="生成“标签”页并添加tpye属性"><a href="#生成“标签”页并添加tpye属性" class="headerlink" title="生成“标签”页并添加tpye属性"></a>生成“标签”页并添加tpye属性</h3><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2017-05-27 14:22:08</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: “tags”到内容中，添加后是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h3 id="给文章添加“tags”属性"><a href="#给文章添加“tags”属性" class="headerlink" title="给文章添加“tags”属性"></a>给文章添加“tags”属性</h3><p>打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格<br>- 表单验证就是这篇文章的标签了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- jQuery</span><br><span class="line">- 表格</span><br><span class="line">- 表单验证</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p><h2 id="新建页面的模板"><a href="#新建页面的模板" class="headerlink" title="新建页面的模板"></a>新建页面的模板</h2><p>打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，重新执行hexo n ‘name’命令，会发现新建的页面里有categories:项了。</p><p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p><h2 id="菜单中添加链接"><a href="#菜单中添加链接" class="headerlink" title="菜单中添加链接"></a>菜单中添加链接</h2><p>编辑主题的 _config.yml ，将 menu 中的 categories: /categories 注释去掉，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br></pre></td></tr></table></figure><p>在主题配置文件中添加分类选项</p><p>在主题配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes/_config.yml</span><br></pre></td></tr></table></figure><p>中添加以下代码（#号后为注释内容）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  所有文章: /archives</span><br><span class="line">  技巧经验: /categories/技巧经验     # 博客首页展示文本： 访问路径/自定义归档名称</span><br><span class="line">  资料总结: /categories/资料总结</span><br></pre></td></tr></table></figure><h1 id="Hexo使用攻略-搜索功能"><a href="#Hexo使用攻略-搜索功能" class="headerlink" title="Hexo使用攻略-搜索功能"></a>Hexo使用攻略-搜索功能</h1><p>1）用 hexo-generator-search 生成索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
