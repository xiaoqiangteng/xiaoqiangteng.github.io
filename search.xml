<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql教程</title>
      <link href="/2019/02/16/mysql%E6%95%99%E7%A8%8B/"/>
      <url>/2019/02/16/mysql%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>什么是SQL？简单地说，SQL就是访问和处理关系数据库的计算机标准语言。也就是说，无论用什么编程语言（Java、Python、C++……）编写程序，只要涉及到操作关系数据库，比如，一个电商网站需要把用户和商品信息存入数据库，或者一个手机游戏需要把用户的道具、通关信息存入数据库，都必须通过SQL来完成。</p><p>所以，现代程序离不开关系数据库，要使用关系数据库就必须掌握SQL。</p><p>SQL是结构化查询语言Structured Query Language的缩写，用来访问和操作数据库系统。SQL语句既可以查询数据库中的数据，也可以添加、更新和删除数据库中的数据，还可以对数据库进行管理和维护操作。不同的数据库，都支持SQL，这样，我们通过学习SQL这一种语言，就可以操作各种不同的数据库。</p><p>虽然SQL已经被ANSI组织定义为标准，不幸地是，各个不同的数据库对标准的SQL支持不太一致。并且，大部分数据库都在标准的SQL上做了扩展。也就是说，如果只使用标准SQL，理论上所有数据库都可以支持，但如果使用某个特定数据库的扩展SQL，换一个数据库就不能执行了。例如，Oracle把自己扩展的SQL称为PL/SQL，Microsoft把自己扩展的SQL称为T-SQL。</p><p>现实情况是，如果我们只使用标准SQL的核心功能，那么所有数据库通常都可以执行。不常用的SQL功能，不同的数据库支持的程度都不一样。而各个数据库支持的各自扩展的功能，通常我们把它们称之为“方言”。</p><p>总的来说，SQL语言定义了这么几种操作数据库的能力：</p><p>DDL：Data Definition Language</p><p>DDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由数据库管理员执行。</p><p>DML：Data Manipulation Language</p><p>DML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。</p><p>DQL：Data Query Language</p><p>DQL允许用户查询数据，这也是通常最频繁的数据库日常操作</p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>数据库按照数据结构来组织、存储和管理数据，实际上，数据库一共有三种模型：</p><ul><li>层次模型</li><li>网状模型</li><li>关系模型</li></ul><p>随着时间的推移和市场竞争，最终，基于关系模型的关系数据库获得了绝对市场份额。因为相比层次模型和网状模型，关系模型理解和使用起来最简单。</p><h2 id="主流关系数据库"><a href="#主流关系数据库" class="headerlink" title="主流关系数据库"></a>主流关系数据库</h2><p>目前，主流的关系数据库主要分为以下几类：</p><ul><li>商用数据库，例如：Oracle，SQL Server，DB2等；</li><li>开源数据库，例如：MySQL，PostgreSQL等；</li><li>桌面数据库，以微软Access为代表，适合桌面应用程序使用；</li><li>嵌入式数据库，以Sqlite为代表，适合手机应用和桌面程序</li></ul><h1 id="2-安装mysql"><a href="#2-安装mysql" class="headerlink" title="2. 安装mysql"></a>2. 安装mysql</h1><p>MySQL是目前应用最广泛的开源关系数据库。MySQL最早是由瑞典的MySQL AB公司开发，该公司在2008年被SUN公司收购，紧接着，SUN公司在2009年被Oracle公司收购，所以MySQL最终就变成了Oracle旗下的产品。</p><p>和其他关系数据库有所不同的是，MySQL本身实际上只是一个SQL接口，它的内部还包含了多种数据引擎，常用的包括：</p><ul><li>InnoDB：由Innobase Oy公司开发的一款支持事务的数据库引擎，2006年被Oracle收购；</li><li>MyISAM：MySQL早期集成的默认数据库引擎，不支持事务。</li></ul><p>MySQL接口和数据库引擎的关系就好比某某浏览器和浏览器引擎（IE引擎或Webkit引擎）的关系。对用户而言，切换浏览器引擎不影响浏览器界面，切换MySQL引擎不影响自己写的应用程序使用MySQL的接口。</p><p>使用MySQL时，不同的表还可以使用不同的数据库引擎。如果你不知道应该采用哪种引擎，记住总是选择InnoDB就好了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><p>(1) 先下载mysql（推荐5.7）：<a href="https://dev.mysql.com/downloads/mysql/5.7.htmls" target="_blank" rel="noopener">mysql</a></p><p>(2) 一路默认安装，最后弹窗会给mqsql默认密码，记得保存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-02-16T15:08:53.942369Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: ibd:lNIu=5&gt;A</span><br><span class="line"></span><br><span class="line">If you lose this password, please consult the section How to Reset the Root Password <span class="keyword">in</span> the MySQL reference manual.</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>注：如果之前安装过mysql，需要执行以下步骤，将之前的mysql全部卸载。</p><ul><li>打开终端窗口</li><li>使用mysqldump备份你的数据库将文本文件!</li><li>停止数据库服务器</li><li>sudo rm /usr/local/mysql</li><li>sudo rm -rf /usr/local/mysql*</li><li>sudo rm -rf /Library/StartupItems/MySQLCOM</li><li>sudo rm -rf /Library/PreferencePanes/My*</li><li>edit /etc/hostconfig and remove the line MYSQLCOM=-YES-</li><li>rm -rf ~/Library/PreferencePanes/My*</li><li>sudo rm -rf /Library/Receipts/mysql*</li><li>sudo rm -rf /Library/Receipts/MySQL*</li><li>sudo rm -rf /private/var/db/receipts/mysql</li></ul><p>参考：<a href="https://www.jianshu.com/p/fbaa5e54fbb8" target="_blank" rel="noopener">在Mac OS X上怎么彻底卸载mysql</a></p><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><p>环境：centos 6</p><p>(1) 查看已安装的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure><p>(2) 卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove mysql*</span><br></pre></td></tr></table></figure><p>再跑一次查询命令，可以看到没有文件了。</p><p>(3) 下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el6-11.noarch.rpm</span><br></pre></td></tr></table></figure><p>(4) 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql57-community-release-el6-11.noarch.rpm</span><br></pre></td></tr></table></figure><p>查看一下信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure><p>可以看到，默认enable的就是5.7版本，所以就直接安装了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>(5) 启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><p>进去看一下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root </span><br><span class="line">结果不行，报错了 </span><br><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user ‘root’@’localhost’ (using password: NO)</span><br></pre></td></tr></table></figure><p>解决方法是把登录验证关闭后，设置root密码就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改/etc/my.cnf, 在[mysqld]下面加入skip-grant-tables=1 </span><br><span class="line">service mysqld restart </span><br><span class="line">mysql -u root 这次可以了</span><br></pre></td></tr></table></figure><p>修改root密码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user <span class="built_in">set</span> authentication_string = password(<span class="string">'root'</span>), password_expired = <span class="string">'N'</span>, password_last_changed = now() <span class="built_in">where</span> user = <span class="string">'root'</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure><p>然后把my.cnf加的语句去掉，重启mysql服务:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line">现在就可以用密码登录了。</span><br></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><ul><li>vim ~/.bash_profile，进入编辑模式，将PATH=”$PATH”:/usr/local/mysql/bin拷贝到里面。保存退出</li><li>source ~/.bash_profile</li><li>echo $PATH</li><li>如果安装了oh my zsh的话，执行vim ~/.zshrc输入export PATH=${PATH}:/usr/local/mysql/bin保存退出</li><li>source ~/.zshrc</li><li>mysql -u root -p, 密码为默认密码</li><li>在系统设置中开启mysql服务</li></ul><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><ul><li>mysql &gt; set PASSWORD =PASSWORD(‘123456’); // 例如密码为123456</li><li>重新登录mysql就生效了</li></ul><h2 id="重启mysql"><a href="#重启mysql" class="headerlink" title="重启mysql"></a>重启mysql</h2><p>(1) 可以在系统偏好设置里开启和关闭mysql服务</p><p>(2) 启动MySQL服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/MySQL/support-files/mysql.server start</span><br></pre></td></tr></table></figure><p>(3) 停止MySQL服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server stop</span><br></pre></td></tr></table></figure><p>(4) 重启MySQL服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server restart</span><br></pre></td></tr></table></figure><h1 id="3-关系模型"><a href="#3-关系模型" class="headerlink" title="3. 关系模型"></a>3. 关系模型</h1><p>关系数据库是建立在关系模型上的。而关系模型本质上就是若干个存储数据的二维表，可以把它们看作很多Excel表。</p><p>表的每一行称为记录（Record），记录是一个逻辑意义上的数据。</p><p>表的每一列称为字段（Column），同一个表的每一行记录都拥有相同的若干字段。</p><p>字段定义了数据类型（整型、浮点型、字符串、日期等），以及是否允许为NULL。注意NULL表示字段数据不存在。一个整型字段如果为NULL不表示它的值为0，同样的，一个字符串型字段为NULL也不表示它的值为空串’’。</p><p>和Excel表有所不同的是，关系数据库的表和表之间需要建立“一对多”，“多对一”和“一对一”的关系，这样才能够按照应用程序的逻辑来组织和存储数据。</p><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为主键。</p><p>对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。</p><p>选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。</p><p>因此，身份证号、手机号、邮箱地址这些看上去可以唯一的字段，均不可用作主键。</p><p>作为主键最好是完全业务无关的字段，我们一般把这个字段命名为id。常见的可作为id字段的类型有：</p><ul><li>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li><li>全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</li></ul><p>对于大部分应用来说，通常自增类型的主键就能满足需求。</p><p>因为MySQL使用整数工作更快，所以主键列的数据类型应该是整数类型，例如：INT，BIGINT。可以选择一个较小的整数类型：TINYINT，SMALLINT等。但是，应该确保值的范围的主键的整数类型足以存储表可能所具有最大行数。</p><blockquote><p>如果使用INT自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用BIGINT自增类型则可以最多约922亿亿条记录。</p></blockquote><p>主键列通常具有自动生成键的唯一序列的AUTO_INCREMENT属性。下一行的主键值大于前一个行的主键值。MySQL为表中的主键创建一个名为PRIMARY的PRIMARY索引类型。</p><p>当使用CREATE TABLE语句创建表时，MySQL允许创建主键。要为表创建PRIMARY KEY约束，请在主键列的定义中指定PRIMARY KEY。</p><p>以下示例将为users表的user_id列上创建主键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> testdb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span>(</span><br><span class="line">   user_id <span class="built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">   username <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   <span class="keyword">password</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">   email <span class="built_in">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>通过字段把数据与另一张表关联起来，这种列称为外键。</p><p>例如：</p><p>students表中确定任意一个学生的记录；在classes表中确定任意一个班级记录；但是我们如何确定students表的一条记录，例如，id=1的小明，属于哪个班级呢？</p><p>由于一个班级可以有多个学生，在关系模型中，这两个表的关系可以称为“一对多”，即一个classes的记录可以对应多个students表的记录。</p><p>为了表达这种一对多的关系，我们需要在students表中加入一列class_id，让它的值与classes表的某条记录相对应。这样，我们就可以根据class_id这个列直接定位出一个students表的记录应该对应到classes的哪条记录。</p><p>外键并不是通过列名实现的，而是通过定义外键约束实现的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_class_id</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (class_id)</span><br><span class="line"><span class="keyword">REFERENCES</span> classes (<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure><p>其中，外键约束的名称fk_class_id可以任意，FOREIGN KEY (class_id)指定了class_id作为外键，REFERENCES classes (id)指定了这个外键将关联到classes表的id列（即classes表的主键）。</p><blockquote><p>由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，class_id仅仅是一个普通的列，只是它起到了外键的作用而已。</p></blockquote><p>要删除一个外键约束，也是通过ALTER TABLE实现的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> fk_class_id;</span><br></pre></td></tr></table></figure><blockquote><p>注意：删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN …实现的。</p></blockquote><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p>通过一个表的外键关联到另一个表，我们可以定义出一对多关系。有些时候，还需要定义“多对多”关系。例如，一个老师可以对应多个班级，一个班级也可以对应多个老师，因此，班级表和老师表存在多对多关系。</p><p>多对多关系实际上是通过两个一对多关系实现的，即通过一个中间表，关联两个一对多关系，就形成了多对多关系。</p><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><p>一对一关系是指，一个表的记录对应到另一个表的唯一一个记录。</p><p>例如，students表的每个学生可以有自己的联系方式，如果把联系方式存入另一个表contacts，我们就可以得到一个“一对一”关系。</p><p>有细心的童鞋会问，既然是一对一关系，那为啥不给students表增加一个mobile列，这样就能合二为一了？</p><p>如果业务允许，完全可以把两个表合为一个表。但是，有些时候，如果某个学生没有手机号，那么，contacts表就不存在对应的记录。实际上，一对一关系准确地说，是contacts表一对一对应students表。</p><p>还有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表user_info和用户详细信息表user_profiles，大部分时候，只需要查询user_info表，并不需要查询user_profiles表，这样就提高了查询速度。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。</p><p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</p><p>例如，如果要经常根据score列进行查询，就可以对score列创建索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_score (score);</span><br></pre></td></tr></table></figure><p>使用ADD INDEX idx_score (score)就创建了一个名称为idx_score，使用列score的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_name_score (<span class="keyword">name</span>, score);</span><br></pre></td></tr></table></figure><p>索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如gender列，大约一半的记录值是M，另一半是F，因此，对该列创建索引就没有意义。</p><p>可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。</p><p>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</p><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>在设计关系数据表的时候，看上去唯一的列，例如身份证号、邮箱地址等，因为他们具有业务含义，因此不宜作为主键。</p><p>但是，这些列根据业务要求，又具有唯一性约束：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一索引。例如，我们假设students表的name不能重复：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> uni_name (<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><p>通过UNIQUE关键字我们就添加了一个唯一索引。</p><p>也可以只对某一列添加一个唯一约束而不创建唯一索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uni_name <span class="keyword">UNIQUE</span> (<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><p>这种情况下，name列没有索引，但仍然具有唯一性保证。</p><p>无论是否创建索引，对于用户和应用程序来说，使用关系数据库不会有任何区别。这里的意思是说，当我们在数据库中查询时，如果有相应的索引可用，数据库系统就会自动使用索引来提高查询效率，如果没有索引，查询也能正常执行，只是速度会变慢。因此，索引可以在使用数据库的过程中逐步优化。</p><h1 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h1><p>数据库表包含具有特定数据类型(如数字或字符串)的多个列。 MySQL提供更多的数据类型，而不仅仅是数字或字符串。 MySQL中的每种数据类型都可以通过以下特征来确定：</p><ul><li>它用来表示数据值。</li><li>占用的空间以及值是固定长度还是可变长度。</li><li>数据类型的值可以被索引。</li><li>MySQL如何比较特定数据类型的值。</li></ul><table><thead><tr><th>数据类型</th><th>指定值和范围</th><th>描述</th></tr></thead><tbody><tr><td>char</td><td>String(0~255)</td><td>固定长度的非二进制(字符)字符串</td></tr><tr><td>varchar</td><td>String(0~255)</td><td>可变长度的非二进制字符串</td></tr><tr><td>BINARY</td><td>二进制</td><td>一个固定长度的二进制字符串</td></tr><tr><td>VARBINARY</td><td>二进制</td><td>一个可变长度的二进制字符串</td></tr><tr><td>tinytext</td><td>String(0~255)</td><td>一个非常小的非二进制字符串</td></tr><tr><td>text</td><td>String(0~65536)</td><td>一个小的非二进制字符串</td></tr><tr><td>TINYBLOB</td><td>blob</td><td>一个非常小的BLOB(二进制大对象)</td></tr><tr><td>blob</td><td>String(0~65536)</td><td>一个小的BLOB(二进制大对象)</td></tr><tr><td>mediumtext</td><td>String(0~16777215)</td><td>一个中等大小的非二进制字符串</td></tr><tr><td>mediumblob</td><td>String(0~16777215)</td><td>一个中等大小的BLOB(二进制大对象)</td></tr><tr><td>longblob</td><td>String(0~4294967295)</td><td>一个大的BLOB(二进制大对象)</td></tr><tr><td>longtext</td><td>String(0~4294967295)</td><td>一个很大的非二进制字符串</td></tr><tr><td>tinyint</td><td>Integer(-128~127)</td><td>一个很小的整数</td></tr><tr><td>smallint</td><td>Integer(-32768~32767)</td><td>一个小的整数</td></tr><tr><td>mediumint</td><td>Integer(-8388608~8388607)</td><td>一个中等大小的整数</td></tr><tr><td>int</td><td>Integer(-214847668~214847667)</td><td>一个标准整数</td></tr><tr><td>bigint</td><td>Integer(-9223372036854775808~9223372036854775807)</td><td>一个大整数</td></tr><tr><td>float</td><td>decimal(精确到23位小数)</td><td>单精度浮点数</td></tr><tr><td>double</td><td>decimal(24~54位小数)</td><td>双精度浮点数</td></tr><tr><td>decimal</td><td>将double转储为字符串形式</td><td>定点数</td></tr><tr><td>bit</td><td></td><td>一个字节字段</td></tr><tr><td>date</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>datetime</td><td>YYYY-MM-DD HH:MM:SS</td><td>日期和时间值</td></tr><tr><td>timestamp</td><td>YYYYMMDDHHMMSS</td><td>时间戳记值</td></tr><tr><td>time</td><td>HH:MM:SS</td><td>时间值</td></tr><tr><td>YEAR</td><td>YYYY或YY</td><td>年值</td></tr><tr><td>enum</td><td>选项值之一</td><td>枚举; 每个列值可以被分配一个枚举成员</td></tr><tr><td>set</td><td>选项值子集</td><td>集合; 每个列值可以分配零个或多个SET成员</td></tr><tr><td>boolean</td><td>tinyint(1)</td></tr><tr><td>GEOMETRY</td><td></td><td>任何类型的空间值</td></tr><tr><td>POINT</td><td></td><td>一个点(一对X-Y坐标)</td></tr><tr><td>LINESTRING</td><td></td><td>曲线(一个或多个POINT值)</td></tr><tr><td>POLYGON</td><td></td><td>多边形</td></tr><tr><td>GEOMETRYCOLLECTION</td><td></td><td>GEOMETRY值的集合</td></tr><tr><td>MULTILINESTRING</td><td></td><td>LINESTRING值的集合</td></tr><tr><td>MULTIPOINT</td><td></td><td>POINT值的集合</td></tr><tr><td>MULTIPOLYGON</td><td></td><td>POLYGON值的集合</td></tr></tbody></table><h2 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h2><p>在MySQL中，您可以找到所有SQL标准数字类型，包括精确数字数据类型和近似数字数据类型，包括整数，定点和浮点数。 此外，MySQL还具有用于存储位值的BIT数据类型。数字类型可以是有符号或无符号，但BIT类型除外。</p><h2 id="布尔数据类型"><a href="#布尔数据类型" class="headerlink" title="布尔数据类型"></a>布尔数据类型</h2><p>MySQL没有内置的 BOOLEAN 或 BOOL 数据类型。所以要表示布尔值，MySQL使用最小的整数类型，也就是TINYINT(1)。 换句话说，BOOLEAN和BOOL是TINYINT(1)的同义词。</p><h2 id="字符串数据类型"><a href="#字符串数据类型" class="headerlink" title="字符串数据类型"></a>字符串数据类型</h2><p>在MySQL中，字符串可以容纳从纯文本到二进制数据(如图像或文件)的任何内容。可以通过使用LIKE运算符，正则表达式和全文搜索，根据模式匹配来比较和搜索字符串。</p><h2 id="日期和时间数据类型"><a href="#日期和时间数据类型" class="headerlink" title="日期和时间数据类型"></a>日期和时间数据类型</h2><p>MySQL提供日期和时间的类型以及日期和时间的组合。 此外，MySQL还支持时间戳数据类型，用于跟踪表的一行中的更改。如果只想存储没有日期和月份的年份数据，则可以使用YEAR数据类型。</p><h2 id="空间数据类型"><a href="#空间数据类型" class="headerlink" title="空间数据类型"></a>空间数据类型</h2><p>MySQL支持许多包含各种几何和地理值的空间数据类型。</p><h2 id="JSON数据类型"><a href="#JSON数据类型" class="headerlink" title="JSON数据类型"></a>JSON数据类型</h2><p>MySQL 5.7.8版本支持原生JSON数据类型，可以更有效地存储和管理JSON文档。 本机JSON数据类型提供JSON文档的自动验证和最佳存储格式。</p><h1 id="5-基础操作"><a href="#5-基础操作" class="headerlink" title="5. 基础操作"></a>5. 基础操作</h1><h2 id="使用示例数据库"><a href="#使用示例数据库" class="headerlink" title="使用示例数据库"></a>使用示例数据库</h2><p>yiibaidb数据库是一个典型汽车零售商数据库模型。它包含典型的业务数据，如客户，产品，销售订单，销售订单等。</p><h3 id="下载MySQL示例数据库"><a href="#下载MySQL示例数据库" class="headerlink" title="下载MySQL示例数据库"></a>下载MySQL示例数据库</h3><p>示例数据库下载地址：<a href="http://www.yiibai.com/downloads/yiibaidb.zip" target="_blank" rel="noopener">http://www.yiibai.com/downloads/yiibaidb.zip</a></p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ul><li>创建数据库</li><li>导入: source ~/sql/yiibaidb.sql;</li></ul><h3 id="数据库详情"><a href="#数据库详情" class="headerlink" title="数据库详情"></a>数据库详情</h3><p>MySQL示例数据库模式由以下表组成：</p><ul><li>customers: 存储客户的数据。</li><li>products: 存储汽车的数据。</li><li>productLines: 存储产品类别数据。</li><li>orders: 存储客户订购的销售订单。</li><li>orderDetails: 存储每个销售订单的订单产品数据项。</li><li>payments: 存储客户订单的付款数据信息。</li><li>employees: 存储所有员工信息以及组织结构，例如，直接上级(谁向谁报告工作)。</li><li>offices: 存储销售处数据，类似于各个分公司。</li></ul><h2 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h2><p>我们可以在登陆 MySQL 服务后，使用 create 命令创建数据库，语法如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名;</span><br></pre></td></tr></table></figure><p>以下命令简单的演示了创建数据库的过程，数据名为 RUNOOB:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">DATABASE</span> RUNOOB;</span><br></pre></td></tr></table></figure><p>使用普通用户，你可能需要特定的权限来创建或者删除 MySQL 数据库。</p><p>所以我们这边使用root用户登录，root用户拥有最高权限，可以使用 mysql mysqladmin 命令来创建数据库。</p><p>以下命令简单的演示了创建数据库的过程，数据名为 RUNOOB:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p <span class="keyword">create</span> RUNOOB</span><br></pre></td></tr></table></figure><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>在删除数据库过程中，务必要十分谨慎，因为在执行删除命令后，所有数据将会消失。</p><p>(1) drop 命令删除数据库</p><p>drop 命令格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><p>例如删除名为 RUNOOB 的数据库：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database RUNOOB;</span><br></pre></td></tr></table></figure><p>(2) 使用 mysqladmin 删除数据库</p><p>你也可以使用 mysql mysqladmin 命令在终端来执行删除命令。</p><p>以下实例删除数据库 RUNOOB(该数据库在前一章节已创建)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p <span class="keyword">drop</span> RUNOOB</span><br></pre></td></tr></table></figure><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><p>在你连接到 MySQL 数据库后，可能有多个可以操作的数据库，所以你需要选择你要操作的数据库。</p><p>在 mysql&gt; 提示窗口中可以很简单的选择特定的数据库。你可以使用SQL命令来选择指定的数据库。</p><p>查看有哪些数据库,返回数据库名(databaseName)：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;show databases;</span><br></pre></td></tr></table></figure><p>以下实例选取了数据库 RUNOOB:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br></pre></td></tr></table></figure><p>执行以上命令后，你就已经成功选择了 RUNOOB 数据库，在后续的操作中都会在 RUNOOB 数据库中执行。</p><p>注意:所有的数据库名，表名，表字段都是区分大小写的。所以你在使用SQL命令时需要输入正确的名称。</p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>要在数据库中创建一个新表，可以使用MySQL CREATE TABLE语句。 CREATE TABLE语句是MySQL中最复杂的语句之一。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name(</span><br><span class="line">        column_list</span><br><span class="line">) <span class="keyword">engine</span>=table_type;</span><br></pre></td></tr></table></figure><p>我们来更详细地来查看其语法：</p><ul><li>指定要在CREATE TABLE子句之后创建的表的名称。表名在数据库中必须是唯一的。 IF NOT EXISTS是语句的可选部分，允许您检查正在创建的表是否已存在于数据库中。 如果是这种情况，MySQL将忽略整个语句，不会创建任何新的表。 强烈建议在每个CREATE TABLE语句中使用IF NOT EXISTS来防止创建已存在的新表而产生错误。</li><li>其次，在column_list部分指定表的列表。字段的列用逗号(，)分隔。</li><li>需要为engine子句中的表指定存储引擎。可以使用任何存储引擎，如：InnoDB，MyISAM，HEAP，EXAMPLE，CSV，ARCHIVE，MERGE， FEDERATED或NDBCLUSTER。如果不明确声明存储引擎，MySQL将默认使用InnoDB。</li></ul><p>要在CREATE TABLE语句中为表定义列，请使用以下语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">column_name data_type[size] [NOT NULL|NULL] [DEFAULT value] </span><br><span class="line">[AUTO_INCREMENT]</span><br></pre></td></tr></table></figure><p>以上语法中最重要的组成部分是：</p><ul><li>column_name指定列的名称。每列具有特定数据类型和大小，例如：VARCHAR(255)。</li><li>NOT NULL或NULL表示该列是否接受NULL值。</li><li>DEFAULT值用于指定列的默认值。</li><li>AUTO_INCREMENT指示每当将新行插入到表中时，列的值会自动增加。每个表都有一个且只有一个AUTO_INCREMENT列。</li></ul><p>如果要将表的特定列设置为主键，则使用以下语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRIMARY KEY (col1,col2,...)</span><br></pre></td></tr></table></figure><p>示例：</p><p>下面让我们练习一个例子，在示例数据库(testdb)中创建一个名为tasks的新表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tasks (</span><br><span class="line">  task_id <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  subject <span class="built_in">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  start_date <span class="built_in">DATE</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  end_date <span class="built_in">DATE</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  description <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (task_id)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><p>要查询数据库表的数据，我们使用如下的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> &lt;表名&gt;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>使用SELECT * FROM &lt;表名&gt;可以查询到一张表的所有记录。但是，很多时候，我们并不希望获得所有记录，而是根据条件选择性地获取指定条件的记录，例如，查询分数在80分以上的学生记录。在一张表有数百万记录的情况下，获取所有记录不仅费时，还费内存和网络带宽。</p><p>SELECT语句可以通过WHERE条件来设定查询条件，查询结果是满足查询条件的记录。例如，要指定条件“分数在80分或以上的学生”，写成WHERE条件就是SELECT * FROM students WHERE score &gt;= 80。</p><p>其中，WHERE关键字后面的score &gt;= 80就是条件。score是列名，该列存储了学生的成绩，因此，score &gt;= 80就筛选出了指定条件的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score &gt;= <span class="number">80</span>;</span><br></pre></td></tr></table></figure><p>条件查询的语法就是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> &lt;表名&gt; <span class="keyword">WHERE</span> &lt;条件表达式&gt;</span><br></pre></td></tr></table></figure><p>条件表达式可以用&lt;条件1&gt; AND &lt;条件2&gt;表达满足条件1并且满足条件2。例如，符合条件“分数在80分或以上”，并且还符合条件“男生”，把这两个条件写出来：</p><ul><li>条件1：根据score列的数据判断：score &gt;= 80；</li><li>条件2：根据gender列的数据判断：gender = ‘M’，注意gender列存储的是字符串，需要用单引号括起来。</li></ul><p>就可以写出WHERE条件：score &gt;= 80 AND gender = ‘M’：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score &gt;= <span class="number">80</span> <span class="keyword">AND</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure><p>第二种条件是&lt;条件1&gt; OR &lt;条件2&gt;，表示满足条件1或者满足条件2。例如，把上述AND查询的两个条件改为OR，查询结果就是“分数在80分或以上”或者“男生”，满足任意之一的条件即选出该记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score &gt;= <span class="number">80</span> <span class="keyword">OR</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure><p>第三种条件是NOT &lt;条件&gt;，表示“不符合该条件”的记录。例如，写一个“不是2班的学生”这个条件，可以先写出“是2班的学生”：class_id = 2，再加上NOT：NOT class_id = 2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">NOT</span> class_id = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>上述NOT条件NOT class_id = 2其实等价于class_id &lt;&gt; 2，因此，NOT查询不是很常用。</p><p>要组合三个或者更多的条件，就需要用小括号()表示如何进行条件运算。例如，编写一个复杂的条件：分数在80以下或者90以上，并且是男生：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> (score &lt; <span class="number">80</span> <span class="keyword">OR</span> score &gt; <span class="number">90</span>) <span class="keyword">AND</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure><p>如果不加括号，条件运算按照NOT、AND、OR的优先级进行，即NOT优先级最高，其次是AND，最后是OR。加上括号可以改变优先级。</p><p>常用的条件表达式:</p><table><thead><tr><th>条件</th><th>表达式举例1</th><th>表达式举例2</th><th>说明</th></tr></thead><tbody><tr><td>使用=判断相等</td><td>score = 80</td><td>name = ‘abc’</td><td>字符串需要用单引号括起来</td></tr><tr><td>使用&gt;判断大于</td><td>score &gt; 80</td><td>name &gt; ‘abc’</td><td>字符串比较根据ASCII码，中文字符比较根据数据库设置</td></tr><tr><td>使用&gt;=判断大于或相等</td><td>score &gt;= 80</td><td>name &gt;= ‘abc’</td><td></td></tr><tr><td>使用&lt;判断小于</td><td>score &lt; 80</td><td>name &lt;= ‘abc’</td><td></td></tr><tr><td>使用&lt;=判断小于或相等</td><td>score &lt;= 80</td><td>name &lt;= ‘abc’</td><td></td></tr><tr><td>使用&lt;&gt;判断不相等</td><td>score &lt;&gt; 80</td><td>name &lt;&gt; ‘abc’</td><td></td></tr><tr><td>使用LIKE判断相似</td><td>name LIKE ‘ab%’</td><td>name LIKE ‘%bc%’</td><td>%表示任意字符，例如’ab%’将匹配’ab’，’abc’，’abcd’</td></tr></tbody></table><h3 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h3><p>使用SELECT * FROM &lt;表名&gt; WHERE &lt;条件&gt;可以选出表中的若干条记录。我们注意到返回的二维表结构和原表是相同的，即结果集的所有列与原表的所有列都一一对应。</p><p>如果我们只希望返回某些列的数据，而不是所有列的数据，我们可以用SELECT 列1, 列2, 列3 FROM …，让结果集仅包含指定列。这种操作称为投影查询。</p><p>例如，从students表中返回id、score和name这三列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, score, <span class="keyword">name</span> <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p>这样返回的结果集就只包含了我们指定的列，并且，结果集的列的顺序和原表可以不一样。</p><p>使用SELECT 列1, 列2, 列3 FROM …时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。它的语法是SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM …。</p><p>例如，以下SELECT语句将列名score重命名为points，而id和name列名保持不变：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, score points, <span class="keyword">name</span> <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p>投影查询同样可以接WHERE条件，实现复杂的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, score points, <span class="keyword">name</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>SELECT查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：SELECT * FROM &lt;表1&gt; &lt;表2&gt;。</p><p>例如，同时从students表和classes表的“乘积”，即查询数据，可以这么写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students, classes;</span><br></pre></td></tr></table></figure><p>这种一次查询两个表的数据，查询的结果也是一个二维表，它是students表和classes表的“乘积”，即students表的每一行与classes表的每一行都两两拼在一起返回。结果集的列数是students表和classes表的列数之和，行数是students表和classes表的行数之积。</p><p>这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有100行记录的表进行笛卡尔查询将返回1万条记录，对两个各自有1万行记录的表进行笛卡尔查询将返回1亿条记录。</p><p>你可能还注意到了，上述查询的结果集有两列id和两列name，两列id是因为其中一列是students表的id，而另一列是classes表的id，但是在结果集中，不好区分。两列name同理</p><p>要解决这个问题，我们仍然可以利用投影查询的“设置列的别名”来给两个表各自的id和name列起别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    students.id <span class="keyword">sid</span>,</span><br><span class="line">    students.name,</span><br><span class="line">    students.gender,</span><br><span class="line">    students.score,</span><br><span class="line">    classes.id cid,</span><br><span class="line">    classes.name cname</span><br><span class="line"><span class="keyword">FROM</span> students, classes;</span><br></pre></td></tr></table></figure><p>注意，多表查询时，要使用表名.列名这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。但是，用表名.列名这种方式列举两个表的所有列实在是很麻烦，所以SQL还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id <span class="keyword">sid</span>,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c;</span><br></pre></td></tr></table></figure><p>注意到FROM子句给表设置别名的语法是FROM &lt;表名1&gt; &lt;别名1&gt;, &lt;表名2&gt; &lt;别名2&gt;。这样我们用别名s和c分别表示students表和classes表。</p><p>多表查询也是可以添加WHERE条件的，我们来试试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id <span class="keyword">sid</span>,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c</span><br><span class="line"><span class="keyword">WHERE</span> s.gender = <span class="string">'M'</span> <span class="keyword">AND</span> c.id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这个查询的结果集每行记录都满足条件s.gender = ‘M’和c.id = 1。添加WHERE条件后结果集的数量大大减少了。</p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><p>当我们需要向数据库表中插入一条新记录时，就必须使用INSERT语句。</p><p>INSERT语句的基本语法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名&gt; (字段<span class="number">1</span>, 字段<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>例如，我们向students表插入一条新记录，先列举出需要插入的字段名称，然后在VALUES子句中依次写出对应字段的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'大牛'</span>, <span class="string">'M'</span>, <span class="number">80</span>);</span><br></pre></td></tr></table></figure><p>注意到我们并没有列出id字段，也没有列出id字段对应的值，这是因为id字段是一个自增主键，它的值可以由数据库自己推算出来。此外，如果一个字段有默认值，那么在INSERT语句中也可以不出现。</p><p>要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。也就是说，可以写INSERT INTO students (score, gender, name, class_id) …，但是对应的VALUES就得变成(80, ‘M’, ‘大牛’, 2)。</p><p>还可以一次性添加多条记录，只需要在VALUES子句中指定多个记录值，每个记录是由(…)包含的一组值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">'大宝'</span>, <span class="string">'M'</span>, <span class="number">87</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'二宝'</span>, <span class="string">'M'</span>, <span class="number">81</span>);</span><br></pre></td></tr></table></figure><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>如果要更新数据库表中的记录，我们就必须使用UPDATE语句。</p><p>UPDATE语句的基本语法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> &lt;表名&gt; <span class="keyword">SET</span> 字段<span class="number">1</span>=值<span class="number">1</span>, 字段<span class="number">2</span>=值<span class="number">2</span>, ... <span class="keyword">WHERE</span> ...;</span><br></pre></td></tr></table></figure><p>例如，我们想更新students表id=1的记录的name和score这两个字段，先写出UPDATE students SET name=’大牛’, score=66，然后在WHERE子句中写出需要更新的行的筛选条件id=1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> <span class="keyword">name</span>=<span class="string">'大牛'</span>, score=<span class="number">66</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>注意到UPDATE语句的WHERE条件和SELECT语句的WHERE条件其实是一样的，因此完全可以一次更新多条记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> <span class="keyword">name</span>=<span class="string">'小牛'</span>, score=<span class="number">77</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>&gt;=<span class="number">5</span> <span class="keyword">AND</span> <span class="keyword">id</span>&lt;=<span class="number">7</span>;</span><br></pre></td></tr></table></figure><p>在UPDATE语句中，更新字段时可以使用表达式。例如，把所有80分以下的同学的成绩加10分：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> score=score+<span class="number">10</span> <span class="keyword">WHERE</span> score&lt;<span class="number">80</span>;</span><br></pre></td></tr></table></figure><p>其中，SET score=score+10就是给当前行的score字段的值加上了10。</p><p>如果WHERE条件没有匹配到任何记录，UPDATE语句不会报错，也不会有任何记录被更新。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> score=<span class="number">100</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">999</span>;</span><br></pre></td></tr></table></figure><p>最后，要特别小心的是，UPDATE语句可以没有WHERE条件，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> score=<span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>这时，整个表的所有记录都会被更新。所以，在执行UPDATE语句时要非常小心，最好先用SELECT语句来测试WHERE条件是否筛选出了期望的记录集，然后再用UPDATE更新。</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>如果要删除数据库表中的记录，我们可以使用DELETE语句。</p><p>DELETE语句的基本语法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;表名&gt; <span class="keyword">WHERE</span> ...;</span><br></pre></td></tr></table></figure><p>例如，我们想删除students表中id=1的记录，就需要这么写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>注意到DELETE语句的WHERE条件也是用来筛选需要删除的行，因此和UPDATE类似，DELETE语句也可以一次删除多条记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">id</span>&gt;=<span class="number">5</span> <span class="keyword">AND</span> <span class="keyword">id</span>&lt;=<span class="number">7</span>;</span><br></pre></td></tr></table></figure><p>如果WHERE条件没有匹配到任何记录，DELETE语句不会报错，也不会有任何记录被删除。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">999</span>;</span><br></pre></td></tr></table></figure><p>最后，要特别小心的是，和UPDATE类似，不带WHERE条件的DELETE语句会删除整个表的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p>这时，整个表的所有记录都会被删除。所以，在执行DELETE语句时也要非常小心，最好先用SELECT语句来测试WHERE条件是否筛选出了期望的记录集，然后再用DELETE删除。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.liaoxuefeng.com/wiki/001508284671805d39d23243d884b8b99f440bfae87b0f4000" target="_blank" rel="noopener">SQL教程</a></li><li><a href="https://segmentfault.com/a/1190000016587183" target="_blank" rel="noopener">mac下配置mysql</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grep教程</title>
      <link href="/2019/02/15/grep%E6%95%99%E7%A8%8B/"/>
      <url>/2019/02/15/grep%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</p><p>grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p><h1 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [option] pattern file</span><br></pre></td></tr></table></figure><h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>用于过滤/搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活。</p><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-a  --text   <span class="comment">#不要忽略二进制的数据。   </span></span><br><span class="line">-A&lt;显示行数&gt;   --after-context=&lt;显示行数&gt;   <span class="comment">#除了显示符合范本样式的那一列之外，并显示该行之后的内容。   </span></span><br><span class="line">-b   --byte-offset   <span class="comment">#在显示符合样式的那一行之前，标示出该行第一个字符的编号。   </span></span><br><span class="line">-B&lt;显示行数&gt;   --before-context=&lt;显示行数&gt;   <span class="comment">#除了显示符合样式的那一行之外，并显示该行之前的内容。   </span></span><br><span class="line">-c    --count   <span class="comment">#计算符合样式的列数。   </span></span><br><span class="line">-C&lt;显示行数&gt;    --context=&lt;显示行数&gt;或-&lt;显示行数&gt;   <span class="comment">#除了显示符合样式的那一行之外，并显示该行之前后的内容。   </span></span><br><span class="line">-d &lt;动作&gt;      --directories=&lt;动作&gt;   <span class="comment">#当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。   </span></span><br><span class="line">-e&lt;范本样式&gt;  --regexp=&lt;范本样式&gt;   <span class="comment">#指定字符串做为查找文件内容的样式。   </span></span><br><span class="line">-E      --extended-regexp   <span class="comment">#将样式为延伸的普通表示法来使用。   </span></span><br><span class="line">-f&lt;规则文件&gt;  --file=&lt;规则文件&gt;   <span class="comment">#指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。   </span></span><br><span class="line">-F   --fixed-regexp   <span class="comment">#将样式视为固定字符串的列表。   </span></span><br><span class="line">-G   --basic-regexp   <span class="comment">#将样式视为普通的表示法来使用。   </span></span><br><span class="line">-h   --no-filename   <span class="comment">#在显示符合样式的那一行之前，不标示该行所属的文件名称。   </span></span><br><span class="line">-H   --with-filename   <span class="comment">#在显示符合样式的那一行之前，表示该行所属的文件名称。   </span></span><br><span class="line">-i    --ignore-case   <span class="comment">#忽略字符大小写的差别。   </span></span><br><span class="line">-l    --file-with-matches   <span class="comment">#列出文件内容符合指定的样式的文件名称。   </span></span><br><span class="line">-L  --files-without-match   <span class="comment">#列出文件内容不符合指定的样式的文件名称。   </span></span><br><span class="line">-n   --line-number   <span class="comment">#在显示符合样式的那一行之前，标示出该行的列数编号。   </span></span><br><span class="line">-q   --quiet或--silent   <span class="comment">#不显示任何信息。   </span></span><br><span class="line">-r   --recursive   <span class="comment">#此参数的效果和指定“-d recurse”参数相同。   </span></span><br><span class="line">-s   --no-messages   <span class="comment">#不显示错误信息。   </span></span><br><span class="line">-v   --revert-match   <span class="comment">#显示不包含匹配文本的所有行。   </span></span><br><span class="line">-V   --version   <span class="comment">#显示版本信息。   </span></span><br><span class="line">-w   --word-regexp   <span class="comment">#只显示全字符合的列。   </span></span><br><span class="line">-x    --line-regexp   <span class="comment">#只显示全列符合的列。   </span></span><br><span class="line">-y   <span class="comment">#此参数的效果和指定“-i”参数相同。</span></span><br></pre></td></tr></table></figure><h2 id="规则表达式"><a href="#规则表达式" class="headerlink" title="规则表达式"></a>规则表达式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">^  <span class="comment">#锚定行的开始 如：'^grep'匹配所有以grep开头的行。    </span></span><br><span class="line">$  <span class="comment">#锚定行的结束 如：'grep$'匹配所有以grep结尾的行。    </span></span><br><span class="line">.  <span class="comment">#匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。    </span></span><br><span class="line">*  <span class="comment">#匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。    </span></span><br><span class="line">.*   <span class="comment">#一起用代表任意字符。   </span></span><br><span class="line">[]   <span class="comment">#匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。    </span></span><br><span class="line">[^]  <span class="comment">#匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。    </span></span><br><span class="line">\(..\)  <span class="comment">#标记匹配字符，如'\(love\)'，love被标记为1。    </span></span><br><span class="line">\&lt;      <span class="comment">#锚定单词的开始，如:'\&lt;grep'匹配包含以grep开头的单词的行。    </span></span><br><span class="line">\&gt;      <span class="comment">#锚定单词的结束，如'grep\&gt;'匹配包含以grep结尾的单词的行。    </span></span><br><span class="line">x\&#123;m\&#125;  <span class="comment">#重复字符x，m次，如：'0\&#123;5\&#125;'匹配包含5个o的行。    </span></span><br><span class="line">x\&#123;m,\&#125;  <span class="comment">#重复字符x,至少m次，如：'o\&#123;5,\&#125;'匹配至少有5个o的行。    </span></span><br><span class="line">x\&#123;m,n\&#125;  <span class="comment">#重复字符x，至少m次，不多于n次，如：'o\&#123;5,10\&#125;'匹配5--10个o的行。   </span></span><br><span class="line">\w    <span class="comment">#匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。   </span></span><br><span class="line">\W    <span class="comment">#\w的反置形式，匹配一个或多个非单词字符，如点号句号等。   </span></span><br><span class="line">\b    <span class="comment">#单词锁定符，如: '\bgrep\b'只匹配grep。  </span></span><br><span class="line"></span><br><span class="line">POSIX字符:</span><br><span class="line">为了在不同国家的字符编码中保持一至，POSIX(The Portable Operating System Interface)增加了特殊的字符类，如[:alnum:]是[A-Za-z0-9]的另一个写法。要把它们放到[]号内才能成为正则表达式，如[A- Za-z0-9]或[[:alnum:]]。在linux下的grep除fgrep外，都支持POSIX的字符类。</span><br><span class="line"></span><br><span class="line">[:alnum:]    <span class="comment">#文字数字字符   </span></span><br><span class="line">[:alpha:]    <span class="comment">#文字字符   </span></span><br><span class="line">[:digit:]    <span class="comment">#数字字符   </span></span><br><span class="line">[:graph:]    <span class="comment">#非空字符（非空格、控制字符）   </span></span><br><span class="line">[:lower:]    <span class="comment">#小写字符   </span></span><br><span class="line">[:cntrl:]    <span class="comment">#控制字符   </span></span><br><span class="line">[:<span class="built_in">print</span>:]    <span class="comment">#非空字符（包括空格）   </span></span><br><span class="line">[:punct:]    <span class="comment">#标点符号   </span></span><br><span class="line">[:space:]    <span class="comment">#所有空白字符（新行，空格，制表符）   </span></span><br><span class="line">[:upper:]    <span class="comment">#大写字符   </span></span><br><span class="line">[:xdigit:]   <span class="comment">#十六进制数字（0-9，a-f，A-F）</span></span><br></pre></td></tr></table></figure><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><h2 id="查找文件中制定行的内容哦并输出到制定文件中"><a href="#查找文件中制定行的内容哦并输出到制定文件中" class="headerlink" title="查找文件中制定行的内容哦并输出到制定文件中"></a>查找文件中制定行的内容哦并输出到制定文件中</h2><p>被找文件：images.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># id x y z qw qx qy qz image</span></span><br><span class="line">1 1 1 1 1 0 0 0 00.JPG</span><br><span class="line">2 2 2 2 2 2 2 2 2 2 2 2 2 2</span><br><span class="line">3 1 2 2 1 0 0 0 11.JPG</span><br><span class="line">4 2 3 3 3 3 3 3 3 3 3 3 3 3</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此处想要查找和的得到包含JPG行的内容，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'JPG$'</span> images.txt &gt; image.txt</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.cnblogs.com/peida/archive/2012/12/17/2821195.html" target="_blank" rel="noopener">每天一个linux命令（39）：grep 命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac上opencv和viz模块配置</title>
      <link href="/2019/02/13/mac%E4%B8%8Aopencv%E5%92%8Cviz%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/02/13/mac%E4%B8%8Aopencv%E5%92%8Cviz%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Mac上安装opencv使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install opencv</span><br></pre></td></tr></table></figure><p>卸载opencv使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall opencv</span><br></pre></td></tr></table></figure><p>但是，该方法安装的opencv不带viz模块。想要使用viz模块需要安装vtk并重新安装opencv。</p><p>本教程基于mac系统，安装opencv3.1+vtk模块。</p><h1 id="vtk模块配置"><a href="#vtk模块配置" class="headerlink" title="vtk模块配置"></a>vtk模块配置</h1><h2 id="下载vtk源码"><a href="#下载vtk源码" class="headerlink" title="下载vtk源码"></a>下载vtk源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitlab.kitware.com/vtk/vtk.git</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vtk</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j3</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h1 id="opencv3-1模块配置"><a href="#opencv3-1模块配置" class="headerlink" title="opencv3.1模块配置"></a>opencv3.1模块配置</h1><h2 id="下载opencv源码"><a href="#下载opencv源码" class="headerlink" title="下载opencv源码"></a>下载opencv源码</h2><p>下载地址：<a href="https://github.com/opencv/opencv/releases" target="_blank" rel="noopener">opencv3.1</a>和<a href="https://github.com/opencv/opencv_contrib/releases" target="_blank" rel="noopener">opencv_contrib</a>。</p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opengl教程</title>
      <link href="/2019/02/09/opengl%E6%95%99%E7%A8%8B/"/>
      <url>/2019/02/09/opengl%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h1 id="2-基元类型-Primitive-Type"><a href="#2-基元类型-Primitive-Type" class="headerlink" title="2. 基元类型(Primitive Type)"></a>2. 基元类型(Primitive Type)</h1><p>使用OpenGL时，建议使用OpenGL定义的基元类型。比如使用float时我们加上前缀GL（因此写作GLfloat）。int、uint、char、bool等等也类似。OpenGL定义的这些GL基元类型的内存布局是与平台无关的，而int等基元类型在不同操作系统上可能有不同的内存布局。使用GL基元类型可以保证你的程序在不同的平台上工作一致。</p><h1 id="3-第三方库简介"><a href="#3-第三方库简介" class="headerlink" title="3. 第三方库简介"></a>3. 第三方库简介</h1><p>在我们画出出色的效果之前，首先要做的就是创建一个OpenGL上下文(Context)和一个用于显示的窗口。然而，这些操作在每个系统上都是不一样的，OpenGL有目的地从这些操作抽象(Abstract)出去。这意味着我们不得不自己处理创建窗口，定义OpenGL上下文以及处理用户输入。</p><p>幸运的是，有一些库已经提供了我们所需的功能，其中一部分是特别针对OpenGL的。这些库节省了我们书写操作系统相关代码的时间，提供给我们一个窗口和上下文用来渲染。最流行的几个库有GLUT，SDL，SFML和GLFW。在教程里我们将使用GLFW。</p><h2 id="3-1-GLFW"><a href="#3-1-GLFW" class="headerlink" title="3.1 GLFW"></a>3.1 GLFW</h2><p>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文，定义窗口参数以及处理用户输入，这正是我们需要的。</p><p>接下来，如果你已经添加GLFW和OpenGL库到连接器设置中，你可以用如下方式添加GLFW头文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW\glfw3.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="3-2-GLAD"><a href="#3-2-GLAD" class="headerlink" title="3.2 GLAD"></a>3.2 GLAD</h2><p>到这里还没有结束，我们仍然还有一件事要做。因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法因平台而异，在Windows上会是类似这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数原型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*GL_GENBUFFERS)</span> <span class="params">(GLsizei, GLuint*)</span></span>;</span><br><span class="line"><span class="comment">// 找到正确的函数并赋值给函数指针</span></span><br><span class="line">GL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)wglGetProcAddress(<span class="string">"glGenBuffers"</span>);</span><br><span class="line"><span class="comment">// 现在函数可以被正常调用了</span></span><br><span class="line">GLuint buffer;</span><br><span class="line">glGenBuffers(<span class="number">1</span>, &amp;buffer);</span><br></pre></td></tr></table></figure><p>你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中GLAD是目前最新，也是最流行的库。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> opengl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> opengl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_问题汇总</title>
      <link href="/2018/12/17/python-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2018/12/17/python-%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h1><p>报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/local/bin/pip"</span>, line 7, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from pip._internal import main</span><br><span class="line">ImportError: No module named _internal</span><br></pre></td></tr></table></figure></p><p>解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br><span class="line">python2.7 get-pip.py --force-reinstall</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>imu标定</title>
      <link href="/2018/12/15/imu%E6%A0%87%E5%AE%9A/"/>
      <url>/2018/12/15/imu%E6%A0%87%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SLAM学习之四元数</title>
      <link href="/2018/11/26/SLAM%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9B%9B%E5%85%83%E6%95%B0/"/>
      <url>/2018/11/26/SLAM%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9B%9B%E5%85%83%E6%95%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> SLAM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLAM学习之刚体运动</title>
      <link href="/2018/11/24/SLAM%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%9A%E4%BD%93%E8%BF%90%E5%8A%A8/"/>
      <url>/2018/11/24/SLAM%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%9A%E4%BD%93%E8%BF%90%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-刚体运动定义"><a href="#1-刚体运动定义" class="headerlink" title="1. 刚体运动定义"></a>1. 刚体运动定义</h1><p>[ 定义] 刚体：质点间距离保持不变的质点系</p><p>[ 定理] 刚体的空间位置由任意与刚体固连的不共线三点决定</p><p>[ 定义] 自由刚体：除任两点间距离不变外，不受其它额外约束</p><p>[ 推论] 自由刚体的自由度DOF=6.</p><p>自由度：自由度是指物理学当中描述一个物理状态，独立对物理状态结果产生影响的变量的数量。</p><p>例如：运动自由度是确定一个系统在空间中的位置所需要的最小坐标数。例如火车车厢沿铁轨的运动，只需从某一起点站沿铁轨量出路程，就可完全确定车厢所在的位置，即其位置用一个量就可确定，我们说火车车厢的运动有一个自由度；汽车能在地面上到处运动，自由程度比火车大些，需要用两个量（例如直角坐标x,y）才能确定其位置，我们说汽车的运动有两个自由度；飞机能在空中完全自由地运动，需要用三个量（例如直角坐标x,y,z）才能确定其位置，我们说飞机在空中的运动有三个自由度。所谓自由度数就是确定物体在空间的位置所需独立坐标的数目。</p><p>描述刚体的运动只要质心的速度向量加上转动向量就够了,所以是3+3=6</p><p>三维空间中三个点可以确定一个刚体，<br>三个点之间相互距离不变，所以两两一个约束条件，这是3个约束条件。<br>每个点在三维空间中有3个自由度。<br>所以刚体在三维空间自由度数 n = 3 × 3 - 3 = 6</p><p>[ 定义] 平动: 刚体中任何两点的连线在运动中保持方向不变</p><p>[ 推论] 平动刚体DOF=3</p><p>[ 定义] 转动: 刚体运动中有两点( 例如A,B) 的连线不动</p><p>[ 欧拉定理] 刚体定点运动的任意位移可以通过绕该定点的某个轴的一次转动实现</p><p>[ 夏莱定理] 刚体一般运动可以分解为任选基点的平动和绕通过基点的某个轴的转动。选择不同基点时得到的平动位移是不同的，但转动轴的方向和转角不依赖于基点的选择.</p><h1 id="1-点与坐标系"><a href="#1-点与坐标系" class="headerlink" title="1. 点与坐标系"></a>1. 点与坐标系</h1><p>给定坐标系，点可以使用坐标来表达。</p><p>坐标系一搬由坐标轴和坐标系原点组成，分为右手系和左手系。</p><p>向量可使用点在坐标系的坐标来描述。</p><p>常用的向量运算包括加、减、内积和外积。</p><h1 id="2-旋转向量（轴-角）"><a href="#2-旋转向量（轴-角）" class="headerlink" title="2. 旋转向量（轴-角）"></a>2. 旋转向量（轴-角）</h1><p>旋转向量的长度（模）表示绕轴逆时针旋转的角度（弧度）。</p><h1 id="3-旋转矩阵"><a href="#3-旋转矩阵" class="headerlink" title="3. 旋转矩阵"></a>3. 旋转矩阵</h1><h2 id="3-1-2D旋转"><a href="#3-1-2D旋转" class="headerlink" title="3.1. 2D旋转"></a>3.1. 2D旋转</h2><h3 id="3-1-1-点旋转"><a href="#3-1-1-点旋转" class="headerlink" title="3.1.1 点旋转"></a>3.1.1 点旋转</h3><p>如下图所示，在坐标系O-xy中有一点P，已知坐标为(x,y)，向量OP与X轴的夹角为β。将点P绕坐标原点O旋转了α角到P’（这里规定与右手系旋转方向相同的为旋转正方向，对于2D情况而言即逆时针旋转为旋转正方向）。设P’点的坐标为(x’,y’)。点P、P’在x、y轴上的垂足分别为A、B、C、D。试用P点坐标表示P’点坐标。</p><p>首先由于旋转，所以OP=OP’，设其长度为r。有如下公式。</p><p>$$r=\sqrt{x^2+y^2}$$</p><p>参考：<a href="https://zhaoxuhui.top/blog/2018/03/13/RelationBetweenQ4&amp;R&amp;Euler.html#%E4%BA%8C%E6%AC%A7%E6%8B%89%E8%A7%92" target="_blank" rel="noopener">https://zhaoxuhui.top/blog/2018/03/13/RelationBetweenQ4&amp;R&amp;Euler.html#%E4%BA%8C%E6%AC%A7%E6%8B%89%E8%A7%92</a></p><h3 id="3-1-2-坐标系旋转"><a href="#3-1-2-坐标系旋转" class="headerlink" title="3.1.2 坐标系旋转"></a>3.1.2 坐标系旋转</h3><p>参考：<a href="https://www.cnblogs.com/gaoxiang12/p/5113334.html#mjx-eqn-eqpointOnPlane" target="_blank" rel="noopener">https://www.cnblogs.com/gaoxiang12/p/5113334.html#mjx-eqn-eqpointOnPlane</a></p><h2 id="3-2-3D变换"><a href="#3-2-3D变换" class="headerlink" title="3.2. 3D变换"></a>3.2. 3D变换</h2><p>参考：<a href="https://zhaoxuhui.top/blog/2018/03/13/RelationBetweenQ4&amp;R&amp;Euler.html#%E4%BA%8C%E6%AC%A7%E6%8B%89%E8%A7%92" target="_blank" rel="noopener">欧拉角、四元数、旋转矩阵推导及相互关系</a></p><h1 id="4-欧拉角"><a href="#4-欧拉角" class="headerlink" title="4. 欧拉角"></a>4. 欧拉角</h1><p>欧拉角是用三个旋转角度 α,β,γ 来标示旋转的。如图，图中蓝色坐标系是起始的坐标系，红色的坐标系是最后旋转完成的坐标系。整个旋转分为三个步骤：</p><ul><li>将坐标系绕 z 轴旋转 α 角</li><li>将旋转后坐标系绕<strong>自己本身的</strong> x 轴（也就是图中的 N 轴）旋转 β 角</li><li>将旋转后坐标系绕<strong>自己本身的</strong> z 轴旋转 γ 角</li></ul><p>由于绕不同的轴旋转所得到的欧拉角是不同的，所以欧拉角在使用的时候必须要先指明旋转的顺序，这里使用的是“zxz”的顺序。</p><h2 id="欧拉角转旋转矩阵"><a href="#欧拉角转旋转矩阵" class="headerlink" title="欧拉角转旋转矩阵"></a>欧拉角转旋转矩阵</h2><p>欧拉角表示的旋转转换成旋转矩阵就是</p><p>Rz(α)Rx(β)Rz(γ)</p><p>需要注意，这里的后面两次旋转并不是在原本固定的坐标系下的旋转。在旋转矩阵中，每一次旋转的叠加都是在左边乘上对应的旋转矩阵，然而，在这里乘法的顺序是相反的。</p><p>这可以这样来理解，假设最原始的固定的坐标系是 C0：</p><ul><li>假设有一个和 C0 重合坐标系 C3，先将 C3 绕 C0 的 z 轴旋转 γ 角</li><li>假设有一个和 C0 重合坐标系 C2，将 C2 和前一步旋转后的 C3 一起绕 C0 的 x轴旋转 β 角</li><li>假设有一个和 C0 重合坐标系 C1，将 C1 和前一步旋转后的 C2,C3 一起绕 C0 的 z 轴旋转 αα 角</li></ul><p>然后我们仅看这三个坐标系的关系：C0 绕自己的 zz 轴旋转 αα 角就可以和 C1 重合；C1 绕自己的 x轴旋转 ββ 角可以和 C2 重合，这是因为 C1 和 C2 在最后一步是一起旋转的，它们的相对位置不会改变；同样可以知道 C2 绕自己的 z 轴旋转 γ 角就可以和 C3 重合。</p><p>在这里 C1,C2 相当于是前面欧拉角旋转的前两步得到的坐标系。</p><p>这样的话从 C0 到 C3 的变换就相当于之前欧拉角的旋转变换，因此按照这个过程，旋转矩阵就是按照上面的顺序相乘了。</p><p>参考：</p><ul><li><a href="https://zhaoxuhui.top/blog/2018/03/13/RelationBetweenQ4&amp;R&amp;Euler.html#%E4%BA%8C%E6%AC%A7%E6%8B%89%E8%A7%92" target="_blank" rel="noopener">欧拉角、四元数、旋转矩阵推导及相互关系</a></li></ul><h1 id="5-四元数"><a href="#5-四元数" class="headerlink" title="5. 四元数"></a>5. 四元数</h1><h1 id="6-相互转换"><a href="#6-相互转换" class="headerlink" title="6. 相互转换"></a>6. 相互转换</h1><h2 id="6-1-旋转向量与旋转矩阵"><a href="#6-1-旋转向量与旋转矩阵" class="headerlink" title="6.1 旋转向量与旋转矩阵"></a>6.1 旋转向量与旋转矩阵</h2><p>旋转向量与旋转矩阵可以通过罗德里格斯（Rodrigues）变换进行转换。</p><p>参考：</p><ul><li><p><a href="https://blog.csdn.net/qq_36235192/article/details/79254687" target="_blank" rel="noopener">罗德里格斯公式的推导过程</a></p></li><li><p><a href="https://blog.csdn.net/baidu_28455067/article/details/78737311" target="_blank" rel="noopener">视觉SLAM十四讲（一）——罗德里格斯转换公式推导</a></p></li></ul><h3 id="6-1-1-旋转向量转旋转矩阵"><a href="#6-1-1-旋转向量转旋转矩阵" class="headerlink" title="6.1.1 旋转向量转旋转矩阵"></a>6.1.1 旋转向量转旋转矩阵</h3><p>将旋转向量转换为旋转矩阵： </p><p>R=cosθI+(1−cosθ)nnT+sinθn∧</p><h3 id="6-1-2-旋转矩阵转旋转向量"><a href="#6-1-2-旋转矩阵转旋转向量" class="headerlink" title="6.1.2 旋转矩阵转旋转向量"></a>6.1.2 旋转矩阵转旋转向量</h3><p>将旋转矩阵转换为旋转向量： </p><p>tr(R)=cosθtr(I)+(1−cosθ)tr(nnT)+sinθtr(n∧)</p><p>因此：</p><p>θ=arccos(tr(R−1)/2)</p><h3 id="6-1-3-代码实现"><a href="#6-1-3-代码实现" class="headerlink" title="6.1.3 代码实现"></a>6.1.3 代码实现</h3><p>（1）<strong>opencv代码实现：</strong></p><p>可以直接采用opencv中的Rodrigues函数实现，函数原型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rodrigues</span><span class="params">( InputArray src, OutputArray dst, OutputArray jacobian = noArray() )</span></span>;</span><br></pre></td></tr></table></figure><p><strong>参数：</strong><br>输入src：旋转向量（3<em>1或者1</em>3）或者旋转矩阵（3<em>3）；<br>输出dst：旋转矩阵（3</em>3）或者旋转向量（3<em>1或者1</em>3）；<br>输出jacobin：可选项，输出雅克比矩阵（3<em>9或者9</em>3），输入数组对输出数组的偏导数。</p><p>参考：<a href="https://blog.csdn.net/u013341645/article/details/77686601" target="_blank" rel="noopener">旋转向量和旋转矩阵的互转换</a></p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cv.h&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i;  </span><br><span class="line">    <span class="keyword">double</span> r_vec[<span class="number">3</span>]=&#123;<span class="number">-2.100418</span>,<span class="number">-2.167796</span>,<span class="number">0.273330</span>&#125;;  </span><br><span class="line">    <span class="keyword">double</span> R_matrix[<span class="number">9</span>];  </span><br><span class="line">    CvMat pr_vec;  </span><br><span class="line">    CvMat pR_matrix;  </span><br><span class="line">  </span><br><span class="line">    cvInitMatHeader(&amp;pr_vec,<span class="number">1</span>,<span class="number">3</span>,CV_64FC1,r_vec,CV_AUTOSTEP);  </span><br><span class="line">    cvInitMatHeader(&amp;pR_matrix,<span class="number">3</span>,<span class="number">3</span>,CV_64FC1,R_matrix,CV_AUTOSTEP);  </span><br><span class="line">    cvRodrigues2(&amp;pr_vec, &amp;pR_matrix,<span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%f\n"</span>,R_matrix[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) Eigen库代码实现</p><p>旋转矩阵（3X3）:Eigen::Matrix3d<br>旋转向量（3X1）:Eigen::AngleAxisd</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//下面三个变量作为下面演示的中间变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function">AngleAxisd <span class="title">t_V</span><span class="params">(M_PI / <span class="number">4</span>, Vector3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>))</span></span>;</span><br><span class="line">    Matrix3d t_R = t_V.matrix();</span><br><span class="line">    <span class="function">Quaterniond <span class="title">t_Q</span><span class="params">(t_V)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对旋转向量（轴角）赋值的三大种方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.使用旋转的角度和旋转轴向量（此向量为单位向量）来初始化角轴</span></span><br><span class="line">    <span class="function">AngleAxisd <span class="title">V1</span><span class="params">(M_PI / <span class="number">4</span>, Vector3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>))</span></span>;<span class="comment">//以（0,0,1）为旋转轴，旋转45度</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Rotation_vector1"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; V1.matrix() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.使用旋转矩阵转旋转向量的方式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.1 使用旋转向量的fromRotationMatrix()函数来对旋转向量赋值（注意此方法为旋转向量独有,四元数没有）</span></span><br><span class="line">    AngleAxisd V2;</span><br><span class="line">    V2.fromRotationMatrix(t_R);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Rotation_vector2"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; V2.matrix() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.2 直接使用旋转矩阵来对旋转向量赋值</span></span><br><span class="line">    AngleAxisd V3;</span><br><span class="line">    V3 = t_R;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Rotation_vector3"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; V3.matrix() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.3 使用旋转矩阵来对旋转向量进行初始化</span></span><br><span class="line">    <span class="function">AngleAxisd <span class="title">V4</span><span class="params">(t_R)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Rotation_vector4"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; V4.matrix() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对旋转矩阵赋值的三大种方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.使用旋转矩阵的函数来初始化旋转矩阵</span></span><br><span class="line">    Matrix3d R1=Matrix3d::Identity();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Rotation_matrix1"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; R1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 使用旋转向量转旋转矩阵来对旋转矩阵赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.1 使用旋转向量的成员函数matrix()来对旋转矩阵赋值</span></span><br><span class="line">    Matrix3d R2;</span><br><span class="line">    R2 = t_V.matrix();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Rotation_matrix2"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; R2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.2 使用旋转向量的成员函数toRotationMatrix()来对旋转矩阵赋值</span></span><br><span class="line">    Matrix3d R3;</span><br><span class="line">    R3 = t_V.toRotationMatrix();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Rotation_matrix3"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; R3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-旋转矩阵与欧拉角"><a href="#6-2-旋转矩阵与欧拉角" class="headerlink" title="6.2 旋转矩阵与欧拉角"></a>6.2 旋转矩阵与欧拉角</h2><h3 id="6-2-1-旋转矩阵转欧拉角"><a href="#6-2-1-旋转矩阵转欧拉角" class="headerlink" title="6.2.1 旋转矩阵转欧拉角"></a>6.2.1 旋转矩阵转欧拉角</h3><p>有旋转矩阵</p><p>R=⎛⎝⎜⎜r11r21r31r12r22r32r13r23r33⎞⎠⎟⎟</p><p>可求出各轴的旋转角为</p><p>θZ=atan2(r21,r11)θY=atan2(−r31,r231+r233‾‾‾‾‾‾‾‾√)θX=atan2(r32,r33)</p><p><code>atan2</code>为C++中函数，atan2(y,x)的做法：当 x 的绝对值比 y 的绝对值大时使用 atan(y/x)；反之使用 atan(x/y)。这样就保证了数值稳定性。需要注意的是，旋转顺序必须要是Z、Y、X。</p><h3 id="6-2-2-欧拉角转旋转矩阵"><a href="#6-2-2-欧拉角转旋转矩阵" class="headerlink" title="6.2.2 欧拉角转旋转矩阵"></a>6.2.2 欧拉角转旋转矩阵</h3><p>某次旋转绕固定坐标轴X-Y-Z旋转(γ,β,α)或者说绕自身坐标轴Z-Y-X旋转(α,β,γ)，对应的旋转矩阵如下：</p><h3 id="6-2-3-代码实现"><a href="#6-2-3-代码实现" class="headerlink" title="6.2.3 代码实现"></a>6.2.3 代码实现</h3><p>（1）欧拉角转旋转矩阵</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能： 1. 通过给定的欧拉角计算对应的旋转矩阵</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function">Mat <span class="title">eulerAnglesToRotationMatrix</span><span class="params">(Vec3f &amp;theta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 计算旋转矩阵的X分量</span></span><br><span class="line">    Mat R_x = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>,<span class="number">3</span>) &lt;&lt;</span><br><span class="line">               <span class="number">1</span>,       <span class="number">0</span>,              <span class="number">0</span>,</span><br><span class="line">               <span class="number">0</span>,       <span class="built_in">cos</span>(theta[<span class="number">0</span>]),   -<span class="built_in">sin</span>(theta[<span class="number">0</span>]),</span><br><span class="line">               <span class="number">0</span>,       <span class="built_in">sin</span>(theta[<span class="number">0</span>]),   <span class="built_in">cos</span>(theta[<span class="number">0</span>])</span><br><span class="line">               );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算旋转矩阵的Y分量</span></span><br><span class="line">    Mat R_y = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>,<span class="number">3</span>) &lt;&lt;</span><br><span class="line">               <span class="built_in">cos</span>(theta[<span class="number">1</span>]),    <span class="number">0</span>,      <span class="built_in">sin</span>(theta[<span class="number">1</span>]),</span><br><span class="line">               <span class="number">0</span>,               <span class="number">1</span>,      <span class="number">0</span>,</span><br><span class="line">               -<span class="built_in">sin</span>(theta[<span class="number">1</span>]),   <span class="number">0</span>,      <span class="built_in">cos</span>(theta[<span class="number">1</span>])</span><br><span class="line">               );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算旋转矩阵的Z分量</span></span><br><span class="line">    Mat R_z = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>,<span class="number">3</span>) &lt;&lt;</span><br><span class="line">               <span class="built_in">cos</span>(theta[<span class="number">2</span>]),    -<span class="built_in">sin</span>(theta[<span class="number">2</span>]),      <span class="number">0</span>,</span><br><span class="line">               <span class="built_in">sin</span>(theta[<span class="number">2</span>]),    <span class="built_in">cos</span>(theta[<span class="number">2</span>]),       <span class="number">0</span>,</span><br><span class="line">               <span class="number">0</span>,               <span class="number">0</span>,                  <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并 </span></span><br><span class="line">    Mat R = R_z * R_y * R_x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）旋转矩阵转欧拉角</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能： 1. 检查是否是旋转矩阵</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isRotationMatrix</span><span class="params">(Mat &amp;R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat Rt;</span><br><span class="line">    transpose(R, Rt);</span><br><span class="line">    Mat shouldBeIdentity = Rt * R;</span><br><span class="line">    Mat I = Mat::eye(<span class="number">3</span>,<span class="number">3</span>, shouldBeIdentity.type());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  norm(I, shouldBeIdentity) &lt; <span class="number">1e-6</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能： 1. 通过给定的旋转矩阵计算对应的欧拉角</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function">Vec3f <span class="title">rotationMatrixToEulerAngles</span><span class="params">(Mat &amp;R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(isRotationMatrix(R));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> sy = <span class="built_in">sqrt</span>(R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>,<span class="number">0</span>) * R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>,<span class="number">0</span>) +  R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>,<span class="number">0</span>) * R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>,<span class="number">0</span>) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> singular = sy &lt; <span class="number">1e-6</span>; <span class="comment">// If</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> x, y, z;</span><br><span class="line">    <span class="keyword">if</span> (!singular) &#123;</span><br><span class="line">        x = <span class="built_in">atan2</span>(R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>,<span class="number">1</span>) , R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        y = <span class="built_in">atan2</span>(-R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>,<span class="number">0</span>), sy);</span><br><span class="line">        z = <span class="built_in">atan2</span>(R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>,<span class="number">0</span>), R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        x = <span class="built_in">atan2</span>(-R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>,<span class="number">2</span>), R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        y = <span class="built_in">atan2</span>(-R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>,<span class="number">0</span>), sy);</span><br><span class="line">        z = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Vec3f(x, y, z);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/u012423865/article/details/78219787" target="_blank" rel="noopener">欧拉角和旋转矩阵相互转换</a></p><p>Java版本：<a href="https://www.jianshu.com/p/2cc81ae00e25" target="_blank" rel="noopener">VR-四元素、旋转矩阵、欧拉角转换</a></p><h2 id="6-3-旋转矩阵与四元数"><a href="#6-3-旋转矩阵与四元数" class="headerlink" title="6.3 旋转矩阵与四元数"></a>6.3 旋转矩阵与四元数</h2><h3 id="6-3-1-旋转矩阵转四元数"><a href="#6-3-1-旋转矩阵转四元数" class="headerlink" title="6.3.1 旋转矩阵转四元数"></a>6.3.1 旋转矩阵转四元数</h3><h3 id="6-2-2-四元数转旋转矩阵"><a href="#6-2-2-四元数转旋转矩阵" class="headerlink" title="6.2.2 四元数转旋转矩阵"></a>6.2.2 四元数转旋转矩阵</h3><h2 id="6-4-欧拉角与四元数"><a href="#6-4-欧拉角与四元数" class="headerlink" title="6.4 欧拉角与四元数"></a>6.4 欧拉角与四元数</h2><h3 id="6-4-1-欧拉角转四元数"><a href="#6-4-1-欧拉角转四元数" class="headerlink" title="6.4.1 欧拉角转四元数"></a>6.4.1 欧拉角转四元数</h3><h3 id="6-4-2-四元数转欧拉角"><a href="#6-4-2-四元数转欧拉角" class="headerlink" title="6.4.2 四元数转欧拉角"></a>6.4.2 四元数转欧拉角</h3><h1 id="7-可视化"><a href="#7-可视化" class="headerlink" title="7. 可视化"></a>7. 可视化</h1><h2 id="7-1-四元数与欧拉角的对应关系和变化情况"><a href="#7-1-四元数与欧拉角的对应关系和变化情况" class="headerlink" title="7.1 四元数与欧拉角的对应关系和变化情况"></a>7.1 四元数与欧拉角的对应关系和变化情况</h2><p><a href="https://quaternions.online/" target="_blank" rel="noopener">https://quaternions.online/</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> SLAM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发之使用网络时间</title>
      <link href="/2018/11/23/Android%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4/"/>
      <url>/2018/11/23/Android%E5%BC%80%E5%8F%91%E4%B9%8B%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="使用truetime-android第三方库实现"><a href="#使用truetime-android第三方库实现" class="headerlink" title="使用truetime-android第三方库实现"></a>使用truetime-android第三方库实现</h1><p>github地址：<a href="https://github.com/instacart/truetime-android" target="_blank" rel="noopener">https://github.com/instacart/truetime-android</a></p><h2 id="配置教程"><a href="#配置教程" class="headerlink" title="配置教程"></a>配置教程</h2><p>详见：github的<a href="https://github.com/instacart/truetime-android/wiki/How-to-use-this-library" target="_blank" rel="noopener">wiki</a>，也可阅读本文实例教程。</p><p>Add this to your application’s build.gradle file:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">"https://jitpack.io"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    implementation <span class="string">'com.github.instacart.truetime-android:library-extension-rx:&lt;release-version&gt;'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// or if you want the vanilla version of Truetime:</span></span><br><span class="line">    implementation <span class="string">'com.github.instacart.truetime-android:library:&lt;release-version&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">"https://jitpack.io"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">implementation <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></span><br><span class="line"><span class="function">    implementation 'com.android.support:appcompat-v7:28.0.0-rc02'</span></span><br><span class="line"><span class="function">    implementation 'com.android.support.constraint:constraint-layout:1.1.2'</span></span><br><span class="line"><span class="function">    implementation 'com.github.instacart.truetime-android:library:3.3'</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>Importing ‘com.github.instacart.truetime-android:library:<release-version>‘ should be sufficient for this.</release-version></p><p>Then you must initialize it in onCreate() in your class that extendsandroid.app.Application.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TrueTime.build().initialize();</span><br></pre></td></tr></table></figure><p>例子：</p><p>APP.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TrueTime.build().withNtpHost(<span class="string">"time.ustc.edu.cn"</span>).initialize();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将APP.java添加到AndroidManifest.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">android:name=<span class="string">".App"</span></span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure><p>使用Date noReallyThisIsTheTrueDateAndTime = TrueTime.now();来获取网络时间。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kalman滤波</title>
      <link href="/2018/11/21/Kalman%E6%BB%A4%E6%B3%A2/"/>
      <url>/2018/11/21/Kalman%E6%BB%A4%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/36374943" target="_blank" rel="noopener">深度解析卡尔曼滤波在IMU中的使用</a></li><li><a href="https://zhuanlan.zhihu.com/p/37750839" target="_blank" rel="noopener">卡尔曼滤波中关键参数的调整</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 卡尔曼滤波 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 卡尔曼滤波 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIO评估指标</title>
      <link href="/2018/11/20/VIO%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87/"/>
      <url>/2018/11/20/VIO%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><p>加速度 a 是沿三个轴\(a_{x}\),\(a_{y}\),\(a_{z}\)</p><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><table><thead><tr><th>Dataset</th><th>Year</th><th>Carrier</th><th>Environment</th><th>Scene setup</th><th>Hardware setup</th><th>Distance (total)</th><th>Long-range use-case</th><th>3D point cloud</th><th>Ground-truth</th><th>Accuracy</th></tr></thead><tbody><tr><td>KITTI</td><td>2012</td><td>Car</td><td>Outdoors</td><td>City-scale</td><td>Custom</td></tr><tr><td>EuRoC</td><td>2016</td></tr><tr><td>ADVIO</td><td>2018</td></tr><tr><td>RIDI</td><td>2018</td></tr></tbody></table><h1 id="TUM"><a href="#TUM" class="headerlink" title="TUM"></a>TUM</h1><p>Cite: A Benchmark for the Evaluation of RGB-D SLAM Systems</p><p>Dataset download: <a href="http://vision.in.tum.de/data/datasets/rgbd-dataset" target="_blank" rel="noopener">http://vision.in.tum.de/data/datasets/rgbd-dataset</a></p><p>Evaluation index:</p><ul><li>Relative Pose Error (RPE)<ul><li>measures the difference between the estimated motion and the true motion</li></ul></li><li>Absolute Trajectory Error (ATE)<ul><li>first aligns the two trajectories and then evaluates directly the absolute pose differences</li></ul></li></ul><h2 id="点云与图像数据的关联"><a href="#点云与图像数据的关联" class="headerlink" title="点云与图像数据的关联"></a>点云与图像数据的关联</h2><p>没有直接的rgb-depth一一对应关系。由于采集时间的差异，几乎没有两张图像是同一个时刻采集的。然而，我们在处理图像时，需要把一个RGB和一个depth当成一对来处理。所以，我们需要一步预处理，找到rgb和depth图像的一一对应关系。</p><p>TUM为我们提供了一个工具来做这件事，详细的说明请看：<a href="http://vision.in.tum.de/data/datasets/rgbd-dataset/tools" target="_blank" rel="noopener">http://vision.in.tum.de/data/datasets/rgbd-dataset/tools</a> 该网页整理了一些常用工具，包括时间配对，ground-truth误差比对、图像到点云的转换等。对于现在预处理这一步，我们需要的是一个 associate.py 文件，如下（你可以直接把内容拷下来，存成本地的associate.py文件）。</p><p>如果读者熟悉python，就很容易看懂它的用法。实际上，只要给它两个文件名即可，它会输出一个匹配好的序列，像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python associate.py rgb.txt depth.txt</span><br></pre></td></tr></table></figure><p>输出则是一行一行的数据，配对好的RGB图和深度图，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1305031955.536891 rgb/1305031955.536891.png 1305031955.552015 depth/1305031955.552015.png</span><br></pre></td></tr></table></figure><p>程序默认时间差在0.02内的就可以当成一对图像。为了保存这个结果，我们可以把它输出到一个文件中去，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python associate.py rgb.txt depth.txt &gt; associate.txt</span><br></pre></td></tr></table></figure><p>只要有了这个associate.txt文件，我们就可以找到一对对的RGB和彩色图。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> VIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> VIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AR引擎调研</title>
      <link href="/2018/11/17/AR%E5%BC%95%E6%93%8E%E8%B0%83%E7%A0%94/"/>
      <url>/2018/11/17/AR%E5%BC%95%E6%93%8E%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h1 id="SLAM-AR"><a href="#SLAM-AR" class="headerlink" title="SLAM AR"></a>SLAM AR</h1><p>ARKit （好）<br>ARCore（好）<br>网易洞见（好）<br>EasyAR 2.1.0 Pro（一般）<br>ARToolKit （差）<br>Wikitude（较好）<br>Maxst（好）</p><h1 id="ARKit"><a href="#ARKit" class="headerlink" title="ARKit"></a>ARKit</h1><h1 id="ARCore"><a href="#ARCore" class="headerlink" title="ARCore"></a>ARCore</h1><ul><li><p>条件</p><ul><li>Android SDK 7.0 (API level 24) or higher</li><li>minSdk 19</li><li>Google Pixel and Pixel XL。Samsung Galaxy S8 (SM-G950U, SM-G950N, SM-G950FD, SM-G950FD, SM-G950W, SM-G950U1)</li></ul></li><li><p>功能点与特点</p><ul><li>支持平面监测</li><li>支持环境光照预估</li><li>支持直接识别 frame 增加锚点</li><li>demo 中未见目标图像识别</li><li>支持机型暂时较少</li><li>移动手机，模型显示稳定</li></ul></li><li><p>价格</p><ul><li>免费</li></ul></li></ul><h1 id="网易洞见"><a href="#网易洞见" class="headerlink" title="网易洞见"></a>网易洞见</h1><ul><li><p>条件</p><ul><li>无机型限制</li></ul></li><li><p>功能点与特点</p><ul><li>支持 Android、iOS</li><li>支持指定目标图像识别</li><li>支持即时场景投放，显示效果好</li><li>支持 SLAM</li><li>对机器有要求，红米 Note 4 有卡顿（官方demo）</li></ul></li><li><p>价格</p><ul><li>收费</li></ul></li></ul><h1 id="EasyAR"><a href="#EasyAR" class="headerlink" title="EasyAR"></a>EasyAR</h1><ul><li><p>条件</p><ul><li>无机型限制</li></ul></li><li><p>功能点与特点</p><ul><li>支持平台 Android，iOS，Unity</li><li>支持单图和多图识别，可设置跟踪器数目，支持三维模型跟踪</li><li>支持即时视频帧图像识别</li><li>支持二维码识别</li><li>视频播放</li><li>支持录屏</li><li>2.1 专业版支持平面监测</li><li>容易上手，API 设计友好</li></ul></li><li><p>价格</p><ul><li>v1.3.1 免费，无水印，仅支持图像识别</li><li>v2.0.0，v2.1.0 专业版收费，支持 3D 物体识别，环境感知，云识别，app 云打包。￥2999/一个APP，一次性收费，永久使用</li><li>云端图库识别，根据日活沟通联系价格</li></ul></li><li><p>结论</p><ul><li><strong><em>设备能运行demo，有slam，效果很不稳定，demo没显示相机图像</em></strong></li></ul></li></ul><h1 id="Maxst"><a href="#Maxst" class="headerlink" title="Maxst"></a>Maxst</h1><ul><li><p>条件</p><ul><li>无机型限制</li></ul></li><li><p>功能与特点</p><ul><li>支持平台：Android，iOS，Windows，Mac OS</li><li>支持指定图像识别</li><li>支持视频播放</li><li>支持即时视频图像识别</li><li>视频增强显示</li><li>支持 SLAM</li><li>支持二维码和条形码扫描</li><li>集成效果较好，模型显示较稳定</li><li>集成简单，文档清晰</li></ul></li><li><p>价格</p><ul><li>收费版：499（支持查看，社区支持），（增加邮件支持）</li><li>免费版：有水印，功能与收费版误差别</li></ul></li><li><p>结论</p><ul><li><strong><em>无尺度信息，不可用</em></strong></li><li>MAXST构建的坐标系，坐标原点位置可以选择相机或者Target</li><li>MAXST的SLAM是基于视觉的，在初始化的时候就确定下来图片上的特征点，相机离开这些特征点会导致SLAM丢失，此时需要重新初始化</li><li>通过MAXST的接口获取特征点，返回的特征点数据是二维信息，不具备深度信息，不像ARCore返回的是三维坐标</li><li>VisualSLAM Demo定位效果还不错，想用来测距，后来发现每次初始化的位置不一样，建立坐标系大小不同，所以没有绝对的距离信息，不能用于直接测量距离</li><li>InstantTracker Demo不需要初始化即可找到平面了，有点神奇，不过不是很准，而且放置的物体不是很稳定</li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.zybuluo.com/zyl06/note/926425" target="_blank" rel="noopener">Android AR 简单调研</a></li><li><a href="https://blog.csdn.net/killfunst/article/details/82389460" target="_blank" rel="noopener">玩各种各样的AR库，最终选择了MAXST</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> AR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> AR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VINS代码解读</title>
      <link href="/2018/11/12/VINS%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2018/11/12/VINS%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="VINS简介"><a href="#VINS简介" class="headerlink" title="VINS简介"></a>VINS简介</h1><h1 id="VINS框架"><a href="#VINS框架" class="headerlink" title="VINS框架"></a>VINS框架</h1><h1 id="VINS代码解读"><a href="#VINS代码解读" class="headerlink" title="VINS代码解读"></a>VINS代码解读</h1><h2 id="ViewController-m"><a href="#ViewController-m" class="headerlink" title="ViewController.m"></a>ViewController.m</h2><p>入口函数：ViewController.mm的viewDidLoad</p><ul><li>VINS采用CvVideoCamera类来实现摄像机图像相关操作。<ul><li>CvVideoCamera* videoCamera：opencv提供的一个读取相机数据并转成cv::Mat格式的接口</li><li>self.videoCamera.delegate = self<ul><li>设置delegate</li><li>delegate对象需要继承CvVideoCameraDelegate</li><li>delegate对象需要实现processImage函数，用于回调收到的图像</li></ul></li><li>一些高级的属性需要获取device来设置，比如曝光时间等。</li><li>AVCaptureDevice *device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo]; [device lockForConfiguration:&amp;error]; [device setExposureTargetBias:ev completionHandler:^(CMTime syncTime) {}];   device.exposureMode = AVCaptureExposureModeCustom; [device unlockForConfiguration];</li><li>最后调用start函数开始接受图像</li><li><ul><li>(void)processImage:(cv::Mat&amp;)image开始回调得到能够图像</li></ul></li></ul></li><li>对imageView设置各种手势<ul><li>UIPanGestureRecognizer *resultPanGestureRecognizer =<pre><code>[[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handlePan:)];</code></pre>[self.imageView addGestureRecognizer:resultPanGestureRecognizer];</li><li>handlePan是回调函数</li><li>UIPinchGestureRecognizer 放大、缩小手势</li><li>UIGestureRecognizer是一个定义基本手势的抽象类，具体什么手势，在以下子类中包含：<ul><li>1、拍击UITapGestureRecognizer (任意次数的拍击)</li><li>2、向里或向外捏UIPinchGestureRecognizer (用于缩放)</li><li>3、摇动或者拖拽UIPanGestureRecognizer (拖动)</li><li>4、擦碰UISwipeGestureRecognizer (以任意方向)</li><li>5、旋转UIRotationGestureRecognizer (手指朝相反方向移动)</li><li>6、长按UILongPressGestureRecognizer (长按)</li></ul></li></ul></li><li>feature_tracker = new FeatureTracke</li><li>give projection variance<ul><li>vins.setIMUModel();</li></ul></li><li>UI控件设置<ul><li>设置UIActivityIndicatorView *indicator，就是开头那个初始化指引相关的</li></ul></li><li>初始化几个线程<ul><li>在作者的代码中主要是几个部分，mainLoop，saveData，loop_thread，globalLoopThread</li><li>上面的几个thread中，mainLoop，saveData两个线程仅仅是注册了一下，并没有正式启动，mainLoop的启动在下面。但是saveData仅仅是为了调试而写的，所以在实际中被作者给注释了。</li><li>loop_thread，globalLoopThread在注册的时候就直接启动。</li><li>再有，几个线程都分别对应函数run，saveData，loop_thread，globalLoopThread，作者在代码下面均给出了实现的方法。</li></ul></li><li>检查设备<ul><li>主要函数：<ul><li>bool deviceCheck = setGlobalParam(deviceName());</li><li>bool versionCheck = iosVersion();</li></ul></li><li>判断不同ios设备设置不同的相机内参和imu相机变换<ul><li>设置外参矩阵，平移和旋转：vins.setExtrinsic();</li><li>设置投影参数：vins.setIMUModel();</li><li>设置PnP外参矩阵：featuretracker.vins_pnp.setExtrinsic();</li><li>设置PnP投影参数：featuretracker.vins_pnp.setIMUModel();</li></ul></li></ul></li><li>如果检查通过就开启，主要是启动主线程mainLoop<ul><li>设置初始化IMU， 调用imuStartUpdate<ul><li><a href="#imu_process">IMU预积分</a></li></ul></li><li>[mainLoop start]</li></ul></li><li>函数：- (void)processImage:(cv::Mat&amp;)image<ul><li>isCapturing == YES 才开始处理图像</li><li>从image中提取时间戳，存入img_msg-&gt;header<ul><li>image的（0，0）（0，1）存的是时间戳</li><li>float lowPart = image.at<float>(0,0);  //modify opencv library, timestamp was stored at index 0,0<br>float highPart = image.at<float>(0,1);<br>float Group[2]；<br>Group[0] = lowPart;<br>Group[1] = highPart;<br>double<em> time_now_decode = (double</em>)Group;</float></float></li></ul></li><li>将图像从一个颜色空间转换到另一个颜色空间的转换<ul><li>cv::cvtColor(image, image, CV_BGRA2RGB);</li><li>cv::flip(image,image,-1); // 图像的翻转</li></ul></li><li>填充input_frame<ul><li>如果开启了回放start_playback，则从文件中读入图像放入input_frame</li><li>开启回放后，传感器的频率都降低</li><li>本来传感器获得的数据都放弃，用文件读取的数据代替</li></ul></li><li>使用cv::CLAHE做hist均等化<ul><li>自适应直方图均衡化(AHE)用来提升图像的对比度的一种计算机图像处理技术。和普通的直方图均衡算法不同，AHE算法通过计算图像的局部直方图，然后重新分布亮度来来改变图像对比度。因此，该算法更适合于改进图像的局部对比度以及获得更多的图像细节。</li><li>参考：<ul><li><a href="https://www.cnblogs.com/Imageshop/archive/2013/04/07/3006334.html" target="_blank" rel="noopener">限制对比度自适应直方图均衡化算法原理、实现及效果</a></li><li><a href="https://www.cnblogs.com/jsxyhelu/p/6435601.html" target="_blank" rel="noopener">CLAHE的实现和研究</a></li></ul></li></ul></li><li>给featuretracker填充一些数据<ul><li>solved_features</li><li>solved_vins</li></ul></li><li>调用featuretracker.readImage处理图像<ul><li><a href="#feature_tracker">单目视觉跟踪（KLT跟踪）</a></li></ul></li><li>把提取的特征点画到image上面</li><li>AR相关的东西也画在image上面，image最后返回出去，CvVideoCamera会自动跟新预览图片</li><li>算法和可视化的数据交换通过vins.drawresult完成</li><li>drawAR处理ar相关的可视化</li><li>Reprojection处理3d场景相关的可视化<ul><li>没有使用opengl，完全手动投影，然后用opencv画出来的</li><li>pan操作影响theta，phy。这两个控制可视化的视角</li><li>pinch操作影响radius。控制场景缩放</li><li>两指pan操作影响X0，Y0。在投影结束后，直接平移图片。</li><li>所有3d点通过World2VirturCam这个函数变化到opencv能够画图的空间上</li><li>输入的是所有的当前滑窗的3d点</li><li>traj通过keyframe_database.refine_path拿到</li><li>输入了滑窗所有相机的R和T：T_window，R_window</li></ul></li></ul></li><li>(void)run()<ul><li>实现一帧图像的处理[self process]<ul><li><a href="#imu_process">IMU预积分</a></li></ul></li></ul></li></ul><h2 id="传感器数据处理"><a href="#传感器数据处理" class="headerlink" title="传感器数据处理"></a>传感器数据处理</h2><h3 id="单目视觉跟踪（KLT跟踪）"><a href="#单目视觉跟踪（KLT跟踪）" class="headerlink" title="单目视觉跟踪（KLT跟踪）"></a><span id="feature_tracker">单目视觉跟踪（KLT跟踪）</span></h3><p><strong><em>Feature Tracker其实仅仅做了视觉前端的数据关联，只是视觉前端的第一步。与ORB通过描述子进行关联匹配不同的是，VINS采用了KLT光流的方式对角点进行关联匹配，并通过id的方式记录关联的结果。总的来说，速度快，抗干扰强，但牺牲了一定的精确度。</em></strong></p><p>通过ViewController.m中processImage:(cv::Mat&amp;)image的featuretracker.readImage()引入系统。</p><ul><li>调用featuretracker.readImage处理图像<ul><li>涉及到3个img(prev_img, cur_img, forw_img)和pts(prev_pts, cur_pts, forw_pts)，cur和forw分别是LK光流跟踪的前后两帧，forw才是真正的”当前”帧，cur实际上是上一帧，而prev是上一次发布的帧，它实际上是光流跟踪以后，prev和forw根据Fundamental Matrix做RANSAC剔除outlier用的，也就是rejectWithF()函数. </li><li>处理流程为: <ul><li>先调用cv::CLAHE对图像做直方图均衡化(如果EQUALIZE打开) </li><li>调用calcOpticalFlowPyrLK()跟踪cur_pts到forw_pts,根据status,把跟踪失败的点剔除(注意:prev, cur, forw, ids, track_cnt都要剔除),这里还加了个inBorder判断,把跟踪到图像边缘的点也剔除掉。函数可以得到当前图像中能通过光流追踪到的角点的坐标，保存在forw_pts中。由于前一帧保存的角点并不一定全部能够被当前帧追踪到，追踪的成功与否保存在status中。因此利用status和void reduceVector(vector<a href="cv::Point2f" target="_blank" rel="noopener">cv::Point2f</a> &amp;v, vector<uchar> status)函数对track_cnt，ids等进行更新。</uchar></li><li>经过更新之后track_cnt里面保存都是能够追踪到的角点的追踪次数，执行+1操作。</li><li>由于光流匹配会导致追踪到的角点越来与少，因此需要根据MAX_CNT和在当前帧中追踪到的角点数目差，进行新的角点的提取。依赖的函数为cv::goodFeaturesToTrack(forw_img, n_pts, MAX_CNT - forw_pts.size(), 0.01, MIN_DIST, mask);新提取的角点坐标保存在n_pts中。值得注意的是这里有个参数MIN_DIST，这个参数保证2个相邻角点之间的最小距离，通过这个参数可以在一定程度上保证角点的均匀分布。</li><li>先调用rejectWithF()对prev_pts和forw_pts做ransac剔除outlier.(实际就是调用了findFundamentalMat函数), 完了以后, 剩下的点track_cnt都加1.</li><li>调用setMask(), 先对跟踪点forw_pts按跟踪次数降排序, 然后依次选点, 选一个点, 在mask中将该点周围一定半径的区域设为0, 后面不再选取该区域内的点. 有点类似与non-max suppression, 但区别是这里保留track_cnt最高的点。这里mask的设置也是有讲究的，因为在forw_img中已经通过光流追踪到了一部分角点，当再次从forw_img中提取角点的时候，通过设置相应的mask,来保证角点的提取不会重复。设置mask是通过void FeatureTracker::setMask()实现的。void FeatureTracker::setMask()里面有个很有趣的操作就是会根据角点被追踪的次数进行排序，即track_cnt, ids, forw_pts都是按照角点被追踪的次数排序的。</li><li>在mask中不为0的区域,调用goodFeaturesToTrack提取新的角点n_pts, 通过addPoints()push到forw_pts中, id初始化-1, track_cnt初始化为1。</li><li>之后会把新追踪到的角点n_pts加入到forw_pts和ids中去。<br>最后调用void FeatureTracker::undistortedPoints()对角点图像坐标做去畸变处理，并计算每个角点的速度。</li></ul></li></ul></li></ul><h3 id="IMU预积分"><a href="#IMU预积分" class="headerlink" title="IMU预积分"></a><span id="imu_process">IMU预积分</span></h3><p>通过ViewController.m中ViewDidLoad的[self imuStartUpdate]函数和process()函数引入系统。</p><ul><li>Imu数据预处理<ul><li>acc回调<ul><li>读取后填充cur_acc，供在收到gyro后插值</li></ul></li><li>gyro回调<ul><li>acc和gyro时间同步<ul><li>成员变量gyro_buf用于插值</li><li>acc不变，gyro用附近的数据来插值</li></ul></li></ul></li><li>录制和回放IMU数据</li><li>填充imu_msg，最后缓存到成员变量imu_msg_buf中</li></ul></li><li>process()处理观测值数据线程<ul><li>得到观测值（IMU数据和图像特征点数据）<ul><li>定义观测值数据类measurements，包含了一组IMU数据和一帧图像数据的组合的容器，这里比较有意思的是使用了互斥锁和条件等待的功能，互斥锁用来锁住当前代码段，条件等待是等待上面两个接收数据完成就会被唤醒，然后从imu_buf和feature_buf中提取观测数据measurements = getMeasurements()，需要注意的是在提取观测值数据的时候用到的互斥锁会锁住imu_buf和feature_buf等到提取完成才释放，也就是说在提取的过程中上面两个回调函数是无法接收数据的，同时上面两个回调函数接收数据的时候也使用了互斥锁，锁住了imu_buf和feature_buf，这里也不能提取imu_buf和feature_buf中的数据。因此整个数据获取的过程是：回调函数接收数据，接收完一组数据唤醒提取数据的线程，提取数据的线程提取完数据后，回调函数就可以继续接收数据，依次往复。这就是线程间通信的曼妙啊！</li></ul></li><li>getMeasurements()返回观测值数据<ul><li>函数的作用顾名思义，就是得到一组IMU数据和图像特征数据组合的容器。首先保证存在IMU数据和图像特征数据，然后还要判断图像特征数据和IMU数据是否对齐。这里使用的是队列数据结构（先进先出front是先进的数据，back是后进的数据），需要满足两个条件就能保证数据对齐，第一是IMU最后一个数据的时间要大于图像特征最开始数据的时间，第二是IMU最开始数据的时间要小于图像特征最开始数据的时间。满足数据对齐就可以数据从队列中按对齐的方式取出来。这里知道把缓存中的图像特征数据或者IMU数据取完，才能够跳出此函数，返回数据。</li></ul></li><li>处理IMU数据和图像特征数据<ul><li>步骤1：处理IMU数据（遍历调用send_imu(imu_msg)将单个IMU数据的dt，线加速度值和角加速度值计算出来送给优化器处理，优化器调用estimator.processIMU(dt, Vector3d(dx, dy, dz), Vector3d(rx, ry,rz));方法。）<ul><li>函数VINS::processIMU(double dt, const Vector3d &amp;linear_acceleration, const Vector3d &amp;angular_velocity)</li><li>步骤1调用imu的预积分，调用push_back函数，函数中将时间，加速度和角速度分别存入相应的缓存中，同时调用了propagation函数 ,计算对应的状态量、协方差和雅可比矩阵</li><li>propagate(double _dt, const Eigen::Vector3d &amp;_acc_1, constEigen::Vector3d &amp;_gyr_1)</li><li>预积分传播方程，在预积分传播方程propagate中使用中点积分方法midPointIntegration计算预积分的测量值，中点积分法中主要包含两个部分，分别是得到状态变化量result_delta_q，result_delta_p，result_delta_v，result_linearized_ba，result_linearized_bg和得到跟新协方差矩阵和雅可比矩阵（注意，虽然得到了雅各比矩阵和协方差矩阵，但是还没有求残差和修正偏置一阶项的状态变量），由于使用的是中点积分，所以需要上一个时刻的IMU数据，包括测量值加速度和角速度以及状态变化量，初始值由构造函数提供。需要注意的是这里定义的delta_p等是累积的变化量，也就是说是从i时刻到当前时刻的变化量，这个才是最终要求的结果（为修正偏置一阶项），而result_delta_q等只是一个暂时的变量，最后残差和雅可比矩阵、协方差矩阵保存在pre_integrations中，还有一个函数这里暂时还没有用到，是在优化的时候才被调用的，但是其属于预积分的内容，evaluate函数在这个函数里面进行了状态变化量的偏置一阶修正以及残差的计算。</li></ul></li><li>步骤2预积分公式<ul><li>未考虑误差，提供imu计算的当前旋转，位置，速度，作为优化的初值。</li></ul></li></ul></li></ul></li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/ziliwangmoe/article/details/82930548" target="_blank" rel="noopener">vins-mobile代码解析1：viewDidLoad</a></li><li><a href="https://blog.csdn.net/wangshuailpp/article/details/78719438" target="_blank" rel="noopener">VINS理论与代码详解3——IMU预积分</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> VIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> VIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性方程组Ax=b求解</title>
      <link href="/2018/11/11/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84Ax-b%E6%B1%82%E8%A7%A3/"/>
      <url>/2018/11/11/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84Ax-b%E6%B1%82%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h1><p>有多个未知数，并且每个未知数的次数均为一次，这样多个未知数组成的方程组为线性方程组。</p><h1 id="高斯消元法"><a href="#高斯消元法" class="headerlink" title="高斯消元法"></a>高斯消元法</h1><p>高斯消元主要用来求解线性方程组，也可以求解矩阵的秩，矩阵的逆。在ACM中是一个有力的数学武器。时间复杂度是n^3，主要与方程组的个数，未知数的个数有关。高斯消元的过程就是手算解方程组的过程。加减消元，消去未知数，如果有多个未知数，就一直消去，直到得到类似kx=b（k和b为常数，x为未知数）的式子，就可以求解出未知数x，然后我们回代，依次求解出各个未知数的值，就解完了方程组。 </p><p>总共分两步： </p><ol><li>加减消元 </li><li>回代求未知数值</li></ol><h2 id="C-实现1"><a href="#C-实现1" class="headerlink" title="C++实现1"></a>C++实现1</h2><p>首先，我们对于每一行找到第一个不为零的元素，并且将这一行置为1 <em> </em> <em> </em>的形式，用这一行乘上倍数加到之后的每一行。</p><p>然后，我们从最后一行开始，选择主元，加到之前的每一行上，使得该列的元素都为零。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> e     0.00000001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>    n;<span class="comment">//规模nXn</span></span><br><span class="line"><span class="keyword">double</span> a[maxn][maxn];<span class="comment">//系数矩阵</span></span><br><span class="line"><span class="keyword">double</span> b[maxn];<span class="comment">//b矩阵</span></span><br><span class="line"><span class="keyword">double</span> m[maxn][maxn];<span class="comment">//中间变量矩阵</span></span><br><span class="line"><span class="keyword">double</span> x[maxn];<span class="comment">//最终解</span></span><br><span class="line"><span class="keyword">int</span>    H=<span class="number">1</span>;<span class="comment">//扩大H被结算（优化）</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">读取数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入系数矩阵规模n:= "</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|请输入系数矩阵,如：\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|1.1348 3.8326 1.1651 3.4017\n"</span>; </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|0.5301 1.7875 2.5330 1.5435\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|3.4129 4.9317 8.7643 1.3142\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|1.2371 4.9998 10.6721 0.0147\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">            a[i][j]*=H;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|请输入b矩阵，如：\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|9.5342 6.3941 18.4231 16.9237\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">        b[i]*=H;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中间矩阵输出</span></span><br><span class="line"><span class="comment">参数：消元次数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintProc</span><span class="params">(<span class="keyword">int</span> cases)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------第%d次消元结果如下：\n"</span>,cases);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">10</span>)&lt;&lt;a[i][j]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">10</span>)&lt;&lt;b[i]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"END THIS SHOW-------------\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">显示结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|结果为：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"x[%d]=  %lf\n"</span>,i,x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"|-----------------------------\n\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">顺序消元法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShunXuXiaoYuan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//消元计算</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            m[i][k]=a[i][k]/a[k][k];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=k+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                a[i][j]-=m[i][k]*a[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            b[i]-=m[i][k]*b[k];</span><br><span class="line">        &#125;</span><br><span class="line">        PrintProc(k);<span class="comment">//输出中间计算过程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回代求解</span></span><br><span class="line">    x[n]=b[n]/a[n][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        x[i]=b[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            x[i]-=a[i][j]*x[j];</span><br><span class="line">        x[i]/=a[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    Print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">列主消元</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LieZhuXiaoYuan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">        <span class="comment">//选主元[这一列的绝对值最大值]</span></span><br><span class="line">        <span class="keyword">double</span> ab_max=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span>       max_ik;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][k])&gt;ab_max)&#123;</span><br><span class="line">                ab_max=<span class="built_in">abs</span>(a[i][k]);</span><br><span class="line">                max_ik=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换行处理[先判断是否为0矩阵]</span></span><br><span class="line">        <span class="keyword">if</span>(ab_max&lt;e)&#123;<span class="comment">//0矩阵情况</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"det A=0\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(max_ik!=k)&#123;<span class="comment">//是否是当前行，不是交换</span></span><br><span class="line">            <span class="keyword">double</span> temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                temp=a[max_ik][j];</span><br><span class="line">                a[max_ik][j]=a[k][j];</span><br><span class="line">                a[k][j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=b[max_ik];</span><br><span class="line">            b[max_ik]=b[k];</span><br><span class="line">            b[k]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消元计算</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            a[i][k]/=a[k][k];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=k+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                a[i][j]-=a[i][k]*a[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">            b[i]-=a[i][k]*b[k];</span><br><span class="line">        &#125;</span><br><span class="line">        PrintProc(k);<span class="comment">//输出中间计算过程</span></span><br><span class="line">        <span class="keyword">if</span>(k&lt;n<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(a[n][n])&lt;e)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"det A=0\n"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//回代求解</span></span><br><span class="line">                x[n]=b[n]/a[n][n];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">                    x[i]=b[i];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                        x[i]-=a[i][j]*x[j];</span><br><span class="line">                    x[i]/=a[i][i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//输出结果</span></span><br><span class="line">                Print();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">主函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        read();</span><br><span class="line">        LieZhuXiaoYuan();</span><br><span class="line">        <span class="comment">//ShunXuXiaoYuan();</span></span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">书上高斯消元的例子：</span></span><br><span class="line"><span class="comment">1 1 1 </span></span><br><span class="line"><span class="comment">1 3 -2</span></span><br><span class="line"><span class="comment">2 -2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6 1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">书上列主消元的例子：</span></span><br><span class="line"><span class="comment">-0.002 2 2</span></span><br><span class="line"><span class="comment">1 0.78125 0</span></span><br><span class="line"><span class="comment">3.996 5.5625 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0.4 1.3816 7.4178</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="C-实现2"><a href="#C-实现2" class="headerlink" title="C++实现2"></a>C++实现2</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> a[MAXN][MAXN];<span class="comment">//增广矩阵</span></span><br><span class="line">    <span class="keyword">int</span> x[MAXN];<span class="comment">//解集</span></span><br><span class="line">    <span class="keyword">bool</span> free_x[MAXN];<span class="comment">//标记是否是不确定的变元</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> a; <span class="keyword">else</span> <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a/gcd(a,b)*b;<span class="comment">//先除后乘防溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 高斯消元法解方程组(Gauss-Jordan elimination).(-2表示有浮点数解，但无整数解，</span></span><br><span class="line">    <span class="comment">//-1表示无解，0表示唯一解，大于0表示无穷解，并返回自由变元的个数)</span></span><br><span class="line">    <span class="comment">//有equ个方程，var个变元。增广矩阵行数为equ,分别为0到equ-1,列数为var+1,分别为0到var.</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Gauss</span><span class="params">(<span class="keyword">int</span> equ,<span class="keyword">int</span> var)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j,k;</span><br><span class="line">        <span class="keyword">int</span> max_r;<span class="comment">// 当前这列绝对值最大的行.</span></span><br><span class="line">        <span class="keyword">int</span> col;<span class="comment">//当前处理的列</span></span><br><span class="line">        <span class="keyword">int</span> ta,tb;</span><br><span class="line">        <span class="keyword">int</span> LCM;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">int</span> free_x_num;</span><br><span class="line">        <span class="keyword">int</span> free_index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=var;i++)&#123;</span><br><span class="line">            x[i]=<span class="number">0</span>;</span><br><span class="line">            free_x[i]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换为阶梯阵.</span></span><br><span class="line">        col=<span class="number">0</span>; <span class="comment">// 当前处理的列</span></span><br><span class="line">        <span class="keyword">for</span>(k = <span class="number">0</span>;k &lt; equ &amp;&amp; col &lt; var;k++,col++)&#123;<span class="comment">// 枚举当前处理的行.</span></span><br><span class="line">        <span class="comment">// 找到该col列元素绝对值最大的那行与第k行交换.(为了在除法时减小误差)</span></span><br><span class="line">            max_r=k;</span><br><span class="line">            <span class="keyword">for</span>(i=k+<span class="number">1</span>;i&lt;equ;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i][col])&gt;<span class="built_in">abs</span>(a[max_r][col])) max_r=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max_r!=k)&#123;<span class="comment">// 与第k行交换.</span></span><br><span class="line">                <span class="keyword">for</span>(j=k;j&lt;var+<span class="number">1</span>;j++) swap(a[k][j],a[max_r][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[k][col]==<span class="number">0</span>)&#123;<span class="comment">// 说明该col列第k行以下全是0了，则处理当前行的下一列.</span></span><br><span class="line">                k--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(i=k+<span class="number">1</span>;i&lt;equ;i++)&#123;<span class="comment">// 枚举要删去的行.</span></span><br><span class="line">                <span class="keyword">if</span>(a[i][col]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    LCM = lcm(<span class="built_in">abs</span>(a[i][col]),<span class="built_in">abs</span>(a[k][col]));</span><br><span class="line">                    ta = LCM/<span class="built_in">abs</span>(a[i][col]);</span><br><span class="line">                    tb = LCM/<span class="built_in">abs</span>(a[k][col]);</span><br><span class="line">                    <span class="keyword">if</span>(a[i][col]*a[k][col]&lt;<span class="number">0</span>)tb=-tb;<span class="comment">//异号的情况是相加</span></span><br><span class="line">                    <span class="keyword">for</span>(j=col;j&lt;var+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                        a[i][j] = a[i][j]*ta-a[k][j]*tb;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1. 无解的情况: 化简的增广阵中存在(0, 0, ..., a)这样的行(a != 0).</span></span><br><span class="line">        <span class="keyword">for</span> (i = k; i &lt; equ; i++)&#123; <span class="comment">// 对于无穷解来说，如果要判断哪些是自由变元，那么初等行变换中的交换就会影响，则要记录交换.</span></span><br><span class="line">            <span class="keyword">if</span> (a[i][col] != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 无穷解的情况: 在var * (var + 1)的增广阵中出现(0, 0, ..., 0)这样的行，即说明没有形成严格的上三角阵.</span></span><br><span class="line">        <span class="comment">// 且出现的行数即为自由变元的个数.</span></span><br><span class="line">        <span class="keyword">if</span> (k &lt; var)&#123;</span><br><span class="line">            <span class="keyword">return</span> var - k; <span class="comment">// 自由变元有var - k个.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 唯一解的情况: 在var * (var + 1)的增广阵中形成严格的上三角阵.</span></span><br><span class="line">        <span class="comment">// 计算出Xn-1, Xn-2 ... X0.</span></span><br><span class="line">        <span class="keyword">for</span> (i = var - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            temp = a[i][var];</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; var; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i][j] != <span class="number">0</span>) temp -= a[i][j] * x[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp % a[i][i] != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-2</span>; <span class="comment">// 说明有浮点数解，但无整数解.</span></span><br><span class="line">            x[i] = temp / a[i][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line">    <span class="comment">//    freopen("out.txt","w",stdout);</span></span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">int</span> equ,var;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;equ, &amp;var) != EOF)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; equ; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; var + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> free_num = Gauss(equ,var);</span><br><span class="line">            <span class="keyword">if</span> (free_num == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"无解!\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (free_num == <span class="number">-2</span>) <span class="built_in">printf</span>(<span class="string">"有浮点数解，无整数解!\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (free_num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"无穷多解! 自由变元个数为%d\n"</span>, free_num);</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; var; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (free_x[i]) <span class="built_in">printf</span>(<span class="string">"x%d 是不确定的\n"</span>, i + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"x%d: %d\n"</span>, i + <span class="number">1</span>, x[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; var; i++)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"x%d: %d\n"</span>, i + <span class="number">1</span>, x[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="QR-分解"><a href="#QR-分解" class="headerlink" title="QR 分解"></a>QR 分解</h1><h2 id="QR-分解的形式"><a href="#QR-分解的形式" class="headerlink" title="QR 分解的形式"></a>QR 分解的形式</h2><p>QR 分解是把矩阵分解成一个正交矩阵与一个上三角矩阵的积。QR 分解经常用来解线性最小二乘法问题。QR 分解也是特定特征值算法即QR算法的基础。</p><h2 id="QR-分解的求解"><a href="#QR-分解的求解" class="headerlink" title="QR 分解的求解"></a>QR 分解的求解</h2><p>QR 分解的实际计算有很多方法，例如 Givens 旋转、Householder 变换，以及 Gram-Schmidt 正交化等等。每一种方法都有其优点和不足</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/pengwill97/article/details/77200372" target="_blank" rel="noopener">高斯消元快速入门</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 线性方程组求解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 线性方程组求解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVM调参</title>
      <link href="/2018/11/07/SVM%E8%B0%83%E5%8F%82/"/>
      <url>/2018/11/07/SVM%E8%B0%83%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SVM参数"><a href="#1-SVM参数" class="headerlink" title="1. SVM参数"></a>1. SVM参数</h1><p>SVM 怎样能得到好的结果：</p><ol><li>对数据做归一化（simple scaling） </li><li>应用 RBF kernel </li><li>用cross-validation和grid-search 得到最优的c和g </li><li>用得到的最优c和g训练训练数据 </li><li>测试</li></ol><h1 id="2-关于svm的C以及核函数参数设置"><a href="#2-关于svm的C以及核函数参数设置" class="headerlink" title="2. 关于svm的C以及核函数参数设置"></a>2. 关于svm的C以及核函数参数设置</h1><h2 id="参数C"><a href="#参数C" class="headerlink" title="参数C"></a>参数C</h2><p>C一般可以选择为：10^t , t=[- 4，4]就是0.0001 到10000。选择的越大，表示对错误例惩罚程度越大，可能会导致模型过拟合。</p><h2 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h2><p>（1）线性核函数 </p><p>（无其他参数） </p><p>（2）多项式核函数 </p><p>（重点是阶数的选择，即d，一般选择1-11：1 3 5 7 9 11，也可以选择2,4，6…） </p><p>（3）RBF核函数 </p><p>（径向基RBF内核，exp{-|xi-xj|^2/均方差}，其中均方差反映了数据波动的大小。gamma参数通常可选择下面几个数的倒数：0.1 0.2 0.4 0.6 0.8 1.6 3.2 6.4 12.8，默认的是类别数的倒数，即1/k，2分类的话就是0.5） </p><p>（4）sigmoid核函数 又叫做S形内核<br>两个参数g以及r：g一般可选1 2 3 4，r选0.2 0.4 0.6 0.8 1 </p><p><strong>说明</strong>：</p><p>（1）对于线性核函数，没有专门需要设置的参数 </p><p>（2）对于多项式核函数，有三个参数。-d用来设置多项式核函数的最高此项次数，也就是公式中的d，默认值是3。-g用来设置核函数中的gamma参数设置，也就是公式中的第一个r(gamma)，默认值是1/k（k是类别数）。-r用来设置核函数中的coef0，也就是公式中的第二个r，默认值是0。 </p><p>（3）对于RBF核函数，有一个参数。-g用来设置核函数中的gamma参数设置，也就是公式中的第一个r(gamma)，默认值是1/k（k是类别数）。 </p><p>（4）对于sigmoid核函数，有两个参数。-g用来设置核函数中的gamma参数设置，也就是公式中的第一个r(gamma)，默认值是1/k（k是类别数）。-r用来设置核函数中的coef0，也就是公式中的第二个r，默认值是0。</p><h2 id="Grid-Search"><a href="#Grid-Search" class="headerlink" title="Grid Search"></a>Grid Search</h2><p>使用grid Search虽然比较简单，而且看起来很naïve。但是他确实有两个优点：</p><ul><li>可以得到全局最优 </li><li>(C,gamma)相互独立，便于并行化进行</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装python3</title>
      <link href="/2018/10/25/CentOS7%E5%AE%89%E8%A3%85python3/"/>
      <url>/2018/10/25/CentOS7%E5%AE%89%E8%A3%85python3/</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/lovefengruoqing/article/details/79284573" target="_blank" rel="noopener">新装的CentOS 7安装python3</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RIDI论文阅读</title>
      <link href="/2018/10/23/RIDI%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>/2018/10/23/RIDI%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>IMU积分实现位姿估计是近几年来学术界和工业街的研究热点。IMU优点如下：（1）可24小时全天候工作；（2）能耗低；（3）工作环境要求低，例如背包等。理论也非常简单、直接，即利用加速度计读数一次积分得到速度，再次积分得到位移；角速度一次积分得到角度；利用位姿推算公式即可得到设备的实时的位姿。但是，由于移动设备所内置的IMU质量低、数据噪音大，导致IMU积分方法在几秒内就会漂移十几米的误差。</p><p>现有的解决方案中，基于IMU的PDR算法能够有效地推理得到人员的位姿。然而，PDR算法具有如下局限性：（1）对设备的朝向和人员的朝向不一致很敏感；（2）对设备的位置很敏感，例如放在包里精度明显下降。（3）PDR算法不能够感知侧向运动和向后运行状态。</p><p>因此，本文提出了一种基于数据驱动和回归学习的IMU双重积分估计算法，RIDI。最主要的亮点在于本文提出的RIDI算法旨在从线性加速度计和角速度计中回归学习出速度向量，之后，通过利用回归出来的速度来弥补线性加速度的低频误差。最后，标准的双重积分被用来估计设备的位姿。RIDI算法获得了平均位置估计误差为3%以下。</p><h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><p>（1）ARKit和ARCore</p><p>缺点：（1）该类算法对摄像头成像要求较高；（2）耗电。</p><p>（2）PDR</p><p>原因通Motivation所讲。</p><p>（3）WiFi</p><p>正交，可结合使用。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>RIDI算法包含两步：首先，RIDI从角速度和线性加速度数据中回归速度向量。其次，RIDI估计低频的线性加速度修正值以便估计出来的速度匹配回归值。修正的线性加速度被用来估计位置。RIDI假设位置估计发生在2D平面。</p><h2 id="坐标系定义"><a href="#坐标系定义" class="headerlink" title="坐标系定义"></a>坐标系定义</h2><p>三个坐标被定义：一是世界坐标系（W），估计的位置。二是，IMU坐标系（I）。三是，重力坐标系（S），其中y轴沿着重力方向。如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/ridi_03.png" alt></p><h2 id="学习速度"><a href="#学习速度" class="headerlink" title="学习速度"></a>学习速度</h2><p>首先，将设备姿态（如Tango）转换到重力坐标系，同时将IMU数据转换到重力坐标系。为了降低高频噪音，RIDI采用方差为2的高斯滤波对6通道的IMU数据进行处理，采用方差为30的高斯滤波对2通道的速度进行处理。进一步地，RIDI每200帧数据合并为1200维的特征向量。</p><p>如下图所示，本文对四种设备姿态进行建模分析：（1）设备放在腿部口袋里；（2）设备放在包里；（3）设备放在手上；（4）设备放在身体某个部位。RIDI的系统流程图如图所示，SVM算法备用来分类设备姿态。</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/ridi_01.png" alt></p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/ridi_02.png" alt></p><p>基于设备姿态，RIDI采用SVR算法来回归速度向量。对于SVM和SVR算法，通过网格搜索和3被交叉检验得到超参数Cz10。其他参数如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/ridi_04.png" alt></p><h2 id="修正加速度误差"><a href="#修正加速度误差" class="headerlink" title="修正加速度误差"></a>修正加速度误差</h2><p>IMU的误差来源于IMU读数、系统重力方向、系统旋转、气温等因素。本文将所有误差均归咎于bias。RIDI建模线性加速度计读数的bias在本体坐标系下（I）。为了加速运算过程和降低算法执行频率，RIDI采用每50帧IMU数据来进行回归学习。具体算法如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/ridi_05.png" alt></p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/ridi_06.png" alt></p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h2><p>超过4个人的60个运动序列数据，4种不同的设备放置位置。40组训练，20组测试。同时，也对没有参与训练和测试的运动序列进行测试。</p><h2 id="位置评估"><a href="#位置评估" class="headerlink" title="位置评估"></a>位置评估</h2><p>baseline算法：（1）IMU积分；（2）PDR算法（基于Android API）；</p><p>评估结果如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/ridi_07.png" alt></p><p>RIDI取得了行走150米平均位置误差在3%以内。</p><h2 id="一般化评估"><a href="#一般化评估" class="headerlink" title="一般化评估"></a>一般化评估</h2><p>论文同时对没有参与训练的设备和人员进行评估，实验结果如下：对于没有参与训练的设备而言，评估位置估计误差在3%以内。对于没有参与训练和测试的人员运动序列而言，评估位置估计误差在5%以内，最糟糕的情况达到100米误差为8米。</p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
          <category> IMU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学术 </tag>
            
            <tag> IMU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xcode使用gtest教程</title>
      <link href="/2018/10/23/xcode%E4%BD%BF%E7%94%A8gtest%E6%95%99%E7%A8%8B/"/>
      <url>/2018/10/23/xcode%E4%BD%BF%E7%94%A8gtest%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="gtest简介"><a href="#gtest简介" class="headerlink" title="gtest简介"></a>gtest简介</h1><h1 id="xcode配置gtest"><a href="#xcode配置gtest" class="headerlink" title="xcode配置gtest"></a>xcode配置gtest</h1><h2 id="编译gest"><a href="#编译gest" class="headerlink" title="编译gest"></a>编译gest</h2><p>下载gest代码: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/google/googletest.git</span><br></pre></td></tr></table></figure><p>进到目录：googletest-master/googletest/xcode，打开工程：gtest.xcodeproj.</p><ul><li>修改C++ Standard Library为C++11，否则将gtest集成到C++11的工程时，会有编译错误，</li><li>修改OS X Deployment Target为10.7及以上(C++11要求)</li><li>修改Architectures为通用，</li><li>修改后按Command+B编译代码。</li></ul><p>在Products中找到生成的库文件，拷贝到需要的地方。</p><p>如：</p><p>将gtest.a和gtest_main.a这两个文件放入至/usr/local/lib中，将googletest/include中的gtest文件夹放入至/usr/local/include中。</p><p>在需要用到Google Test的工程中Build Settings的Header Search Path填入/usr/local/include，Library Search Path填入/usr/local/lib，Other Linker Flags填入/usr/local/lib/gtest.a。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 单元测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vultr的ss服务器教程</title>
      <link href="/2018/10/21/vultr%E7%9A%84ss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2018/10/21/vultr%E7%9A%84ss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h1><p>登录<a href="https://www.vultr.com/" target="_blank" rel="noopener">vultr</a>，注册账号并充值。</p><p>选择vps操作系统时，不要选centos7系统！点击图中的CentOS几个字，会弹出centos6，然后选中centos6！entos7默认的防火墙可能会干扰ssr的正常连接！</p><p>开通服务器时，当出现了ip，不要立马去ping或者用xshell去连接，再等5分钟之后，有个缓冲时间。完成购买后，找到系统的密码记下来，部署服务器时需要用到。</p><h1 id="删除服务器"><a href="#删除服务器" class="headerlink" title="删除服务器"></a>删除服务器</h1><p>点击菜单栏Servers，可以看到开通的所有的服务器。找到server destroy，即可删除服务器。</p><h1 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h1><h2 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p [PORT] [username]@[ip]</span><br></pre></td></tr></table></figure><h2 id="更改默认端口"><a href="#更改默认端口" class="headerlink" title="更改默认端口"></a>更改默认端口</h2><p>(1) 登陆 SSH 修改配置文件，输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>(2) 能够看到#port 22，代表默认端口 22。按下键盘的 a，vi 命令中 a 是编辑，你按下 a 之后进入编辑状态。新增一行Port [port]，其中[port]为你想要更改的端口，最好是在10000-65535之间。</p><p>(3) 以上修改完后，重启 SSH 服务，并退出当前连接的 SSH 端口。命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>(4) 开启端口防火墙。Vi 编辑器打开防火墙列表的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>按下键盘的 a，进入 vi 命令的编辑状态，回车另起一行使用上下键和 delete 键配合添加 12366 端口。不需要明白那些命令是什么意思，照着 22 端口原样输入一遍，只把端口从 22 改为 12366 就可以了，注意 linux 是区分大小写的。添加新端口之后，按下键盘的“ESC”退出当前状态，再输入:“:wq”命令保存退出。</p><p>(5) 重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><p>(6) 检查防火墙状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables status</span><br></pre></td></tr></table></figure><p>(7) 重启服务器。</p><h1 id="部署VPS服务器"><a href="#部署VPS服务器" class="headerlink" title="部署VPS服务器"></a>部署VPS服务器</h1><p>mac用户登录服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip <span class="comment"># “ip”替换成你VPS的ip,按回车键，然后复制粘贴密码，按回车键即可登录。</span></span><br></pre></td></tr></table></figure><p>（1）连接成功后，就可以复制粘贴代码部署了。</p><p>CentOS6/Debian6/Ubuntu14 ShadowsocksR一键部署管理脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>备用脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget -N --no-check-certificate https://softs.wtf/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>按回车键，脚本会自动安装，以后只需要运行这个快捷命令就可以进入界面设置，快捷管理命令为：bash ssr.sh。</p><p>（2）出现管理界面后，输入数字1来安装SSR服务端。如果输入1后不能进入下一步，那么请退出，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。</p><p>（3）依次输入自己想设置的端口和密码 (密码建议用复杂点的字母组合，端口号为40-65535之间的数字)，回车键用于确认。</p><p>注：关于端口的设置，总的网络总端口有6万多个，理论上可以任意设置，但不要以0开头！但是有的地区需要设置特殊的端口才有效，一些特殊的端口比如80、143、443、1433、3306、3389、8080。</p><p>（4）选择想设置的加密方式，比如10，按回车键确认：aes-256-cfb。</p><p>（5）接下来是选择协议插件，选择2：auth-sha1_v4。</p><p>（6）选择并确认后，提示你是否选择兼容原版，这里的原版指的是SS客户端（SS客户端没有协议和混淆的选项），可以根据需求进行选择，演示选择y，之后进行混淆插件的设置。</p><p>注意：如果协议是origin，那么混淆也必须是plain；如果协议不是origin，那么混淆可以是任意的。有的地区需要把混淆设置成plain才好用。因为混淆不总是有效果，要看各地区的策略，有时候不混淆（plain）让其看起来像随机数据更好。（特别注意：tls 1.2_ticket_auth容易受到干扰！请选择除tls开头以外的其它混淆！！！）</p><p>（7）进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p><p>注意：关于限制设备数，这个协议必须是非原版且不兼容原版才有效，也就是必须使用SSR协议的情况下，才有效！</p><p>（8）之后代码就正式自动部署了，提示你下载文件，输入：y。</p><p>（9）部署完成，就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件，这些信息需要填入你的SSR客户端。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。</p><p>注：此脚本是开机自动启动，部署一次即可。最后可以重启服务器确保部署生效（一般情况不重启也可以）。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br><span class="line">chmod +x shadowsocksR.sh</span><br><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br></pre></td></tr></table></figure><h1 id="一键加速VPS服务器"><a href="#一键加速VPS服务器" class="headerlink" title="一键加速VPS服务器"></a>一键加速VPS服务器</h1><p>此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。</p><p>（1）谷歌BBR加速教程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line">chmod +x bbr.sh</span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure><p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。</p><p>(2) 服务器重启成功并重新连接服务器后，输入命令lsmod | grep bbr 如果出现tcp_bbr字样表示bbr已安装并启动成功。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">自建ss服务器教程</a></li><li><a href="https://segmentfault.com/a/1190000015558387" target="_blank" rel="noopener">超详细 Vultr（VPS）搭建 SS / 新手图文指导教程</a></li><li><a href="http://blog.51cto.com/13916921/2314289?source=dra" target="_blank" rel="noopener">搬瓦工VPS搭建SS-R以及开启魔改锐速/BBR全套教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARKit和CoreMotion坐标系探索</title>
      <link href="/2018/10/16/ARKit%E5%92%8CCoreMotion%E5%9D%90%E6%A0%87%E7%B3%BB%E6%8E%A2%E7%B4%A2/"/>
      <url>/2018/10/16/ARKit%E5%92%8CCoreMotion%E5%9D%90%E6%A0%87%E7%B3%BB%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="ARKit坐标系"><a href="#ARKit坐标系" class="headerlink" title="ARKit坐标系"></a>ARKit坐标系</h1><p>根据官方文档<a href="https://developer.apple.com/documentation/arkit/arworldalignment?language=objc" target="_blank" rel="noopener">ARWorldAlignment</a>，ARKit提供三种参考坐标系，分别为：<a href="https://developer.apple.com/documentation/arkit/arworldalignment/arworldalignmentcamera?language=objc" target="_blank" rel="noopener">ARWorldAlignmentCamera</a>、<a href="https://developer.apple.com/documentation/arkit/arworldalignment/arworldalignmentgravity?language=objc" target="_blank" rel="noopener">ARWorldAlignmentGravity</a>和<a href="https://developer.apple.com/documentation/arkit/arworldalignment/arworldalignmentgravityandheading?language=objc" target="_blank" rel="noopener">ARWorldAlignmentGravityAndHeading</a>。现分别介绍如下。</p><h2 id="ARWorldAlignmentCamera参考坐标系"><a href="#ARWorldAlignmentCamera参考坐标系" class="headerlink" title="ARWorldAlignmentCamera参考坐标系"></a>ARWorldAlignmentCamera参考坐标系</h2><blockquote><p>The scene coordinate system is locked to match the orientation of the camera.</p></blockquote><p>该参考坐标系是基于移动设备的摄像头坐标系设定的。参考官方文档<a href="https://developer.apple.com/documentation/avfoundation/avcapturevideoorientation/avcapturevideoorientationlandscaperight?language=objc" target="_blank" rel="noopener">AVCaptureVideoOrientationLandscapeRight</a>-面向摄像头成像的方向，即x轴指向右、y轴指向上和z轴指向设备的前方（朝向用户）。</p><blockquote><p>Note<br>This coordinate system is always the same regardless of device or user interface orientation. That is, the x-axis always points along the long axis of the device, even if that direction is “down” relative to the user.</p></blockquote><p>当设定ARWorldAlignmentCamera参考坐标系时，ARKit将不会启动追踪功能。</p><h2 id="ARWorldAlignmentGravity参考坐标系"><a href="#ARWorldAlignmentGravity参考坐标系" class="headerlink" title="ARWorldAlignmentGravity参考坐标系"></a>ARWorldAlignmentGravity参考坐标系</h2><blockquote><p>The coordinate system’s y-axis is parallel to gravity, and its origin is the initial position of the device.</p></blockquote><p>据官方文档介绍，在该参考坐标系下，y轴平行于重力方向且与重力方向反向，即竖直向上（向量表示为(0,-1,0)）。其余坐标轴由设备的初始位姿来确定：对于z轴，ARKit选取摄像头的朝向并且垂直于y轴（向量表示为(0,0,-1) ）；对于x轴，ARKit基于y轴和z轴，利用右手法则来确定（向量表示为(1,0,0)）。如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/coordinate_system_02.png" alt></p><h2 id="ARWorldAlignmentGravityAndHeading参考坐标系"><a href="#ARWorldAlignmentGravityAndHeading参考坐标系" class="headerlink" title="ARWorldAlignmentGravityAndHeading参考坐标系"></a>ARWorldAlignmentGravityAndHeading参考坐标系</h2><blockquote><p>The coordinate system’s y-axis is parallel to gravity, its x- and z-axes are oriented to compass heading, and its origin is the initial position of the device.</p></blockquote><p>据官方文档介绍，在该参考坐标系下，y轴平行于重力方向且与重力方向反向，即竖直向上（向量表示为(0,-1,0)），x轴和z轴沿着经纬度方向（即x、y和z分别为东、上和南向）。如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/coordinate_system_03.png" alt></p><p>#Core Motion坐标系</p><h2 id="加速度计坐标系"><a href="#加速度计坐标系" class="headerlink" title="加速度计坐标系"></a>加速度计坐标系</h2><p>加速度计是测量沿着特定轴速度的变化量。如图所示为加速度计传感器坐标系定义，其中输出的数据1.0表示的是重力数值，即9.8m/s2。参考官方文档<a href="https://developer.apple.com/documentation/coremotion/getting_raw_accelerometer_events?language=objc" target="_blank" rel="noopener">Getting Raw Accelerometer Events</a></p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/coordinate_system_04.png" alt></p><h2 id="陀螺仪传感器坐标系"><a href="#陀螺仪传感器坐标系" class="headerlink" title="陀螺仪传感器坐标系"></a>陀螺仪传感器坐标系</h2><p>详见官方文档<a href="https://developer.apple.com/documentation/coremotion/getting_raw_gyroscope_events?language=objc" target="_blank" rel="noopener">Getting Raw Gyroscope Events</a>。</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/coordinate_system_05.png" alt></p><h2 id="CMAttitude参考坐标系"><a href="#CMAttitude参考坐标系" class="headerlink" title="CMAttitude参考坐标系"></a>CMAttitude参考坐标系</h2><p>该类含有四个参考坐标系，分别为：<a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/cmattitudereferenceframexarbitraryzvertical?language=objc" target="_blank" rel="noopener">CMAttitudeReferenceFrameXArbitraryZVertical</a>、<a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/cmattitudereferenceframexarbitrarycorrectedzvertical?language=objc" target="_blank" rel="noopener">CMAttitudeReferenceFrameXArbitraryCorrectedZVertical</a>、<a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/cmattitudereferenceframexmagneticnorthzvertical?language=objc" target="_blank" rel="noopener">CMAttitudeReferenceFrameXMagneticNorthZVertical</a>和<a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/cmattitudereferenceframextruenorthzvertical?language=objc" target="_blank" rel="noopener">CMAttitudeReferenceFrameXTrueNorthZVertical</a></p><h3 id="CMAttitudeReferenceFrameXArbitraryZVertical"><a href="#CMAttitudeReferenceFrameXArbitraryZVertical" class="headerlink" title="CMAttitudeReferenceFrameXArbitraryZVertical"></a>CMAttitudeReferenceFrameXArbitraryZVertical</h3><blockquote><p>Describes a reference frame in which the Z axis is vertical and the X axis points in an arbitrary direction in the horizontal plane.</p></blockquote><h3 id="CMAttitudeReferenceFrameXArbitraryCorrectedZVertical"><a href="#CMAttitudeReferenceFrameXArbitraryCorrectedZVertical" class="headerlink" title="CMAttitudeReferenceFrameXArbitraryCorrectedZVertical"></a>CMAttitudeReferenceFrameXArbitraryCorrectedZVertical</h3><blockquote><p>Describes the same reference frame as CMAttitudeReferenceFrameXArbitraryZVertical except that the magnetometer, when available and calibrated, is used to improve long-term yaw accuracy. Using this constant instead of CMAttitudeReferenceFrameXArbitraryZVertical results in increased CPU usage.</p></blockquote><h3 id="CMAttitudeReferenceFrameXMagneticNorthZVertical"><a href="#CMAttitudeReferenceFrameXMagneticNorthZVertical" class="headerlink" title="CMAttitudeReferenceFrameXMagneticNorthZVertical"></a>CMAttitudeReferenceFrameXMagneticNorthZVertical</h3><blockquote><p>Describes a reference frame in which the Z axis is vertical and the X axis points toward magnetic north. Note that using this reference frame may require device movement to calibrate the magnetometer.</p></blockquote><h3 id="CMAttitudeReferenceFrameXTrueNorthZVertical"><a href="#CMAttitudeReferenceFrameXTrueNorthZVertical" class="headerlink" title="CMAttitudeReferenceFrameXTrueNorthZVertical"></a>CMAttitudeReferenceFrameXTrueNorthZVertical</h3><blockquote><p>Describes a reference frame in which the Z axis is vertical and the X axis points toward true north. Note that using this reference frame may require device movement to calibrate the magnetometer. It also requires the location to be available in order to calculate the difference between magnetic and true north.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> VIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> VIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>g++编译C++项目</title>
      <link href="/2018/10/13/g-%E7%BC%96%E8%AF%91C-%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/10/13/g-%E7%BC%96%E8%AF%91C-%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/xuehuafeiwu123/article/details/73456917" target="_blank" rel="noopener">使用 Eigen 库写第一个程序</a></li><li><a href="https://www.cnblogs.com/zjiaxing/p/5557629.html" target="_blank" rel="noopener">gcc/g++实战之动态链接库与静态链接库编写</a></li><li><a href="https://www.cnblogs.com/battlescars/p/cpp_linux_gcc.html" target="_blank" rel="noopener">linux下使用g++编译cpp工程</a></li><li><a href="https://www.cnblogs.com/yanzi-meng/p/8066944.html" target="_blank" rel="noopener">Python实例浅谈之三Python与C/C++相互调用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转矩阵、欧拉角和四元数相互转换</title>
      <link href="/2018/10/12/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5%E3%80%81%E6%AC%A7%E6%8B%89%E8%A7%92%E5%92%8C%E5%9B%9B%E5%85%83%E6%95%B0%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/10/12/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5%E3%80%81%E6%AC%A7%E6%8B%89%E8%A7%92%E5%92%8C%E5%9B%9B%E5%85%83%E6%95%B0%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="旋转与旋转矩阵"><a href="#旋转与旋转矩阵" class="headerlink" title="旋转与旋转矩阵"></a>旋转与旋转矩阵</h1><h2 id="二维旋转"><a href="#二维旋转" class="headerlink" title="二维旋转"></a>二维旋转</h2><p>在坐标系O-xy中有一点P，已知坐标为(x,y)，向量OP与X轴的夹角为β。将点P绕坐标原点O旋转了α角到P’（这里规定与右手系旋转方向相同的为旋转正方向，对于2D情况而言即逆时针旋转为旋转正方向）。设P’点的坐标为(x’,y’)。点P、P’在x、y轴上的垂足分别为A、B、C、D。试用P点坐标表示P’点坐标，如下图所示：</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhaoxuhui.top/blog/2018/03/13/RelationBetweenQ4&amp;R&amp;Euler.html#%E4%BA%8C%E6%AC%A7%E6%8B%89%E8%A7%92" target="_blank" rel="noopener">欧拉角、四元数、旋转矩阵推导及相互关系</a></li><li><a href="https://blog.csdn.net/u012423865/article/details/78219787" target="_blank" rel="noopener">欧拉角和旋转矩阵相互转换</a></li><li><a href="http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm" target="_blank" rel="noopener">Maths - Conversion Matrix to Quaternion</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> IMU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IMU </tag>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四元数表示两个3D向量的旋转</title>
      <link href="/2018/10/12/%E5%9B%9B%E5%85%83%E6%95%B0%E8%A1%A8%E7%A4%BA%E4%B8%A4%E4%B8%AA3D%E5%90%91%E9%87%8F%E7%9A%84%E6%97%8B%E8%BD%AC/"/>
      <url>/2018/10/12/%E5%9B%9B%E5%85%83%E6%95%B0%E8%A1%A8%E7%A4%BA%E4%B8%A4%E4%B8%AA3D%E5%90%91%E9%87%8F%E7%9A%84%E6%97%8B%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> IMU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IMU </tag>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坐标系旋转</title>
      <link href="/2018/10/01/%E5%9D%90%E6%A0%87%E7%B3%BB%E6%97%8B%E8%BD%AC/"/>
      <url>/2018/10/01/%E5%9D%90%E6%A0%87%E7%B3%BB%E6%97%8B%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/fireflychh/article/details/82352710" target="_blank" rel="noopener">三维空间坐标系变换-旋转矩阵</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 坐标系旋转 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 坐标系旋转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xcode离线下载</title>
      <link href="/2018/10/01/xcode%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/"/>
      <url>/2018/10/01/xcode%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>最近刚开始学习Xcode<br>发现通过iTunes  app store下载Xcode更新太慢<br>经网上查询，把方法分享出来</p><p>Xcode版本下载: <a href="https://developer.apple.com/download/more/" target="_blank" rel="noopener">苹果开发者下载中心</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见问题</title>
      <link href="/2018/09/25/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2018/09/25/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="git合并常见问题"><a href="#git合并常见问题" class="headerlink" title="git合并常见问题"></a>git合并常见问题</h1><h2 id="合并失败后报错："><a href="#合并失败后报错：" class="headerlink" title="合并失败后报错："></a>合并失败后报错：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">error: unable to index file OCARKitTest/ThirdParty/CocoaAsyncSocket</span><br><span class="line">fatal: updating files failed</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached -r OCARKitTest/ThirdParty/</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;&quot;</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h2 id="摆错二"><a href="#摆错二" class="headerlink" title="摆错二"></a>摆错二</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout devel</span><br><span class="line">error: The following untracked working tree files would be overwritten by checkout:</span><br><span class="line">OCARKitTest/OCARKitTest.xcodeproj/project.xcworkspace/contents.xcworkspacedata</span><br><span class="line">OCARKitTest/OCARKitTest.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist</span><br><span class="line">Please move or remove them before you switch branches.</span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure><p>通过错误提示可知，是由于一些untracked working tree files引起的问题。所以只要解决了这些untracked的文件就能解决这个问题。</p><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clean  -d  -fx .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git本地分支关联远程分支</title>
      <link href="/2018/09/23/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
      <url>/2018/09/23/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>本地新建分支，同步刅远程分支并关联远程分支。</p><h1 id="新建本地分支"><a href="#新建本地分支" class="headerlink" title="新建本地分支"></a>新建本地分支</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b devel</span><br></pre></td></tr></table></figure><h1 id="同步远程分支"><a href="#同步远程分支" class="headerlink" title="同步远程分支"></a>同步远程分支</h1><p>将本地新建分支push到自己的本地远程origin上，因为只在本地创建了一个新的分支，远程    origin 上还没有该分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin devel</span><br></pre></td></tr></table></figure><h1 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/devel</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多线程教程</title>
      <link href="/2018/09/14/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%99%E7%A8%8B/"/>
      <url>/2018/09/14/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>并发指的是两个或多个独立的活动在同一时段内发生。生活中并发的例子并不少，例如在跑步的时候你可能同时在听音乐；在看电脑显示器的同时你的手指在敲击键盘。这时我们称我们大脑并发地处理这些事件，只不过我们大脑的处理是有次重点的：有时候你会更关注你呼吸的频率，而有时候你更多地被美妙的音乐旋律所吸引。这时我们可以说大脑是一种并发设计的结构。这种次重点在计算机程序设计中，体现为某一个时刻只能处理一个操作。</p><p>与并发相近的另一个概念是并行。它们两者存在很大的差别。并行就是同时执行，计算机在同一时刻，在某个时间点上处理两个或以上的操作。判断一个程序是否并行执行，只需要看某个时刻上是否多两个或以上的工作单位在运行。一个程序如果是单线程的，那么它无法并行地运行。利用多线程与多进程可以使得计算机并行地处理程序（当然 ，前提是该计算机有多个处理核心）。</p><p>并发：同一时间段内可以交替处理多个操作。</p><p>并行：同一时刻内同时处理多个操作。</p><p>并发的程序设计，提供了一种方式让我们能够设计出一种方案将问题（非必须地）并行地解决。如果我们将程序的结构设计为可以并发执行的，那么在支持并行的机器上，我们可以将程序并行地执行。因此，并发重点指的是程序的设计结构，而并行指的是程序运行的状态。并发编程，是一种将一个程序分解成小片段独立执行的程序设计方法。</p><h1 id="并发的基本方式途径"><a href="#并发的基本方式途径" class="headerlink" title="并发的基本方式途径"></a>并发的基本方式途径</h1><p>C++标准并没有提供对多进程并发的原生支持，所以C++的多进程并发要靠其他API——这需要依赖相关平台。<br>C++11 标准提供了一个新的线程库，内容包括了管理线程、保护共享数据、线程间的同步操作、低级原子操作等各种类。标准极大地提高了程序的可移植性，以前的多线程依赖于具体的平台，而现在有了统一的接口进行实现。</p><p>C++11 新标准中引入了几个头文件来支持多线程编程：</p><p>&lt; thread &gt; :包含std::thread类以及std::this_thread命名空间。管理线程的函数和类在 中声明.<br>&lt; atomic &gt; :包含std::atomic和std::atomic_flag类，以及一套C风格的原子类型和与C兼容的原子操作的函数。<br>&lt; mutex &gt; :包含了与互斥量相关的类以及其他类型和函数<br>&lt; future &gt; :包含两个Provider类（std::promise和std::package_task）和两个Future类（std::future和std::shared_future）以及相关的类型和函数。<br>&lt; condition_variable &gt; :包含与条件变量相关的类，包括std::condition_variable和std::condition_variable_any。</p><h2 id="初试多线程"><a href="#初试多线程" class="headerlink" title="初试多线程"></a>初试多线程</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t</span> <span class="params">(hello)</span></span>;</span><br><span class="line">    t.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旭日东升<br>C++11 并发编程基础（一）：并发、并行与C++多线程<br>正文</p><p>C++11标准在标准库中为多线程提供了组件，这意味着使用C++编写与平台无关的多线程程序成为可能，而C++程序的可移植性也得到了有力的保证。另外，并发编程可提高应用的性能，这对对性能锱铢必较的C++程序员来说是值得关注的。</p><p>回到顶部</p><ol><li>何为并发<br>并发指的是两个或多个独立的活动在同一时段内发生。生活中并发的例子并不少，例如在跑步的时候你可能同时在听音乐；在看电脑显示器的同时你的手指在敲击键盘。这时我们称我们大脑并发地处理这些事件，只不过我们大脑的处理是有次重点的：有时候你会更关注你呼吸的频率，而有时候你更多地被美妙的音乐旋律所吸引。这时我们可以说大脑是一种并发设计的结构。这种次重点在计算机程序设计中，体现为某一个时刻只能处理一个操作。</li></ol><p>与并发相近的另一个概念是并行。它们两者存在很大的差别。并行就是同时执行，计算机在同一时刻，在某个时间点上处理两个或以上的操作。判断一个程序是否并行执行，只需要看某个时刻上是否多两个或以上的工作单位在运行。一个程序如果是单线程的，那么它无法并行地运行。利用多线程与多进程可以使得计算机并行地处理程序（当然 ，前提是该计算机有多个处理核心）。</p><p>并发：同一时间段内可以交替处理多个操作：</p><p>图中整个安检系统是一个并发设计的结构。两个安检队列队首的人竞争这一个安检窗口，两个队列可能约定交替着进行安检，也可能是大家同时竞争安检窗口（通信）。后一种方式可能引起冲突：因为无法同时进行两个安检操作。在逻辑上看来，这个安检窗口是同时处理这两个队列。</p><p>并行：同一时刻内同时处理多个操作：</p><p>图中整个安检系统是一个并行的系统。在这里，每个队列都有自己的安检窗口，两个队列中间没有竞争关系，队列中的某个排队者只需等待队列前面的人安检完成，然后再轮到自己安检。在物理上，安检窗口同时处理这两个队列。</p><p>并发的程序设计，提供了一种方式让我们能够设计出一种方案将问题（非必须地）并行地解决。如果我们将程序的结构设计为可以并发执行的，那么在支持并行的机器上，我们可以将程序并行地执行。因此，并发重点指的是程序的设计结构，而并行指的是程序运行的状态。并发编程，是一种将一个程序分解成小片段独立执行的程序设计方法。</p><p>回到顶部<br>2.并发的基本方式途径<br>多线程与多进程是并发的两种途径。<br>想象两个场景：</p><p>场景一：你和小伙伴要开发一个项目，但小伙伴们放寒假都回家了，你们只能通过QQ聊天、手机通话、发送思维导图等方式来进行交流，总之你们无法很方便地进行沟通。好处是你们各自工作时可以互不打扰。<br>场景二：你和小伙伴放假都呆在学校实验室中开发项目，你们可以聚在一起使用头脑风暴，可以使用白板进行观点的阐述，总之你们沟通变得更方便有效了。有点遗憾的是你在思考时可能有小伙伴过来问你问题，你受到了打扰。<br>这两个场景描绘了并发的两种基本途径。每个小伙伴代表一个线程，工作地点代表一个处理器。场景一中每个小伙伴是一个单线程的进程，他们拥有独立的处理器，多个进程同时执行；场景二中只有一个处理器，所有小伙伴都是属于同一进程的线程。</p><p>2.1 多进程并发<br>多个进程独立地运行，它们之间通过进程间常规的通信渠道传递讯息（信号，套接字，文件，管道等），这种进程间通信不是设置复杂就是速度慢，这是因为为了避免一个进程去修改另一个进程，操作系统在进程间提供了一定的保护措施，当然，这也使得编写安全的并发代码更容易。<br>运行多个进程也需要固定的开销：进程的启动时间，进程管理的资源消耗。</p><p>2.2 多线程并发<br>在当个进程中运行多个线程也可以并发。线程就像轻量级的进程，每个线程相互独立运行，但它们共享地址空间，所有线程访问到的大部分数据如指针、对象引用或其他数据可以在线程之间进行传递，它们都可以访问全局变量。进程之间通常共享内存，但这种共享通常难以建立且难以管理，缺少线程间数据的保护。因此，在多线程编程中，我们必须确保每个线程锁访问到的数据是一致的。</p><p>回到顶部</p><ol start="3"><li>C++中的并发与多线程<br>C++标准并没有提供对多进程并发的原生支持，所以C++的多进程并发要靠其他API——这需要依赖相关平台。<br>C++11 标准提供了一个新的线程库，内容包括了管理线程、保护共享数据、线程间的同步操作、低级原子操作等各种类。标准极大地提高了程序的可移植性，以前的多线程依赖于具体的平台，而现在有了统一的接口进行实现。</li></ol><p>C++11 新标准中引入了几个头文件来支持多线程编程：</p><p>&lt; thread &gt; :包含std::thread类以及std::this_thread命名空间。管理线程的函数和类在 中声明.<br>&lt; atomic &gt; :包含std::atomic和std::atomic_flag类，以及一套C风格的原子类型和与C兼容的原子操作的函数。<br>&lt; mutex &gt; :包含了与互斥量相关的类以及其他类型和函数<br>&lt; future &gt; :包含两个Provider类（std::promise和std::package_task）和两个Future类（std::future和std::shared_future）以及相关的类型和函数。<br>&lt; condition_variable &gt; :包含与条件变量相关的类，包括std::condition_variable和std::condition_variable_any。</p><p>3.1 初试多线程<br>我们从一个hello开始。在单线程时：</p><p>1 # include<iostream><br>2 using namespace std;<br>3 int main()<br>4 {<br>5     cout&lt;&lt;”hello world”&lt;&lt;endl;<br>6 }</iostream></p><p>在这里，进行由一个线程组成，该线程的初始函数是main。我们启动第二个线程来打印hello world：</p><p>按 Ctrl+C 复制代码</p><h1 id="include"><a href="#include" class="headerlink" title="include"></a>include<iostream></iostream></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include"></a>include<thread></thread></h1><p>using namespace std;<br>void hello()<br>{<br>    cout&lt;&lt;”hello world”&lt;&lt;endl;<br>}<br>int main()<br>{<br>    thread t (hello);<br>    t.join();<br>}<br>按 Ctrl+C 复制代码</p><p>在这里，我们将打印hello world的语句放在函数hello中。每个线程都必须有一个初始函数，新线程的执行开始于初始函数。对于第一段程序来说，它的初始函数是main，对于我们新创建的线程，可以在std::thread()对象的构造函数中指定。<br>在第二段程序里，程序由两个线程组成：初始线程始于main，新线程始于hello。这里将新线程t的初始函数指定为hello。<br>新线程启动之后会与初始进程一并运行，初始线程可以等待或不等待新进程的运行结束——如果需要等待线程，则新线程实例需要使用join(),否则可以使用detach()。如果不等待新线程，则初始线程自顾自地运行到main()结束。<br>关于&lt; thread &gt; 我们将在下一篇中进行详解。<br>由于我们的初始线程并没有做什么事情，启动新线程后，新线程将打印出hello world。</p><h1 id="使用互斥"><a href="#使用互斥" class="headerlink" title="使用互斥"></a>使用互斥</h1><p>C++中通过实例化std::mutex创建互斥量，通过调用成员函数lock()进行上锁，unlock()进行解锁。不过，不推荐实践中直接去调用成员函数，因为调用成员函数就意味着，必须记住在每个函数出口都要去调用unlock()，也包括异常的情况。C++标准库为互斥量提供了一个RAII语法的模板类std::lock_guard，其会在构造的时候提供已锁的互斥量，并在析构的时候进行解锁，从而保证了一个已锁的互斥量总是会被正确的解锁。下面的程序清单中，展示了如何在多线程程序中，使用std::mutex构造的std::lock_guard实例，对一个列表进行访问保护。std::mutex和std::lock_guard都在<mutex>头文件中声明。</mutex></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; some_list;    <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">std</span>::mutex some_mutex;    <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_list</span><span class="params">(<span class="keyword">int</span> new_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; guard(some_mutex);    <span class="comment">// 3</span></span><br><span class="line">  some_list.push_back(new_value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">list_contains</span><span class="params">(<span class="keyword">int</span> value_to_find)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; guard(some_mutex);    <span class="comment">// 4</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::find(some_list.begin(),some_list.end(),value_to_find) != some_list.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当其中一个成员函数返回的是保护数据的指针或引用时，会破坏对数据的保护。具有访问能力的指针或引用可以访问(并可能修改)被保护的数据，而不会被互斥锁限制。互斥量保护的数据需要对接口的设计相当谨慎，要确保互斥量能锁住任何对保护数据的访问，并且不留后门。</p><h1 id="使用锁"><a href="#使用锁" class="headerlink" title="使用锁"></a>使用锁</h1><p>试想有一个玩具，这个玩具由两部分组成，必须拿到这两个部分，才能够玩。例如，一个玩具鼓，需要一个鼓锤和一个鼓才能玩。现在有两个小孩，他们都很喜欢玩这个玩具。当其中一个孩子拿到了鼓和鼓锤时，那就可以尽情的玩耍了。当另一孩子想要玩，他就得等待另一孩子玩完才行。再试想，鼓和鼓锤被放在不同的玩具箱里，并且两个孩子在同一时间里都想要去敲鼓。之后，他们就去玩具箱里面找这个鼓。其中一个找到了鼓，并且另外一个找到了鼓锤。现在问题就来了，除非其中一个孩子决定让另一个先玩，他可以把自己的那部分给另外一个孩子；但当他们都紧握着自己所有的部分而不给予，那么这个鼓谁都没法玩。</p><p>很幸运，C++标准库有办法解决这个问题，std::lock——可以一次性锁住多个(两个以上)的互斥量，并且没有副作用(死锁风险)。</p><p>如何避免死锁？</p><p>避免嵌套锁<br>第一个建议往往是最简单的：一个线程已获得一个锁时，再别去获取第二个。如果能坚持这个建议，因为每个线程只持有一个锁，锁上就不会产生死锁。</p><p>使用固定顺序获取锁<br>当硬性条件要求你获取两个以上(包括两个)的锁，并且不能使用std::lock单独操作来获取它们;那么最好在每个线程上，用固定的顺序获取它们获取它们(锁)。</p><h1 id="同步等待"><a href="#同步等待" class="headerlink" title="同步等待"></a>同步等待</h1><p>假设你在旅游，而且正在一辆在夜间运行的火车上。在夜间，如何在正确的站点下车呢？一种方法是整晚都要醒着，然后注意到了哪一站。这样，你就不会错过你要到达的站点，但是这样会让你感到很疲倦。另外，你可以看一下时间表，估计一下火车到达目的地的时间，然后在一个稍早的时间点上设置闹铃，然后你就可以安心的睡会了。这个方法听起来也很不错，也没有错过你要下车的站点，但是当火车晚点的时候，你就要被过早的叫醒了。当然，闹钟的电池也可能会没电了，并导致你睡过站。理想的方式是，无论是早或晚，只要当火车到站的时候，有人或其他东西能把你唤醒，就好了。</p><p>C++标准库对条件变量有两套实现：std::condition_variable和std::condition_variable_any。这两个实现都包含在&lt;condition_variable&gt;头文件的声明中。两者都需要与一个互斥量一起才能工作(互斥量是为了同步)；前者仅限于与std::mutex一起工作，而后者可以和任何满足最低标准的互斥量一起工作，从而加上了_any的后缀。因为std::condition_variable_any更加通用，这就可能从体积、性能，以及系统资源的使用方面产生额外的开销，所以std::condition_variable一般作为首选的类型，当对灵活性有硬性要求时，我们才会去考虑std::condition_variable_any。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/overlord_bingo/article/details/60955751" target="_blank" rel="noopener">C/C++ Linux下多线程编程 #include &lt;pthread.h&gt;</a></li><li><a href="https://www.cnblogs.com/lpxblog/p/5190438.html" target="_blank" rel="noopener">++11 并发编程基础（一）：并发、并行与C++多线程</a></li><li><a href="https://www.jianshu.com/p/0589ae74ad72" target="_blank" rel="noopener">Linux多线程服务器编程基础 C++ 11 并发编程学习</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++宏定义教程</title>
      <link href="/2018/09/14/C-%E5%AE%8F%E5%AE%9A%E4%B9%89%E6%95%99%E7%A8%8B/"/>
      <url>/2018/09/14/C-%E5%AE%8F%E5%AE%9A%E4%B9%89%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="define基本用法"><a href="#define基本用法" class="headerlink" title="#define基本用法"></a>#define基本用法</h1><p>#define命令是C语言中的一个宏定义命令，它用来将一个标识符(宏名)定义为一个字符串，该标识符被称为宏名，被定义的字符串称为替换文本。程序编译之前，编译的时候所有的宏名都会被定义的字符串替换，这便是宏替换。</p><p>理解宏定义的关键在于 “替换”。</p><p>该命令有两种格式：一种是简单的宏定义，另一种是带参数的宏定义。</p><h2 id="简单的宏定义："><a href="#简单的宏定义：" class="headerlink" title="简单的宏定义："></a>简单的宏定义：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="keyword">float</span> pi2 = PI * <span class="number">2</span>;<span class="comment">//pi2 = 6.28</span></span><br></pre></td></tr></table></figure><h2 id="带参数的宏定义"><a href="#带参数的宏定义" class="headerlink" title="带参数的宏定义"></a>带参数的宏定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-string">&lt;宏名&gt; (&lt;参数表&gt;) &lt;宏体&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AddOne(x) (x+1) </span></span><br><span class="line"><span class="keyword">float</span> pi2 = PI * <span class="number">2</span>;<span class="comment">//pi2 = 6.28</span></span><br><span class="line">pi2 = AddOne(pi2);<span class="comment">// pi2 = 7.28</span></span><br></pre></td></tr></table></figure><h1 id="宏定义的特点"><a href="#宏定义的特点" class="headerlink" title="宏定义的特点"></a>宏定义的特点</h1><p>1）宏名一般用大写，且末尾不加分号。</p><p>（2）宏定义的参数是无类型的，不做语法检查，不做表达式求解，只做替换。</p><p>（3）宏定义通常在文件的最开头，可以使用#undef 宏名 命令终止宏定义的作用域。</p><p>(4）宏定义可以嵌套，但字符串” “中永远不包含宏。</p><p>（5）宏展开使源程序变长，函数调用不会；宏展开不占运行时间，只占编译时间，函数调用占运行时间（分配内存、保留现场、值传递、返回值）。</p><p>（6）函数调用在编译后程序运行时进行，并且分配内存。宏替换在编译前进行，不分配内存。</p><p>（7）使用宏可提高程序的通用性和易读性，减少不一致性，减少输入错误和便于修改。例如：数组大小常用宏定义，常量pi常用宏定义。</p><h1 id="宏替换发生的时机"><a href="#宏替换发生的时机" class="headerlink" title="宏替换发生的时机"></a>宏替换发生的时机</h1><p>为了能够真正理解#define的作用，让我们来了解一下对C语言源程序的处理过程。当我们在一个集成的开发环境如Turbo C中将编写好的源程序进行编译时，实际经过了预处理、编译、汇编和连接几个过程。其中预处理器产生编译器的输出，它实现以下的功能：</p><p>（1）文件包含</p><p>可以把源程序中的#include 扩展为文件正文，即把包含的.h文件找到并展开到#include 所在处。</p><p>（2）条件编译</p><p>预处理器根据#if和#ifdef等编译命令及其后的条件，将源程序中的某部分包含进来或排除在外，通常把排除在外的语句转换成空行。</p><p>（3）宏展开</p><p>预处理器将源程序文件中出现的对宏的引用展开成相应的宏定义，即本文所说的#define的功能，由预处理器来完成。经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能，所以在学习#define命令时只要能真正理解这一点，这样才不会对此命令引起误解并误用。</p><h1 id="宏替换错误举例"><a href="#宏替换错误举例" class="headerlink" title="宏替换错误举例"></a>宏替换错误举例</h1><p>只要严格遵守“直接替换”，就不会出现下面的问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Square(x) x*x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> temp = Square(<span class="number">3</span>+<span class="number">3</span>);</span><br><span class="line"><span class="comment">//程序的本意可能是要计算6*6=36，但由于宏定义执行的是直接替换，本身并不做计算，因此实际的结果为 3+3*3+3=15</span></span><br><span class="line"><span class="comment">//想要避免这个问题，只需要修改如下：</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Square(x) ((x)*(x))</span></span><br></pre></td></tr></table></figure><h1 id="define中的三个特殊符号：-，-，"><a href="#define中的三个特殊符号：-，-，" class="headerlink" title="define中的三个特殊符号：##，#，#@"></a>define中的三个特殊符号：##，#，#@</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*x连接y，例如：int n = Conn(123,456); 结果就是n=123456;char* str = Conn("asdf", "adf"); /*结果就是 str = "asdfadf";*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Conn(x,y) x##y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*给x加上单引号，结果返回是一个const char。例如：char a = ToChar(1);结果就是a='1';做个越界试验char a = ToChar(123);结果就错了;但是如果你的参数超过四个字符，编译器就给给你报错了！error C2015: too many characters in constant   ：P */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ToChar(x) #@x</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// x加双引号,例如：char* str = ToString(123132);就成了str="123132";</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ToString(x) #x</span></span><br></pre></td></tr></table></figure><h1 id="常用宏定义"><a href="#常用宏定义" class="headerlink" title="常用宏定义"></a>常用宏定义</h1><p>(1) 防止一个头文件被重复包含</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BODYDEF_H </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BODYDEF_H </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//头文件内容 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>(2) 得到指定地址上的一个字节或字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM_B( x ) ( *( (byte *) (x) ) ) </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM_W( x ) ( *( (word *) (x) ) )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">int</span> bTest = <span class="number">0x123456</span>;</span><br><span class="line"></span><br><span class="line">byte m = MEM_B((&amp;bTest));<span class="comment">/*m=0x56*/</span></span><br><span class="line"><span class="keyword">int</span> n = MEM_W((&amp;bTest));<span class="comment">/*n=0x3456*/</span></span><br></pre></td></tr></table></figure><p>(3) 得到一个field在结构体(struct)中的偏移量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OFFSETOF( type, field ) ( (size_t) &amp;(( type *) 0)-&gt; field )</span></span><br></pre></td></tr></table></figure><p>(4) 得到一个结构体中field所占用的字节数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FSIZ( type, field ) sizeof( ((type *) 0)-&gt;field )</span></span><br></pre></td></tr></table></figure><p>(5) 得到一个变量的地址（word宽度）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B_PTR( var ) ( (byte *) (void *) &amp;(var) ) </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> W_PTR( var ) ( (word *) (void *) &amp;(var) )</span></span><br></pre></td></tr></table></figure><p>(6) 将一个字母转换为大写</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define UPCASE( c ) ( ((c) &gt;= ''a'' &amp;&amp; (c) &lt;= ''z'') ? ((c) - 0x20) : (c) )</span><br></pre></td></tr></table></figure><p>(7) 防止溢出的一个方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INC_SAT( val ) (val = ((val)+1 &gt; (val)) ? (val)+1 : (val))</span></span><br></pre></td></tr></table></figure><p>(8) 返回数组元素的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARR_SIZE( a ) ( sizeof( (a) ) / sizeof( (a[0]) ) )</span></span><br></pre></td></tr></table></figure><p>(9) 使用一些宏跟踪调试</p><p>ANSI标准说明了五个预定义的宏名。它们是：</p><p><strong>LINE</strong>：在源代码中插入当前源代码行号；</p><p><strong>FILE</strong>：在源文件中插入当前源文件名；</p><p><strong>DATE</strong>：在源文件中插入当前的编译日期</p><p><strong>TIME</strong>：在源文件中插入当前编译时间；</p><p><strong>STDC</strong>：当要求程序严格遵循ANSI C标准时该标识被赋值为1；</p><p>__cplusplus：当编写C++程序时该标识符被定义</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/shuzfan/article/details/52860664" target="_blank" rel="noopener">C++ 宏定义</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2D-3D-S数据集介绍</title>
      <link href="/2018/09/14/2D-3D-S%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/09/14/2D-3D-S%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>数据集详情地址：<a href="http://3Dsemantics.stanford.edu/" target="_blank" rel="noopener">http://3Dsemantics.stanford.edu/</a></p><p>该数据集构建的主要目标是为场景理解、深度估计、法线估计、实体检测、分割和场景重建提供研究数据集，推动该领域的发展。</p><h1 id="相关数据集介绍"><a href="#相关数据集介绍" class="headerlink" title="相关数据集介绍"></a>相关数据集介绍</h1><p>现有的基于RGB-D数据集包括NYU Depth v2、SUN RGBD和SceneNN。然而，这些数据集对于处理特定的任务和2.5D的场景有限。</p><h1 id="采集和处理"><a href="#采集和处理" class="headerlink" title="采集和处理"></a>采集和处理</h1><h2 id="3D模式"><a href="#3D模式" class="headerlink" title="3D模式"></a>3D模式</h2><p>3D模式主要包含点云和mesh。文章利用Matterport Camera得到3D textured Mesh model，然后利用采样方法得到3D点运数据。此外，文章将点运数据与颜色进行对应来生成colored点云数据。</p><p>语义标记：文章对点云数据中的每个Mesh和Voxel进行语义信息的标记。语义主要包括ceiling, floor, wall, beam, column, window, door, table, chair, sofa, bookcase, board and clutter。此外，语义信息被投影到RGB图像中。进一步地，文章划分数据为如下室内场景：office, conference room, hallway, auditorium, open space, lobby, lounge, pantry, copy room, storage and WC。每个对象被存储在文件名为“class instanceNum roomType roomNum areaNum”中。</p><blockquote><p>The dataset contains colored point clouds and textured meshes for each scanned area. 3D semantic annotations for objects and scenes are offered for both modalities, with point-level and face-level labels correspondingly. The annotations were initially performed on the point cloud and then projected onto the closest surface on the 3D mesh model. Faces in the 3D mesh that account for no projected points belong to non-annotated parts of the dataset and are labeled with a default null value. We also provide the tightest axis-aligned bounding box of each object instance and further voxelize it into a 6x6x6 grid with binary occupancy and point correspondence.</p></blockquote><p>该数据集包含每个扫描区域的带有颜色信息的点云和纹理mesh，分别提供点粒度和面粒度的实体和场景的语义信息。最初，语义信息被提取自点云数据，之后映射到最相邻的三维mesh上。不能够被点云映射的面的语义信息置为空值。该数据集也提供了每隔实体样例的tightest axis-aligned bounding box和使用6x6x6二进制的网格来进行体素化表达。</p><h3 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h3><p>该数据集包含颜色点云和3D mesh。</p><h4 id="颜色点云数据"><a href="#颜色点云数据" class="headerlink" title="颜色点云数据"></a>颜色点云数据</h4><blockquote><p>The raw colored 3D point clouds along with both object and scene instance-level annotations per point, (tightest) axis-aligned bounding boxes and voxels with binary occupancy and point correpsondence are stored in the Area_#_PointCloud.mat file. The variables are stored in the form of nested structs</p></blockquote><p>具有实体和场景粒度的语义信息、axis-aligned bounding boex和具有点对应的二进制占据体素的三维点云数据被存储在“Area_#_PointCloud.mat”文件中。变量被存储为嵌套结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Area: --&gt; name: the area name as: Area_#</span><br><span class="line">--&gt; Disjoint-Space: <span class="class"><span class="keyword">struct</span> <span class="title">with</span> <span class="title">information</span> <span class="title">on</span> <span class="title">the</span> <span class="title">individual</span> <span class="title">spaces</span> <span class="title">in</span> <span class="title">the</span> <span class="title">building</span>.</span></span><br></pre></td></tr></table></figure><p>使用matlab读取后结构体显示如下：</p><p><img src alt></p><p>其中，Disjoint_Space结构体为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- Disjoint_Space:--&gt; name: the name of that space, <span class="function">with per area global <span class="title">index</span> <span class="params">(e.g. conferenceRoom_1, offie_13, etc.)</span></span></span><br><span class="line">--&gt;AlignmentAngle: rotation angle around Z axis, to align spaces based on the CVPR2016 paper *3D Semantic Parsing of Large-Scale Indoor Spaces*. </span><br><span class="line">--&gt; color: a unique RGB color value [<span class="number">0</span>,<span class="number">1</span>] <span class="keyword">for</span> that room, mainly <span class="keyword">for</span> visualization purposes</span><br><span class="line">--&gt; object: a <span class="class"><span class="keyword">struct</span> <span class="title">that</span> <span class="title">contains</span> <span class="title">all</span> <span class="title">objects</span> <span class="title">in</span> <span class="title">that</span> <span class="title">space</span>.</span></span><br></pre></td></tr></table></figure><p>使用matlab读取后结构体显示如下：</p><p><img src alt></p><p>object结构体为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- object:--&gt; name: the name of the object, wiith per space indexing* (e.g. chair<span class="number">-1</span>, wall_3, clutter_13, etc.)</span><br><span class="line">--&gt; points: the X,Y,Z coordinates of the <span class="number">3</span>D points that comprise <span class="keyword">this</span> object</span><br><span class="line">--&gt; RGB_color: the raw RGB color value [<span class="number">0</span>,<span class="number">255</span>] associated with each point.</span><br><span class="line">--&gt; global_name: the name of the object, with per area global index**</span><br><span class="line">--&gt; Bbox: [Xmin Xmax Ymin Ymax Zmin Zmax] of the object's boudning box</span><br><span class="line">--&gt; Voxels: [Xmin Xmax Ymin Ymax Zmin Zmax] <span class="keyword">for</span> each voxel in a <span class="number">6</span>x6x6 grid</span><br><span class="line">--&gt; Voxel_Occupancy: <span class="function">binary occupancy per <span class="title">voxel</span> <span class="params">(<span class="number">0</span>: empty, <span class="number">1</span>: contains points)</span></span></span><br><span class="line">--&gt; Points_per_Voxel: the object points that correspond to each voxel (in XYZ coordinates)</span><br></pre></td></tr></table></figure><p><img src alt></p><h4 id="3D-Semantic-mesh"><a href="#3D-Semantic-mesh" class="headerlink" title="3D Semantic mesh"></a>3D Semantic mesh</h4><blockquote><p>The 3D semantic mesh is labeled with instance-level per-face annotations. The mesh is stored in semantic.obj and semantic.mtl where face labels are stored as face’s material’s name. In Blender, for example, the material label can be retrieved with:</p></blockquote><p>三维语义mesh被使用具有实例粒度的每个面元的注释。mesh被存储在”semantic.obj”和”semantic.mtl”文件中。其中，面元标签被存储在面元的名字。在Blender中，标签可悲解析如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mesh_material_idx = mesh.data.polygons[ face_idx ].material_index</span><br><span class="line">material = mesh.data.materials[ mesh_material_idx ]</span><br><span class="line">label = material.name   # final label!</span><br></pre></td></tr></table></figure><p>标签格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class_instanceNum_roomType_roomNum_areaNum</span><br></pre></td></tr></table></figure><p>When using the mesh’s color, the material’s color should be remapped for the task at hand as the default color is designed for visualizations. One way to encode the label in the color is to set</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">material.diffuse_color = get_color( labels.index( material.name ) )</span><br></pre></td></tr></table></figure><p>by using labels from /assets/semantic_labels.json and get_color( color ) from /assets/utils.py.</p><h2 id="2D模态"><a href="#2D模态" class="headerlink" title="2D模态"></a>2D模态</h2><p>RGB图像：采集朝向：yaw角约[-180, 180], pitch角约为以0为均值15度为方差的高斯分布，roll角一直是0度。FOV角为以75度为均值和-30度为标准差的半高斯分布。为了过滤掉白墙等图像，文章基于语义信息商来过滤掉近70%的图像。</p><p>语义信息商的计算方法如下：首先，对于每一幅图像对13类别的语义信息进行像素统计。再利用像素分布计算香农商。最后，将低于15%的图像过滤掉。</p><p>此外，我们保留60%的图像。剩下的25%的图像我们通过半高斯分布采样方法来筛选。如此，文章保证了图像的多样性。</p><blockquote><p>The dataset contains densely sampled RGB images per scan location. These images were sampled from equirectangular images that were generated per scan location and modality using the raw data captured by the scanner. All images in the dataset are stored in full high-definition at 1080x1080 resolution. For more details on the random sampling of RGB images read section 4.2 in the paper. We provide the camera metadata for each generated image.</p></blockquote><blockquote><p>We also provide depth images that were computed on the 3D mesh instead of directly on the 3D mesh, as well as surface normal images. 2D semantic annotations are computed for each image by projecting the 3D mesh labels on the image plane. Due to certain geo- metric artifacts present at the mesh model mainly because of the level of detail in the reconstruction, the 2D annotations occasionally present small local misalignment to the underlying pixels, especially for points that have a short distance to the camera. This issue can be easily addressed by fusing image content with the projected annotations using graphical models. The dataset also includes 3D coordinate encoded images where each pixel encodes the X, Y, Z location of the point in the world coordinate system. Last, an equirectangular projection is also provided per scan location and modality.</p></blockquote><p>该数据集包含了每个采集区域的稠密的RGB图像。作者使用扫描仪输出的全景图像来生成这些图像。在数据集里的所有的图像的分辨率均为1080x1080。细节请参考论文。</p><p>此外，数据集也包含深度图像。作者使用三维mesh的语义信息，通过映射到图像平面来得到图像中的语义信息。数据集中每幅图像的三维坐标X,Y,Z均在世界坐标系下。</p><h3 id="技术细节-1"><a href="#技术细节-1" class="headerlink" title="技术细节"></a>技术细节</h3><h4 id="pose"><a href="#pose" class="headerlink" title="pose"></a>pose</h4><blockquote><p>The pose files contain camera metadata for each image and are given in the /pose subdirectories. They have filenames which are globally unique due to the fact that camera uuids are not shared between areas. They are stored in json files, and contain</p></blockquote><p>pose文件包含每一幅图像的camera元数据，被给定在“/pose”子文件夹下。他们有一个全局的文件名，被存储在json文件中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"camera_k_matrix"</span>:  # The <span class="number">3</span>x3 camera K matrix. Stored as a list-of-lists, </span><br><span class="line">  "field_of_view_rads": #  The Camera's field of view, in radians, </span><br><span class="line">  "camera_original_rotation": #  The camera's initial XYZ-Euler rotation in the .obj, </span><br><span class="line">  "rotation_from_original_to_point": </span><br><span class="line">  #  Apply this to the original rotation in order to orient the camera for the corresponding picture, </span><br><span class="line">  "point_uuid": #  alias for camera_uuid, </span><br><span class="line">  "camera_location": #  XYZ location of the camera, </span><br><span class="line">  "frame_num": #  The frame_num in the filename, </span><br><span class="line">  "camera_rt_matrix": #  The 4x3 camera RT matrix, stored as a list-of-lists, </span><br><span class="line">  "final_camera_rotation": #  The camera Euler in the corresponding picture, </span><br><span class="line">  "camera_uuid": #  The globally unique identifier for the camera location, </span><br><span class="line">  "room": #  The room that this camera is in. Stored as roomType_roomNum_areaNum </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h4><blockquote><p>RGB images are in the /rgb folder and contain synthesized but accurate RGB images of the scene.</p></blockquote><p>RGB图像被存储在“/rgb”文件夹中。</p><h4 id="Depth"><a href="#Depth" class="headerlink" title="Depth"></a>Depth</h4><blockquote><p>Depth images are stored as 16-bit PNGs and have a maximum depth of 128m and a sensitivity of 1/512m. Missing values are encoded with the value 2^16 - 1. Note that while depth is defined relative to the plane of the camera in the data (z-depth), it is defined as the distance from the point-center of the camera in the panoramics.</p></blockquote><h4 id="Global-XYZ"><a href="#Global-XYZ" class="headerlink" title="Global XYZ"></a>Global XYZ</h4><blockquote><p>Global XYZ images contain the ground-truth location of each pixel in the mesh. They are stored as 16-bit 3-channel OpenEXR files and a convenience readin function is provided in /assets/utils.py. These can be used for generating point correspondences, e.g. for optical flow. Missing values are encoded as #000000.</p></blockquote><h4 id="Normal"><a href="#Normal" class="headerlink" title="Normal"></a>Normal</h4><blockquote><p>Normals are 127.5-centered per-channel surface normal images. For panoramic images, these normals are relative to the global corodinate system. Since the global coordinate system is impossible to determine from a sampled image, the normal images in /data have their normals defined relative to the direction the camera is facing. The normals axis-color convention is the same one used by NYU RGB-D. Areas where the mesh is missing have pixel color #808080.</p></blockquote><h4 id="Semantic"><a href="#Semantic" class="headerlink" title="Semantic"></a>Semantic</h4><blockquote><p>Semantic images come in two variants, semantic and semantic_pretty. They both include information from the point cloud annotations, but only the semantic version should be used for learning. The labels can be found in assets/semantic_labels.json, and images can be parsed using some of the convenience functions in utils.py. Specifically: The semantic images are encoded as 3-channel 8-bit PNGs which are interpreted as 24-bit base-256 integers which are an index into the labels array in semantic_labels.json.</p></blockquote><p>Let’s say that you’ve loaded the image into memory and it’s stored as a numpy array called img and want the label for the pixel at (1500, 2000) which is the leftmost sofa chair in this image. utils.py provides get_index, load_labels and parse_labels for extracting the label information. Here is what your code might look like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</span><br><span class="line"><span class="keyword">from</span> assets.utils <span class="keyword">import</span> *  <span class="comment"># Assets should be downloaded from this repo</span></span><br><span class="line">labels = load_labels( <span class="string">'/path/to/assets/semantic_labels.json'</span> )</span><br><span class="line"></span><br><span class="line">img = imread(  <span class="string">'/path/to/image.png'</span> )</span><br><span class="line">pix = img[ <span class="number">1500</span>,<span class="number">2000</span> ]</span><br><span class="line">instance_label = labels[ get_index( pix ) ]</span><br><span class="line">instance_label_as_dict = parse_label( instance_label )</span><br><span class="line"><span class="keyword">print</span> instance_label_as_dict</span><br></pre></td></tr></table></figure><p>Gives {‘instance_num’: 5, ‘instance_class’: u’sofa’, ‘room_num’: 3, ‘room_type’: u’office’, ‘area_num’: 3} Here we can see that this is the 5th instance of class ‘sofa’ in area 3.</p><p>Finally, note that pixels where the data is missing are encoded with the color #0D0D0D which is larger than the len( labels ).</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发-传感器坐标系问题</title>
      <link href="/2018/09/12/iOS%E5%BC%80%E5%8F%91-%E4%BC%A0%E6%84%9F%E5%99%A8%E5%9D%90%E6%A0%87%E7%B3%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2018/09/12/iOS%E5%BC%80%E5%8F%91-%E4%BC%A0%E6%84%9F%E5%99%A8%E5%9D%90%E6%A0%87%E7%B3%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="传感器坐标系"><a href="#传感器坐标系" class="headerlink" title="传感器坐标系"></a>传感器坐标系</h1><p>移动设备内置的传感器采集得到的数据均源自传感器本体坐标系下。然而，在现实应用中，常常有如下需求：求取传感器数据在世界坐标系下的数据。例如，导航应用。</p><p>常见的手机本体坐标系如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programmings/iOS/iOS%E5%BC%80%E5%8F%91_%E6%89%8B%E6%9C%BA%E5%9D%90%E6%A0%87%E7%B3%BB.png" alt></p><p>世界坐标系如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programmings/iOS/iOS%E5%BC%80%E5%8F%91_%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E7%B3%BB.png" alt></p><p>为了区分与手机坐标系的区别，这里把地球坐标系加一个下标w，在此坐标系中：</p><p>zw 垂直与地面向上<br>yw与zw垂直，指向北。<br>xw垂直与zw与yw确定的平面，指向东。</p><h1 id="加速度计"><a href="#加速度计" class="headerlink" title="加速度计"></a>加速度计</h1><p>iOS的加速度传感器能够提供很多有用的数据，比如rotationMatrix和指向三轴方向的分量x、y、z。iOS SDK提供的传感器管理类CMDeviceMotion用来获取大多数的传感器数据，对于加速度来说，主要是userAccelerate分量数据。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreMotion</span><br><span class="line"><span class="keyword">var</span> motionManager = <span class="type">CMMotionManager</span>()</span><br><span class="line">...</span><br><span class="line">motionManager.startDeviceMotionUpdatesUsingReferenceFrame(<span class="type">CMAttitudeReferenceFrameXTrueNorthZVertical</span>, toQueue: <span class="type">NSOperationQueue</span>.currentQueue(), withHandler: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> acc: <span class="type">CMAcceleration</span> = deviceMotion.userAcceleration</span><br><span class="line">    <span class="keyword">var</span> rot = deviceMotion.attitude.rotationMatrix</span><br><span class="line">    <span class="keyword">self</span>.ax = (acc.x*rot.m11 + acc.y*rot.m21 + acc.z*rot.m31)*<span class="number">9.81</span></span><br><span class="line">    <span class="keyword">self</span>.ay = (acc.x*rot.m12 + acc.y*rot.m22 + acc.z*rot.m32)*<span class="number">9.81</span></span><br><span class="line">    <span class="keyword">self</span>.az = (acc.x*rot.m13 + acc.y*rot.m23 + acc.z*rot.m33)*<span class="number">9.81</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用startDeviceMotionUpdatesUsingReferenceFrame方法可以设置参考系，这个参考系只对CMDeviceMotion中的attitude变量有效。也就是说在Block中得到的attitude是相对于设定的参考系的，而参考系的设定可以根据自己的需求来进行，通常有一下集中可设定的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *  CMAttitudeReferenceFrame</span><br><span class="line"> *  </span><br><span class="line"> *  Discussion:</span><br><span class="line"> *    CMAttitudeReferenceFrame indicates the reference frame from which all CMAttitude</span><br><span class="line"> *        samples are referenced.</span><br><span class="line"> *</span><br><span class="line"> *    Definitions of each reference frame is as follows:</span><br><span class="line"> *        - CMAttitudeReferenceFrameXArbitraryZVertical describes a reference frame in</span><br><span class="line"> *          which the Z axis is vertical and the X axis points in an arbitrary direction</span><br><span class="line"> *          in the horizontal plane.</span><br><span class="line"> *        - CMAttitudeReferenceFrameXArbitraryCorrectedZVertical describes the same reference</span><br><span class="line"> *          frame as CMAttitudeReferenceFrameXArbitraryZVertical with the following exception:</span><br><span class="line"> *          when available and calibrated, the magnetometer will be used to correct for accumulated</span><br><span class="line"> *          yaw errors. The downside of using this over CMAttitudeReferenceFrameXArbitraryZVertical</span><br><span class="line"> *          is increased CPU usage.</span><br><span class="line"> *        - CMAttitudeReferenceFrameXMagneticNorthZVertical describes a reference frame</span><br><span class="line"> *          in which the Z axis is vertical and the X axis points toward magnetic north.</span><br><span class="line"> *          Note that using this reference frame may require device movement to </span><br><span class="line"> *          calibrate the magnetometer.</span><br><span class="line"> *        - CMAttitudeReferenceFrameXTrueNorthZVertical describes a reference frame in</span><br><span class="line"> *          which the Z axis is vertical and the X axis points toward true north.</span><br><span class="line"> *          Note that using this reference frame may require device movement to </span><br><span class="line"> *          calibrate the magnetometer.</span><br><span class="line"> */</span><br><span class="line">typedef NS_OPTIONS(NSUInteger, CMAttitudeReferenceFrame) __TVOS_PROHIBITED &#123;</span><br><span class="line">CMAttitudeReferenceFrameXArbitraryZVertical = 1 &lt;&lt; 0,</span><br><span class="line">CMAttitudeReferenceFrameXArbitraryCorrectedZVertical = 1 &lt;&lt; 1,</span><br><span class="line">CMAttitudeReferenceFrameXMagneticNorthZVertical = 1 &lt;&lt; 2,</span><br><span class="line">CMAttitudeReferenceFrameXTrueNorthZVertical = 1 &lt;&lt; 3</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面获取数据的实例中，使用的是x轴指向地球北极，z轴指向地心，也就是地理上的地心方向。</p><p>通过attitude得到一个旋转向量rot，然后只要将原来相对于设备的参考系向量旋转到世界参考系中就可以了。</p><p>这个旋转使用了矩阵v_world = M^-1 <em> v_device = M^T </em> v_device。这里的M就是旋转矩阵rot，因为矩阵旋转的特性，一个矩阵的转置矩阵和逆矩阵是相等的。</p><p>而在计算的使用分量都乘以了一个9.81，其实这个就是物理上的g，所有的加速度都是以g为单位的。</p><h1 id="2-DeviceMotion详解"><a href="#2-DeviceMotion详解" class="headerlink" title="2. DeviceMotion详解"></a>2. <a href="https://developer.apple.com/documentation/coremotion?language=objc" target="_blank" rel="noopener">DeviceMotion</a>详解</h1><p><strong><em>Deliver acceleration, attitude, rotation, and magnetic field data that is adjusted for gravity and other forms of bias.</em></strong></p><h2 id="2-1-Getting-Processed-Device-Motion-Data"><a href="#2-1-Getting-Processed-Device-Motion-Data" class="headerlink" title="2.1 Getting Processed Device-Motion Data"></a>2.1 <a href="https://developer.apple.com/documentation/coremotion/getting_processed_device-motion_data?language=objc" target="_blank" rel="noopener">Getting Processed Device-Motion Data</a></h2><p><strong><em>Retrieve data that has already been processed to remove environmental bias, such as the effects of gravity.</em></strong></p><p>不同于原始的加速度计和陀螺仪数据，DeviceMotion得到的加速度计和陀螺仪读数是基于去噪之后的读数，诸如bias和重力。DeviceMotion服务通过使用CMDeviceMotion对象得到。其包含如下传感器数据：</p><ul><li>相对于参考帧在三维空间移动设备的姿态</li><li>去掉bias的角速度</li><li>重力向量</li><li>去掉重力后的加速度计读数</li><li>地磁读数</li></ul><p>传感器数据读取分为pull和push方法，请自行参考文档使用。</p><p>扩展阅读：<a href="https://developer.apple.com/documentation/coremotion/getting_processed_device-motion_data/understanding_reference_frames_and_device_attitude?language=objc" target="_blank" rel="noopener">Understanding Reference Frames and Device Attitude</a></p><p>Learn about the initial frame of reference used to report rotation and attitude values.</p><p>设备的姿态和运动均基于特定的参考帧。IOS提供了基本的参考帧可以设置，参考<a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe?language=objc" target="_blank" rel="noopener">CMAttitudeReferenceFrame</a>。这些参考帧均假设设备平放在平面上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typedef enum CMAttitudeReferenceFrame : NSUInteger &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; CMAttitudeReferenceFrame;</span><br></pre></td></tr></table></figure><h2 id="2-2-参考帧详解"><a href="#2-2-参考帧详解" class="headerlink" title="2.2 参考帧详解"></a>2.2 参考帧详解</h2><p>参考帧包括：</p><ul><li><a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/cmattitudereferenceframexarbitraryzvertical?language=objc" target="_blank" rel="noopener">CMAttitudeReferenceFrameXArbitraryZVertical</a></li><li><a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/cmattitudereferenceframexarbitrarycorrectedzvertical?language=objc" target="_blank" rel="noopener">CMAttitudeReferenceFrameXArbitraryCorrectedZVertical</a></li><li><a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/cmattitudereferenceframexmagneticnorthzvertical?language=objc" target="_blank" rel="noopener">CMAttitudeReferenceFrameXMagneticNorthZVertical</a></li><li><a href="https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/cmattitudereferenceframextruenorthzvertical?language=objc" target="_blank" rel="noopener">CMAttitudeReferenceFrameXTrueNorthZVertical</a></li></ul><h3 id="2-2-1-CMAttitudeReferenceFrameXArbitraryZVertical"><a href="#2-2-1-CMAttitudeReferenceFrameXArbitraryZVertical" class="headerlink" title="2.2.1 CMAttitudeReferenceFrameXArbitraryZVertical"></a>2.2.1 CMAttitudeReferenceFrameXArbitraryZVertical</h3><p>Describes a reference frame in which the Z axis is vertical and the X axis points in an arbitrary direction in the horizontal plane.</p><h3 id="2-2-2-CMAttitudeReferenceFrameXArbitraryCorrectedZVertical"><a href="#2-2-2-CMAttitudeReferenceFrameXArbitraryCorrectedZVertical" class="headerlink" title="2.2.2 CMAttitudeReferenceFrameXArbitraryCorrectedZVertical"></a>2.2.2 CMAttitudeReferenceFrameXArbitraryCorrectedZVertical</h3><p>Describes the same reference frame as CMAttitudeReferenceFrameXArbitraryZVertical except that the magnetometer, when available and calibrated, is used to improve long-term yaw accuracy. Using this constant instead of CMAttitudeReferenceFrameXArbitraryZVertical results in increased CPU usage.</p><h3 id="2-2-3-CMAttitudeReferenceFrameXMagneticNorthZVertical"><a href="#2-2-3-CMAttitudeReferenceFrameXMagneticNorthZVertical" class="headerlink" title="2.2.3 CMAttitudeReferenceFrameXMagneticNorthZVertical"></a>2.2.3 CMAttitudeReferenceFrameXMagneticNorthZVertical</h3><p>Describes a reference frame in which the Z axis is vertical and the X axis points toward magnetic north. Note that using this reference frame may require device movement to calibrate the magnetometer.</p><h3 id="2-2-4-CMAttitudeReferenceFrameXTrueNorthZVertical"><a href="#2-2-4-CMAttitudeReferenceFrameXTrueNorthZVertical" class="headerlink" title="2.2.4 CMAttitudeReferenceFrameXTrueNorthZVertical"></a>2.2.4 CMAttitudeReferenceFrameXTrueNorthZVertical</h3><p>Describes a reference frame in which the Z axis is vertical and the X axis points toward true north. Note that using this reference frame may require device movement to calibrate the magnetometer. It also requires the location to be available in order to calculate the difference between magnetic and true north.</p><h1 id="3-CMDeviceMotion"><a href="#3-CMDeviceMotion" class="headerlink" title="3. CMDeviceMotion"></a>3. <a href="https://developer.apple.com/documentation/coremotion/cmdevicemotion?language=objc" target="_blank" rel="noopener">CMDeviceMotion</a></h1><p><strong><em>Encapsulated measurements of the attitude, rotation rate, and acceleration of a device.</em></strong></p><p>包括：</p><ul><li>Getting Attitude and Rotation Rate<ul><li>attitud<ul><li>@property(readonly, nonatomic) CMAttitude *attitude;</li></ul></li><li>rotationRate<ul><li>The rotation rate of the device.</li></ul></li></ul></li><li>Getting Acceleration Data<ul><li>gravity<ul><li>The gravity acceleration vector expressed in the device’s reference frame.</li></ul></li><li>userAcceleration<ul><li>The acceleration that the user is giving to the device.</li></ul></li></ul></li><li>Getting the Calibrated Magnetic Field<ul><li>magneticField<ul><li>Returns the magnetic field vector with respect to the device.</li></ul></li><li>CMCalibratedMagneticField<ul><li>Calibrated magnetic field data and an estimate of the accuracy of the calibration.</li></ul></li><li>CMMagneticFieldCalibrationAccuracy<ul><li>Indicates the calibration accuracy of a magnetic field estimate</li></ul></li></ul></li><li>Getting the Heading<ul><li>heading<ul><li>The heading angle (measured in degrees) relative to the current reference frame.</li></ul></li></ul></li></ul><h1 id="4-CMAttitude"><a href="#4-CMAttitude" class="headerlink" title="4. CMAttitude"></a>4. <a href="https://developer.apple.com/documentation/coremotion/cmattitude?language=objc" target="_blank" rel="noopener">CMAttitude</a></h1><p><strong><em>The device’s orientation relative to a known frame of reference at a point in time.</em></strong></p><p>包括：</p><ul><li>Getting a Mathematical Representation of Attitude as Euler Angles<ul><li>roll</li><li>pitch</li><li>yaw</li></ul></li><li>Getting a Mathematical Representation of Attitude as a Rotation Matrix<ul><li>rotationMatrix<ul><li>@property(readonly, nonatomic) CMRotationMatrix rotationMatrix;</li></ul></li><li>CMRotationMatrix<ul><li>Each field in this structure defines an element of the rotation matrix by its position. For example, m11 is the element in row 1, column 1; m31 is the element in row 3, column 1; m13 is the element in row 1, column 3.</li></ul></li></ul></li><li>Getting a Mathematical Representation of Attitude as a Quaternion<ul><li>quaternion<ul><li>@property(readonly, nonatomic) CMQuaternion quaternion;</li></ul></li><li>CMQuaternion<ul><li>A quaternion offers a way to parameterize attitude. If q is an instance of CMQuaternion, mathematically it represents the following unit quaternion: q.x*i + q.y*j + q.z*k + q.w.</li></ul></li></ul></li><li>Obtaining the Change in Attitude<ul><li>multiplyByInverseOfAttitude:<ul><li><ul><li>(void)multiplyByInverseOfAttitude:(CMAttitude *)attitude;</li></ul></li></ul></li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://robinchao.github.io/2016/09/motion-relative-to-world/" target="_blank" rel="noopener">如何获取iOS世界坐标系中的加速度 — 关于坐标系的转换</a></li><li><a href="https://blog.csdn.net/yq_forever/article/details/79511676" target="_blank" rel="noopener">安卓坐标系转换之一：从手机坐标系到地球坐标系</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-元素最近邻快速查找</title>
      <link href="/2018/09/11/%E7%AE%97%E6%B3%95-%E5%85%83%E7%B4%A0%E6%9C%80%E8%BF%91%E9%82%BB%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE/"/>
      <url>/2018/09/11/%E7%AE%97%E6%B3%95-%E5%85%83%E7%B4%A0%E6%9C%80%E8%BF%91%E9%82%BB%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>需求：给定一个元素，在指定集合中输出n个最近邻的元素。如果集合中没有重复元素，那么只有一个元素输出；如果集合中由重复元素，那么可能存在多个最近邻元素输出。</p><h1 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReadCsvData</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    time = []</span><br><span class="line">    loc = []</span><br><span class="line">    <span class="keyword">with</span> open(file_name,<span class="string">'r'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">        reader = csv.reader(csvfile)</span><br><span class="line">        rows= [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> rows:</span><br><span class="line">            data = np.array(data)</span><br><span class="line">            time.append(float(data[<span class="number">0</span>]))</span><br><span class="line">            loc.append([float(data[<span class="number">1</span>]), float(data[<span class="number">2</span>]), float(data[<span class="number">3</span>])])</span><br><span class="line">    time = np.array(time)</span><br><span class="line">    loc = np.array(loc)</span><br><span class="line">    <span class="keyword">return</span> time, loc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = len(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">            start = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> end + <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rIndex</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    n = len(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    mid = searchInsert(nums, target)</span><br><span class="line">    rlist = []  <span class="comment"># 保持索引</span></span><br><span class="line">    i, j = <span class="number">-1</span>, n</span><br><span class="line">    left, rigth = <span class="number">0</span>, <span class="number">0</span>  <span class="comment"># 左右扩展的标志</span></span><br><span class="line">    mxg = float(<span class="string">'-inf'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt; mid &lt; n:  <span class="comment"># 如果找到了</span></span><br><span class="line">        i, j = mid<span class="number">-1</span>, mid</span><br><span class="line">        mxg = min(abs(nums[i] - target), abs(nums[j] - target))</span><br><span class="line">        left, rigth = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> mid == <span class="number">0</span>:  <span class="comment"># 小于最左边的数字</span></span><br><span class="line">        j = mid</span><br><span class="line">        mxg = abs(nums[j] - target)</span><br><span class="line">        left, rigth = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> mid == n:  <span class="comment"># 大于最右边的数字</span></span><br><span class="line">        i = mid<span class="number">-1</span></span><br><span class="line">        mxg = abs(nums[i] - target)</span><br><span class="line">        left, rigth = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> left == <span class="number">1</span> <span class="keyword">or</span> rigth == <span class="number">1</span>:  <span class="comment"># 两边查找</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">-1</span>: left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> j == n: rigth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> left == <span class="number">1</span> <span class="keyword">and</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">            le = abs(nums[i] - target)</span><br><span class="line">            <span class="keyword">if</span> le == mxg:</span><br><span class="line">                rlist = [i] + rlist</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> rigth == <span class="number">1</span> <span class="keyword">and</span> j &lt; len(nums):</span><br><span class="line">            ri = abs(nums[j] - target)</span><br><span class="line">            <span class="keyword">if</span> mxg == ri:</span><br><span class="line">                rlist = rlist + [j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rigth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> rlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">################# File path #######################</span></span><br><span class="line">    gt_path = <span class="string">"../data/ADVIO/advio-02/ground-truth/pose.csv"</span></span><br><span class="line">    ARKit_path = <span class="string">"../data/ADVIO/advio-02/iphone/arkit.csv"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">################# Read data #######################</span></span><br><span class="line">    time_gt = []</span><br><span class="line">    loc_gt = []</span><br><span class="line">    time_ARKit = []</span><br><span class="line">    loc_ARKit = []</span><br><span class="line">    errors = []</span><br><span class="line">    time_gt, loc_gt = ReadCsvData(gt_path)</span><br><span class="line">    time_ARKit, loc_ARKit = ReadCsvData(ARKit_path)</span><br><span class="line">    <span class="keyword">print</span> len(time_gt), len(time_ARKit)</span><br><span class="line">    <span class="keyword">if</span> len(time_gt) &lt; len(time_ARKit):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(time_gt)):</span><br><span class="line">            index = rIndex(time_ARKit, time_gt[i])[<span class="number">0</span>]</span><br><span class="line">            error = math.sqrt((loc_gt[i][<span class="number">0</span>] - loc_ARKit[index][<span class="number">0</span>])**<span class="number">2</span> + (loc_gt[i][<span class="number">1</span>] - loc_ARKit[index][<span class="number">1</span>])**<span class="number">2</span> + (loc_gt[i][<span class="number">2</span>] - loc_ARKit[index][<span class="number">2</span>])**<span class="number">2</span>)</span><br><span class="line">            errors.append(error)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(time_ARKit)):</span><br><span class="line">            index = rIndex(time_gt, time_ARKit[i])[<span class="number">0</span>]</span><br><span class="line">            error = math.sqrt((loc_gt[index][<span class="number">0</span>] - loc_ARKit[i][<span class="number">0</span>])**<span class="number">2</span> + (loc_gt[index][<span class="number">1</span>] - loc_ARKit[i][<span class="number">1</span>])**<span class="number">2</span> + (loc_gt[index][<span class="number">2</span>] - loc_ARKit[i][<span class="number">2</span>])**<span class="number">2</span>)</span><br><span class="line">            errors.append(error)</span><br><span class="line">    errors = np.array(errors)</span><br><span class="line">    <span class="keyword">print</span> errors</span><br><span class="line">    plt.figure(<span class="number">1</span>)</span><br><span class="line">    plt.plot(loc_gt[:, <span class="number">0</span>], loc_gt[:, <span class="number">2</span>], c = <span class="string">'r'</span>)</span><br><span class="line">    plt.plot(loc_ARKit[:, <span class="number">0</span>], loc_ARKit[:, <span class="number">2</span>], c = <span class="string">'b'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">"X (m)"</span>)</span><br><span class="line">    plt.ylabel(<span class="string">"Y (m)"</span>)</span><br><span class="line">    plt.legend([<span class="string">"Groud-truth"</span>, <span class="string">"ARKit"</span>])</span><br><span class="line">    plt.figure(<span class="number">2</span>)</span><br><span class="line">    plt.plot(errors, c = <span class="string">'b'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Index'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Error (m)'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉领域数据集</title>
      <link href="/2018/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%A2%86%E5%9F%9F%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
      <url>/2018/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E9%A2%86%E5%9F%9F%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
          <category> 计算机视觉 </category>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据集 </tag>
            
            <tag> 学术 </tag>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++回调机制教程</title>
      <link href="/2018/09/09/C-%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6%E6%95%99%E7%A8%8B/"/>
      <url>/2018/09/09/C-%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在 C++ 开发过程中，经常会遇到需要一个类在遇到某种情况下（比如触发了一个行为等等）需要驱使另一类去做某些行为的需求（也就是回调机制）。本文参考如下博文：<a href="https://blog.csdn.net/u012814856/article/details/73294124" target="_blank" rel="noopener">C++简单实现回调机制</a>进行讲解。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>A和B的打招呼程序。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><blockquote><p>现在有两个人，一位是 A 先生，另一位是 B 先生。<br>现在要求当 A 先生给 B 先生打了招呼之后，B 先生立马回复 A，向 A 问好。</p></blockquote><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>这个过程抽象为三个类进行模拟：</p><table><thead><tr><th>角色</th><th>功能</th></tr></thead><tbody><tr><td>A</td><td>向B打招呼</td></tr><tr><td>B</td><td>当A向自己打招呼时，向A打招呼</td></tr><tr><td>main</td><td>创造A和B对象和控制A和B的行为</td></tr></tbody></table><p>当我们看到上述的分析后，应该想到这么三个内容：</p><p>A 的作用：A 在这里干了什么呢？他是触发一次回调行为的触发点，也就是因为 A 进行了打招呼的行为，才有了 B 的回复的行为。也就是说：A 是触发方</p><p>B 的作用：B 在这里干的就多了。他在得知 A 向自己打招呼了之后，进行了回复。也就是说：B 是驱使方</p><p>回复事件：这是我们的回调行为本身，当 A 进行了打招呼的行为，B 进行了回调事件指定的行为</p><p>主过程：它掌控着时空，提供上述所有行为的必要条件</p><p>那么分析至此，我们已经拥有了写出这个程序的一切条件，接下来让我们一步一步分析一步一步实现吧。</p><h1 id="实现：A、B、Event、main"><a href="#实现：A、B、Event、main" class="headerlink" title="实现：A、B、Event、main"></a>实现：A、B、Event、main</h1><p>首先，我们需要定义一个抽象的事件类，用来定义回复事件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CEvent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hiReply</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个类是这个方法的核心：</p><blockquote><p>这个事件类是一个抽象的类：<br>1.驱使方应该继承这个类并实现其内的具体功能<br>2.触发方应该将此类包含为一个私有变量，当遇到触发事件的时候，通过此指针（父类指针）调用其具体实现的方法（由驱使方实现）<br>3.还需要注意的一点是，为了方便调用，这个类中的方法需要全部声明为公有的，也就是需要在前面加 public 修饰</p></blockquote><p>然后，我们需要实现 A 类，也就是事件触发方：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// person A class , call an event</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() : m_pEvent(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"A: hello B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> != m_pEvent) &#123;</span><br><span class="line">            m_pEvent-&gt;hiReply();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEvent</span><span class="params">(CEvent *event)</span> </span>&#123;</span><br><span class="line">        m_pEvent = event;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CEvent *m_pEvent;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个类是触发方：</p><ul><li><p>将事件类作为其私有变量：用来接收 B （事件类的子类）的指针，用于实现多态方法调用</p></li><li><p>实现了 sayHi() 方法：用来触发 B 的回复行为。可以看到在这个函数里，我们使用了事件类对象调用其抽象方法进行了向 B 的事件通知</p></li><li><p>实现了 setEvent() 方法：用来传递 B 的指针，将其赋值给事件类的指针（父类指针），方便在 sayHi() 方法中多态调用回调方法</p></li></ul><p>接下来，我们需要实现 B 类，也就是驱使方：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// person B class , implement the event function</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> CEvent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B: hello A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hiReply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"B: I'm fine, thanks, and you ?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>B 类中，我们继承了事件类，并且实现了里面的方法。</p><p>最后，让我们看看世界的主宰–主过程里干了什么：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    a.setEvent((CEvent*)&amp;b);</span><br><span class="line">    a.sayHi();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，主过程里我们干了这几件事：</p><p>绑定事件关系：将 b 的指针（事件类子类）传递给了 a 的私有变量 m_pEvent（事件类父类），具有了多态调用的必要条件；这里需要注意的是我们子类向父类的强制转换的写法 (CEvent*)&amp;b，不这么写的话，编译器会报错；想要详细了解 C++ 中父类和子类的转换的可以点击这里 C++中子类和父类之间的相互转化，这篇博客质量还是可以的</p><p>触发事件：让 a 向 b 打招呼</p><p>让我们运行下这个程序，看看运行结果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A: hello B</span><br><span class="line">B: I am fine.</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="demo完整代码实现"><a href="#demo完整代码实现" class="headerlink" title="demo完整代码实现"></a>demo完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// event class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CEvent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hiReply</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person A class , call an event</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A() : m_pEvent(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"A: hello B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != m_pEvent) &#123;</span><br><span class="line">m_pEvent-&gt;hiReply();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEvent</span><span class="params">(CEvent *event)</span> </span>&#123;</span><br><span class="line">m_pEvent = event;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">CEvent *m_pEvent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person B class , implement the event function</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> CEvent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hiReply</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"B: I'm fine, thanks, and you ?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line">a.setEvent((CEvent*)&amp;b);</span><br><span class="line">a.sayHi();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用总结"><a href="#应用总结" class="headerlink" title="应用总结"></a>应用总结</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>A持续set数据给B，B接收到数据后，将计算结果持续通知出去，采用回调机制。</p><h3 id="设计流程"><a href="#设计流程" class="headerlink" title="设计流程"></a>设计流程</h3><p>(1) 编写回调接口</p><p>StepInterface.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StepInterface</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~StepInterface() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">NotifyStep</span><span class="params">(<span class="keyword">int</span> step, <span class="keyword">float</span> diff)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(2) 实现A</p><p>A.h和A.cpp:</p><ul><li>继承回调接口</li><li>实现回调接口所声明的方法（NotifyXXX），即有了回调数据该干啥</li><li>将A的对象设置给B的回调监听器</li></ul><p>A.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"StepInterface.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"B.h"</span></span></span><br><span class="line"></span><br><span class="line">Class A : <span class="keyword">public</span> StepInterface &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A();</span><br><span class="line">B b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NotifyStep</span><span class="params">(<span class="keyword">int</span> step, <span class="keyword">float</span> diff)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>A.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"A.h"</span></span></span><br><span class="line"></span><br><span class="line">A::A() &#123;</span><br><span class="line">b.setStepListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::NotifyStep(<span class="keyword">int</span> step, <span class="keyword">float</span> diff) &#123;</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 实现B</p><p>B.h和B.cpp:</p><ul><li>实例化接口抽象类</li><li>声明回调接口监听器</li><li>实现回调接口监听器</li><li>将计算结果回调给A</li></ul><p>B.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"StepInterface.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStepListener</span><span class="params">(StepInterface* frame)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">otherMethods</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">StepInterface* callR;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>B.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"B.h"</span></span></span><br><span class="line"></span><br><span class="line">B::SetStepListener(StepInterface* frame)&#123;</span><br><span class="line">callR = frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B::otherMethod() &#123;</span><br><span class="line"><span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> diff = <span class="number">0.0</span>;</span><br><span class="line">callR-&gt;NotifyStep(step, diff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/u012814856/article/details/73294124" target="_blank" rel="noopener">C++简单实现回调机制</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apolloScape竞赛</title>
      <link href="/2018/09/09/apolloScape%E7%AB%9E%E8%B5%9B/"/>
      <url>/2018/09/09/apolloScape%E7%AB%9E%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>百度ApolloScape重磅发布了自动驾驶开放数据集。自动驾驶开发测试中，海量、高质的真实数据是必不可缺的“原料”。但是，少有团队有能力开发并维持一个适用的自动驾驶平台，定期校准并收集新数据。</p><p>据介绍，Apollo开放平台此次发布的ApolloScape不仅开放了比Cityscapes等同类数据集大10倍以上的数据量，包括感知、仿真场景、路网数据等数十万帧逐像素语义分割标注的高分辨率图像数据，进一步涵盖更复杂的环境、天气和交通状况等。从数据难度上来看，ApolloScape数据集涵盖了更复杂的道路状况（例如，单张图像中多达162辆交通工具或80名行人），同时开放数据集采用了逐像素语义分割标注的方式，是目前环境最复杂、标注最精准、数据量最大的自动驾驶数据集。</p><p>Apollo开放平台还将与加州大学伯克利分校在CVPR 2018（IEEE国际计算机视觉与模式识别会议）期间联合举办自动驾驶研讨会（Workshop on Autonomous Driving），并将基于ApolloScape的大规模数据集定义了多项任务挑战，为全球自动驾驶开发者和研究人员提供共同探索前沿领域技术突破及应用创新的平台。</p><h1 id="参考一：PoseNet-implementation-for-self-driving-car-localization-using-Pytorch-on-Apolloscape-dataset"><a href="#参考一：PoseNet-implementation-for-self-driving-car-localization-using-Pytorch-on-Apolloscape-dataset" class="headerlink" title="参考一：PoseNet implementation for self-driving car localization using Pytorch on Apolloscape dataset"></a>参考一：<a href="https://capsulesbot.com/blog/2018/08/24/apolloscape-posenet-pytorch.html" target="_blank" rel="noopener">PoseNet implementation for self-driving car localization using Pytorch on Apolloscape dataset</a></h1><p>This article covers the very beginning of the journey and includes the reading and visualization of the Apolloscape dataset for localization task. Implement PoseNet [2] architecture for monocular image pose prediction and visualize results. I use Python and Pytorch for the task.</p><p>NOTE: If you want to jump straight to the code here is the GitHub repo. It’s is still an ongoing work where I intend to implement Vidloc [7], Pose Graph Optimization [3,8] and Structure from Motion [9] pipelines for Apolloscape Dataset in the context of the localization task.</p><h2 id="Apolloscape-Pytorch-Dataset"><a href="#Apolloscape-Pytorch-Dataset" class="headerlink" title="Apolloscape Pytorch Dataset"></a>Apolloscape Pytorch Dataset</h2><p>For Pytorch I need to have a Dataset object that prepares and feeds the data to the loader and then to the model. I want to have a robust dataset class that can:</p><ul><li>support stereo and mono images</li><li>support train/validation splits that came along with data or generate a new one</li><li>support pose normalization</li><li>support different pose representations (needed mainly for visualization and experiments with loss functions)</li><li>support filtering by record id</li><li>support general Apolloscape folder structure layout</li></ul><p>I am not putting here the full listing of the Apolloscape dataset and concentrate solely on how to use it and what data we can get from it. For the full source code, please refer to the Github file datasets/apolloscape.py.</p><p>Here how to create a dataset:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets.apolloscape <span class="keyword">import</span> Apolloscape</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to unpacked data folders</span></span><br><span class="line">APOLLO_PATH = <span class="string">"./data/apolloscape"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Resize transform that is applied on every image read</span></span><br><span class="line">transform = transforms.Compose([transforms.Resize(<span class="number">250</span>)])</span><br><span class="line"></span><br><span class="line">apollo_dataset = Apolloscape(root=os.path.join(APOLLO_PATH), road=<span class="string">"zpark-sample"</span>,</span><br><span class="line">                             transform=transform, train=<span class="keyword">True</span>, pose_format=<span class="string">'quat'</span>,</span><br><span class="line">                             stereo=<span class="keyword">True</span>)</span><br><span class="line">print(apollo_dataset)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dataset: Apolloscape</span><br><span class="line">    Road: zpark-sample</span><br><span class="line">    Record: <span class="keyword">None</span></span><br><span class="line">    Train: <span class="keyword">None</span></span><br><span class="line">    Normalize Poses: <span class="keyword">False</span></span><br><span class="line">    Stereo: <span class="keyword">True</span></span><br><span class="line">    Length: <span class="number">1499</span> of <span class="number">1499</span></span><br><span class="line">    Cameras: [<span class="string">'Camera_2'</span>, <span class="string">'Camera_1'</span>]</span><br><span class="line">    Records: [<span class="string">'Record001'</span>, <span class="string">'Record002'</span>, <span class="string">'Record003'</span>, <span class="string">'Record004'</span>, <span class="string">'Record006'</span>, <span class="string">'Record007'</span>, <span class="string">'Record008'</span>, <span class="string">'Record009'</span>, <span class="string">'Record010'</span>, <span class="string">'Record011'</span>, <span class="string">'Record012'</span>, <span class="string">'Record013'</span>, <span class="string">'Record014'</span>]</span><br></pre></td></tr></table></figure><p>POLLO_PATH is a folder with unpacked Apolloscape datasets, e.g. \$APOLLO_PATH/road02_seg or \$APOLLO_PATH/zpark. Download data from Apolloscape page and unpack iot. Let’s assume that we’ve also created a symlink ./data/apolloscape that points to $APOLLO_PATH folder.</p><p>We can view the list of available records with a number of data samples in each:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show records with numbers of data points</span></span><br><span class="line">recs_num = apollo_dataset.get_records_counts()</span><br><span class="line">recs_num = sorted(recs_num.items(), key=<span class="keyword">lambda</span> kv: kv[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line">print(<span class="string">"Records:"</span>)</span><br><span class="line">print(<span class="string">"\n"</span>.join([<span class="string">"\t&#123;&#125; - &#123;&#125;"</span>.format(r[<span class="number">0</span>], r[<span class="number">1</span>]) <span class="keyword">for</span> r <span class="keyword">in</span> recs_num ]))</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Records:</span><br><span class="line">Record008 - <span class="number">122</span></span><br><span class="line">Record007 - <span class="number">121</span></span><br><span class="line">Record006 - <span class="number">121</span></span><br><span class="line">Record012 - <span class="number">121</span></span><br><span class="line">Record001 - <span class="number">121</span></span><br><span class="line">Record009 - <span class="number">121</span></span><br><span class="line">Record010 - <span class="number">121</span></span><br><span class="line">Record003 - <span class="number">121</span></span><br><span class="line">Record013 - <span class="number">120</span></span><br><span class="line">Record004 - <span class="number">120</span></span><br><span class="line">Record002 - <span class="number">120</span></span><br><span class="line">Record011 - <span class="number">120</span></span><br><span class="line">Record014 - <span class="number">50</span></span><br></pre></td></tr></table></figure><p>We can draw a route for one record with a sampled camera image:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.common <span class="keyword">import</span> draw_record</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw path of a record with a sampled datapoint</span></span><br><span class="line">record = <span class="string">'Record008'</span></span><br><span class="line">draw_record(apollo_dataset, record)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>output:</p><p>Alternatively, we can see all records at once in one chart:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Draw all records for current dataset</span></span><br><span class="line">draw_record(apollo_dataset)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>output:</p><p>Another option is to see it in a video:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.common <span class="keyword">import</span> make_video</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate and save video for the record</span></span><br><span class="line">outfile = <span class="string">"./output_data/videos/video_&#123;&#125;_&#123;&#125;.mp4"</span>.format(apollo_dataset.road, apollo_dataset.record)</span><br><span class="line">make_video(apollo_dataset, outfile=outfile)</span><br></pre></td></tr></table></figure><p>Output (cut gif version of the generated video):</p><p>For the PoseNet training we will use mono images with zero-mean normalized poses and camera images center-cropped to 250px:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Resize and CenterCrop</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">260</span>),</span><br><span class="line">    transforms.CenterCrop(<span class="number">250</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create train dataset with mono images, normalized poses, enabled cache_transform</span></span><br><span class="line">train_dataset = Apolloscape(root=os.path.join(APOLLO_PATH), road=<span class="string">"zpark-sample"</span>,</span><br><span class="line">                             transform=transform, train=<span class="keyword">True</span>, pose_format=<span class="string">'quat'</span>,</span><br><span class="line">                             normalize_poses=<span class="keyword">True</span>, cache_transform=<span class="keyword">True</span>,</span><br><span class="line">                             stereo=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw path of a single record (mono with normalized poses)</span></span><br><span class="line">record = <span class="string">'Record008'</span></span><br><span class="line">draw_record(apollo_dataset, record)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>Output:</p><p>Implemented Apolloscape Pytorch dataset also supports cache_transform option which is when enabled saves all transformed pickled images to a disk and retrieves it later for the subsequent epochs without the need to redo convert and transform operations every image read event. Cache saves up to 50% of the time during training time though it’s not working with image augmentation transforms like torchvision.transforms.ColorJitter.</p><p>Also, we can get the mean and the standard deviation that we need later to recover true poses translations:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">poses_mean = train_dataset.poses_mean</span><br><span class="line">poses_std = train_dataset.poses_std</span><br><span class="line">print(<span class="string">'Translation poses_mean = &#123;&#125; in meters'</span>.format(poses_mean))</span><br><span class="line">print(<span class="string">'Translation poses_std  = &#123;&#125; in meters'</span>.format(poses_std))</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Translation poses_mean = [  <span class="number">449.95782055</span> <span class="number">-2251.24771214</span>    <span class="number">40.17147932</span>] <span class="keyword">in</span> meters</span><br><span class="line">Translation poses_std  = [<span class="number">123.39589457</span> <span class="number">252.42350964</span>   <span class="number">0.28021513</span>] <span class="keyword">in</span> meters</span><br></pre></td></tr></table></figure><p>You can find all mentioned examples in Apolloscape_View_Records.ipynb notebook.</p><p>And now let’s turn to something useful and more interesting, for example, training PoseNet deep convolutional network to regress poses from camera images.</p><h2 id="PoseNet-localization-task"><a href="#PoseNet-localization-task" class="headerlink" title="PoseNet localization task"></a>PoseNet localization task</h2><p>参考：<a href="https://capsulesbot.com/blog/2018/08/24/apolloscape-posenet-pytorch.html" target="_blank" rel="noopener">PoseNet implementation for self-driving car localization using Pytorch on Apolloscape dataset</a></p><p>A Pytorch implementation of the PoseNet model using a mono image:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoseNet</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, feature_extractor, num_features=<span class="number">128</span>, dropout=<span class="number">0.5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 track_running_stats=False, pretrained=False)</span>:</span></span><br><span class="line">        super(PoseNet, self).__init__()</span><br><span class="line">        self.dropout = dropout</span><br><span class="line">        self.feature_extractor = feature_extractor</span><br><span class="line">        self.feature_extractor.avgpool = torch.nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">        fc_in_features = self.feature_extractor.fc.in_features</span><br><span class="line">        self.feature_extractor.fc = torch.nn.Linear(fc_in_features, num_features)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Translation</span></span><br><span class="line">        self.fc_xyz = torch.nn.Linear(num_features, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Rotation in quaternions</span></span><br><span class="line">        self.fc_quat = torch.nn.Linear(num_features, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extract_features</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x_features = self.feature_extractor(x)</span><br><span class="line">        x_features = F.relu(x_features)</span><br><span class="line">        <span class="keyword">if</span> self.dropout &gt; <span class="number">0</span>:</span><br><span class="line">            x_features = F.dropout(x_features, p=self.dropout, training=self.training)</span><br><span class="line">        <span class="keyword">return</span> x_features</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x_features = self.extract_features(x)</span><br><span class="line">        x_translations = self.fc_xyz(x_features)</span><br><span class="line">        x_rotations = self.fc_quat(x_features)</span><br><span class="line">        x_poses = torch.cat((x_translations, x_rotations), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x_poses</span><br></pre></td></tr></table></figure><p>For further experiments I’ve also implemented stereo version (currently it’s simply processes two images in parallel without any additional constraints), option to switch off stats tracking for BatchNorm layers and Kaiming He normal for weight initialization [4]. Full source code is here models/posenet.py</p><h2 id="PoseNet-Loss-Functions"><a href="#PoseNet-Loss-Functions" class="headerlink" title="PoseNet Loss Functions"></a>PoseNet Loss Functions</h2><p>For more details on where it came from and intro to Bayesian Deep Learning (BDL) you can refer to an excellent post by Alex Kendall where he explains different types of uncertainties and its implications to the multi-task models. And even more results you can find in papers “Multi-task learning using uncertainty to weigh losses for scene geometry and semantics.” [5] and “What uncertainties do we need in Bayesian deep learning for computer vision?.” [6].</p><p>Pytorch implementation for both versions of a loss function is the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoseNetCriterion</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, beta = <span class="number">512.0</span>, learn_beta=False, sx=<span class="number">0.0</span>, sq=<span class="number">-3.0</span>)</span>:</span></span><br><span class="line">        super(PoseNetCriterion, self).__init__()</span><br><span class="line">        self.loss_fn = torch.nn.L1Loss()</span><br><span class="line">        self.learn_beta = learn_beta</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> learn_beta:</span><br><span class="line">            self.beta = beta</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.beta = <span class="number">1.0</span></span><br><span class="line">        self.sx = torch.nn.Parameter(torch.Tensor([sx]), requires_grad=learn_beta)</span><br><span class="line">        self.sq = torch.nn.Parameter(torch.Tensor([sq]), requires_grad=learn_beta)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="comment"># Translation loss</span></span><br><span class="line">        loss = torch.exp(-self.sx) * self.loss_fn(x[:, :<span class="number">3</span>], y[:, :<span class="number">3</span>])</span><br><span class="line">        <span class="comment"># Rotation loss</span></span><br><span class="line">        loss += torch.exp(-self.sq) * self.beta * self.loss_fn(x[:, <span class="number">3</span>:], y[:, <span class="number">3</span>:]) + self.sq</span><br><span class="line">        <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure><p>If learn_beta param is False it’s a simple weighted sum version of the loss and if learn_beta is True it’s using sx and sq params with enabled gradients that trains together with other network parameter with the same optimizer.</p><h2 id="PoseNet-Training-Implementation-Details"><a href="#PoseNet-Training-Implementation-Details" class="headerlink" title="PoseNet Training Implementation Details"></a>PoseNet Training Implementation Details</h2><p>Now let’s combine it all to the training loop. I use torch.optim.Adam optimizer with learning rate 1e-5, ResNet34 pretrained on ImageNet as a feature extractor and 2048 features on the last FC layer before pose regressors.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, models</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">from</span> datasets.apolloscape <span class="keyword">import</span> Apolloscape</span><br><span class="line"><span class="keyword">from</span> utils.common <span class="keyword">import</span> save_checkpoint</span><br><span class="line"><span class="keyword">from</span> models.posenet <span class="keyword">import</span> PoseNet, PoseNetCriterion</span><br><span class="line"></span><br><span class="line">APOLLO_PATH = <span class="string">"./data/apolloscape"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ImageNet normalization params because we are using pre-trained</span></span><br><span class="line"><span class="comment"># feature extractor</span></span><br><span class="line">normalize = transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                                     std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Resize data before using</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">260</span>),</span><br><span class="line">    transforms.CenterCrop(<span class="number">250</span>),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    normalize</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create datasets</span></span><br><span class="line">train_dataset = Apolloscape(root=os.path.join(APOLLO_PATH), road=<span class="string">"zpark-sample"</span>,</span><br><span class="line">    transform=transform, normalize_poses=<span class="keyword">True</span>, pose_format=<span class="string">'quat'</span>, train=<span class="keyword">True</span>, cache_transform=<span class="keyword">True</span>, stereo=<span class="keyword">False</span>)</span><br><span class="line">val_dataset = Apolloscape(root=os.path.join(APOLLO_PATH), road=<span class="string">"zpark-sample"</span>,</span><br><span class="line">    transform=transform, normalize_poses=<span class="keyword">True</span>, pose_format=<span class="string">'quat'</span>, train=<span class="keyword">False</span>, cache_transform=<span class="keyword">True</span>, stereo=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dataloaders</span></span><br><span class="line">train_dataloader = DataLoader(train_dataset, batch_size=<span class="number">80</span>, shuffle=<span class="keyword">True</span>)</span><br><span class="line">val_dataloader = DataLoader(val_dataset, batch_size=<span class="number">80</span>, shuffle=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select primary device</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    device = torch.device(<span class="string">'cuda'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    device = torch.device(<span class="string">'cpu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create pretrained feature extractor</span></span><br><span class="line">feature_extractor = models.resnet34(pretrained=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Num features for the last layer before pose regressor</span></span><br><span class="line">num_features = <span class="number">2048</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create model</span></span><br><span class="line">model = PoseNet(feature_extractor, num_features=num_features, pretrained=<span class="keyword">True</span>)</span><br><span class="line">model = model.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Criterion</span></span><br><span class="line">criterion = PoseNetCriterion(stereo=<span class="keyword">False</span>, learn_beta=<span class="keyword">True</span>)</span><br><span class="line">criterion = criterion.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add all params for optimization</span></span><br><span class="line">param_list = [&#123;<span class="string">'params'</span>: model.parameters()&#125;]</span><br><span class="line"><span class="keyword">if</span> criterion.learn_beta:</span><br><span class="line">    <span class="comment"># Add sx and sq from loss function to optimizer params</span></span><br><span class="line">    param_list.append(&#123;<span class="string">'params'</span>: criterion.parameters()&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create optimizer</span></span><br><span class="line">optimizer = optim.Adam(params=param_list, lr=<span class="number">1e-5</span>, weight_decay=<span class="number">0.0005</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Epochs to train</span></span><br><span class="line">n_epochs = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Main training loop</span></span><br><span class="line">val_freq = <span class="number">200</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">0</span>, n_epochs):</span><br><span class="line">    train(train_dataloader, model, criterion, optimizer, e, n_epochs, log_freq=<span class="number">0</span>,</span><br><span class="line">         poses_mean=train_dataset.poses_mean, poses_std=train_dataset.poses_std,</span><br><span class="line">         stereo=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> e % val_freq == <span class="number">0</span>:</span><br><span class="line">        validate(val_dataloader, model, criterion, e, log_freq=<span class="number">0</span>,</span><br><span class="line">            stereo=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save checkpoint</span></span><br><span class="line">save_checkpoint(model, optimizer, criterion, <span class="string">'zpark_experiment'</span>, n_epochs)</span><br></pre></td></tr></table></figure><p>A little bit simplified train function below with error calculation that is used solely for logging purposes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(train_loader, model, criterion, optimizer, epoch, max_epoch,</span></span></span><br><span class="line"><span class="function"><span class="params">          log_freq=<span class="number">1</span>, print_sum=True, poses_mean=None, poses_std=None,</span></span></span><br><span class="line"><span class="function"><span class="params">          stereo=True)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch model to training</span></span><br><span class="line">    model.train()</span><br><span class="line"></span><br><span class="line">    losses = AverageMeter()</span><br><span class="line"></span><br><span class="line">    epoch_time = time.time()</span><br><span class="line"></span><br><span class="line">    gt_poses = np.empty((<span class="number">0</span>, <span class="number">7</span>))</span><br><span class="line">    pred_poses = np.empty((<span class="number">0</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">for</span> idx, (batch_images, batch_poses) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        data_time = (time.time() - end)</span><br><span class="line"></span><br><span class="line">        batch_images = batch_images.to(device)</span><br><span class="line">        batch_poses = batch_poses.to(device)</span><br><span class="line"></span><br><span class="line">        out = model(batch_images)</span><br><span class="line">        loss = criterion(out, batch_poses)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Training step</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        losses.update(loss.data[<span class="number">0</span>], len(batch_images) * batch_images[<span class="number">0</span>].size(<span class="number">0</span>) <span class="keyword">if</span> stereo</span><br><span class="line">                <span class="keyword">else</span> batch_images.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># move data to cpu &amp; numpy</span></span><br><span class="line">        bp = batch_poses.detach().cpu().numpy()</span><br><span class="line">        outp = out.detach().cpu().numpy()</span><br><span class="line">        gt_poses = np.vstack((gt_poses, bp))</span><br><span class="line">        pred_poses = np.vstack((pred_poses, outp))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get final times</span></span><br><span class="line">        batch_time = (time.time() - end)</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> log_freq != <span class="number">0</span> <span class="keyword">and</span> idx % log_freq == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Epoch: [&#123;&#125;/&#123;&#125;]\tBatch: [&#123;&#125;/&#123;&#125;]\t'</span></span><br><span class="line">                  <span class="string">'Time: &#123;batch_time:.3f&#125;\t'</span></span><br><span class="line">                  <span class="string">'Data Time: &#123;data_time:.3f&#125;\t'</span></span><br><span class="line">                  <span class="string">'Loss: &#123;losses.val:.3f&#125;\t'</span></span><br><span class="line">                  <span class="string">'Avg Loss: &#123;losses.avg:.3f&#125;\t'</span>.format(</span><br><span class="line">                   epoch, max_epoch - <span class="number">1</span>, idx, len(train_loader) - <span class="number">1</span>,</span><br><span class="line">                   batch_time=batch_time, data_time=data_time, losses=losses))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># un-normalize translation</span></span><br><span class="line">    unnorm = (poses_mean <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>) <span class="keyword">and</span> (poses_std <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">if</span> unnorm:</span><br><span class="line">        gt_poses[:, :<span class="number">3</span>] = gt_poses[:, :<span class="number">3</span>] * poses_std + poses_mean</span><br><span class="line">        pred_poses[:, :<span class="number">3</span>] = pred_poses[:, :<span class="number">3</span>] * poses_std + poses_mean</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Translation error</span></span><br><span class="line">    t_loss = np.asarray([np.linalg.norm(p - t) <span class="keyword">for</span> p, t <span class="keyword">in</span> zip(pred_poses[:, :<span class="number">3</span>], gt_poses[:, :<span class="number">3</span>])])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rotation error</span></span><br><span class="line">    q_loss = np.asarray([quaternion_angular_error(p, t) <span class="keyword">for</span> p, t <span class="keyword">in</span> zip(pred_poses[:, <span class="number">3</span>:], gt_poses[:, <span class="number">3</span>:])])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> print_sum:</span><br><span class="line">        print(<span class="string">'Ep: [&#123;&#125;/&#123;&#125;]\tTrain Loss: &#123;:.3f&#125;\tTe: &#123;:.3f&#125;\tRe: &#123;:.3f&#125;\t Et: &#123;:.2f&#125;s\t&#123;criterion_sx:.5f&#125;:&#123;criterion_sq:.5f&#125;'</span>.format(</span><br><span class="line">            epoch, max_epoch - <span class="number">1</span>, losses.avg, np.mean(t_loss), np.mean(q_loss),</span><br><span class="line">            (time.time() - epoch_time), criterion_sx=criterion.sx.data[<span class="number">0</span>], criterion_sq=criterion.sq.data[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>validate function is similar to train except model.eval()/model.train() modes, logging and error calculations. Please refer to /utils/training.py on GitHub for full-versions of train and validate functions.</p><p>The training converges after about 1-2k epochs. On my machine, with GTX 1080 Ti it takes about 22 seconds per epoch on ZPark sample train dataset with 2242 images pre-processed and scaled to 250x250 pixels. Total training time – 6-12 hours.</p><h2 id="PoseNet-Results-on-Apolloscape-dataset-ZPark-sample-road"><a href="#PoseNet-Results-on-Apolloscape-dataset-ZPark-sample-road" class="headerlink" title="PoseNet Results on Apolloscape dataset. ZPark sample road."></a>PoseNet Results on Apolloscape dataset. ZPark sample road.</h2><p>After 2k epochs of training, the model was managed to get a prediction of pose translation with a mean 40.6 meters and rotation with a mean 1.69 degrees.</p><h2 id="Further-development"><a href="#Further-development" class="headerlink" title="Further development"></a>Further development</h2><p>Established results are far from one that can be used in autonomous navigation where a system needs to now its location within accuracy of 15cm. Such precision is vital for a car to act safely, correctly predict the behaviors of others and plan actions accordingly. In any case, it’s a good baseline and building blocks of the pipeline to work with Apolloscape dataset that I can develop and improve further.</p><p>There many things to try next:</p><ul><li>Use temporal nature of a video.</li><li>Rely on geometrical features of stereo cameras.</li><li>Pose graph optimization techniques.</li><li>Loss based on 3D reprojection errors.</li><li>Structure from motion methods to build 3D map representation.</li></ul><p>And what’s more importantly, all above-mentioned methods need no additional information but that we already have in ZPark sample road from Apolloscape dataset.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><ol><li>Kendall, Alex, and Roberto Cipolla. “Geometric loss functions for camera pose regression with deep learning.” (2017).</li></ol></li><li><ol start="2"><li>Kendall, Alex, Matthew Grimes, and Roberto Cipolla. “Posenet: A convolutional network for real-time 6-dof camera relocalization.” (2015).</li></ol></li><li><ol start="3"><li>Brahmbhatt, Samarth, et al. “Mapnet: Geometry-aware learning of maps for camera localization.” (2017).</li></ol></li><li><ol start="4"><li>He, Kaiming, et al. “Delving deep into rectifiers: Surpassing human-level performance on imagenet classification.” (2015).</li></ol></li><li><ol start="5"><li>Kendall, Alex, Yarin Gal, and Roberto Cipolla. “Multi-task learning using uncertainty to weigh losses for scene geometry and semantics.” (2017).</li></ol></li><li><ol start="6"><li>Kendall, Alex, and Yarin Gal. “What uncertainties do we need in bayesian deep learning for computer vision?.” (2017).</li></ol></li><li><ol start="7"><li>Clark, Ronald, et al. “VidLoc: A deep spatio-temporal model for 6-dof video-clip relocalization.” (2017).</li></ol></li><li><ol start="8"><li>Calafiore, Giuseppe, Luca Carlone, and Frank Dellaert. “Pose graph optimization in the complex domain: Lagrangian duality, conditions for zero duality gap, and optimal solutions.” (2015).</li></ol></li><li><ol start="9"><li>Martinec, Daniel, and Tomas Pajdla. “Robust rotation and translation estimation in multiview reconstruction.” (2007).</li></ol></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://capsulesbot.com/blog/2018/08/24/apolloscape-posenet-pytorch.html" target="_blank" rel="noopener">PoseNet implementation for self-driving car localization using Pytorch on Apolloscape dataset</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode配置教程</title>
      <link href="/2018/09/08/Xcode%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>/2018/09/08/Xcode%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="Xcode配置教程"><a href="#Xcode配置教程" class="headerlink" title="Xcode配置教程"></a>Xcode配置教程</h1><h2 id="添加删除或剪切整行快捷键"><a href="#添加删除或剪切整行快捷键" class="headerlink" title="添加删除或剪切整行快捷键"></a>添加删除或剪切整行快捷键</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VINS-Mobile版源码阅读</title>
      <link href="/2018/09/08/VINS-Mobile%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>/2018/09/08/VINS-Mobile%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="VINS-Mobile版源码阅读"><a href="#VINS-Mobile版源码阅读" class="headerlink" title="VINS-Mobile版源码阅读"></a>VINS-Mobile版源码阅读</h1><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><h3 id="ViewController-mm"><a href="#ViewController-mm" class="headerlink" title="ViewController.mm"></a>ViewController.mm</h3><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/zwlq1314521/article/details/75214769" target="_blank" rel="noopener">VINS（四）estimator_node 数据对齐 imu预积分 vision</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VINS-Mobile版源码阅读</title>
      <link href="/2018/09/08/VIO/"/>
      <url>/2018/09/08/VIO/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="VIO基础知识"><a href="#VIO基础知识" class="headerlink" title="VIO基础知识"></a>VIO基础知识</h1><h2 id="IMU是什么"><a href="#IMU是什么" class="headerlink" title="IMU是什么"></a>IMU是什么</h2><p>IMU中文名叫惯性测量单元，英文名：Inertial measurement unit，简称 IMU。简单理解就是这个东东可以测量两个东西，加速度 a 是沿三个轴\(a_{x}\),\(a_{y}\),\(a_{z}\), 方向的线加速度，而角速度 w 就是这三个方向的角速度 \(w_{x}\),\(w_{y}\),\(w_{z}\), 还有就是IMU的频率比较高一般都在100HZ以上。在IMU内部，除了通常的白噪声，还有个特别的量零偏bias，在这是传感器内部机械、温度等各种物理因素产生的传感器内部误差的综合参数。IMU的加速度计和陀螺仪的每个轴都用彼此相互独立的参数建模，一个角速度测量值和真值之间的连续域上的关系可以写作：</p><p>$$\tilde{w}=w+b_{w}+n_{w}.$$</p><p>在纯视觉的slam或者vo中，由于图像的运动模糊、遮挡、快速运动、纯旋转、尺度不确定性的一系列问题，导致仅靠一个摄像头很难完成我们实际场景的应用需求，而IMU直接可以得到运动主体自身的角速度、加速度的测量数据，从而对运动有一个约束，或者说与视觉形成互补，可实现快速运动的定位和主体纯旋转的处理，从而进一步提高slam/vio的可靠性。</p><p>VIO中IMU与图像之间的时间序列关系如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/IMU-Pre_01.jpg" alt></p><p>图1 IMU与视觉在时间轴上的信息</p><p>如图1所示。在时间轴上，IMU通常以较快的速率采集角速度和加速度的信息，而视觉则是以较慢的频率采集图像。VIO的器件同步，保证了每个时刻采集的数据都是同步的。原理上，我们可以给出每个时刻的位姿估计，然而，现有视觉SLAM，多数是基于关键帧+BA的处理形式。于是，一个重要的问题是，能否将两个视觉关键帧当中的IMU数据，整合在一起，约束它们之间的运动？如果可以的话，又如何来约束？预积分的目的，就在于处理这里的运动关系。为了说清楚这件事，需要介绍一些背景知识。</p><p>(1) 坐标系和动力学</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/IMU_Pre_02.png" alt></p><p>图2 VIO器件的坐标系</p><p>在图2中，当IMU在世界中运动时，我们有世界坐标系（W），IMU坐标系（B）和像极坐标系（C）。对于IMU，通常估计世界到IMU坐标系的位姿为\(R_{WB}\)和\(P_{WB}\)，其中为了与时间进行区分，这里的平移采用P来表示。图2右侧给出了动力学方程，即位移的微分为速度、速度的微分为加速度、旋转的微分为角速度。</p><p>（2）IMU测量数据表示</p><p>IMU可测量IMU系（B）的角速度和加速度，测量信号受噪声和零偏的影响，我们得到：</p><p>B系下的角速度：</p><p>$$_B\tilde{w}_{WB}(t)=_Bw_{WB}(t)+b^{g}(t)+\eta^{g}(t),$$</p><p>加速度，考虑世界坐标系下的重力：</p><p>$$_B\tilde{a}(t)=R_{WB}^{T}(t)(_Wa(t)-_Wg)+b^{a}(t)+\eta^{a}(t),$$</p><p>IMU的Bias方程：</p><p>$$\dot{b}^{g}(t)=\eta^{bg},$$</p><p>$$\dot{b}^{a}(t)=\eta^{ba},$$</p><p>其中，\(\eta^{g}, \eta^{a}, \eta^{bg}, \eta^{ba}\sim N\)，即服从高斯分布。</p><p>为了估计位姿，首先要选择状态变量。在紧耦合（Tightly Coupled）方案中，通常选择位姿、速度、零偏这几个量，作为待估计的状态量，共15维：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/IMU_Pre_03.png" alt></p><p>于是，可以想见，在带IMU的bundle adjustment中，我们每一个Pose都是这样一个15维的变量。那么，如何通过IMU数据，定义两个状态量之间的运动约束呢？还是回到动力学。</p><p>前面给出了微分形式的动力学，当然我们可以把它写成积分形式的。然后，由于是在离散时刻进行采样，所以得到的是离散时刻的动力学方程。再代入IMU的测量，有：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/IMU_Pre_04.png" alt></p><p>个人整理：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/IMU_Pre_04_1.png" alt></p><p>于是，差分方程给出了两个连续的视觉帧之间的IMU约束。进一步，如果把两个关键帧之间的多个视觉帧积分起来，就形成了预积分：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/IMU_Pre_05.png" alt></p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/IMU_Pre_06.png" alt></p><p>个人整理：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/VIO/IMU_Pre_06_1.png" alt></p><h2 id="IMU-预积分"><a href="#IMU-预积分" class="headerlink" title="IMU 预积分"></a>IMU 预积分</h2><p>IMU的数据频率一般远高于视觉，在视觉两帧k，k+1之间通常会有&gt;10组IMU数据。IMU的数据通过积分，可以获取当前位姿（p位置，q四元数表达的姿态）、瞬时速度等参数。</p><p>在VIO中，如果参考世界坐标系对IMU进行积分，积分项中包含相对于世界坐标系的瞬时旋转矩阵，这样有几个问题：</p><ol><li><p>相对世界坐标系的旋转矩阵有drift，如果一直以其为基准进行积分，必然造成积分误差累积；</p></li><li><p>在进行优化位姿调整时（通常是调整视觉KeyFrame的pose），相对于世界坐标系的pose会变化，因而优化后的瞬时旋转矩阵和积分时不同，那么积分自然也就存在问题；</p></li><li><p>一般这个旋转矩阵不知道。。。</p></li></ol><p>因此，一般的预积分的参考坐标系为k帧的IMU参考系，这样可以解决以上问题：</p><ol><li><p>相对k帧的IMU进行积分，不会有累积误差；</p></li><li><p>即使后面调整了位姿，相对位置不变，因此预积分不存在问题；</p></li><li><p>这个旋转矩阵为单位矩阵E，后面每出现一个IMU数据，都可以用任何一种数值积分的方法计算；同时可以将重力加速度提取到积分号外面不参加积分，相当于在重力参考系中积分，计算量也会减少。</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/shang-slam/p/7080113.html" target="_blank" rel="noopener">https://www.cnblogs.com/shang-slam/p/7080113.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/38009126" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38009126</a></li><li><a href="https://zhuanlan.zhihu.com/p/26243851" target="_blank" rel="noopener">预积分 | Momenta Paper Reading 七期回顾</a></li><li><a href="https://zhuanlan.zhihu.com/p/38009126" target="_blank" rel="noopener">如何理解IMU以及其预积分</a></li></ul><h2 id="论文一：Visual-Inertial-Aided-Navigation-for-High-Dynamic-Motion-in-Built-Environments-Without-Initial-Conditions"><a href="#论文一：Visual-Inertial-Aided-Navigation-for-High-Dynamic-Motion-in-Built-Environments-Without-Initial-Conditions" class="headerlink" title="论文一：Visual-Inertial-Aided Navigation for High-Dynamic Motion in Built Environments Without Initial Conditions"></a>论文一：Visual-Inertial-Aided Navigation for High-Dynamic Motion in Built Environments Without Initial Conditions</h2><p>Todd Lupton and Salah Sukkarieh</p><p>The University of Sydney</p><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ol><li><p>位置追踪具有广泛的应用，诸如安全救援、自动驾驶等。</p></li><li><p>当前VO或SLAM方法均存在一些局限性，如VO没有尺度信息。此外，IMU能够提供尺度信息，但难点在于初始化过程。</p></li></ol><h3 id="本文主要想法及贡献点"><a href="#本文主要想法及贡献点" class="headerlink" title="本文主要想法及贡献点"></a>本文主要想法及贡献点</h3><blockquote><p>This core idea is expanded in this paper with integration into a graphical filter that allows automatic inertial initialization and map management to produce a robust visual-inertial navigation system</p></blockquote><p>本文的核心思想是扩展到一个图形滤波器中，它允许自动惯性初始化和地图管理来产生一个鲁棒的视觉惯性导航系统</p><blockquote><p>The main contribution of this paper is that no explicit initialization stage or large uncertainty priors are required, and the initial conditions are automatically recovered in a linear manner.</p></blockquote><p>贡献点是：无需初始化阶段或大的不确定性先验，并且初始条件自动地以线性方式恢复。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CocoaPods简介</title>
      <link href="/2018/09/08/CocoaPods%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/09/08/CocoaPods%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="CocoaPods简介"><a href="#CocoaPods简介" class="headerlink" title="CocoaPods简介"></a>CocoaPods简介</h1><p>CocoaPods是iOS的包管理工具。在开发iOS项目时，经常会使用第三方开源库，手动引入流程复杂，并且库之间还存在依赖关系，更增加了手动管理的难度。开源库如果升级了，你也想用最新版本，还需要重新手动导入，这大大增加了工作量。但用了CocoaPods后，安装和升级都只是一句命令的事情，让你可以专于业务本身。</p><h1 id="CocoaPods安装"><a href="#CocoaPods安装" class="headerlink" title="CocoaPods安装"></a>CocoaPods安装</h1><h2 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h2><p>CocoaPods基于Ruby语言开发而成，因此安装CocoaPods前需要安装Ruby环境。幸运的是Mac系统默认自带Ruby环境，如果没有请自行查找安装。检测是否安装Ruby：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gem -v</span><br><span class="line">2.0.14</span><br></pre></td></tr></table></figure><p>安装则会提示当前Ruby版本。gem介绍：gem是一个管理Ruby库和程序的标准包，它通过Ruby Gem（如 <a href="http://rubygems.org/" target="_blank" rel="noopener">http://rubygems.org/</a> ）源来查找、安装、升级和卸载软件包，非常的便捷。</p><h2 id="更换gem源"><a href="#更换gem源" class="headerlink" title="更换gem源"></a>更换gem源</h2><p>因为国内网络的问题导致gem源间歇性中断，原因你懂的。因此我们需要更换gem源，使用淘宝的gem源<a href="https://ruby.taobao.org/。" target="_blank" rel="noopener">https://ruby.taobao.org/。</a></p><p>第一步：移动默认的源:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br></pre></td></tr></table></figure><p>第二步：指定淘宝的源:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -a https://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p>第三步：查看指定的源是不是淘宝源:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p>如果是<a href="https://ruby.taobao.org/，则更换成功。" target="_blank" rel="noopener">https://ruby.taobao.org/，则更换成功。</a></p><h2 id="安装CocoaPods"><a href="#安装CocoaPods" class="headerlink" title="安装CocoaPods"></a>安装CocoaPods</h2><p>确认改成淘宝源后执行以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p>稍等片刻即可安装完成，输入以下命令检测是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pod --version</span><br><span class="line">0.39.0</span><br></pre></td></tr></table></figure><p>成功则会提示CocoaPods版本。</p><h1 id="CocoaPods使用实例"><a href="#CocoaPods使用实例" class="headerlink" title="CocoaPods使用实例"></a>CocoaPods使用实例</h1><p>首先新建一个iOS工程MyDemo，在该工程中演示CocoaPods的使用。</p><ol><li><p>进入工程的根目录，创建Podfile文件.</p></li><li><p>根据需要，我们可以在Podfile文件中写入我们需要的第三方库，这里以AFNetworking和MJRefresh为例，Podfile内容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &apos;7.0&apos;</span><br><span class="line">pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos;</span><br><span class="line">pod &apos;MJRefresh&apos;,&apos;~&gt; 3.1&apos;</span><br><span class="line"># 这段代码的意思是，当前类库支持的iOS最低版本是iOS 7.0, 要下载的两个类库的版本分别为 3.0、3.1。</span><br></pre></td></tr></table></figure></li><li><p>这时候，你就可以利用CocoPods下载AFNetworking和MJRefresh类库了。在终端中进入工程根目录，运行以下命令：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/myl/Desktop/IOS/MyDemo</span><br><span class="line">$ pod install</span><br><span class="line">Analyzing dependencies</span><br><span class="line">Downloading dependencies</span><br><span class="line">Installing AFNetworking (3.0.4)</span><br><span class="line">Installing MJRefresh (3.1.0)</span><br><span class="line">Generating Pods project</span><br><span class="line">Integrating client project</span><br><span class="line"></span><br><span class="line">[!] Please close any current Xcode sessions and use `MyDemo.xcworkspace` <span class="keyword">for</span> this project from now on.</span><br><span class="line">Sending stats</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARKit教程</title>
      <link href="/2018/09/08/ARKit/"/>
      <url>/2018/09/08/ARKit/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h1 id="ARKit教程"><a href="#ARKit教程" class="headerlink" title="ARKit教程"></a>ARKit教程</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>苹果公司在WWDC2017 上发布了ARKit,开发者可以使用这套框架在iPhone和iPad上创建属于自己的AR体验。</p><p>增强现实技术（Augmented Reality，简称 AR），是一种实时地计算摄影机影像的位置及角度并加上相应图像、视频、3D模型的技术，这种技术的目标是在屏幕上把虚拟世界套在现实世界并进行互动。</p><p>ARKit框架提供了两种AR技术，一种是基于3D场景(SceneKit)实现的增强现实，一种是基于2D场景(SpriktKit)实现的增强现实。</p><p>需要注意的是，ARKit虽说是iOS11提供的框架，但是并非升级到iOS11都能使用。必须要A9以及以上的处理器才能使用。以下是ARKit 开发环境：</p><p>1.Xcode版本：Xcode9及以上</p><p>2.iOS系统:iOS11及以上</p><p>3.iOS设备：处理器A9及以上（6S机型及以上）</p><p>4.MacOS系统：10.12.4及以上（安装Xcode9对Mac系统版本有要求）</p><blockquote><p>根据ARKit的描述，兼容苹果AR功能的iPhone必须搭载iOS 11，同时对手机、平板的整体性能也有更高要求。ARKit支持所有安装了ios 11的iphone与ipad。</p></blockquote><p>判断iPhone 硬件设备型号:</p><ul><li><p>iPhone8,1 iPhone6S</p></li><li><p>iPhone8,2 iPhone6S Plus</p></li><li><p>iPhone8,4 iPhoneSE</p></li><li><p>iPhone9,1 /iPhone9,3 iPhone 7</p></li><li><p>iPhone9,2/iPhone9,4 iPhone 7 Plus </p></li><li><p>iPhone10,1/iPhone10,4          iPhone 8</p></li><li><p>iPhone10,2/iPhone10,5          iPhone 8 Plus</p></li><li><p>iPhone10,3/iPhone10,6   iPhone X</p></li></ul><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><p>（1）追踪</p><p>追踪是 ARKit 的核心功能，可以获得设备在物理世界中的方向和位置，此外还可以追踪物体（例如人脸）。</p><p>（2）场景理解</p><p>场景理解通过学习环境的一些属性来优化追踪，检测水平面（例如地面和桌面）和垂直面以便在场景中放置物体。场景理解还会学习环境中的光照情况，以便在虚拟场景中精确模拟真实的光照，以防物体看起来过亮或过暗。</p><p>（3）渲染</p><p>渲染就是指用户在设备上实际看到、并且在 AR 场景中交互的内容。ARKit 可以很方便的与你喜欢的渲染引擎进行集成，还为 SceneKit 和 SpriteKit 提供了内置视图。此外 Xcode 还提供了可以快速上手的 Metal 模板。</p><h2 id="ARKit工作原理和流程"><a href="#ARKit工作原理和流程" class="headerlink" title="ARKit工作原理和流程"></a>ARKit工作原理和流程</h2><p>首先需要说明的是，ARKit并不是一个能够独立运行的框架，其依赖SceneKit框架。简单点说，ARKit框架主要提供相机相关的工作，主要负责捕捉和分析现实世界。而展示虚拟物体部分，则是依赖SceneKit提供的能力。如果没有SceneKit，那ARKit只是一个相机而已。（SceneKit是苹果在iOS8中集成的一套3D引擎框架）</p><p>下图是ARKit中主要类的关系图：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programmings/ARKit/ARKit_01.jpg" alt></p><p>上图中，ARSCNView可以认为是一个容器，代表的就是看到的现实世界。其作用有两个：</p><p>1、如上图右边部分：管理ARSession，在这里简单认为ARSession是管理ARKit世界的上下文，其管理者相机的属性设置，也负责向ARSCNView输出捕捉到的显示世界。</p><p>2、如上图左边部分：显示我们添加进去的AR物体，这里可以是一个3D物体，也可以是一个2D物体。这里从继承关系来看，ARSCNView、SCNScene、SCNNode等类是从SceneKit中继承过来的。</p><p>从上图可以简单的看出ARKit的工作原理，ARKit框架提供相机能力，在手机上捕捉并构建现实世界。SceneKit提供模型能力，在手机的“现实世界”中添加虚拟物体。</p><h2 id="SceneKit-简介"><a href="#SceneKit-简介" class="headerlink" title="SceneKit 简介"></a>SceneKit 简介</h2><h3 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h3><p>UIKit 使用一个包含有 x 和 y 信息的 CGPoint 来表示一个点的位置，但是在 3D 系统中，需要一个 z 参数来描述物体在空间中的深度，SceneKit 的坐标系可以参考下图：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programmings/ARKit/ARKit_05_SceneKit.png" alt></p><p>这个三维坐标系中，表示一个点的位置需要使用(x,y,z)坐标表示。红色方块位于 x 轴，绿色方块位于 y 轴，蓝色方块位于 z 轴，灰色方块位于原点。在 SceneKit 中我们可以这样创建一个三维坐标：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> position = <span class="type">SCNVector3</span>(x: <span class="number">0</span>, y: <span class="number">5</span>, z: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="SceneKit-中的场景和节点"><a href="#SceneKit-中的场景和节点" class="headerlink" title="SceneKit 中的场景和节点"></a>SceneKit 中的场景和节点</h3><p>SceneKit 中的场景(SCNScene)想象为一个虚拟的 3D 空间，然后可以将一个个的节点(SCNNode)添加到场景中。SCNScene 中有唯一一个根节点(坐标是(x:0, y:0, z:0))，除了根节点外，所有添加到 SCNScene 中的节点都需要一个父节点。</p><p>SCNScene 中的节点加入时可以指定一个三维坐标(默认为(x:0, y:0, z:0))，这个坐标是相对于其父节点的位置。这里说明两个概念：</p><ul><li>本地坐标系：以场景中的某节点(非根节点)为原点建立的三维坐标系</li><li>世界坐标系：以根节点为原点创建的三维坐标系称为世界坐标系。</li></ul><h3 id="SceneKit-中的摄像机"><a href="#SceneKit-中的摄像机" class="headerlink" title="SceneKit 中的摄像机"></a>SceneKit 中的摄像机</h3><p>有了 SCNScene 和 SCNNode 后，我们还需要一个摄像机(SCNCamera)来决定我们可以看到场景中的哪一块区域(就好比现实世界中有了各种物体，但还需要人的眼睛才能看到物体)。摄像机在 SCNScene 的工作模式如下图：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programmings/ARKit/ARKit_06_SceneKit.png" alt></p><p>上图中包含以下几点信息：</p><ul><li>SceneKit 中 SCNCamera 拍摄的方向始终为 z 轴负方向。</li><li>视野(Field of View)是摄像机的可视区域的极限角度。角度越小，视野越窄，反之，角度越大，视野越宽。</li><li>视锥体(Viewing Frustum)决定着摄像头可视区域的深度(z 轴表示深度)。任何不在这个区域内的物体将被剪裁掉(离摄像头太近或者太远)，不会显示在最终的画面中。</li></ul><p>在 SceneKit 中我们可以使用如下方式创建一个摄像机：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scene = <span class="type">SCNScene</span>()</span><br><span class="line"><span class="keyword">let</span> cameraNode = <span class="type">SCNNode</span>()</span><br><span class="line"><span class="keyword">let</span> camera = <span class="type">SCNCamera</span>()</span><br><span class="line">cameraNode.camera = camera</span><br><span class="line">cameraNode.position = <span class="type">SCNVector3</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, z: <span class="number">0</span>)</span><br><span class="line">scene.rootNode.addChildNode(cameraNode)</span><br></pre></td></tr></table></figure><h3 id="SCNView"><a href="#SCNView" class="headerlink" title="SCNView"></a>SCNView</h3><p>最后，我们需要一个 View 来将 SCNScene 中的内容渲染到显示屏幕上，这个工作由 SCNView 完成。这一步其实很简单，只需要创建一个 SCNView 实例，然后将 SCNView 的 scene 属性设置为刚刚创建的 SCNScene，然后将 SCNView 添加到 UIKit 的 view 或 window 上即可。示例代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scnView = <span class="type">SCNView</span>()</span><br><span class="line">scnView.scene = scene</span><br><span class="line">vc.view.addSubview(scnView)</span><br><span class="line">scnView.frame = vc.view.bounds</span><br></pre></td></tr></table></figure><h2 id="ARKit-API介绍"><a href="#ARKit-API介绍" class="headerlink" title="ARKit API介绍"></a>ARKit API介绍</h2><p>ARKit框架的API其实并不多。下图就是整个ARKit框架提供的类。下面就这几个主要的类（介绍主要的属性）做一个简单的说明。</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programmings/ARKit/ARKit_02.jpg" alt></p><h3 id="（1）ARAnchor"><a href="#（1）ARAnchor" class="headerlink" title="（1）ARAnchor"></a>（1）ARAnchor</h3><p>ARAnchor表示一个物体在3D空间的位置和方向（ARAnchor通常称为物体的3D锚点，有点像UIKit框架中CALayer的Anchor）.</p><p>注：ARFrame表示的也是物体的位置和方向，但是ARFrame通常表示的是AR相机的位置和方向以及追踪相机的时间，还可以捕捉相机的帧图片,也就是说ARFrame用于捕捉相机的移动，其他虚拟物体用ARAnchor。</p><h3 id="（2）ARCamera"><a href="#（2）ARCamera" class="headerlink" title="（2）ARCamera"></a>（2）ARCamera</h3><p>ARCamera是一个相机，它是连接虚拟场景与现实场景之间的枢纽。在ARKit中，它是捕捉现实图像的相机，在SceneKit中它又是3D虚拟世界中的相机。ARCamera 是 ARFrame 中的一个属性，之因为单独拿出来说，是因为这里有必要介绍下相机的一些特性。ARCamera 中与现实世界场景有关的信息有两个：</p><ul><li><p>var imageResolution: CGSize<br>该属性表示了相机捕捉到的图像的长度和宽度(以像素为单位)，可以理解成捕捉到的图像的分辨率。</p></li><li><p>var intrinsics: matrix_float3x3<br>intrinsics 是一个 3x3 矩阵，这个矩阵将我们现实世界中三维坐标系的点映射到相机捕捉的图像中。有兴趣可看下面的详述。</p></li></ul><p>Intrinsic Matrix：</p><p>Intrinsic Matrix 是相机的一个固有属性，也就是说每个相机都会有 Intrinsic Matrix，因为所有的相机都需要将现实世界中三维空间的点映射到捕捉的图像中二维空间的点。那么这个矩阵是如何工作的呢？我们先来看一个图片：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programmings/ARKit/ARKit_04_ARCamera.png" alt></p><p>上图包含如下基本信息：</p><ul><li>一个三维坐标系(红色 x 轴，绿色 y 轴，蓝色 z 轴)。</li><li>空间中的一个点(蓝色的点 N，坐标为(x’, y’, z’))。</li><li>相机的成像平面(紫色的平行四边形)</li><li>成像平面与 z 轴的交点(点 M)</li><li>成像平面的原点(黄色的点 O)，也就是捕捉的二维图像的二维坐标系的原点。</li></ul><p>现在我们需要将三维空间的点(x’, y’, z’)映射到成像平面中的一个点(N’)。</p><ul><li>一般我们无需去创建一个相机，因为当我们初始化一个AR视图时，会为我们默认创建一个相机，而且这个相机就是摄像头的位置，同时也是3D世界中的原点所在（x=0,y=0,z=0）。</li><li>ARCamera的API一般我们无需关心，因为ARKit会默认帮助我们配置好.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">@interface ARCamera : NSObject &lt;NSCopying&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 4x4矩阵表示相机位置，同ARAnchor</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) matrix_float4x4 transform;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">相机方向（旋转）的矢量欧拉角</span><br><span class="line">分别是x/y/z</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) vector_float3 eulerAngles;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 相机追踪状态（在下方会有枚举值介绍）</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) ARTrackingState trackingState NS_REFINED_FOR_SWIFT;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">追踪运动类型</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) ARTrackingStateReason trackingStateReason NS_REFINED_FOR_SWIFT;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">相机内置函数</span><br><span class="line">3x3矩阵</span><br><span class="line"> fx 0   px</span><br><span class="line"> 0  fy  py</span><br><span class="line"> 0  0   1</span><br><span class="line"> fx和fy是像素焦距</span><br><span class="line"> px和py是主像素点坐标</span><br><span class="line"> 原点位于左上像素的中心</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) matrix_float3x3 intrinsics;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">摄像头分辨率</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) CGSize imageResolution;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">投影矩阵</span><br><span class="line">*/</span><br><span class="line">@property (nonatomic, readonly) matrix_float4x4 projectionMatrix;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">返回一个二维坐标点</span><br><span class="line">*/</span><br><span class="line">- (CGPoint)projectPoint:(vector_float3)point orientation:(UIInterfaceOrientation)orientation viewportSize:(CGSize)viewportSize;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">创建相机投影矩阵</span><br><span class="line"> */</span><br><span class="line">- (matrix_float4x4)projectionMatrixWithViewportSize:(CGSize)viewportSize orientation:(UIInterfaceOrientation)orientation zNear:(CGFloat)zNear zFar:(CGFloat)zFar;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//相机追踪状态枚举</span><br><span class="line">typedef NS_ENUM(NSInteger, ARTrackingState) &#123;</span><br><span class="line"></span><br><span class="line">    /** 不被允许 */</span><br><span class="line">    ARTrackingStateNotAvailable,</span><br><span class="line"></span><br><span class="line">    /** 受限状态 */</span><br><span class="line">    ARTrackingStateLimited,</span><br><span class="line"></span><br><span class="line">    /** 正常. */</span><br><span class="line">    ARTrackingStateNormal,</span><br><span class="line">&#125; NS_REFINED_FOR_SWIFT;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 描述相机追踪状态有限的原因</span><br><span class="line"> */</span><br><span class="line">typedef NS_ENUM(NSInteger, ARTrackingStateReason) &#123;</span><br><span class="line">    /** 无. */</span><br><span class="line">    ARTrackingStateReasonNone,</span><br><span class="line">    </span><br><span class="line">    /** 正在初始化，导致跟踪受限 */</span><br><span class="line">    ARTrackingStateReasonInitializing,</span><br><span class="line"></span><br><span class="line">    /** 运动过度. */</span><br><span class="line">    ARTrackingStateReasonExcessiveMotion,</span><br><span class="line"></span><br><span class="line">    /** 缺少可见的特征. */</span><br><span class="line">    ARTrackingStateReasonInsufficientFeatures,</span><br><span class="line">&#125; NS_REFINED_FOR_SWIFT;</span><br></pre></td></tr></table></figure><h3 id="3-ARError"><a href="#3-ARError" class="headerlink" title="(3)ARError"></a>(3)ARError</h3><p>ARError是一个描述ARKit错误的类，这个错误来源于几个方面，例如设备不支持，或者当相机常驻后台时ARSession会断开等问题.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//作用域，一般会表示是哪一个类出现问题</span><br><span class="line">NSString *const ARErrorDomain;</span><br><span class="line"></span><br><span class="line">//错误码描述  100：不支持会话追踪配置，主线由于A9芯片以下的机型会报错   101：失活状态 102：传感器故障  200：追踪失败</span><br><span class="line">typedef NS_ERROR_ENUM(ARErrorDomain, ARErrorCode) &#123;</span><br><span class="line">    /** Unsupported session configuration. */</span><br><span class="line">    ARErrorCodeUnsupportedConfiguration   = 100,</span><br><span class="line"></span><br><span class="line">    /** A sensor required to run the session is not available. */</span><br><span class="line">    ARErrorCodeSensorUnavailable          = 101,</span><br><span class="line"></span><br><span class="line">    /** A sensor failed to provide the required input. */</span><br><span class="line">    ARErrorCodeSensorFailed               = 102,</span><br><span class="line"></span><br><span class="line">    /** World tracking has encountered a fatal error. */</span><br><span class="line">    ARErrorCodeWorldTrackingFailed        = 200,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-ARHitTestResult"><a href="#4-ARHitTestResult" class="headerlink" title="(4) ARHitTestResult"></a>(4) ARHitTestResult</h3><p>ARHitTestResult：点击回调结果，这个类主要用于虚拟增强现实技术（AR技术）中现实世界与3D场景中虚拟物体的交互。 比如我们在相机中移动。拖拽3D虚拟物体，都可以通过这个类来获取ARKit所捕捉的结果.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//捕捉类型枚举</span><br><span class="line">typedef NS_OPTIONS(NSUInteger, ARHitTestResultType) &#123;</span><br><span class="line">    /** 点. */</span><br><span class="line">    ARHitTestResultTypeFeaturePoint              = (1 &lt;&lt; 0),</span><br><span class="line"></span><br><span class="line">    /** 水平面 y为0. */</span><br><span class="line">    ARHitTestResultTypeEstimatedHorizontalPlane  = (1 &lt;&lt; 1),</span><br><span class="line"></span><br><span class="line">    /** 已结存在的平面. */</span><br><span class="line">    ARHitTestResultTypeExistingPlane             = (1 &lt;&lt; 3),</span><br><span class="line"></span><br><span class="line">    /** 已结存在的锚点和平面. */</span><br><span class="line">    ARHitTestResultTypeExistingPlaneUsingExtent  = (1 &lt;&lt; 4),</span><br><span class="line">&#125; NS_SWIFT_NAME(ARHitTestResult.ResultType);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">捕捉类型</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) ARHitTestResultType type;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 3D虚拟物体与相机的距离（单位：米）</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) CGFloat distance;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">本地坐标矩阵（世界坐标指的是相机为场景原点的坐标，而每一个3D物体自身有一个场景，本地坐标就是相对于这个场景的坐标）类似于frame和bounds的区别</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) matrix_float4x4 localTransform;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">世界坐标矩阵</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) matrix_float4x4 worldTransform;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 锚点（3D虚拟物体，在虚拟世界有一个位置，这个位置参数是SceneKit中的SCNVector3：三维矢量），而锚点anchor是这个物体在AR现实场景中的位置，是一个4x4的矩阵</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, strong, nullable, readonly) ARAnchor *anchor;</span><br></pre></td></tr></table></figure><h3 id="5-ARLightEstimate"><a href="#5-ARLightEstimate" class="headerlink" title="(5) ARLightEstimate"></a>(5) ARLightEstimate</h3><p>ARLightEstimate是一个灯光效果，它可以让你的AR场景看起来更加的好.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@interface ARLightEstimate : NSObject &lt;NSCopying&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">灯光强度  范围0-2000 默认1000</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) CGFloat ambientIntensity;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="6-ARFrame"><a href="#6-ARFrame" class="headerlink" title="(6) ARFrame"></a>(6) ARFrame</h3><p>ARFrame主要是追踪相机当前的状态，这个状态不仅仅只是位置，还有图像帧及时间等参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@interface ARFrame : NSObject &lt;NSCopying&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">时间戳.</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) NSTimeInterval timestamp;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 缓冲区图像帧</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) CVPixelBufferRef capturedImage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">相机（表示这个ARFrame是哪一个相机的，iPhone7plus有两个摄像机）</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, copy, readonly) ARCamera *camera;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 返回当前相机捕捉到的锚点数据（当一个3D虚拟模型加入到ARKit中时，锚点值得就是这个模型在AR中的位置）</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, copy, readonly) NSArray&lt;ARAnchor *&gt; *anchors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">灯光，详情可见本章节ARLightEstimate类介绍（指的是灯光强度 一般是0-2000，系统默认1000）</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, copy, nullable, readonly) ARLightEstimate *lightEstimate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">特征点（应该是捕捉平地或者人脸的，比较苹果有自带的人脸识别功能）</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, nullable, readonly) ARPointCloud *rawFeaturePoints;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">根据2D坐标点搜索3D模型，这个方法通常用于，当我们在手机屏幕点击某一个点的时候，可以捕捉到这一个点所在的3D模型的位置，至于为什么是一个数组非常好理解。手机屏幕一个是长方形，这是一个二维空间。而相机捕捉到的是一个由这个二维空间射出去的长方体，我们点击屏幕一个点可以理解为在这个长方体的边缘射出一条线，这一条线上可能会有多个3D物体模型</span><br><span class="line">point：2D坐标点（手机屏幕某一点）</span><br><span class="line">ARHitTestResultType：捕捉类型  点还是面</span><br><span class="line">(NSArray&lt;ARHitTestResult *&gt; *)：追踪结果数组  详情见本章节ARHitTestResult类介绍</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">- (NSArray&lt;ARHitTestResult *&gt; *)hitTest:(CGPoint)point types:(ARHitTestResultType)types;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">相机窗口的的坐标变换（可用于相机横竖屏的旋转适配）</span><br><span class="line"> */</span><br><span class="line">- (CGAffineTransform)displayTransformWithViewportSize:(CGSize)viewportSize orientation:(UIInterfaceOrientation)orientation;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="7-ARPlaneAnchor"><a href="#7-ARPlaneAnchor" class="headerlink" title="(7) ARPlaneAnchor"></a>(7) ARPlaneAnchor</h3><p>ARPlaneAnchor是ARAnchor的子类，笔者称之为平地锚点。ARKit能够自动识别平地，并且会默认添加一个锚点到场景中，当然要想看到真实世界中的平地效果，需要我们自己使用SCNNode来渲染这个锚点,锚点只是一个位置.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">平地类型，目前只有一个，就是水平面</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) ARPlaneAnchorAlignment alignment;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">3轴矢量结构体，表示平地的中心点  x/y/z</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) vector_float3 center;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">3轴矢量结构体，表示平地的大小（宽度和高度）  x/y/z</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) vector_float3 extent;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="8-ARPointCloud"><a href="#8-ARPointCloud" class="headerlink" title="(8) ARPointCloud"></a>(8) ARPointCloud</h3><p>ARPointCloud：点状渲染云，主要用于渲染场景.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@interface ARPointCloud : NSObject &lt;NSCopying&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 点的数量</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) NSUInteger count;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">每一个点的位置的集合（结构体带*表示的是结构体数组）</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readonly) const vector_float3 *points;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="9-ARSCNView"><a href="#9-ARSCNView" class="headerlink" title="(9) ARSCNView"></a>(9) ARSCNView</h3><p>ARKit支持3D的AR场景和2D的AR场景，ARSCNView是3D的AR场景视图:</p><ul><li>该类非常重要，且API较多</li><li>该类是整个ARKit框架中唯一两个有代理的类其中之一</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">@interface ARSCNView : SCNView</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">代理</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, weak, nullable) id&lt;ARSCNViewDelegate&gt; delegate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">AR会话</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, strong) ARSession *session;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">场景</span><br><span class="line"> */</span><br><span class="line">@property(nonatomic, strong) SCNScene *scene;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">是否自动适应灯光</span><br><span class="line"> */</span><br><span class="line">@property(nonatomic) BOOL automaticallyUpdatesLighting;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">返回对应节点的锚点，节点是一个3D虚拟物体，它的坐标是虚拟场景中的坐标，而锚点ARAnchor是ARKit中现实世界的坐标。</span><br><span class="line"> */</span><br><span class="line">- (nullable ARAnchor *)anchorForNode:(SCNNode *)node;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">返回对应锚点的物体</span><br><span class="line"> */</span><br><span class="line">- (nullable SCNNode *)nodeForAnchor:(ARAnchor *)anchor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">根据2D坐标点搜索3D模型，这个方法通常用于，当我们在手机屏幕点击某一个点的时候，可以捕捉到这一个点所在的3D模型的位置，至于为什么是一个数组非常好理解。手机屏幕一个是长方形，这是一个二维空间。而相机捕捉到的是一个由这个二维空间射出去的长方体，我们点击屏幕一个点可以理解为在这个长方体的边缘射出一条线，这一条线上可能会有多个3D物体模型</span><br><span class="line">point：2D坐标点（手机屏幕某一点）</span><br><span class="line">ARHitTestResultType：捕捉类型  点还是面</span><br><span class="line">(NSArray&lt;ARHitTestResult *&gt; *)：追踪结果数组  详情见本章节ARHitTestResult类介绍</span><br><span class="line">数组的结果排序是由近到远</span><br><span class="line"> */</span><br><span class="line">- (NSArray&lt;ARHitTestResult *&gt; *)hitTest:(CGPoint)point types:(ARHitTestResultType)types;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//代理</span><br><span class="line">#pragma mark - ARSCNViewDelegate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//代理的内部实现了SCNSceneRendererDelegate：scenekit代理 和ARSessionObserver：ARSession监听（KVO机制）</span><br><span class="line">@protocol ARSCNViewDelegate &lt;SCNSceneRendererDelegate, ARSessionObserver&gt;</span><br><span class="line">@optional</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">自定义节点的锚点</span><br><span class="line"> */</span><br><span class="line">- (nullable SCNNode *)renderer:(id &lt;SCNSceneRenderer&gt;)renderer nodeForAnchor:(ARAnchor *)anchor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">当添加节点是会调用，我们可以通过这个代理方法得知我们添加一个虚拟物体到AR场景下的锚点（AR现实世界中的坐标）</span><br><span class="line"> */</span><br><span class="line">- (void)renderer:(id &lt;SCNSceneRenderer&gt;)renderer didAddNode:(SCNNode *)node forAnchor:(ARAnchor *)anchor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">将要刷新节点</span><br><span class="line"> */</span><br><span class="line">- (void)renderer:(id &lt;SCNSceneRenderer&gt;)renderer willUpdateNode:(SCNNode *)node forAnchor:(ARAnchor *)anchor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 已经刷新节点</span><br><span class="line"> */</span><br><span class="line">- (void)renderer:(id &lt;SCNSceneRenderer&gt;)renderer didUpdateNode:(SCNNode *)node forAnchor:(ARAnchor *)anchor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 移除节点</span><br><span class="line"> */</span><br><span class="line">- (void)renderer:(id &lt;SCNSceneRenderer&gt;)renderer didRemoveNode:(SCNNode *)node forAnchor:(ARAnchor *)anchor;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="10-ARSession"><a href="#10-ARSession" class="headerlink" title="(10) ARSession"></a>(10) ARSession</h3><p>ARSession是一个连接底层与AR视图之间的桥梁，其实ARSCNView内部所有的代理方法都是由ARSession来提供的.</p><p>ARSession与ARScnView之间的关系看起来是这样的:</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programmings/ARKit/ARKit_03_ARSeesion.png" alt></p><p>ARSession获取相机位置数据主要有两种方式:</p><p>第一种：push。 实时不断的获取相机位置，由ARSession主动告知用户。通过实现ARSession的代理<br>-(void)session:(ARSession <em>)session didUpdateFrame:(ARFrame </em>)frame来获取.</p><p>第二种：pull。 用户想要时，主动去获取。ARSession的属性currentFrame来获取.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">@interface ARSession : NSObject</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 代理</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, weak) id &lt;ARSessionDelegate&gt; delegate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">指定代理执行的线程（主线程不会有延迟，子线程会有延迟），不指定的话默认主线程</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, strong, nullable) dispatch_queue_t delegateQueue;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">相机当前的位置（是由会话追踪配置计算出来的）</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, copy, nullable, readonly) ARFrame *currentFrame;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 会话追踪配置</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, copy, nullable, readonly) ARConfiguration *configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">运行会话（这行代码就是开启AR的关键所在）</span><br><span class="line"> */</span><br><span class="line">- (void)runWithConfiguration:(ARConfiguration *)configuration NS_SWIFT_UNAVAILABLE(&quot;Use run(_:options:)&quot;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">运行会话，只是多了一个参数ARSessionRunOptions：作用就是会话断开重连时的行为。是一个枚举值如下：  </span><br><span class="line">ARSessionRunOptionResetTracking：表示重置追踪</span><br><span class="line">ARSessionRunOptionRemoveExistingAnchors：移除现有锚点</span><br><span class="line"> */</span><br><span class="line">- (void)runWithConfiguration:(ARSessionConfiguration *)configuration options:(ARSessionRunOptions)options NS_SWIFT_NAME(run(_:options:));</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">暂停会话</span><br><span class="line"> */</span><br><span class="line">- (void)pause;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">添加锚点</span><br><span class="line"> */</span><br><span class="line">- (void)addAnchor:(ARAnchor *)anchor NS_SWIFT_NAME(add(anchor:));</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">移除锚点</span><br><span class="line"> */</span><br><span class="line">- (void)removeAnchor:(ARAnchor *)anchor NS_SWIFT_NAME(remove(anchor:));</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//session代理分类两部分，一个是观察者（KVO） 一个是委托者（代理）</span><br><span class="line">#pragma mark - ARSessionObserver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//session KVO观察者</span><br><span class="line">@protocol ARSessionObserver &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">@optional</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> session失败</span><br><span class="line"> */</span><br><span class="line">- (void)session:(ARSession *)session didFailWithError:(NSError *)error;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">相机改变追踪状态</span><br><span class="line"> */</span><br><span class="line">- (void)session:(ARSession *)session cameraDidChangeTrackingState:(ARCamera *)camera;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> session意外断开（如果开启ARSession之后，APP退到后台就有可能导致会话断开）</span><br><span class="line"> */</span><br><span class="line">- (void)sessionWasInterrupted:(ARSession *)session;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">session会话断开恢复（短时间退到后台再进入APP会自动恢复）</span><br><span class="line"> */</span><br><span class="line">- (void)sessionInterruptionEnded:(ARSession *)session;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">#pragma mark - ARSessionDelegate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@protocol ARSessionDelegate &lt;ARSessionObserver&gt;</span><br><span class="line"></span><br><span class="line">@optional</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 相机当前状态（ARFrame：空间位置，图像帧等）更新</span><br><span class="line"> */</span><br><span class="line">- (void)session:(ARSession *)session didUpdateFrame:(ARFrame *)frame;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">添加锚点</span><br><span class="line"> */</span><br><span class="line">- (void)session:(ARSession *)session didAddAnchors:(NSArray&lt;ARAnchor*&gt;*)anchors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">刷新锚点</span><br><span class="line"> */</span><br><span class="line">- (void)session:(ARSession *)session didUpdateAnchors:(NSArray&lt;ARAnchor*&gt;*)anchors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">移除锚点</span><br><span class="line"> */</span><br><span class="line">- (void)session:(ARSession *)session didRemoveAnchors:(NSArray&lt;ARAnchor*&gt;*)anchors;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="11-ARConfiguration"><a href="#11-ARConfiguration" class="headerlink" title="(11) ARConfiguration"></a>(11) ARConfiguration</h3><p>注意：该类还有一个子类：ARWorldTrackingConfiguration，它们在同一个API文件中.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//会话追踪配置类</span><br><span class="line">@interface ARConfiguration : NSObject &lt;NSCopying&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">当前设备是否支持，一般A9芯片以下设备不支持</span><br><span class="line"> */</span><br><span class="line">@property(class, nonatomic, readonly) BOOL isSupported;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">会话的对齐方式，这里的对齐指的是3D世界的坐标。枚举值见下方</span><br><span class="line">默认值ARWorldAlignmentGravity</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readwrite) ARWorldAlignment worldAlignment;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">是否需要自适应灯光效果，默认是YES</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readwrite, getter=isLightEstimationEnabled) BOOL lightEstimationEnabled;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">是否需要提供音频，默认是NO</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readwrite) BOOL providesAudioData;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//世界会话追踪配置，苹果建议我们使用这个类，这个子类只有一个属性，也就是可以帮助我们追踪相机捕捉到的平地</span><br><span class="line">@interface ARWorldTrackingSessionConfiguration : ARSessionConfiguration</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">侦查类型。枚举值见下方（默认侦查平地）</span><br><span class="line"> */</span><br><span class="line">@property (nonatomic, readwrite) ARPlaneDetection planeDetection;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>//追踪对其方式，这个决定了会话的参考坐标系（参照物）.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, ARWorldAlignment) &#123;</span><br><span class="line">    /** Aligns the world with gravity that is defined by vector (0, -1, 0). */</span><br><span class="line">    ARWorldAlignmentGravity,</span><br><span class="line">    </span><br><span class="line">    /** Aligns the world with gravity that is defined by the vector (0, -1, 0)</span><br><span class="line">     and heading (w.r.t. True North) that is given by the vector (0, 0, -1). */</span><br><span class="line">    ARWorldAlignmentGravityAndHeading,</span><br><span class="line">    </span><br><span class="line">    /** Aligns the world with the camera’s orientation. */</span><br><span class="line">    ARWorldAlignmentCamera</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">typedef NS_OPTIONS(NSUInteger, ARPlaneDetection) &#123;</span><br><span class="line">    /** No plane detection is run. */</span><br><span class="line">    ARPlaneDetectionNone        = 0,</span><br><span class="line">    </span><br><span class="line">    /** Plane detection determines horizontal planes in the scene. */</span><br><span class="line">    ARPlaneDetectionHorizontal  = (1 &lt;&lt; 0),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="12-ARSKView"><a href="#12-ARSKView" class="headerlink" title="(12) ARSKView"></a>(12) ARSKView</h3><p>ARSKView也是AR视图，只不过他是2D的，由于2D比3D简单很多，并且ARSKView基本与ARSCNView类似，所以这里不做重复介绍。详细内容可参考ARSCNView.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.jianshu.com/p/633c8ce07c83#2" target="_blank" rel="noopener">ARKit API介绍</a></li><li><a href="https://www.jianshu.com/p/7faa4a3af589" target="_blank" rel="noopener">直击苹果 ARKit 技术</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读-PDR</title>
      <link href="/2018/07/13/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-PDR/"/>
      <url>/2018/07/13/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-PDR/</url>
      
        <content type="html"><![CDATA[<h1 id="论文一、IONet-Learning-to-Cure-the-Curse-of-Drift-in-Inertial-Odometry"><a href="#论文一、IONet-Learning-to-Cure-the-Curse-of-Drift-in-Inertial-Odometry" class="headerlink" title="论文一、IONet: Learning to Cure the Curse of Drift in Inertial Odometry"></a>论文一、IONet: Learning to Cure the Curse of Drift in Inertial Odometry</h1><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>现有的基于惯性传感器的位置估计方法</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/IONnet_01.jpeg" alt></p><p><strong>不足</strong>：</p><ol><li>累计误差无界；</li><li>SINS的累计误差为指数级增加，PDR的累计误差为线性增加；</li><li>PDR对于无法检测到步子的场景失效。</li></ol><p>现有工作包括：</p><p>（1） 接连惯性导航方法（Strapdown Inertial Navigation System，SINS）</p><p>方法主要思想：双重积分来估计位置和速度。</p><p>不足：由于MEMS传感器的成本有限，其测量精度有限，导致位置和速度估计误差呈指数级增长。</p><p>（2）PDR （Pedestrian Dead Reckoning）</p><p>方法主要思想：计步、步长估计、方向估计</p><p>不足：累计误差呈线性增长，对于无法检测步子的场景失效。</p><p><strong>本文贡献</strong>：</p><p>（1）建模惯性追踪问题为序列学习问题；</p><p>（2）本文提出了基于DNN的学习框架。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>(1) 方位姿态更新</p><p>公式（1）：$$C_{b}^{n}(t)=C_{b}^{n}(t-1)*\Omega(t),$$</p><p>公式（2）：$$\sigma=w(t)dt,$$</p><p>公式（3）：$$\Omega(t)=C_{b_{t}}^{b_{t-1}}=I+\frac{sin(\sigma)}{\sigma}[\sigma X]+\frac{1-cos(\sigma)}{\sigma^{2}}[\sigma X]^2,$$</p><p>(2) 速度更新</p><p>$$v(t)=v(t-1)+((C_{b}^{n}(t-1))*a(t)-g_{n})dt,$$</p><p>(3) 位置更新</p><p>$$L(t)=L(t-1)+v(t-1)dt,$$</p><p>其中，$C_{b}^{n}$为本体坐标系到导航坐标系的旋转矩阵，$\Omega(t)$为时间间隔t内的旋转变化矩阵，a和w分别表示加速度计读数和陀螺仪读数，v和L分别表示世界坐标系下的速度和位置，g是重力值。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>在SINS和PDR中，惯性传感器数据并不是独立的，系统状态都是有迁前一时刻的系统状态和当前时刻的惯性传感器观测值计算得到的。因此，在给定时间窗口内，惯性传感器数据不是独立的。本文假设一个伪独立条件的存在，即给定时间窗口内，<strong>导航状态的变化是独立的</strong>。因此，本文基于此，提出了序列学习的模型来估计追踪状态。</p><p>不可观测到的系统状态包括方向$C_{b}^{n}$，速度v和位置L。在传统模型中，计算公式定义如下：</p><p>$$[C_{b}^{n}\ v\ L]=f([C_{b}^{n}\ v\ L]_{t-1}, [a\ w]_{t}).$$</p><p>(1) 位移L</p><p>为了将当前窗口的位移与前一时间窗口的位移分割开来，本文定义了位移变化量$\Delta L$，其是在时间窗口内是独立的，我们得到：</p><p>$$\Delta L=\int_{t=0}^{n-1}v(t)dt.$$</p><p>继续划分，位移主要由初始速度和加速度计读数计算得到，即：</p><p>$$\Delta L=nv(0)dt+[(n-1)s_1+(n-2)s_2+\dots+s_{n-1}]dt^2,$$</p><p>其中，</p><p>$$s(t)=C_{b}^{n}(t-1)a(t)-g.$$</p><p>其中，$s(t)$表示的是世界坐标系下加速度计读数的变化值。那么$\Delta L$就等于第n时刻初始速度对时间的积分加上后续时刻对加速度计的积分。又由公式（1）得：</p><p>$$\Delta L=nv(0)dt+[(n-1)C_b^n(0)*a_1+(n-2)C_b^n(0)\Omega(1)*a_2+\dots+C_b^n(0)\prod_{i=1}^{n-2}*a_{n-1}]dt^2-\frac{n(n-1)}{2}gdt^2,$$</p><p>进一步得到：</p><p>$$\Delta L=nv(0)dt+C_b^n(0)Tdt^2-\frac{n(n-1)}{2}gdt^2,$$</p><p>其中，</p><p>$$T=(n-1)a_1+(n-2)\Omega(1)a_2+\dots+\prod_{i=1}^{n-2}\Omega(i)a_{n-1},$$</p><p>由于本文关注的是水平面上人员的位置追踪问题，因此，竖直轴的变化量假设为0，那么行走位移变化量可表示为：</p><p>$$\Delta l=||\Delta L||_2=||nv^b(0)dt+Tdt^2-\frac{n(n-1)}{2}g_0^bdt^2||_2.$$</p><p>因此，水平移动距离的变化量可由初始速度、重力值、加速度计读数和加速度读数来计算得到，即：</p><p>$$\Delta l=f(v^b(0),g_0^b,a_{1:n},w_{1:n}).$$</p><p>此外，方向变化为$\phi$，我们得到：</p><p>$$(\Delta l, \Delta \phi)=f_{\theta}(v^b(0),g_{0}^{b},\hat{a}_{1:n},\hat{w}_{1:n}),$$</p><p>其中，$\hat{a}$和$\hat{w}$分别为IMU的加速度计读数和陀螺仪读数的原始值。</p><p>最后，为了得到全局的位置信息，我们得到如下公式：</p><p>$$x_n=x_0+\Delta l cos(\phi_0+\Delta \phi)$$</p><p>$$y_n=y_0+\Delta l sin(\phi_0+\Delta \phi),$$</p><p>其中，$(x_0,y_0)$为初始位置。</p><h2 id="深度神经网络框架"><a href="#深度神经网络框架" class="headerlink" title="深度神经网络框架"></a>深度神经网络框架</h2><p>系统框架：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/IONet_02.jpeg" alt></p><p>学习模型：</p><p>$$(a, w)<em>{200*6}\underrightarrow{f\</em>{\theta}}(\Delta l, \Delta \phi)_{1*2},$$</p><p>其中，时间窗口为200帧，即2秒。</p><p>本文采用LSTM结构来训练。损失函数定义为：</p><p>$$loss=\sum||\Delta \hat{l}-\Delta l||<em>{2}^{2}+k||\Delta \hat{\phi}-\Delta \phi||\</em>{2}^{2}.$$</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="同一设备不同姿态"><a href="#同一设备不同姿态" class="headerlink" title="同一设备不同姿态"></a>同一设备不同姿态</h3><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/IONet_03.jpeg" alt></p><h3 id="不同设备"><a href="#不同设备" class="headerlink" title="不同设备"></a>不同设备</h3><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/IONet_04.jpeg" alt></p><h3 id="行走轨迹"><a href="#行走轨迹" class="headerlink" title="行走轨迹"></a>行走轨迹</h3><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/IONet_05.jpeg" alt></p><h3 id="小车行走轨迹"><a href="#小车行走轨迹" class="headerlink" title="小车行走轨迹"></a>小车行走轨迹</h3><p><img src="http://p55se4hrx.bkt.clouddn.com/images/science/PDR/IONet_06.jpeg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
          <category> PDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学术 </tag>
            
            <tag> PDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UNIX教程</title>
      <link href="/2018/07/01/UNIX%E6%95%99%E7%A8%8B/"/>
      <url>/2018/07/01/UNIX%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="统计文件中字数"><a href="#统计文件中字数" class="headerlink" title="统计文件中字数"></a>统计文件中字数</h2><p>你可以使用 wc 命令来获取一个文件中的总的行数，字数和字符数。以下是简单的示例来查看有关上面创建的文件的信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wc filename2 19 103 filename</span><br></pre></td></tr></table></figure><p>这里是所有四个列的细节:</p><ol><li>第一列: 代表文件中的行数。</li><li>第二列: 代表文件中的字数。</li><li>第三列: 代表文件中的字符数。这是文件的实际大小。</li><li>第四列: 代表文件名。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> UNIX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> UNIX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业关键流程（三方协议、户口、档案、报到证）</title>
      <link href="/2018/06/25/%E6%AF%95%E4%B8%9A%E5%85%B3%E9%94%AE%E6%B5%81%E7%A8%8B%EF%BC%88%E4%B8%89%E6%96%B9%E5%8D%8F%E8%AE%AE%E3%80%81%E6%88%B7%E5%8F%A3%E3%80%81%E6%A1%A3%E6%A1%88%E3%80%81%E6%8A%A5%E5%88%B0%E8%AF%81%EF%BC%89/"/>
      <url>/2018/06/25/%E6%AF%95%E4%B8%9A%E5%85%B3%E9%94%AE%E6%B5%81%E7%A8%8B%EF%BC%88%E4%B8%89%E6%96%B9%E5%8D%8F%E8%AE%AE%E3%80%81%E6%88%B7%E5%8F%A3%E3%80%81%E6%A1%A3%E6%A1%88%E3%80%81%E6%8A%A5%E5%88%B0%E8%AF%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="三方协议"><a href="#三方协议" class="headerlink" title="三方协议"></a>三方协议</h1><h1 id="户口"><a href="#户口" class="headerlink" title="户口"></a>户口</h1><h1 id="档案"><a href="#档案" class="headerlink" title="档案"></a>档案</h1><h1 id="报到证"><a href="#报到证" class="headerlink" title="报到证"></a>报到证</h1><h2 id="报到证改正"><a href="#报到证改正" class="headerlink" title="报到证改正"></a>报到证改正</h2><p>我们都知道，报到证是办理落户和档案托管、挂靠，以及转正定级的的重要凭证。报到单位和地址是不能出现错误的。从大多数情况来看如果没有涉及到其他方面的问题，只能拿着错误的报到证回原毕业学校办理改签或改派了。</p><h3 id="改正报到证抬头"><a href="#改正报到证抬头" class="headerlink" title="改正报到证抬头"></a>改正报到证抬头</h3><p>1、报到默认打回去生源地后，改派到生源地以外的单位工作</p><p>默认打回去生源地一般是XX市人力资源和社会保障局，需要修改报到证抬头单位的话，首先需要该单位同意改出，再到新的接收单位同意改入，才算是完成的改派。否则是无法转干部身份的或者只改入不该出或者只改出不改入都是容易造成档案丢失的。</p><p>2、报到证开到XX教育局，要改到XX人力资源和社会保障局</p><p>报到证是教育局的，一般都是师范生，档案也是送到教育局的，若需要改派到人事局，先要申请人事主管部门的接收函，必须要人事主管部门的盖章的接收函才有效。拿到接收函和报到证到教育局办理改出手续，再去人事局办理改入手续。</p><p>3、报到证抬头是A单位，改为B单位</p><p>从A单位那边拿到离职证明或者改派报到证备注，在拿到B单位的接收函，办理改派嵌入单位的手续。到省就业知道中心换取新的报到证。</p><h3 id="改正报到证备注"><a href="#改正报到证备注" class="headerlink" title="改正报到证备注"></a>改正报到证备注</h3><p>1、报到证备注单位有错别字</p><p>申请正确单位的接收函，必须要有人事局的盖章，到省就业知道中心改正错别字，但是省就业指导中心一般是不接受个人申请的业务。</p><p>2、报到证备注单位从A改成B</p><p>首先申请B单位的接收函，需要有B单位所在地人事局的盖章，带上B单位的接收函到A单位申请改派迁出，再到B单位所在城市办理改派迁入手续，需要找到发报到证的相关部门办理换新的报到证。</p><p>3、报到证没有备注单位</p><p>申请将要添加报到证备注的单位的接收函，带上接收函到发报到证的部门添加报到证备注。但是省就业指导中心一般是布受理个人申请添加备注。</p><h3 id="改正报到证报到地址"><a href="#改正报到证报到地址" class="headerlink" title="改正报到证报到地址"></a>改正报到证报到地址</h3><p>1、报到证报到地址错误</p><p>报到证备注地址错误一般是到学校修改，但是学校不受理的话。需要到发报到证的相关部门修改地址。可以直接手写上去，再让相关部门盖章，也可以重新打印新的报到证。</p><p>2、报到证报到地址格式不对</p><p>到省就业指导中心直接手写修改地址并盖公章或者直接换新的报到证。</p><p>注意：报到证修改过来后档案是还没有调走的，因此修改好报到证后还要记得让改入单位出调档函，去原单位调动档案到新的单位。此项工作可以在改派好报到证之后完成。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://cv.qiaobutang.com/knowledge/articles/56efafc70cf2b5cff66db3a6" target="_blank" rel="noopener">http://cv.qiaobutang.com/knowledge/articles/56efafc70cf2b5cff66db3a6</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 毕业流程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 毕业流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIO教程</title>
      <link href="/2018/06/14/VIO%E6%95%99%E7%A8%8B/"/>
      <url>/2018/06/14/VIO%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="VIO背景"><a href="#VIO背景" class="headerlink" title="VIO背景"></a>VIO背景</h1><hr><hr><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="IMU建模"><a href="#IMU建模" class="headerlink" title="IMU建模"></a>IMU建模</h2><h3 id="误差"><a href="#误差" class="headerlink" title="误差"></a>误差</h3><p>基本误差：零偏误差、刻度误差。但实际上环境温度会对这两种误差均造成大大小小的影响（ADC温漂）。</p><p>（1）所以首先我们需要对传感器进行恒温处理，通常是在IMU的PCB板子上加一两个恒温电阻，利用传感器本身的温度测量功能进行加热闭环控制，我一般把这个目标温度设定在50-60度之间。</p><p>（2）实现恒温后，我们再开始校准传感器的两种误差：</p><p>陀螺仪。零偏误差可以通过在传感器静止时采集输出数据并取其平均值，刻度误差需要通过高精度转台来对每个轴进行校准；</p><p>加速度计。首先建立一个基本的误差方程，g为刻度误差，o为零偏误差，C为重力加速度，u为误差：</p><p>$$(g_xa_x+o_x)^2+(g_ya_y+o_y)^2+(g_za_z+o_z)^2-C^2=u.$$</p><p>这实际上就是一个椭球的方程，为了求解这个方程，我们需要采集多组传感器数据。这些数据尽量在球面上分布均匀（如常用的六面校准），然后最小二乘法求方程的最优解（使u最小），得到传感器的校准参数。</p><p>电子罗盘传感器也可以用这个方法来校准。</p><h2 id="图像特征提取算法"><a href="#图像特征提取算法" class="headerlink" title="图像特征提取算法"></a>图像特征提取算法</h2><h3 id="斑点检测-LoG与DoH"><a href="#斑点检测-LoG与DoH" class="headerlink" title="斑点检测 - LoG与DoH"></a>斑点检测 - LoG与DoH</h3><h3 id="斑点检测-SIFT"><a href="#斑点检测-SIFT" class="headerlink" title="斑点检测 - SIFT"></a>斑点检测 - SIFT</h3><h3 id="斑点检测-SURF"><a href="#斑点检测-SURF" class="headerlink" title="斑点检测 - SURF"></a>斑点检测 - SURF</h3><h3 id="角点检测-Harris角点"><a href="#角点检测-Harris角点" class="headerlink" title="角点检测 - Harris角点"></a>角点检测 - Harris角点</h3><h3 id="角点检测-FAST角点"><a href="#角点检测-FAST角点" class="headerlink" title="角点检测 - FAST角点"></a>角点检测 - FAST角点</h3><p>在实时的视频流处理中，需要对每一帧特征提取，对算法处理速度上有很高的要求，传统的SIFT,Harris等特征点提取很难满足。由此提出Fast（Features from Accelerated Segment Test），由于不涉及尺度，梯度，等复杂运算，Fast检测器速度非常快。它使用一定邻域内像元的灰度值与中心点比较大小去判断是否为一个角点。但它的缺点是不具有方向性,尺度不变性。</p><p>Fast角点提取步骤（以Fast-12-16为例）：</p><p>1.以固定半径为圆的边上取16个像素点（图中白色框出的位置），与中心点像素值Ip做差。</p><p>2.若边上存在连续的12（N&gt;12,若为Fast-9,只需要N&gt;9）个点满足  ( I(x)-I(p) )&gt;threshold 或者 ( I(x)-I(p) ) &lt; -threshold。(其中I(x)表示边上的像素值，I(p)为中心点像素值，threshold为设定的阈值。)则此点作为一个候选角点。如图上的虚线连接的位置。通常为了加速计算，直接比较1,5,9,13位置的差值，超过三个即视为一个候选点（存在连续的12个像元的必要条件），否则直接排除。</p><p>3.非极大值抑制，排除不稳定角点。</p><h3 id="二进制字符串特征描述子-BRIEF算法"><a href="#二进制字符串特征描述子-BRIEF算法" class="headerlink" title="二进制字符串特征描述子 - BRIEF算法"></a>二进制字符串特征描述子 - BRIEF算法</h3><h3 id="二进制字符串特征描述子-BRISK算法"><a href="#二进制字符串特征描述子-BRISK算法" class="headerlink" title="二进制字符串特征描述子 - BRISK算法"></a>二进制字符串特征描述子 - BRISK算法</h3><h3 id="ORB算法"><a href="#ORB算法" class="headerlink" title="ORB算法"></a>ORB算法</h3><h3 id="FREAK算法"><a href="#FREAK算法" class="headerlink" title="FREAK算法"></a>FREAK算法</h3><hr><hr><h1 id="基于滤波的VIO方法"><a href="#基于滤波的VIO方法" class="headerlink" title="基于滤波的VIO方法"></a>基于滤波的VIO方法</h1><h2 id="基于松耦合的方法"><a href="#基于松耦合的方法" class="headerlink" title="基于松耦合的方法"></a>基于松耦合的方法</h2><h2 id="基于紧耦合的方法"><a href="#基于紧耦合的方法" class="headerlink" title="基于紧耦合的方法"></a>基于紧耦合的方法</h2><h3 id="论文1-MSCKF-High-precision-consistent-EKF-based-visual-inertial-odometry"><a href="#论文1-MSCKF-High-precision-consistent-EKF-based-visual-inertial-odometry" class="headerlink" title="论文1. MSCKF: High-precision, consistent EKF-based visual-inertial odometry"></a>论文1. MSCKF: High-precision, consistent EKF-based visual-inertial odometry</h3><blockquote><p>the multi-state-constraint Kalman filter (MSCKF)</p></blockquote><hr><hr><h1 id="基于优化的VIO方法"><a href="#基于优化的VIO方法" class="headerlink" title="基于优化的VIO方法"></a>基于优化的VIO方法</h1><h2 id="基于松耦合的方法-1"><a href="#基于松耦合的方法-1" class="headerlink" title="基于松耦合的方法"></a>基于松耦合的方法</h2><h2 id="基于紧耦合的方法-1"><a href="#基于紧耦合的方法-1" class="headerlink" title="基于紧耦合的方法"></a>基于紧耦合的方法</h2><h3 id="VINS文献解读"><a href="#VINS文献解读" class="headerlink" title="VINS文献解读"></a>VINS文献解读</h3><h4 id="测量预处理"><a href="#测量预处理" class="headerlink" title="测量预处理"></a>测量预处理</h4><h5 id="视觉预处理前端"><a href="#视觉预处理前端" class="headerlink" title="视觉预处理前端"></a>视觉预处理前端</h5><p>（1）对每张新图像，使用KLT稀疏光流算法跟踪已有特征。</p><p>（2）同时检测新的角点特征以维持每张图像100-300特征。其中，新的角点特征利用Good Features to track特征点检测算法，参考文献：《Good Features to track》，<a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_feature2d/py_shi_tomasi/py_shi_tomasi.html#shi-tomasi" target="_blank" rel="noopener">opencv</a>，详细讲解参考：<a href="https://blog.csdn.net/u010103202/article/details/73331440" target="_blank" rel="noopener">Good Features to track特征点检测原理与opencv（python）实现</a>。</p><p>（3）检测器通过设置相邻特征最小间隔强制特征均匀分布，outlier去除后，特征投影在单位球面上（unit sphere）。Outlier通过RANSAC基础矩阵测试去除。</p><p>（4）关键帧的选取原则有两个：平均视差和跟踪的特征数。当跟踪的特征数小于某个门限或者跟踪特征的平均视差超过某个门限时，插入关键帧。请记住，除了平移，旋转也会导致视差，但是纯旋转时特征无法三角定位，我们在计算视差时用IMU propagation结果补偿旋转。</p><hr><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.zhihu.com/question/53571648" target="_blank" rel="noopener">https://www.zhihu.com/question/53571648</a></li><li><a href="http://baijiahao.baidu.com/s?id=1573826383552981&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">http://baijiahao.baidu.com/s?id=1573826383552981&amp;wfr=spider&amp;for=pc</a></li><li><a href="https://blog.csdn.net/luoshixian099/article/details/48294967" target="_blank" rel="noopener">https://blog.csdn.net/luoshixian099/article/details/48294967</a></li><li><a href="https://www.jianshu.com/p/2759593bc92b" target="_blank" rel="noopener">https://www.jianshu.com/p/2759593bc92b</a></li><li><a href="https://www.jianshu.com/p/387225a1aa60" target="_blank" rel="noopener">https://www.jianshu.com/p/387225a1aa60</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> VIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> VIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim教程</title>
      <link href="/2018/06/13/vim%E6%95%99%E7%A8%8B/"/>
      <url>/2018/06/13/vim%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="VIM简单配置"><a href="#VIM简单配置" class="headerlink" title="VIM简单配置"></a>VIM简单配置</h1><h1 id="VIM高级配置"><a href="#VIM高级配置" class="headerlink" title="VIM高级配置"></a>VIM高级配置</h1><h1 id="VIM简单命令"><a href="#VIM简单命令" class="headerlink" title="VIM简单命令"></a>VIM简单命令</h1><h2 id="VIM模式"><a href="#VIM模式" class="headerlink" title="VIM模式"></a>VIM模式</h2><p>Normal 模式、Insert 模式、</p><p>用户刚刚启动 vi/vim，便进入了命令模式。此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i 切换到输入模式，以输入字符。</span><br><span class="line">x 删除当前光标所在处的字符。</span><br><span class="line">: 切换到底线命令模式，以在最底一行输入命令。</span><br></pre></td></tr></table></figure><p>输入模式:在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">字符按键以及Shift组合，输入字符</span><br><span class="line">ENTER，回车键，换行</span><br><span class="line">BACK SPACE，退格键，删除光标前一个字符</span><br><span class="line">DEL，删除键，删除光标后一个字符</span><br><span class="line">方向键，在文本中移动光标</span><br><span class="line">HOME/END，移动光标到行首/行尾</span><br><span class="line">Page Up/Page Down，上/下翻页</span><br><span class="line">Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</span><br><span class="line">ESC，退出输入模式，切换到命令模式</span><br></pre></td></tr></table></figure><p>底线命令模式</p><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。在底线命令模式中，基本的命令有（已经省略了冒号）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q 退出程序</span><br><span class="line">w 保存文件</span><br></pre></td></tr></table></figure><p>按ESC键可随时退出底线命令模式。</p><p>使用 vi/vim 进入一般模式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi runoob.txt</span><br></pre></td></tr></table></figure><p>直接输入 vi 文件名 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</p><h2 id="第一部份一般模式可用的光标移动、复制粘贴、搜索替换"><a href="#第一部份一般模式可用的光标移动、复制粘贴、搜索替换" class="headerlink" title="第一部份一般模式可用的光标移动、复制粘贴、搜索替换"></a>第一部份一般模式可用的光标移动、复制粘贴、搜索替换</h2><table><thead><tr><th>移动光标的方法</th><th>含义</th></tr></thead><tbody><tr><td>h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td>j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td>k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td>l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr></tbody></table><p>如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</p><table><thead><tr><th>移动光标的方法</th><th>含义</th></tr></thead><tbody><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td>+</td><td>光标移动到非空格符的下一行</td></tr><tr><td>-</td><td>光标移动到非空格符的上一行</td></tr><tr><td>n<space></space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</space></td></tr><tr><td>0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td>\$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td>G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td>n<enter></enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><table><thead><tr><th>搜索替换</th><th>含义</th></tr></thead><tbody><tr><td>/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：『:100,200s/vbird/VBIRD/g』。(常用)</td></tr><tr><td>:1,\$s/word1/word2/g</td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td>:1,\$s/word1/word2/gc</td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr></tbody></table><table><thead><tr><th>删除、复制与贴上</th><th>含义</th></tr></thead><tbody><tr><td>x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td>dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>d\$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td>yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td>J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h2 id="第二部份：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部份：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部份：一般模式切换到编辑模式的可用的按钮说明"></a>第二部份：一般模式切换到编辑模式的可用的按钮说明</h2><table><thead><tr><th>进入输入或取代的编辑模式</th><th>含义</th></tr></thead><tbody><tr><td>i, I</td><td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td>a, A</td><td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td>o, O</td><td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h2 id="第三部份：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部份：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部份：一般模式切换到指令行模式的可用的按钮说明"></a>第三部份：一般模式切换到指令行模式的可用的按钮说明</h2><table><thead><tr><th>指令行的储存、离开等指令</th><th>含义</th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td>:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr></tbody></table><table><thead><tr><th>vim 环境的变更</th><th>含义</th></tr></thead><tbody><tr><td>:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h1 id="VIM的分屏功能"><a href="#VIM的分屏功能" class="headerlink" title="VIM的分屏功能"></a>VIM的分屏功能</h1><h2 id="分屏启动Vim"><a href="#分屏启动Vim" class="headerlink" title="分屏启动Vim"></a>分屏启动Vim</h2><p>使用大写的O参数来垂直分屏:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -On file1 file2 ...</span><br></pre></td></tr></table></figure><p>使用小写的o参数来水平分屏:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -on file1 file2 ...</span><br></pre></td></tr></table></figure><p>注释: n是数字，表示分成几个屏.</p><h2 id="关闭分屏"><a href="#关闭分屏" class="headerlink" title="关闭分屏"></a>关闭分屏</h2><p>关闭当前窗口:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W c</span><br></pre></td></tr></table></figure><p>关闭当前窗口，如果只剩最后一个了，则退出Vim:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W q</span><br></pre></td></tr></table></figure><h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><p>上下分割当前打开的文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W s</span><br></pre></td></tr></table></figure><p>上下分割，并打开一个新的文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:sp filename</span><br></pre></td></tr></table></figure><p>左右分割当前打开的文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W v</span><br></pre></td></tr></table></figure><p>左右分割，并打开一个新的文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:vsp filename</span><br></pre></td></tr></table></figure><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><p>Vi中的光标键是h, j, k, l，要在各个屏间切换，只需要先按一下Ctrl+W.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W l <span class="comment"># 把光标移到右边的屏</span></span><br><span class="line">Ctrl+W h <span class="comment"># 把光标移到左边的屏中</span></span><br><span class="line">Ctrl+W k <span class="comment"># 把光标移到上边的屏中</span></span><br><span class="line">Ctrl+W j <span class="comment"># 把光标移到下边的屏中</span></span><br><span class="line">Ctrl+W w <span class="comment"># 把光标移到下一个的屏中</span></span><br></pre></td></tr></table></figure><h2 id="移动分屏"><a href="#移动分屏" class="headerlink" title="移动分屏"></a>移动分屏</h2><p>这个功能还是使用了Vim的光标键，只不过都是大写。当然了，如果你的分屏很乱很复杂的话，这个功能可能会出现一些非常奇怪的症状。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W L <span class="comment"># 向右移动</span></span><br><span class="line">Ctrl+W H <span class="comment"># 向左移动</span></span><br><span class="line">Ctrl+W K <span class="comment"># 向上移动</span></span><br><span class="line">Ctrl+W J <span class="comment"># 向下移动</span></span><br></pre></td></tr></table></figure><h2 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h2><p>下面是改变尺寸的一些操作，主要是高度，对于宽度你可以使用[Ctrl+W &lt;]或是[Ctrl+W &gt;]，但这可能需要最新的版本才支持。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+W = <span class="comment"># 让所有的屏都有一样的高度</span></span><br><span class="line">Ctrl+W + <span class="comment"># 增加高度</span></span><br><span class="line">Ctrl+W - <span class="comment"># 减少高度</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> VIM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS免费搭建ss教程</title>
      <link href="/2018/06/11/AWS%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BAss%E6%95%99%E7%A8%8B/"/>
      <url>/2018/06/11/AWS%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BAss%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="注册免费的AWS服务器"><a href="#注册免费的AWS服务器" class="headerlink" title="注册免费的AWS服务器"></a>注册免费的AWS服务器</h1><p>注册地址：<a href="https://aws.amazon.com/cn/ec2/pricing/?sc_channel=PS&amp;sc_campaign=acquisition_CN&amp;sc_publisher=baidu&amp;sc_category=pc&amp;sc_medium=ec2_b&amp;sc_content=ec2_e&amp;sc_detail=ec2&amp;sc_segment=100009040&amp;sc_matchtype=phrase&amp;sc_country=CN&amp;s_kwcid=AL!4422!88!5666095499!!17798814222&amp;ef_id=WjtnMQAAAdinHin@:20180611133737:s" target="_blank" rel="noopener">ec2 免费试用全球云服务-亚马逊AWS</a></p><p>填写注册信息、输入信用卡（成功后扣除1美元）、电话语音确认。</p><p>上述过程成功后，即可进入EC2创建服务器实例。如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programming/AWS_SS1.jpeg" alt></p><h1 id="创建服务器实例"><a href="#创建服务器实例" class="headerlink" title="创建服务器实例"></a>创建服务器实例</h1><p>选择Ubuntu16.04 LTS系统：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programming/AWS_SS2.jpeg" alt></p><p>选择实例类型：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programming/AWS_SS3.jpeg" alt></p><p>根据自己的需求添加存储，免费用户最大30GB存储：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programming/AWS_SS4.jpeg" alt></p><p>创建秘钥对：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programming/AWS_SS5.jpeg" alt></p><p>编辑安全组规则：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programming/AWS_SS6.jpeg" alt></p><h1 id="登录实例并配置ss环境"><a href="#登录实例并配置ss环境" class="headerlink" title="登录实例并配置ss环境"></a>登录实例并配置ss环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod 400 XXX.pem <span class="comment"># 更改秘钥权限</span></span><br><span class="line">$ ssh -i XXX.pem ubuntu@[IP] <span class="comment"># 利用公有IP登录实例</span></span><br></pre></td></tr></table></figure><p>安装Shadowsocks:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取root权限</span></span><br><span class="line">sudo -s</span><br><span class="line"><span class="comment"># 更新apt-get</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment"># 安装python包管理工具</span></span><br><span class="line">apt-get install python-setuptools</span><br><span class="line">apt-get install python-pip</span><br><span class="line"><span class="comment"># 安装shadowsocks</span></span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>创建配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/shadowsocks</span><br><span class="line">vim /etc/shadowsocks/ss.json</span><br></pre></td></tr></table></figure><p>配置文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:443, //ss连接服务器的端口</span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"abcd1234"</span>, // 设置ss连接时的密码</span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="string">"workers"</span>: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Shadowsocks:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动：sudo /usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks/ss.json -d start</span><br><span class="line"></span><br><span class="line">停止：sudo /usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks/ss.json -d stop  </span><br><span class="line">重启：sudo /usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks/ss.json -d restart</span><br></pre></td></tr></table></figure><h1 id="配置自动切换模式"><a href="#配置自动切换模式" class="headerlink" title="配置自动切换模式"></a>配置自动切换模式</h1><p>配置好 ss 情景模式后虽然可以使用 Chrome 浏览器科学上网了，但是这样的话无论你访问什么网站都会走代理，有时候访问国内的一些网站反而会很慢，这时候自动切换模式就解决了这个问题。下面介绍一下如何配置自动切换模式。</p><p>点击左侧的 自动切换，或者自己新建情景模式，类型选择第二个 自动切换模式。然后做如下配置：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programming/AWS_SS7.jpeg" alt></p><p>导入在线规则列表，类型选择AutoProxy，可以选择导入gfwlist - <a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a> 或者自己自定义的AutoProxy文件。</p><p>保存设置并更新情景模式，若更新失败则开启全局代理后更新。</p><p>设置规则匹配则使用代理模式，否则直接连接。保存退出。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://blog.csdn.net/miracleswang/article/details/78959305" target="_blank" rel="noopener">https://blog.csdn.net/miracleswang/article/details/78959305</a></li><li><a href="https://blog.csdn.net/kntanchao/article/details/79191149" target="_blank" rel="noopener">https://blog.csdn.net/kntanchao/article/details/79191149</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> AWS </category>
          
          <category> SS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> AWS </tag>
            
            <tag> ss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[darknet系列]yolov3训练自己的数据集</title>
      <link href="/2018/06/09/darknet%E7%B3%BB%E5%88%97-yolov3%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
      <url>/2018/06/09/darknet%E7%B3%BB%E5%88%97-yolov3%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h1><p>darknet版本： 2018年6月 <a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">yolov3</a></p><p>系统配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu 16.04</span><br><span class="line">12GB Titan GPU</span><br></pre></td></tr></table></figure><p>数据集：ILSVRC2015 (ILSVRC2015转VOC数据格式详见：<a href="http://mapstec.com/2018/04/05/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/" target="_blank" rel="noopener">http://mapstec.com/2018/04/05/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/</a>)</p><h1 id="darknet配置"><a href="#darknet配置" class="headerlink" title="darknet配置"></a>darknet配置</h1><p>下载工程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pjreddie/darknet</span><br></pre></td></tr></table></figure><p>修改Makefile,参考我的makefile文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">GPU=1</span><br><span class="line">CUDNN=0</span><br><span class="line">OPENCV=1</span><br><span class="line">OPENMP=0</span><br><span class="line">DEBUG=0</span><br><span class="line"></span><br><span class="line">ARCH= -gencode arch=compute_30,code=sm_30 \</span><br><span class="line">      -gencode arch=compute_35,code=sm_35 \</span><br><span class="line">      -gencode arch=compute_50,code=[sm_50,compute_50] \</span><br><span class="line">      -gencode arch=compute_52,code=[sm_52,compute_52]</span><br><span class="line"><span class="comment">#      -gencode arch=compute_20,code=[sm_20,sm_21] \ This one is deprecated?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is what I use, uncomment if you know your arch and want to specify</span></span><br><span class="line"><span class="comment"># ARCH= -gencode arch=compute_52,code=compute_52</span></span><br><span class="line"></span><br><span class="line">VPATH=./src/:./examples</span><br><span class="line">SLIB=libdarknet.so</span><br><span class="line">ALIB=libdarknet.a</span><br><span class="line">EXEC=darknet</span><br><span class="line">OBJDIR=./obj/</span><br><span class="line"></span><br><span class="line">CC=gcc</span><br><span class="line">NVCC=/usr/<span class="built_in">local</span>/cuda-8.0/bin/nvcc </span><br><span class="line">AR=ar</span><br><span class="line">ARFLAGS=rcs</span><br><span class="line">OPTS=-Ofast</span><br><span class="line">LDFLAGS= -lm -pthread </span><br><span class="line">COMMON= -Iinclude/ -Isrc/</span><br><span class="line">CFLAGS=-Wall -Wno-unused-result -Wno-unknown-pragmas -Wfatal-errors -fPIC</span><br><span class="line"></span><br><span class="line">ifeq ($(OPENMP), 1) </span><br><span class="line">CFLAGS+= -fopenmp</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">ifeq ($(DEBUG), 1) </span><br><span class="line">OPTS=-O0 -g</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">CFLAGS+=$(OPTS)</span><br><span class="line"></span><br><span class="line">ifeq ($(OPENCV), 1) </span><br><span class="line">COMMON+= -DOPENCV</span><br><span class="line">CFLAGS+= -DOPENCV</span><br><span class="line">LDFLAGS+= `pkg-config --libs opencv` </span><br><span class="line">COMMON+= `pkg-config --cflags opencv` </span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">ifeq ($(GPU), 1) </span><br><span class="line">COMMON+= -DGPU -I/usr/<span class="built_in">local</span>/cuda/include/</span><br><span class="line">CFLAGS+= -DGPU</span><br><span class="line">LDFLAGS+= -L/usr/<span class="built_in">local</span>/cuda/lib64 -lcuda -lcudart -lcublas -lcurand</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">ifeq ($(CUDNN), 1) </span><br><span class="line">COMMON+= -DCUDNN </span><br><span class="line">CFLAGS+= -DCUDNN</span><br><span class="line">LDFLAGS+= -lcudnn</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">OBJ=gemm.o utils.o cuda.o deconvolutional_layer.o convolutional_layer.o list.o image.o activations.o im2col.o col2im.o blas.o crop_layer.o dropout_layer.o maxpool_layer.o softmax_layer.o data.o matrix.o network.o connected_layer.o cost_layer.o parser.o option_list.o detection_layer.o route_layer.o upsample_layer.o box.o normalization_layer.o avgpool_layer.o layer.o local_layer.o shortcut_layer.o logistic_layer.o activation_layer.o rnn_layer.o gru_layer.o crnn_layer.o demo.o batchnorm_layer.o region_layer.o reorg_layer.o tree.o  lstm_layer.o l2norm_layer.o yolo_layer.o</span><br><span class="line">EXECOBJA=captcha.o lsd.o super.o art.o tag.o cifar.o go.o rnn.o segmenter.o regressor.o classifier.o coco.o yolo.o detector.o nightmare.o darknet.o</span><br><span class="line">ifeq ($(GPU), 1) </span><br><span class="line">LDFLAGS+= -lstdc++ </span><br><span class="line">OBJ+=convolutional_kernels.o deconvolutional_kernels.o activation_kernels.o im2col_kernels.o col2im_kernels.o blas_kernels.o crop_layer_kernels.o dropout_layer_kernels.o maxpool_layer_kernels.o avgpool_layer_kernels.o</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">EXECOBJ = $(addprefix $(OBJDIR), $(EXECOBJA))</span><br><span class="line">OBJS = $(addprefix $(OBJDIR), $(OBJ))</span><br><span class="line">DEPS = $(wildcard src/*.h) Makefile include/darknet.h</span><br><span class="line"></span><br><span class="line"><span class="comment">#all: obj backup results $(SLIB) $(ALIB) $(EXEC)</span></span><br><span class="line">all: obj  results $(SLIB) $(ALIB) $(EXEC)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(EXEC): $(EXECOBJ) $(ALIB)</span><br><span class="line">$(CC) $(COMMON) $(CFLAGS) $^ -o <span class="variable">$@</span> $(LDFLAGS) $(ALIB)</span><br><span class="line"></span><br><span class="line">$(ALIB): $(OBJS)</span><br><span class="line">$(AR) $(ARFLAGS) <span class="variable">$@</span> $^</span><br><span class="line"></span><br><span class="line">$(SLIB): $(OBJS)</span><br><span class="line">$(CC) $(CFLAGS) -shared $^ -o <span class="variable">$@</span> $(LDFLAGS)</span><br><span class="line"></span><br><span class="line">$(OBJDIR)%.o: %.c $(DEPS)</span><br><span class="line">$(CC) $(COMMON) $(CFLAGS) -c $&lt; -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line">$(OBJDIR)%.o: %.cu $(DEPS)</span><br><span class="line">$(NVCC) $(ARCH) $(COMMON) --compiler-options <span class="string">"<span class="variable">$(CFLAGS)</span>"</span> -c $&lt; -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line">obj:</span><br><span class="line">mkdir -p obj</span><br><span class="line">backup:</span><br><span class="line">mkdir -p backup</span><br><span class="line">results:</span><br><span class="line">mkdir -p results</span><br><span class="line"></span><br><span class="line">.PHONY: clean</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">rm -rf $(OBJS) $(SLIB) $(ALIB) $(EXEC) $(EXECOBJ) $(OBJDIR)/*</span><br></pre></td></tr></table></figure><p>编译darknet：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>配置完以后可以下载作者的预训练模型测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://pjreddie.com/media/files/yolov3.weights</span><br></pre></td></tr></table></figure><p>下载之后用图片进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg</span><br></pre></td></tr></table></figure><h1 id="制作自己的数据集"><a href="#制作自己的数据集" class="headerlink" title="制作自己的数据集"></a>制作自己的数据集</h1><p>本教授使用Imagenet数据集作为训练数据集，详细制作过程参考：<a href="http://mapstec.com/2018/04/05/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/" target="_blank" rel="noopener">http://mapstec.com/2018/04/05/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/</a></p><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>按darknet的说明编译好后，接下来在darknet-master/scripts文件夹中新建文件夹VOCdevkit，然后将整个VOC2007文件夹都拷到VOCdevkit文件夹下。</p><p>然后，需要利用scripts文件夹中的voc_label.py文件生成一系列训练文件和label，具体操作如下：</p><p>首先需要修改voc_label.py中的代码，这里主要修改数据集名，以及类别信息，我的是VOC2007，并且所有样本用来训练，没有val或test，有1000类目标，因此按如下设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir, getcwd</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line"><span class="comment">#sets=[('2012', 'train'), ('2012', 'val'), ('2007', 'train'), ('2007', 'val'), ('2007', 'test')]</span></span><br><span class="line">sets = [(<span class="string">'2007'</span>, <span class="string">'train'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># classes = ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]</span></span><br><span class="line">classes = [<span class="string">"tench"</span>,<span class="string">"goldfish"</span>,<span class="string">"great_white_shark"</span>,<span class="string">"tiger_shark"</span>,<span class="string">"hammerhead"</span>,<span class="string">"electric_ray"</span>,<span class="string">"stingray"</span>,<span class="string">"cock"</span>,<span class="string">"hen"</span>,<span class="string">"ostrich"</span>,<span class="string">"brambling"</span>,<span class="string">"goldfinch"</span>,<span class="string">"house_finch"</span>,<span class="string">"junco"</span>,<span class="string">"indigo_bunting"</span>,<span class="string">"robin"</span>,<span class="string">"bulbul"</span>,<span class="string">"jay"</span>,<span class="string">"magpie"</span>,<span class="string">"chickadee"</span>,<span class="string">"water_ouzel"</span>,<span class="string">"kite"</span>,<span class="string">"bald_eagle"</span>,<span class="string">"vulture"</span>,<span class="string">"great_grey_owl"</span>,<span class="string">"European_fire_salamander"</span>,<span class="string">"common_newt"</span>,<span class="string">"eft"</span>,<span class="string">"spotted_salamander"</span>,<span class="string">"axolotl"</span>,<span class="string">"bullfrog"</span>,<span class="string">"tree_frog"</span>,<span class="string">"tailed_frog"</span>,<span class="string">"loggerhead"</span>,<span class="string">"leatherback_turtle"</span>,<span class="string">"mud_turtle"</span>,<span class="string">"terrapin"</span>,<span class="string">"box_turtle"</span>,<span class="string">"banded_gecko"</span>,<span class="string">"common_iguana"</span>,<span class="string">"American_chameleon"</span>,<span class="string">"whiptail"</span>,<span class="string">"agama"</span>,<span class="string">"frilled_lizard"</span>,<span class="string">"alligator_lizard"</span>,<span class="string">"Gila_monster"</span>,<span class="string">"green_lizard"</span>,<span class="string">"African_chameleon"</span>,<span class="string">"Komodo_dragon"</span>,<span class="string">"African_crocodile"</span>,<span class="string">"American_alligator"</span>,<span class="string">"triceratops"</span>,<span class="string">"thunder_snake"</span>,<span class="string">"ringneck_snake"</span>,<span class="string">"hognose_snake"</span>,<span class="string">"green_snake"</span>,<span class="string">"king_snake"</span>,<span class="string">"garter_snake"</span>,<span class="string">"water_snake"</span>,<span class="string">"vine_snake"</span>,<span class="string">"night_snake"</span>,<span class="string">"boa_constrictor"</span>,<span class="string">"rock_python"</span>,<span class="string">"Indian_cobra"</span>,<span class="string">"green_mamba"</span>,<span class="string">"sea_snake"</span>,<span class="string">"horned_viper"</span>,<span class="string">"diamondback"</span>,<span class="string">"sidewinder"</span>,<span class="string">"trilobite"</span>,<span class="string">"harvestman"</span>,<span class="string">"scorpion"</span>,<span class="string">"black_and_gold_garden_spider"</span>,<span class="string">"barn_spider"</span>,<span class="string">"garden_spider"</span>,<span class="string">"black_widow"</span>,<span class="string">"tarantula"</span>,<span class="string">"wolf_spider"</span>,<span class="string">"tick"</span>,<span class="string">"centipede"</span>,<span class="string">"black_grouse"</span>,<span class="string">"ptarmigan"</span>,<span class="string">"ruffed_grouse"</span>,<span class="string">"prairie_chicken"</span>,<span class="string">"peacock"</span>,<span class="string">"quail"</span>,<span class="string">"partridge"</span>,<span class="string">"African_grey"</span>,<span class="string">"macaw"</span>,<span class="string">"sulphur-crested_cockatoo"</span>,<span class="string">"lorikeet"</span>,<span class="string">"coucal"</span>,<span class="string">"bee_eater"</span>,<span class="string">"hornbill"</span>,<span class="string">"hummingbird"</span>,<span class="string">"jacamar"</span>,<span class="string">"toucan"</span>,<span class="string">"drake"</span>,<span class="string">"red-breasted_merganser"</span>,<span class="string">"goose"</span>,<span class="string">"black_swan"</span>,<span class="string">"tusker"</span>,<span class="string">"echidna"</span>,<span class="string">"platypus"</span>,<span class="string">"wallaby"</span>,<span class="string">"koala"</span>,<span class="string">"wombat"</span>,<span class="string">"jellyfish"</span>,<span class="string">"sea_anemone"</span>,<span class="string">"brain_coral"</span>,<span class="string">"flatworm"</span>,<span class="string">"nematode"</span>,<span class="string">"conch"</span>,<span class="string">"snail"</span>,<span class="string">"slug"</span>,<span class="string">"sea_slug"</span>,<span class="string">"chiton"</span>,<span class="string">"chambered_nautilus"</span>,<span class="string">"Dungeness_crab"</span>,<span class="string">"rock_crab"</span>,<span class="string">"fiddler_crab"</span>,<span class="string">"king_crab"</span>,<span class="string">"American_lobster"</span>,<span class="string">"spiny_lobster"</span>,<span class="string">"crayfish"</span>,<span class="string">"hermit_crab"</span>,<span class="string">"isopod"</span>,<span class="string">"white_stork"</span>,<span class="string">"black_stork"</span>,<span class="string">"spoonbill"</span>,<span class="string">"flamingo"</span>,<span class="string">"little_blue_heron"</span>,<span class="string">"American_egret"</span>,<span class="string">"bittern"</span>,<span class="string">"crane"</span>,<span class="string">"limpkin"</span>,<span class="string">"European_gallinule"</span>,<span class="string">"American_coot"</span>,<span class="string">"bustard"</span>,<span class="string">"ruddy_turnstone"</span>,<span class="string">"red-backed_sandpiper"</span>,<span class="string">"redshank"</span>,<span class="string">"dowitcher"</span>,<span class="string">"oystercatcher"</span>,<span class="string">"pelican"</span>,<span class="string">"king_penguin"</span>,<span class="string">"albatross"</span>,<span class="string">"grey_whale"</span>,<span class="string">"killer_whale"</span>,<span class="string">"dugong"</span>,<span class="string">"sea_lion"</span>,<span class="string">"Chihuahua"</span>,<span class="string">"Japanese_spaniel"</span>,<span class="string">"Maltese_dog"</span>,<span class="string">"Pekinese"</span>,<span class="string">"Shih-Tzu"</span>,<span class="string">"Blenheim_spaniel"</span>,<span class="string">"papillon"</span>,<span class="string">"toy_terrier"</span>,<span class="string">"Rhodesian_ridgeback"</span>,<span class="string">"Afghan_hound"</span>,<span class="string">"basset"</span>,<span class="string">"beagle"</span>,<span class="string">"bloodhound"</span>,<span class="string">"bluetick"</span>,<span class="string">"black-and-tan_coonhound"</span>,<span class="string">"Walker_hound"</span>,<span class="string">"English_foxhound"</span>,<span class="string">"redbone"</span>,<span class="string">"borzoi"</span>,<span class="string">"Irish_wolfhound"</span>,<span class="string">"Italian_greyhound"</span>,<span class="string">"whippet"</span>,<span class="string">"Ibizan_hound"</span>,<span class="string">"Norwegian_elkhound"</span>,<span class="string">"otterhound"</span>,<span class="string">"Saluki"</span>,<span class="string">"Scottish_deerhound"</span>,<span class="string">"Weimaraner"</span>,<span class="string">"Staffordshire_bullterrier"</span>,<span class="string">"American_Staffordshire_terrier"</span>,<span class="string">"Bedlington_terrier"</span>,<span class="string">"Border_terrier"</span>,<span class="string">"Kerry_blue_terrier"</span>,<span class="string">"Irish_terrier"</span>,<span class="string">"Norfolk_terrier"</span>,<span class="string">"Norwich_terrier"</span>,<span class="string">"Yorkshire_terrier"</span>,<span class="string">"wire-haired_fox_terrier"</span>,<span class="string">"Lakeland_terrier"</span>,<span class="string">"Sealyham_terrier"</span>,<span class="string">"Airedale"</span>,<span class="string">"cairn"</span>,<span class="string">"Australian_terrier"</span>,<span class="string">"Dandie_Dinmont"</span>,<span class="string">"Boston_bull"</span>,<span class="string">"miniature_schnauzer"</span>,<span class="string">"giant_schnauzer"</span>,<span class="string">"standard_schnauzer"</span>,<span class="string">"Scotch_terrier"</span>,<span class="string">"Tibetan_terrier"</span>,<span class="string">"silky_terrier"</span>,<span class="string">"soft-coated_wheaten_terrier"</span>,<span class="string">"West_Highland_white_terrier"</span>,<span class="string">"Lhasa"</span>,<span class="string">"flat-coated_retriever"</span>,<span class="string">"curly-coated_retriever"</span>,<span class="string">"golden_retriever"</span>,<span class="string">"Labrador_retriever"</span>,<span class="string">"Chesapeake_Bay_retriever"</span>,<span class="string">"German_short-haired_pointer"</span>,<span class="string">"vizsla"</span>,<span class="string">"English_setter"</span>,<span class="string">"Irish_setter"</span>,<span class="string">"Gordon_setter"</span>,<span class="string">"Brittany_spaniel"</span>,<span class="string">"clumber"</span>,<span class="string">"English_springer"</span>,<span class="string">"Welsh_springer_spaniel"</span>,<span class="string">"cocker_spaniel"</span>,<span class="string">"Sussex_spaniel"</span>,<span class="string">"Irish_water_spaniel"</span>,<span class="string">"kuvasz"</span>,<span class="string">"schipperke"</span>,<span class="string">"groenendael"</span>,<span class="string">"malinois"</span>,<span class="string">"briard"</span>,<span class="string">"kelpie"</span>,<span class="string">"komondor"</span>,<span class="string">"Old_English_sheepdog"</span>,<span class="string">"Shetland_sheepdog"</span>,<span class="string">"collie"</span>,<span class="string">"Border_collie"</span>,<span class="string">"Bouvier_des_Flandres"</span>,<span class="string">"Rottweiler"</span>,<span class="string">"German_shepherd"</span>,<span class="string">"Doberman"</span>,<span class="string">"miniature_pinscher"</span>,<span class="string">"Greater_Swiss_Mountain_dog"</span>,<span class="string">"Bernese_mountain_dog"</span>,<span class="string">"Appenzeller"</span>,<span class="string">"EntleBucher"</span>,<span class="string">"boxer"</span>,<span class="string">"bull_mastiff"</span>,<span class="string">"Tibetan_mastiff"</span>,<span class="string">"French_bulldog"</span>,<span class="string">"Great_Dane"</span>,<span class="string">"Saint_Bernard"</span>,<span class="string">"Eskimo_dog"</span>,<span class="string">"malamute"</span>,<span class="string">"Siberian_husky"</span>,<span class="string">"dalmatian"</span>,<span class="string">"affenpinscher"</span>,<span class="string">"basenji"</span>,<span class="string">"pug"</span>,<span class="string">"Leonberg"</span>,<span class="string">"Newfoundland"</span>,<span class="string">"Great_Pyrenees"</span>,<span class="string">"Samoyed"</span>,<span class="string">"Pomeranian"</span>,<span class="string">"chow"</span>,<span class="string">"keeshond"</span>,<span class="string">"Brabancon_griffon"</span>,<span class="string">"Pembroke"</span>,<span class="string">"Cardigan"</span>,<span class="string">"toy_poodle"</span>,<span class="string">"miniature_poodle"</span>,<span class="string">"standard_poodle"</span>,<span class="string">"Mexican_hairless"</span>,<span class="string">"timber_wolf"</span>,<span class="string">"white_wolf"</span>,<span class="string">"red_wolf"</span>,<span class="string">"coyote"</span>,<span class="string">"dingo"</span>,<span class="string">"dhole"</span>,<span class="string">"African_hunting_dog"</span>,<span class="string">"hyena"</span>,<span class="string">"red_fox"</span>,<span class="string">"kit_fox"</span>,<span class="string">"Arctic_fox"</span>,<span class="string">"grey_fox"</span>,<span class="string">"tabby"</span>,<span class="string">"tiger_cat"</span>,<span class="string">"Persian_cat"</span>,<span class="string">"Siamese_cat"</span>,<span class="string">"Egyptian_cat"</span>,<span class="string">"cougar"</span>,<span class="string">"lynx"</span>,<span class="string">"leopard"</span>,<span class="string">"snow_leopard"</span>,<span class="string">"jaguar"</span>,<span class="string">"lion"</span>,<span class="string">"tiger"</span>,<span class="string">"cheetah"</span>,<span class="string">"brown_bear"</span>,<span class="string">"American_black_bear"</span>,<span class="string">"ice_bear"</span>,<span class="string">"sloth_bear"</span>,<span class="string">"mongoose"</span>,<span class="string">"meerkat"</span>,<span class="string">"tiger_beetle"</span>,<span class="string">"ladybug"</span>,<span class="string">"ground_beetle"</span>,<span class="string">"long-horned_beetle"</span>,<span class="string">"leaf_beetle"</span>,<span class="string">"dung_beetle"</span>,<span class="string">"rhinoceros_beetle"</span>,<span class="string">"weevil"</span>,<span class="string">"fly"</span>,<span class="string">"bee"</span>,<span class="string">"ant"</span>,<span class="string">"grasshopper"</span>,<span class="string">"cricket"</span>,<span class="string">"walking_stick"</span>,<span class="string">"cockroach"</span>,<span class="string">"mantis"</span>,<span class="string">"cicada"</span>,<span class="string">"leafhopper"</span>,<span class="string">"lacewing"</span>,<span class="string">"dragonfly"</span>,<span class="string">"damselfly"</span>,<span class="string">"admiral"</span>,<span class="string">"ringlet"</span>,<span class="string">"monarch"</span>,<span class="string">"cabbage_butterfly"</span>,<span class="string">"sulphur_butterfly"</span>,<span class="string">"lycaenid"</span>,<span class="string">"starfish"</span>,<span class="string">"sea_urchin"</span>,<span class="string">"sea_cucumber"</span>,<span class="string">"wood_rabbit"</span>,<span class="string">"hare"</span>,<span class="string">"Angora"</span>,<span class="string">"hamster"</span>,<span class="string">"porcupine"</span>,<span class="string">"fox_squirrel"</span>,<span class="string">"marmot"</span>,<span class="string">"beaver"</span>,<span class="string">"guinea_pig"</span>,<span class="string">"sorrel"</span>,<span class="string">"zebra"</span>,<span class="string">"hog"</span>,<span class="string">"wild_boar"</span>,<span class="string">"warthog"</span>,<span class="string">"hippopotamus"</span>,<span class="string">"ox"</span>,<span class="string">"water_buffalo"</span>,<span class="string">"bison"</span>,<span class="string">"ram"</span>,<span class="string">"bighorn"</span>,<span class="string">"ibex"</span>,<span class="string">"hartebeest"</span>,<span class="string">"impala"</span>,<span class="string">"gazelle"</span>,<span class="string">"Arabian_camel"</span>,<span class="string">"llama"</span>,<span class="string">"weasel"</span>,<span class="string">"mink"</span>,<span class="string">"polecat"</span>,<span class="string">"black-footed_ferret"</span>,<span class="string">"otter"</span>,<span class="string">"skunk"</span>,<span class="string">"badger"</span>,<span class="string">"armadillo"</span>,<span class="string">"three-toed_sloth"</span>,<span class="string">"orangutan"</span>,<span class="string">"gorilla"</span>,<span class="string">"chimpanzee"</span>,<span class="string">"gibbon"</span>,<span class="string">"siamang"</span>,<span class="string">"guenon"</span>,<span class="string">"patas"</span>,<span class="string">"baboon"</span>,<span class="string">"macaque"</span>,<span class="string">"langur"</span>,<span class="string">"colobus"</span>,<span class="string">"proboscis_monkey"</span>,<span class="string">"marmoset"</span>,<span class="string">"capuchin"</span>,<span class="string">"howler_monkey"</span>,<span class="string">"titi"</span>,<span class="string">"spider_monkey"</span>,<span class="string">"squirrel_monkey"</span>,<span class="string">"Madagascar_cat"</span>,<span class="string">"indri"</span>,<span class="string">"Indian_elephant"</span>,<span class="string">"African_elephant"</span>,<span class="string">"lesser_panda"</span>,<span class="string">"giant_panda"</span>,<span class="string">"barracouta"</span>,<span class="string">"eel"</span>,<span class="string">"coho"</span>,<span class="string">"rock_beauty"</span>,<span class="string">"anemone_fish"</span>,<span class="string">"sturgeon"</span>,<span class="string">"gar"</span>,<span class="string">"lionfish"</span>,<span class="string">"puffer"</span>,<span class="string">"abacus"</span>,<span class="string">"abaya"</span>,<span class="string">"academic_gown"</span>,<span class="string">"accordion"</span>,<span class="string">"acoustic_guitar"</span>,<span class="string">"aircraft_carrier"</span>,<span class="string">"airliner"</span>,<span class="string">"airship"</span>,<span class="string">"altar"</span>,<span class="string">"ambulance"</span>,<span class="string">"amphibian"</span>,<span class="string">"analog_clock"</span>,<span class="string">"apiary"</span>,<span class="string">"apron"</span>,<span class="string">"ashcan"</span>,<span class="string">"assault_rifle"</span>,<span class="string">"backpack"</span>,<span class="string">"bakery"</span>,<span class="string">"balance_beam"</span>,<span class="string">"balloon"</span>,<span class="string">"ballpoint"</span>,<span class="string">"Band_Aid"</span>,<span class="string">"banjo"</span>,<span class="string">"bannister"</span>,<span class="string">"barbell"</span>,<span class="string">"barber_chair"</span>,<span class="string">"barbershop"</span>,<span class="string">"barn"</span>,<span class="string">"barometer"</span>,<span class="string">"barrel"</span>,<span class="string">"barrow"</span>,<span class="string">"baseball"</span>,<span class="string">"basketball"</span>,<span class="string">"bassinet"</span>,<span class="string">"bassoon"</span>,<span class="string">"bathing_cap"</span>,<span class="string">"bath_towel"</span>,<span class="string">"bathtub"</span>,<span class="string">"beach_wagon"</span>,<span class="string">"beacon"</span>,<span class="string">"beaker"</span>,<span class="string">"bearskin"</span>,<span class="string">"beer_bottle"</span>,<span class="string">"beer_glass"</span>,<span class="string">"bell_cote"</span>,<span class="string">"bib"</span>,<span class="string">"bicycle-built-for-two"</span>,<span class="string">"bikini"</span>,<span class="string">"binder"</span>,<span class="string">"binoculars"</span>,<span class="string">"birdhouse"</span>,<span class="string">"boathouse"</span>,<span class="string">"bobsled"</span>,<span class="string">"bolo_tie"</span>,<span class="string">"bonnet"</span>,<span class="string">"bookcase"</span>,<span class="string">"bookshop"</span>,<span class="string">"bottlecap"</span>,<span class="string">"bow"</span>,<span class="string">"bow_tie"</span>,<span class="string">"brass"</span>,<span class="string">"brassiere"</span>,<span class="string">"breakwater"</span>,<span class="string">"breastplate"</span>,<span class="string">"broom"</span>,<span class="string">"bucket"</span>,<span class="string">"buckle"</span>,<span class="string">"bulletproof_vest"</span>,<span class="string">"bullet_train"</span>,<span class="string">"butcher_shop"</span>,<span class="string">"cab"</span>,<span class="string">"caldron"</span>,<span class="string">"candle"</span>,<span class="string">"cannon"</span>,<span class="string">"canoe"</span>,<span class="string">"can_opener"</span>,<span class="string">"cardigan"</span>,<span class="string">"car_mirror"</span>,<span class="string">"carousel"</span>,<span class="string">"carpenters_kit"</span>,<span class="string">"carton"</span>,<span class="string">"car_wheel"</span>,<span class="string">"cash_machine"</span>,<span class="string">"cassette"</span>,<span class="string">"cassette_player"</span>,<span class="string">"castle"</span>,<span class="string">"catamaran"</span>,<span class="string">"CD_player"</span>,<span class="string">"cello"</span>,<span class="string">"cellular_telephone"</span>,<span class="string">"chain"</span>,<span class="string">"chainlink_fence"</span>,<span class="string">"chain_mail"</span>,<span class="string">"chain_saw"</span>,<span class="string">"chest"</span>,<span class="string">"chiffonier"</span>,<span class="string">"chime"</span>,<span class="string">"china_cabinet"</span>,<span class="string">"Christmas_stocking"</span>,<span class="string">"church"</span>,<span class="string">"cinema"</span>,<span class="string">"cleaver"</span>,<span class="string">"cliff_dwelling"</span>,<span class="string">"cloak"</span>,<span class="string">"clog"</span>,<span class="string">"cocktail_shaker"</span>,<span class="string">"coffee_mug"</span>,<span class="string">"coffeepot"</span>,<span class="string">"coil"</span>,<span class="string">"combination_lock"</span>,<span class="string">"computer_keyboard"</span>,<span class="string">"confectionery"</span>,<span class="string">"container_ship"</span>,<span class="string">"convertible"</span>,<span class="string">"corkscrew"</span>,<span class="string">"cornet"</span>,<span class="string">"cowboy_boot"</span>,<span class="string">"cowboy_hat"</span>,<span class="string">"cradle"</span>,<span class="string">"crane"</span>,<span class="string">"crash_helmet"</span>,<span class="string">"crate"</span>,<span class="string">"crib"</span>,<span class="string">"Crock_Pot"</span>,<span class="string">"croquet_ball"</span>,<span class="string">"crutch"</span>,<span class="string">"cuirass"</span>,<span class="string">"dam"</span>,<span class="string">"desk"</span>,<span class="string">"desktop_computer"</span>,<span class="string">"dial_telephone"</span>,<span class="string">"diaper"</span>,<span class="string">"digital_clock"</span>,<span class="string">"digital_watch"</span>,<span class="string">"dining_table"</span>,<span class="string">"dishrag"</span>,<span class="string">"dishwasher"</span>,<span class="string">"disk_brake"</span>,<span class="string">"dock"</span>,<span class="string">"dogsled"</span>,<span class="string">"dome"</span>,<span class="string">"doormat"</span>,<span class="string">"drilling_platform"</span>,<span class="string">"drum"</span>,<span class="string">"drumstick"</span>,<span class="string">"dumbbell"</span>,<span class="string">"Dutch_oven"</span>,<span class="string">"electric_fan"</span>,<span class="string">"electric_guitar"</span>,<span class="string">"electric_locomotive"</span>,<span class="string">"entertainment_center"</span>,<span class="string">"envelope"</span>,<span class="string">"espresso_maker"</span>,<span class="string">"face_powder"</span>,<span class="string">"feather_boa"</span>,<span class="string">"file"</span>,<span class="string">"fireboat"</span>,<span class="string">"fire_engine"</span>,<span class="string">"fire_screen"</span>,<span class="string">"flagpole"</span>,<span class="string">"flute"</span>,<span class="string">"folding_chair"</span>,<span class="string">"football_helmet"</span>,<span class="string">"forklift"</span>,<span class="string">"fountain"</span>,<span class="string">"fountain_pen"</span>,<span class="string">"four-poster"</span>,<span class="string">"freight_car"</span>,<span class="string">"French_horn"</span>,<span class="string">"frying_pan"</span>,<span class="string">"fur_coat"</span>,<span class="string">"garbage_truck"</span>,<span class="string">"gasmask"</span>,<span class="string">"gas_pump"</span>,<span class="string">"goblet"</span>,<span class="string">"go-kart"</span>,<span class="string">"golf_ball"</span>,<span class="string">"golfcart"</span>,<span class="string">"gondola"</span>,<span class="string">"gong"</span>,<span class="string">"gown"</span>,<span class="string">"grand_piano"</span>,<span class="string">"greenhouse"</span>,<span class="string">"grille"</span>,<span class="string">"grocery_store"</span>,<span class="string">"guillotine"</span>,<span class="string">"hair_slide"</span>,<span class="string">"hair_spray"</span>,<span class="string">"half_track"</span>,<span class="string">"hammer"</span>,<span class="string">"hamper"</span>,<span class="string">"hand_blower"</span>,<span class="string">"hand-held_computer"</span>,<span class="string">"handkerchief"</span>,<span class="string">"hard_disc"</span>,<span class="string">"harmonica"</span>,<span class="string">"harp"</span>,<span class="string">"harvester"</span>,<span class="string">"hatchet"</span>,<span class="string">"holster"</span>,<span class="string">"home_theater"</span>,<span class="string">"honeycomb"</span>,<span class="string">"hook"</span>,<span class="string">"hoopskirt"</span>,<span class="string">"horizontal_bar"</span>,<span class="string">"horse_cart"</span>,<span class="string">"hourglass"</span>,<span class="string">"iPod"</span>,<span class="string">"iron"</span>,<span class="string">"jack-o-lantern"</span>,<span class="string">"jean"</span>,<span class="string">"jeep"</span>,<span class="string">"jersey"</span>,<span class="string">"jigsaw_puzzle"</span>,<span class="string">"jinrikisha"</span>,<span class="string">"joystick"</span>,<span class="string">"kimono"</span>,<span class="string">"knee_pad"</span>,<span class="string">"knot"</span>,<span class="string">"lab_coat"</span>,<span class="string">"ladle"</span>,<span class="string">"lampshade"</span>,<span class="string">"laptop"</span>,<span class="string">"lawn_mower"</span>,<span class="string">"lens_cap"</span>,<span class="string">"letter_opener"</span>,<span class="string">"library"</span>,<span class="string">"lifeboat"</span>,<span class="string">"lighter"</span>,<span class="string">"limousine"</span>,<span class="string">"liner"</span>,<span class="string">"lipstick"</span>,<span class="string">"Loafer"</span>,<span class="string">"lotion"</span>,<span class="string">"loudspeaker"</span>,<span class="string">"loupe"</span>,<span class="string">"lumbermill"</span>,<span class="string">"magnetic_compass"</span>,<span class="string">"mailbag"</span>,<span class="string">"mailbox"</span>,<span class="string">"maillot"</span>,<span class="string">"maillot"</span>,<span class="string">"manhole_cover"</span>,<span class="string">"maraca"</span>,<span class="string">"marimba"</span>,<span class="string">"mask"</span>,<span class="string">"matchstick"</span>,<span class="string">"maypole"</span>,<span class="string">"maze"</span>,<span class="string">"measuring_cup"</span>,<span class="string">"medicine_chest"</span>,<span class="string">"megalith"</span>,<span class="string">"microphone"</span>,<span class="string">"microwave"</span>,<span class="string">"military_uniform"</span>,<span class="string">"milk_can"</span>,<span class="string">"minibus"</span>,<span class="string">"miniskirt"</span>,<span class="string">"minivan"</span>,<span class="string">"missile"</span>,<span class="string">"mitten"</span>,<span class="string">"mixing_bowl"</span>,<span class="string">"mobile_home"</span>,<span class="string">"Model_T"</span>,<span class="string">"modem"</span>,<span class="string">"monastery"</span>,<span class="string">"monitor"</span>,<span class="string">"moped"</span>,<span class="string">"mortar"</span>,<span class="string">"mortarboard"</span>,<span class="string">"mosque"</span>,<span class="string">"mosquito_net"</span>,<span class="string">"motor_scooter"</span>,<span class="string">"mountain_bike"</span>,<span class="string">"mountain_tent"</span>,<span class="string">"mouse"</span>,<span class="string">"mousetrap"</span>,<span class="string">"moving_van"</span>,<span class="string">"muzzle"</span>,<span class="string">"nail"</span>,<span class="string">"neck_brace"</span>,<span class="string">"necklace"</span>,<span class="string">"nipple"</span>,<span class="string">"notebook"</span>,<span class="string">"obelisk"</span>,<span class="string">"oboe"</span>,<span class="string">"ocarina"</span>,<span class="string">"odometer"</span>,<span class="string">"oil_filter"</span>,<span class="string">"organ"</span>,<span class="string">"oscilloscope"</span>,<span class="string">"overskirt"</span>,<span class="string">"oxcart"</span>,<span class="string">"oxygen_mask"</span>,<span class="string">"packet"</span>,<span class="string">"paddle"</span>,<span class="string">"paddlewheel"</span>,<span class="string">"padlock"</span>,<span class="string">"paintbrush"</span>,<span class="string">"pajama"</span>,<span class="string">"palace"</span>,<span class="string">"panpipe"</span>,<span class="string">"paper_towel"</span>,<span class="string">"parachute"</span>,<span class="string">"parallel_bars"</span>,<span class="string">"park_bench"</span>,<span class="string">"parking_meter"</span>,<span class="string">"passenger_car"</span>,<span class="string">"patio"</span>,<span class="string">"pay-phone"</span>,<span class="string">"pedestal"</span>,<span class="string">"pencil_box"</span>,<span class="string">"pencil_sharpener"</span>,<span class="string">"perfume"</span>,<span class="string">"Petri_dish"</span>,<span class="string">"photocopier"</span>,<span class="string">"pick"</span>,<span class="string">"pickelhaube"</span>,<span class="string">"picket_fence"</span>,<span class="string">"pickup"</span>,<span class="string">"pier"</span>,<span class="string">"piggy_bank"</span>,<span class="string">"pill_bottle"</span>,<span class="string">"pillow"</span>,<span class="string">"ping-pong_ball"</span>,<span class="string">"pinwheel"</span>,<span class="string">"pirate"</span>,<span class="string">"pitcher"</span>,<span class="string">"plane"</span>,<span class="string">"planetarium"</span>,<span class="string">"plastic_bag"</span>,<span class="string">"plate_rack"</span>,<span class="string">"plow"</span>,<span class="string">"plunger"</span>,<span class="string">"Polaroid_camera"</span>,<span class="string">"pole"</span>,<span class="string">"police_van"</span>,<span class="string">"poncho"</span>,<span class="string">"pool_table"</span>,<span class="string">"pop_bottle"</span>,<span class="string">"pot"</span>,<span class="string">"potters_wheel"</span>,<span class="string">"power_drill"</span>,<span class="string">"prayer_rug"</span>,<span class="string">"printer"</span>,<span class="string">"prison"</span>,<span class="string">"projectile"</span>,<span class="string">"projector"</span>,<span class="string">"puck"</span>,<span class="string">"punching_bag"</span>,<span class="string">"purse"</span>,<span class="string">"quill"</span>,<span class="string">"quilt"</span>,<span class="string">"racer"</span>,<span class="string">"racket"</span>,<span class="string">"radiator"</span>,<span class="string">"radio"</span>,<span class="string">"radio_telescope"</span>,<span class="string">"rain_barrel"</span>,<span class="string">"recreational_vehicle"</span>,<span class="string">"reel"</span>,<span class="string">"reflex_camera"</span>,<span class="string">"refrigerator"</span>,<span class="string">"remote_control"</span>,<span class="string">"restaurant"</span>,<span class="string">"revolver"</span>,<span class="string">"rifle"</span>,<span class="string">"rocking_chair"</span>,<span class="string">"rotisserie"</span>,<span class="string">"rubber_eraser"</span>,<span class="string">"rugby_ball"</span>,<span class="string">"rule"</span>,<span class="string">"running_shoe"</span>,<span class="string">"safe"</span>,<span class="string">"safety_pin"</span>,<span class="string">"saltshaker"</span>,<span class="string">"sandal"</span>,<span class="string">"sarong"</span>,<span class="string">"sax"</span>,<span class="string">"scabbard"</span>,<span class="string">"scale"</span>,<span class="string">"school_bus"</span>,<span class="string">"schooner"</span>,<span class="string">"scoreboard"</span>,<span class="string">"screen"</span>,<span class="string">"screw"</span>,<span class="string">"screwdriver"</span>,<span class="string">"seat_belt"</span>,<span class="string">"sewing_machine"</span>,<span class="string">"shield"</span>,<span class="string">"shoe_shop"</span>,<span class="string">"shoji"</span>,<span class="string">"shopping_basket"</span>,<span class="string">"shopping_cart"</span>,<span class="string">"shovel"</span>,<span class="string">"shower_cap"</span>,<span class="string">"shower_curtain"</span>,<span class="string">"ski"</span>,<span class="string">"ski_mask"</span>,<span class="string">"sleeping_bag"</span>,<span class="string">"slide_rule"</span>,<span class="string">"sliding_door"</span>,<span class="string">"slot"</span>,<span class="string">"snorkel"</span>,<span class="string">"snowmobile"</span>,<span class="string">"snowplow"</span>,<span class="string">"soap_dispenser"</span>,<span class="string">"soccer_ball"</span>,<span class="string">"sock"</span>,<span class="string">"solar_dish"</span>,<span class="string">"sombrero"</span>,<span class="string">"soup_bowl"</span>,<span class="string">"space_bar"</span>,<span class="string">"space_heater"</span>,<span class="string">"space_shuttle"</span>,<span class="string">"spatula"</span>,<span class="string">"speedboat"</span>,<span class="string">"spider_web"</span>,<span class="string">"spindle"</span>,<span class="string">"sports_car"</span>,<span class="string">"spotlight"</span>,<span class="string">"stage"</span>,<span class="string">"steam_locomotive"</span>,<span class="string">"steel_arch_bridge"</span>,<span class="string">"steel_drum"</span>,<span class="string">"stethoscope"</span>,<span class="string">"stole"</span>,<span class="string">"stone_wall"</span>,<span class="string">"stopwatch"</span>,<span class="string">"stove"</span>,<span class="string">"strainer"</span>,<span class="string">"streetcar"</span>,<span class="string">"stretcher"</span>,<span class="string">"studio_couch"</span>,<span class="string">"stupa"</span>,<span class="string">"submarine"</span>,<span class="string">"suit"</span>,<span class="string">"sundial"</span>,<span class="string">"sunglass"</span>,<span class="string">"sunglasses"</span>,<span class="string">"sunscreen"</span>,<span class="string">"suspension_bridge"</span>,<span class="string">"swab"</span>,<span class="string">"sweatshirt"</span>,<span class="string">"swimming_trunks"</span>,<span class="string">"swing"</span>,<span class="string">"switch"</span>,<span class="string">"syringe"</span>,<span class="string">"table_lamp"</span>,<span class="string">"tank"</span>,<span class="string">"tape_player"</span>,<span class="string">"teapot"</span>,<span class="string">"teddy"</span>,<span class="string">"television"</span>,<span class="string">"tennis_ball"</span>,<span class="string">"thatch"</span>,<span class="string">"theater_curtain"</span>,<span class="string">"thimble"</span>,<span class="string">"thresher"</span>,<span class="string">"throne"</span>,<span class="string">"tile_roof"</span>,<span class="string">"toaster"</span>,<span class="string">"tobacco_shop"</span>,<span class="string">"toilet_seat"</span>,<span class="string">"torch"</span>,<span class="string">"totem_pole"</span>,<span class="string">"tow_truck"</span>,<span class="string">"toyshop"</span>,<span class="string">"tractor"</span>,<span class="string">"trailer_truck"</span>,<span class="string">"tray"</span>,<span class="string">"trench_coat"</span>,<span class="string">"tricycle"</span>,<span class="string">"trimaran"</span>,<span class="string">"tripod"</span>,<span class="string">"triumphal_arch"</span>,<span class="string">"trolleybus"</span>,<span class="string">"trombone"</span>,<span class="string">"tub"</span>,<span class="string">"turnstile"</span>,<span class="string">"typewriter_keyboard"</span>,<span class="string">"umbrella"</span>,<span class="string">"unicycle"</span>,<span class="string">"upright"</span>,<span class="string">"vacuum"</span>,<span class="string">"vase"</span>,<span class="string">"vault"</span>,<span class="string">"velvet"</span>,<span class="string">"vending_machine"</span>,<span class="string">"vestment"</span>,<span class="string">"viaduct"</span>,<span class="string">"violin"</span>,<span class="string">"volleyball"</span>,<span class="string">"waffle_iron"</span>,<span class="string">"wall_clock"</span>,<span class="string">"wallet"</span>,<span class="string">"wardrobe"</span>,<span class="string">"warplane"</span>,<span class="string">"washbasin"</span>,<span class="string">"washer"</span>,<span class="string">"water_bottle"</span>,<span class="string">"water_jug"</span>,<span class="string">"water_tower"</span>,<span class="string">"whiskey_jug"</span>,<span class="string">"whistle"</span>,<span class="string">"wig"</span>,<span class="string">"window_screen"</span>,<span class="string">"window_shade"</span>,<span class="string">"Windsor_tie"</span>,<span class="string">"wine_bottle"</span>,<span class="string">"wing"</span>,<span class="string">"wok"</span>,<span class="string">"wooden_spoon"</span>,<span class="string">"wool"</span>,<span class="string">"worm_fence"</span>,<span class="string">"wreck"</span>,<span class="string">"yawl"</span>,<span class="string">"yurt"</span>,<span class="string">"web_site"</span>,<span class="string">"comic_book"</span>,<span class="string">"crossword_puzzle"</span>,<span class="string">"street_sign"</span>,<span class="string">"traffic_light"</span>,<span class="string">"book_jacket"</span>,<span class="string">"menu"</span>,<span class="string">"plate"</span>,<span class="string">"guacamole"</span>,<span class="string">"consomme"</span>,<span class="string">"hot_pot"</span>,<span class="string">"trifle"</span>,<span class="string">"ice_cream"</span>,<span class="string">"ice_lolly"</span>,<span class="string">"French_loaf"</span>,<span class="string">"bagel"</span>,<span class="string">"pretzel"</span>,<span class="string">"cheeseburger"</span>,<span class="string">"hotdog"</span>,<span class="string">"mashed_potato"</span>,<span class="string">"head_cabbage"</span>,<span class="string">"broccoli"</span>,<span class="string">"cauliflower"</span>,<span class="string">"zucchini"</span>,<span class="string">"spaghetti_squash"</span>,<span class="string">"acorn_squash"</span>,<span class="string">"butternut_squash"</span>,<span class="string">"cucumber"</span>,<span class="string">"artichoke"</span>,<span class="string">"bell_pepper"</span>,<span class="string">"cardoon"</span>,<span class="string">"mushroom"</span>,<span class="string">"Granny_Smith"</span>,<span class="string">"strawberry"</span>,<span class="string">"orange"</span>,<span class="string">"lemon"</span>,<span class="string">"fig"</span>,<span class="string">"pineapple"</span>,<span class="string">"banana"</span>,<span class="string">"jackfruit"</span>,<span class="string">"custard_apple"</span>,<span class="string">"pomegranate"</span>,<span class="string">"hay"</span>,<span class="string">"carbonara"</span>,<span class="string">"chocolate_sauce"</span>,<span class="string">"dough"</span>,<span class="string">"meat_loaf"</span>,<span class="string">"pizza"</span>,<span class="string">"potpie"</span>,<span class="string">"burrito"</span>,<span class="string">"red_wine"</span>,<span class="string">"espresso"</span>,<span class="string">"cup"</span>,<span class="string">"eggnog"</span>,<span class="string">"alp"</span>,<span class="string">"bubble"</span>,<span class="string">"cliff"</span>,<span class="string">"coral_reef"</span>,<span class="string">"geyser"</span>,<span class="string">"lakeside"</span>,<span class="string">"promontory"</span>,<span class="string">"sandbar"</span>,<span class="string">"seashore"</span>,<span class="string">"valley"</span>,<span class="string">"volcano"</span>,<span class="string">"ballplayer"</span>,<span class="string">"groom"</span>,<span class="string">"scuba_diver"</span>,<span class="string">"rapeseed"</span>,<span class="string">"daisy"</span>,<span class="string">"yellow_ladys_slipper"</span>,<span class="string">"corn"</span>,<span class="string">"acorn"</span>,<span class="string">"hip"</span>,<span class="string">"buckeye"</span>,<span class="string">"coral_fungus"</span>,<span class="string">"agaric"</span>,<span class="string">"gyromitra"</span>,<span class="string">"stinkhorn"</span>,<span class="string">"earthstar"</span>,<span class="string">"hen-of-the-woods"</span>,<span class="string">"bolete"</span>,<span class="string">"ear"</span>,<span class="string">"toilet_tissue"</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(size, box)</span>:</span></span><br><span class="line">    dw = <span class="number">1.</span>/(size[<span class="number">0</span>])</span><br><span class="line">    dh = <span class="number">1.</span>/(size[<span class="number">1</span>])</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">1</span>])/<span class="number">2.0</span> - <span class="number">1</span></span><br><span class="line">    y = (box[<span class="number">2</span>] + box[<span class="number">3</span>])/<span class="number">2.0</span> - <span class="number">1</span></span><br><span class="line">    w = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    x = x*dw</span><br><span class="line">    w = w*dw</span><br><span class="line">    y = y*dh</span><br><span class="line">    h = h*dh</span><br><span class="line">    <span class="keyword">return</span> (x,y,w,h)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_annotation</span><span class="params">(year, image_id)</span>:</span></span><br><span class="line">    in_file = open(<span class="string">'VOCdevkit/VOC%s/Annotations/%s.xml'</span>%(year, image_id))</span><br><span class="line">    out_file = open(<span class="string">'VOCdevkit/VOC%s/labels/%s.txt'</span>%(year, image_id), <span class="string">'w'</span>)</span><br><span class="line">    tree=ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(<span class="string">'size'</span>)</span><br><span class="line">    w = int(size.find(<span class="string">'width'</span>).text)</span><br><span class="line">    h = int(size.find(<span class="string">'height'</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.iter(<span class="string">'object'</span>):</span><br><span class="line">        difficult = obj.find(<span class="string">'difficult'</span>).text</span><br><span class="line">        cls = obj.find(<span class="string">'name'</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes <span class="keyword">or</span> int(difficult)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">'bndbox'</span>)</span><br><span class="line">        b = (float(xmlbox.find(<span class="string">'xmin'</span>).text), float(xmlbox.find(<span class="string">'xmax'</span>).text), float(xmlbox.find(<span class="string">'ymin'</span>).text), float(xmlbox.find(<span class="string">'ymax'</span>).text))</span><br><span class="line">        bb = convert((w,h), b)</span><br><span class="line">        out_file.write(str(cls_id) + <span class="string">" "</span> + <span class="string">" "</span>.join([str(a) <span class="keyword">for</span> a <span class="keyword">in</span> bb]) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">wd = getcwd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> year, image_set <span class="keyword">in</span> sets:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'VOCdevkit/VOC%s/labels/'</span>%(year)):</span><br><span class="line">        os.makedirs(<span class="string">'VOCdevkit/VOC%s/labels/'</span>%(year))</span><br><span class="line">    image_ids = open(<span class="string">'VOCdevkit/VOC%s/ImageSets/Main/%s.txt'</span>%(year, image_set)).read().strip().split()</span><br><span class="line">    list_file = open(<span class="string">'%s_%s.txt'</span>%(year, image_set), <span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">for</span> image_id <span class="keyword">in</span> image_ids:</span><br><span class="line">        list_file.write(<span class="string">'%s/VOCdevkit/VOC%s/JPEGImages/%s.JPEG\n'</span>%(wd, year, image_id))</span><br><span class="line">        convert_annotation(year, image_id)</span><br><span class="line">    list_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#os.system("cat 2007_train.txt 2007_val.txt 2012_train.txt 2012_val.txt &gt; train.txt")</span></span><br><span class="line"><span class="comment">#os.system("cat 2007_train.txt 2007_val.txt 2007_test.txt 2012_train.txt 2012_val.txt &gt; train.all.txt")</span></span><br></pre></td></tr></table></figure><p>修改好后在该目录下运行命令：python voc_label.py，之后则在文件夹scripts\VOCdevkit\VOC2007下生成了文件夹lable。这里包含了类别和对应归一化后的位置（i guess，如有错请指正）。同时在scripts\下应该也生成了train_2007.txt这个文件，里面包含了所有训练样本的绝对路径。</p><p>修改.data文件，以cfg/voc.data为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 classes= 20</span><br><span class="line">2 train  = &lt;path-to-voc&gt;/train.txt</span><br><span class="line">3 valid  = &lt;path-to-voc&gt;2007_test.txt</span><br><span class="line">4 names = data/voc.names</span><br><span class="line">5 backup = backup</span><br></pre></td></tr></table></figure><p>使用自己的路径替换<path-to-voc>，例如我的配置如下：</path-to-voc></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classes= 1000</span><br><span class="line">train  = /home/teng/programmings/semap/darknet/scripts/2007_train.txt</span><br><span class="line">names = /home/teng/programmings/semap/darknet/data/voc.names</span><br><span class="line">backup = /home/teng/programmings/semap/darknet/backup</span><br></pre></td></tr></table></figure><p>修改.names文件，即训练的label：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tench</span><br><span class="line">goldfish</span><br><span class="line">great_white_shark</span><br><span class="line">...</span><br><span class="line">bolete</span><br><span class="line">ear</span><br><span class="line">toilet_tissue</span><br></pre></td></tr></table></figure><h1 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h1><p>做好了上述准备，就可以根据不同的网络设置（cfg文件）来训练了。在文件夹cfg中有很多cfg文件，应该跟caffe中的prototxt文件是一个意思。这里以yolo-voc.cfg为例，主要修改参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[net]</span><br><span class="line"><span class="comment"># Testing</span></span><br><span class="line"><span class="comment"># batch=1</span></span><br><span class="line"><span class="comment"># subdivisions=1    #训练时候把上面Testing的参数注释</span></span><br><span class="line"><span class="comment"># Training</span></span><br><span class="line">batch=64</span><br><span class="line">subdivisions=32     <span class="comment">#这个参数根据自己GPU的显存进行修改，显存不够就改大一些</span></span><br><span class="line">...                 <span class="comment">#因为训练时每批的数量 = batch/subdivisions</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">learning_rate=0.001  <span class="comment">#根据自己的需求还有训练速度学习率可以调整一下</span></span><br><span class="line">burn_in=1000</span><br><span class="line">max_batches = 30000  <span class="comment">#根据自己的需求还有训练速度max_batches可以调整一下</span></span><br><span class="line">policy=steps</span><br><span class="line">steps=10000,20000    <span class="comment">#跟着max_batches做相应调整</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">[convolutional]</span><br><span class="line">size=1</span><br><span class="line">stride=1</span><br><span class="line">pad=1</span><br><span class="line">filters=30         <span class="comment">#filters = 3*(classes + 5)</span></span><br><span class="line">activation=linear</span><br><span class="line"></span><br><span class="line">[yolo]</span><br><span class="line">mask = 0,1,2</span><br><span class="line">anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326</span><br><span class="line">classes=5          <span class="comment">#修改类别数</span></span><br><span class="line">num=9</span><br><span class="line">jitter=.3</span><br><span class="line">ignore_thresh = .5</span><br><span class="line">truth_thresh = 1</span><br><span class="line">random=1           <span class="comment">#显存小的话 =0</span></span><br><span class="line"><span class="comment">#这个文件的最下面有3个YOLO层，这里我才放上来了一个，这三个地方的classes做相应修改</span></span><br><span class="line"><span class="comment">#每个YOLO层的上一层的convolutional层的filters也要修改</span></span><br></pre></td></tr></table></figure><h1 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h1><p>下载预训练模型（权重）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://pjreddie.com/media/files/darknet53.conv.74</span><br></pre></td></tr></table></figure><p>训练：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./darknet detector train cfg/voc.data cfg/yolov3-voc.cfg darknet53.conv.74</span><br></pre></td></tr></table></figure><h1 id="训练过程参数详解"><a href="#训练过程参数详解" class="headerlink" title="训练过程参数详解"></a>训练过程参数详解</h1><p>Region xx: cfg文件中yolo-layer的索引；</p><p>Avg IOU:当前迭代中，预测的box与标注的box的平均交并比，越大越好，期望数值为1；</p><p>Class: 标注物体的分类准确率，越大越好，期望数值为1；</p><p>obj: 越大越好，期望数值为1；</p><p>No obj: 越小越好；</p><p>.5R: 以IOU=0.5为阈值时候的recall; recall = 检出的正样本/实际的正样本</p><p>0.75R: 以IOU=0.75为阈值时候的recall;</p><p>count:正样本数目。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolo/</a></li><li><a href="https://blog.csdn.net/lilai619/article/details/79695109" target="_blank" rel="noopener">https://blog.csdn.net/lilai619/article/details/79695109</a></li><li><a href="https://zhuanlan.zhihu.com/p/35490655" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35490655</a></li><li><a href="https://blog.csdn.net/ch_liu23/article/details/53558549" target="_blank" rel="noopener">https://blog.csdn.net/ch_liu23/article/details/53558549</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 深度学习 </category>
          
          <category> yolo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> yolo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UJI_LIB_DB数据集介绍</title>
      <link href="/2018/06/07/UJI-LIB-DB%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/06/07/UJI-LIB-DB%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="UJI-LIB-DB介绍"><a href="#UJI-LIB-DB介绍" class="headerlink" title="UJI_LIB_DB介绍"></a>UJI_LIB_DB介绍</h1><h2 id="论文出处"><a href="#论文出处" class="headerlink" title="论文出处"></a>论文出处</h2><blockquote><p>Mendoza-Silva, Germán Martín, Richter, Philipp, Torres-Sospedra, Joaquín, Lohan, Elena Simona, &amp; Huerta, Joaquín. (2017). Long-Term Wi-Fi fingerprinting dataset and supporting material (Version V1) [Data set]. Zenodo. <a href="http://doi.org/10.5281/zenodo.1066041" target="_blank" rel="noopener">http://doi.org/10.5281/zenodo.1066041</a></p></blockquote><h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">时间跨度：    15个月</span><br><span class="line">采集点数：    63504</span><br><span class="line">采集地点：    大学图书馆（3楼和5楼）</span><br><span class="line">AP放置位置：  天花板</span><br><span class="line">AP放置高度：  2.65米</span><br><span class="line">具体位置：    详见数据集</span><br><span class="line">AP数量：     448</span><br><span class="line">采集人员数量：1名</span><br><span class="line">采集方式：   右手放至胸前，每个采样点采集6个数据</span><br><span class="line">采集设备：   Samsung Galaxy S3</span><br><span class="line">采集软件：   自研</span><br></pre></td></tr></table></figure><p>数据库格式定义：</p><p>$$DB={D_{(m,k,n)}}$$</p><p>其中，$D_{(m,k,n)}$表示在第m月份捕获的第k类型的第n个数据集。每个数据及定义四个集合：RSS值、位置、时间和标识符集合。RSS值集合定义为：</p><p>$$R_{(p*s)*a}={r_{i,j}},$$</p><p>其中，p表示的是采样点的数量，s表示的是每个采样点采集的数据数量，a表示的是检测到的AP的数量，$r_{i,j}$表示的是第i个指纹第j个AP的RSS值。如果AP没有被检测得到，那么该AP的RSS值为100.</p><p>位置集合定义为：</p><p>$$L_{p*s}*3={(x_i,y_i,f_i)},$$</p><p>其中，$(x_i,y_i)$为二维坐标，$f_i$为第i个指纹被采集的楼层号码。</p><p>时间集合被定义为：</p><p>$$T_{(p*s)*1}={t_i},$$</p><p>其中，$t_i$是第i个指纹被采集的时间戳。</p><p>标识符集合被定义为：</p><p>$$ID_{(P*S)*1}={id_{i}},$$</p><p>其中，$id_{i}$为第i个指纹的标识符。例如：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/programming/datasetsUCI_LIB_DB_id.jpeg" alt></p><p>数据集文件目录：</p><p>(“trn” for training, “tst” for test, “rss”, “crd”, “tms” and “ids” for RSS values, positions, times and identifiers sets)</p><h2 id="采集方法"><a href="#采集方法" class="headerlink" title="采集方法"></a>采集方法</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www3.uji.es/~jtorres/databases.html" target="_blank" rel="noopener">http://www3.uji.es/~jtorres/databases.html</a></li><li><a href="https://zenodo.org/record/1066041#.WxjzeVOFPq0" target="_blank" rel="noopener">https://zenodo.org/record/1066041#.WxjzeVOFPq0</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac/Linux-Shell-批量重命名的方法总览</title>
      <link href="/2018/06/05/Mac-Linux-Shell-%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E8%A7%88/"/>
      <url>/2018/06/05/Mac-Linux-Shell-%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="删除所有的-bak-后缀"><a href="#删除所有的-bak-后缀" class="headerlink" title="删除所有的 .bak 后缀"></a>删除所有的 .bak 后缀</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="string">'s/\.bak$//'</span> *.bak</span><br></pre></td></tr></table></figure><h1 id="把-JPEG-文件后缀修改为-jpg"><a href="#把-JPEG-文件后缀修改为-jpg" class="headerlink" title="把 .JPEG 文件后缀修改为 .jpg"></a>把 .JPEG 文件后缀修改为 .jpg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="string">'s/\.JPEG$/\.jpg/'</span> *.JPEG</span><br></pre></td></tr></table></figure><h1 id="把所有文件的文件名改为小写"><a href="#把所有文件的文件名改为小写" class="headerlink" title="把所有文件的文件名改为小写"></a>把所有文件的文件名改为小写</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="string">'y/A-Z/a-z/'</span> *</span><br></pre></td></tr></table></figure><h1 id="将-abcd-jpg-重命名为-abcd-efg-jpg"><a href="#将-abcd-jpg-重命名为-abcd-efg-jpg" class="headerlink" title="将 abcd.jpg 重命名为 abcd_efg.jpg"></a>将 abcd.jpg 重命名为 abcd_efg.jpg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> *.jpg; <span class="keyword">do</span> mv <span class="string">"<span class="variable">$var</span>"</span> <span class="string">"<span class="variable">$&#123;var%.jpg&#125;</span>_efg.jpg"</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="将-abcd-efg-jpg-重命名为-abcd-lmn-jpg"><a href="#将-abcd-efg-jpg-重命名为-abcd-lmn-jpg" class="headerlink" title="将 abcd_efg.jpg 重命名为 abcd_lmn.jpg"></a>将 abcd_efg.jpg 重命名为 abcd_lmn.jpg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> *.jpg; <span class="keyword">do</span> mv <span class="string">"<span class="variable">$var</span>"</span> <span class="string">"<span class="variable">$&#123;var%_efg.jpg&#125;</span>_lmn.jpg"</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="把文件名中所有小写字母改为大写字母"><a href="#把文件名中所有小写字母改为大写字母" class="headerlink" title="把文件名中所有小写字母改为大写字母"></a>把文件名中所有小写字母改为大写字母</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `ls`; <span class="keyword">do</span> mv -f <span class="string">"<span class="variable">$var</span>"</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span> |tr a-z A-Z`; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="把格式-jpg-的文件改为-0-jpg"><a href="#把格式-jpg-的文件改为-0-jpg" class="headerlink" title="把格式 *_?.jpg 的文件改为 *_0?.jpg"></a>把格式 *_?.jpg 的文件改为 *_0?.jpg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `ls *_?.jpg`; <span class="keyword">do</span> mv <span class="string">"<span class="variable">$var</span>"</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span> |awk -F <span class="string">'_'</span> <span class="string">'&#123;print $1 "_0" $2&#125;'</span>`; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="把文件名的后四个字母变为-vzomik"><a href="#把文件名的后四个字母变为-vzomik" class="headerlink" title="把文件名的后四个字母变为 vzomik"></a>把文件名的后四个字母变为 vzomik</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `ls`; <span class="keyword">do</span> mv -f <span class="string">"<span class="variable">$var</span>"</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span> |sed <span class="string">'s/....$/vzomik/'</span>`; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="把-txt变成-txt-bak-的后缀"><a href="#把-txt变成-txt-bak-的后缀" class="headerlink" title="把.txt变成.txt_bak 的后缀"></a>把.txt变成.txt_bak 的后缀</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls *.txt|xargs -n1 -i&#123;&#125; mv &#123;&#125; &#123;&#125;_bak</span><br><span class="line"><span class="comment"># xargs -n1 –i&#123;&#125; 类似for循环，-n1意思是一个一个对象的去处理，-i&#123;&#125; 把前面的对象使用&#123;&#125;取代，mv &#123;&#125; &#123;&#125;_bak 相当于 mv 1.txt 1.txt_bak</span></span><br><span class="line"></span><br><span class="line">$ find ./*.txt -<span class="built_in">exec</span> mv &#123;&#125; &#123;&#125;_bak \;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令中也是把&#123;&#125;作为前面find出来的文件的替代符，后面的”\”为”;”的脱意符，不然shell会把分号作为该行命令的结尾.</span></span><br></pre></td></tr></table></figure><h1 id="批量替换文件名"><a href="#批量替换文件名" class="headerlink" title="批量替换文件名"></a>批量替换文件名</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">oldext=<span class="string">"JPG"</span></span><br><span class="line">newext=<span class="string">"jpg"</span></span><br><span class="line">dir=$(<span class="built_in">eval</span> <span class="built_in">pwd</span>)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls <span class="variable">$dir</span> | grep .<span class="variable">$oldext</span>)</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        name=$(ls <span class="variable">$file</span> | cut -d. -f1)</span><br><span class="line">        mv <span class="variable">$file</span> <span class="variable">$&#123;name&#125;</span>.<span class="variable">$newext</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"change JPG=====&gt;jpg done!"</span></span><br></pre></td></tr></table></figure><p>1.变量oldext和newext分别指定旧的扩展名和新的扩展名。dir指定文件所在目录；</p><p>2.“ls $dir | grep .$oldext”用来在指定目录dir中获取扩展名为旧扩展名的所有文件；</p><p>3.在循环体内先利用cut命令将文件名中“.”之前的字符串剪切出来，并赋值给name变量；接着将当前的文件名重命名为新的文件名。</p><p>通过这个脚本，所有照片的扩展名都成功修改。为了使这个脚本更具有通用型，我们可以增加几条read命令实现脚本和用户之间的交互。改进版的脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"old extension:"</span> oldext</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"new extension:"</span> newext</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"The directory:"</span> dir</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls <span class="variable">$dir</span> | grep .<span class="variable">$oldext</span>)</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        name=$(ls <span class="variable">$file</span> | cut -d. -f1)</span><br><span class="line">        mv <span class="variable">$file</span> <span class="variable">$&#123;name&#125;</span>.<span class="variable">$newext</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$name</span>.<span class="variable">$oldext</span> ====&gt; <span class="variable">$name</span>.<span class="variable">$newext</span>"</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"all files has been modified."</span></span><br></pre></td></tr></table></figure><p>修改后的脚本可以批量修改任意扩展名。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://edsionte.com/techblog/archives/category/shell%e7%bc%96%e7%a8%8b" target="_blank" rel="noopener">http://edsionte.com/techblog/archives/category/shell%e7%bc%96%e7%a8%8b</a></li><li><a href="https://my.oschina.net/musings/blog/380939" target="_blank" rel="noopener">https://my.oschina.net/musings/blog/380939</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运筹学书单</title>
      <link href="/2018/05/23/%E8%BF%90%E7%AD%B9%E5%AD%A6%E4%B9%A6%E5%8D%95/"/>
      <url>/2018/05/23/%E8%BF%90%E7%AD%B9%E5%AD%A6%E4%B9%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是运筹学"><a href="#什么是运筹学" class="headerlink" title="什么是运筹学"></a>什么是运筹学</h1><p>运筹学是20世纪三四十年代发展起来的一门新兴交叉学科。它主要研究人类对各种资源的运用及筹划，在满足一定约束的条件下，以期发挥有限资源的最大效益，达到总体最优的目标－－所谓运筹帷幄。最初由钱学森老先生引入中国，据说最开始的用途是优化航空／军工等领域。</p><p>别名：数学规划 (math programming)、优化 (optimization)、最优化理论、决策科学(Decision Science)等。</p><h1 id="运筹学的分支"><a href="#运筹学的分支" class="headerlink" title="运筹学的分支"></a>运筹学的分支</h1><ul><li><p>线性规划（Linear Programming）– 最简单和基础的优化问题，如上图，目标函数（max）和约束条件（s.t.）都是线性的，自变量x是实数变量，P问题（多项式时间可解）；或许有些读者没有学过线性代数，更简单的例子： min x1+x2  s.t. 3x1-4x2&gt; 5,  x1,x2&gt;=0。</p></li><li><p>非线性规划 (Nonlinear Programming)–目标函数或约束条件为非线性，例如2次函数；</p></li><li><p>凸优化 (Convex Optimization)–约束条件形成的可行域（feasible region）是凸的；</p></li><li><p>（混合）整数规划 (Mixed Integer Programming)–自变量有整数变量，NP难问题（指数级算法复杂度）。</p></li><li><p>半正定规划 (Semi-definite Programming)–每一个自变量x代表一个矩阵；</p></li><li><p>网络流问题（Network Flow Problems）–一个特殊的混合整数规划问题，满足一个节点流出流量=流入流（或许你听说过最大流最小割定理）；</p></li><li><p>动态规划(Dynamic Programming)、近似算法(Approximation Algorithms)、启发式算法（Heuristic Algorithms， Meta Heuristics）、遗传算法 (Generic Algorithms)–用来解例如整数规划等NP难优化问题的算法，后俩个通常只能得到局部最优解，最经典的当属最大流最小割定理衍生出来的一些最大流算法（全局最优）。被广泛得用在各个学科和领域，如人工智能；</p></li><li><p>鲁棒优化（Robust Optimization）–目标函数或约束条件有扰动（不确定性）的情况下，求解其最坏情况下的最优解；</p></li><li><p>多目标优化 (Muti-objective Optimization)–优化的目标函数是一个向量，通常通过引入权重权衡个目标函数，转化成单目标优化，或者寻找帕累托最优(Pareto Optimality) ；</p></li><li><p>双层优化（Bilevel Optimization）–和复合函数的概念类似，比如Max-Min Problem,在一个优化问题外嵌套另一个优化问题，通常用迭代法；</p></li><li><p>随机优化（Stochastic Programming）–加入了不确定的因素（通常以概率形式表现，目标函数变成求期望最大化）；</p></li><li><p>最优控制（Optimal Control）：严格说属于控制论的范畴，可以简单地把它理解为，优化问题中的变量由x变为f(x)，并且通常f是时间t的函数（或者状态state的函数），约束条件常有偏微分方程。也就是说，控制论期望通过解一个优化问题，得到一个最优的函数f（t），使得这个函数在全局（空间+时间）上是最优的。而运筹学通过解一个优化问题，得到的是最优解x，使得目标函数在一个确定性（deterministic，通常与t无关，或者可以理解为在t的某一时刻）的环境下是最优的。</p></li></ul><h1 id="课程书单"><a href="#课程书单" class="headerlink" title="课程书单"></a>课程书单</h1><h2 id="基础课程"><a href="#基础课程" class="headerlink" title="基础课程"></a>基础课程</h2><p>微积分、线性代数、编程语言（C,C++,Python等）、图论（可选）</p><h2 id="核心课程"><a href="#核心课程" class="headerlink" title="核心课程"></a>核心课程</h2><p>线性规划(最核心课程)、非线性规划（机器学习应用广泛）、（凸优化–工程系的必修课）、整数规划（决策问题中变量通常是整数，例如0,1变量）、网络流优化（物流、电网、通讯网络应用）、数学建模（可选）。</p><p>Linear Programing简略版，UCLA教授著：</p><p><a href="https://www.math.ucla.edu/~tom/LP.pdf" target="_blank" rel="noopener">LINEAR PROGRAMMING</a></p><p><a href="http://www.bioinfo.org.cn/~wangchao/maa/Numerical_Optimization.pdf" target="_blank" rel="noopener">Numerical Optimization</a>，西北大学和美国阿贡实验室著（他引2w次）。</p><h2 id="高级课程（Advanced）"><a href="#高级课程（Advanced）" class="headerlink" title="高级课程（Advanced）"></a>高级课程（Advanced）</h2><p>多目标优化、随机优化、鲁棒优化、启发式算法、近似算法、半正定规划等。</p><ul><li>优化：</li></ul><p>强烈推荐教材《Introduction to Linear Optimization》by D. Bertsimas and J. Tsitsiklis. 这是MIT两门研究生（博士和硕士）运筹学课程，15.081（6.251）和15.093，的教材。两位作者都是MIT运筹学中心ORC的教授，其中D.Bersimas是目前ORC的co-director之一，美国工程院院士（运筹优化领域）。这本书讲解非常详细，读起来比较愉快。</p><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><p>最后,应用或工程学科的朋友应更关心用运筹解决实际问题的流程，增加项目经验：</p><ul><li><p>拿到实际问题和数据，先搜索已有的经典模型（例如网络流模型），看看能不能往经典模型上靠。</p></li><li><p>没有已有模型，就尝试自己建立新的优化模型，建模的思路函数是尽量线性化、少整数变量、big M尽量小（把二次函数线性化的trick）、低次函数（Polynomial）。</p></li><li><p>把优化问题编程到优化软件或编程调用优化Library</p></li><li><p>根据求解速度和最优解，不断优化算法和模型，以提高求解效率。</p></li></ul><h1 id="其他Augue"><a href="#其他Augue" class="headerlink" title="其他Augue"></a>其他Augue</h1><h2 id="运筹学里面其实更重要的是建模。"><a href="#运筹学里面其实更重要的是建模。" class="headerlink" title="运筹学里面其实更重要的是建模。"></a>运筹学里面其实更重要的是建模。</h2><p>换言之，就是看现实问题和数学语言是怎么对应的。这个因为考试的原因，太容易被忽略了其重要性。</p><p>建模这事情说难不难说易不易。易在好像就是定义几个变量，定义一下变量之间的关系和目标函数。难在１.　对现实问题要看透：什么才是问题里面的最重要的因素，抓住重点 ２.　找到最合适的数学语言和它对应， ３.　模型要尽量容易解。</p><p>第一点是因问题而异的，没法聊。第二点是可以通过了解各种模型适用于刻画具有什么结构的问题来达到。运筹学里面有很多模型。举几个例子：１.　线性规划能表示所有有线性结构的问题，例如做采购，我们知道了每家供应商的固定价格和最大供应量，我们希望最小化成本，那总成本＝单价×数量，这个就是这个问题里面的线性关系。２.　整数规划能处理一些线性规划处理不了的问题。例如还是采购，假如选了某家供应商，每选定一个供应商，还要增加一个固定成本，于是我们就要多设一个变量来代表是不是选了这个供应商，这时候就需要整数限制。不然那个变量解出来等于０.５，我们只选半个它？３.　当现实问题涉及多个参与者，每个参与者都有自己优化的东西，这时候就涉及互动，就可以将博弈论派上用场了。４.　如果见到一个系统是随时间变化的，就可以考虑用最优控制。等等等等。懂了对自己身边的具体问题建模，再拿个软件解一下模型，对大部分人就够了。所以要看书或者看视频自学的话，第一步是，每一章只看前面讲建模（modeling或者formulation）那一节。够用了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/25579864?refer=operations-research" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25579864?refer=operations-research</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 运筹学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>colmap-posenet教程</title>
      <link href="/2018/05/17/colmap-posenet%E6%95%99%E7%A8%8B/"/>
      <url>/2018/05/17/colmap-posenet%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Colmap-教程"><a href="#Colmap-教程" class="headerlink" title="Colmap 教程"></a>Colmap 教程</h1><h1 id="Posenet-教程"><a href="#Posenet-教程" class="headerlink" title="Posenet 教程"></a>Posenet 教程</h1><h2 id="转换colmap数据至文本文件"><a href="#转换colmap数据至文本文件" class="headerlink" title="转换colmap数据至文本文件"></a>转换colmap数据至文本文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./colmap-path/build/src/exe/model_converter --input_path ./ --output_path ./ --ouput_type TXT</span><br></pre></td></tr></table></figure><h2 id="根据TXT文件生成posenet的训练数据集和测试数据集"><a href="#根据TXT文件生成posenet的训练数据集和测试数据集" class="headerlink" title="根据TXT文件生成posenet的训练数据集和测试数据集"></a>根据TXT文件生成posenet的训练数据集和测试数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Created on 2017年11月26日</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: teng</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReadLog</span><span class="params">(log_file)</span>:</span></span><br><span class="line">    lines = []</span><br><span class="line">    <span class="keyword">with</span> open(log_file, <span class="string">'r'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        lines=fin.readlines()</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    imagesFile = []</span><br><span class="line">    q = []</span><br><span class="line">    loc = []</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    count_data = <span class="number">0</span></span><br><span class="line">    lines = ReadLog(<span class="string">'images.txt'</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">4</span>:]:</span><br><span class="line">        <span class="keyword">if</span> count % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            data = line.strip().split()</span><br><span class="line">            imagesFile.append(str(data[<span class="number">9</span>]))</span><br><span class="line">            q.append([float(data[<span class="number">1</span>]), float(data[<span class="number">2</span>]), float(data[<span class="number">3</span>]), float(data[<span class="number">4</span>])])</span><br><span class="line">            loc.append([float(data[<span class="number">5</span>]), float(data[<span class="number">6</span>]), float(data[<span class="number">7</span>])])</span><br><span class="line">            count_data += <span class="number">1</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    randomTest = []</span><br><span class="line">    randomVal = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(count_data/<span class="number">10</span>)):</span><br><span class="line">        randomTest.append(random.randint(<span class="number">0</span>, count_data<span class="number">-1</span>))</span><br><span class="line">        randomVal.append(random.randint(<span class="number">0</span>, count_data<span class="number">-1</span>))</span><br><span class="line">     </span><br><span class="line">    output = open(<span class="string">'train.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    output1 = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    output2 = open(<span class="string">'val.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(loc)):</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> randomTest:</span><br><span class="line">            output1.write(<span class="string">"images/"</span> + str(imagesFile[i]) + <span class="string">" "</span> + str(loc[i][<span class="number">0</span>]) + <span class="string">" "</span> + \</span><br><span class="line">            str(loc[i][<span class="number">1</span>]) + <span class="string">" "</span> + str(loc[i][<span class="number">2</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">0</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">1</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">2</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">3</span>]) + <span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">elif</span> i <span class="keyword">in</span> randomVal:</span><br><span class="line">            output2.write(<span class="string">"images/"</span> + str(imagesFile[i]) + <span class="string">" "</span> + str(loc[i][<span class="number">0</span>]) + <span class="string">" "</span> + \</span><br><span class="line">            str(loc[i][<span class="number">1</span>]) + <span class="string">" "</span> + str(loc[i][<span class="number">2</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">0</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">1</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">2</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">3</span>]) + <span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.write(<span class="string">"images/"</span> + str(imagesFile[i]) + <span class="string">" "</span> + str(loc[i][<span class="number">0</span>]) + <span class="string">" "</span> + \</span><br><span class="line">            str(loc[i][<span class="number">1</span>]) + <span class="string">" "</span> + str(loc[i][<span class="number">2</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">0</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">1</span>]) + <span class="string">" "</span> + \</span><br><span class="line">                                str(q[i][<span class="number">2</span>]) + <span class="string">" "</span> + str(q[i][<span class="number">3</span>]) + <span class="string">"\n"</span>)</span><br><span class="line">    output.close()</span><br><span class="line">    output1.close()</span><br><span class="line">    output2.close()</span><br></pre></td></tr></table></figure><h1 id="posenet-教程"><a href="#posenet-教程" class="headerlink" title="posenet 教程"></a>posenet 教程</h1><h2 id="生成lmdb文件"><a href="#生成lmdb文件" class="headerlink" title="生成lmdb文件"></a>生成lmdb文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">caffe_root = <span class="string">'/home/teng/programmings/semap/caffe-posenet/'</span>  <span class="comment"># Change to your directory to caffe-posenet</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, caffe_root + <span class="string">'python'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> lmdb</span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">directory = <span class="string">'/home/teng/programmings/semap/caffe-posenet/posenet/models/611/'</span></span><br><span class="line">dataset = <span class="string">'train.txt'</span></span><br><span class="line"></span><br><span class="line">poses = []</span><br><span class="line">images = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(directory+dataset) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        fname, p0,p1,p2,p3,p4,p5,p6 = line.split()</span><br><span class="line">        p0 = float(p0)</span><br><span class="line">        p1 = float(p1)</span><br><span class="line">        p2 = float(p2)</span><br><span class="line">        p3 = float(p3)</span><br><span class="line">        p4 = float(p4)</span><br><span class="line">        p5 = float(p5)</span><br><span class="line">        p6 = float(p6)</span><br><span class="line">        poses.append((p0,p1,p2,p3,p4,p5,p6))</span><br><span class="line">        images.append(directory+fname)</span><br><span class="line"></span><br><span class="line">r = list(range(len(images)))</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line"><span class="keyword">print</span> <span class="string">'r = \n'</span></span><br><span class="line">random.shuffle(r)</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Creating PoseNet Dataset.'</span></span><br><span class="line">env = lmdb.open(<span class="string">'train_lmdb'</span>, map_size=int(<span class="number">1e12</span>))</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">    print(<span class="string">'i = &#123;&#125;, r = &#123;&#125;'</span>).format(i, len(r))</span><br><span class="line">    <span class="keyword">if</span> (count+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Saving image: '</span>, count+<span class="number">1</span></span><br><span class="line">    X = cv2.imread(images[i])</span><br><span class="line">    print(<span class="string">'images[i] = \n X = &#123;&#125;'</span>).format(images[i], X)</span><br><span class="line">    X = cv2.resize(X, (<span class="number">455</span>,<span class="number">256</span>))    <span class="comment"># to reproduce PoseNet results, please resize the images so that the shortest side is 256 pixels</span></span><br><span class="line">    X = np.transpose(X,(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    im_dat = caffe.io.array_to_datum(np.array(X).astype(np.uint8))</span><br><span class="line">    im_dat.float_data.extend(poses[i])</span><br><span class="line">    str_id = <span class="string">'&#123;:0&gt;10d&#125;'</span>.format(count)</span><br><span class="line">    <span class="keyword">with</span> env.begin(write=<span class="keyword">True</span>) <span class="keyword">as</span> txn:</span><br><span class="line">        txn.put(str_id, im_dat.SerializeToString())</span><br><span class="line">    count = count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">env.close()</span><br></pre></td></tr></table></figure><h3 id="test文件"><a href="#test文件" class="headerlink" title="test文件"></a>test文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">caffe_root = <span class="string">'/home/teng/programmings/semap/caffe-posenet/'</span>  <span class="comment"># Change to your directory to caffe-posenet</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>, caffe_root + <span class="string">'python'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> lmdb</span><br><span class="line"><span class="keyword">import</span> caffe</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">directory = <span class="string">'/home/teng/programmings/semap/caffe-posenet/posenet/models/611/'</span></span><br><span class="line">dataset = <span class="string">'test.txt'</span></span><br><span class="line"></span><br><span class="line">poses = []</span><br><span class="line">images = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(directory+dataset) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        fname, p0,p1,p2,p3,p4,p5,p6 = line.split()</span><br><span class="line">        p0 = float(p0)</span><br><span class="line">        p1 = float(p1)</span><br><span class="line">        p2 = float(p2)</span><br><span class="line">        p3 = float(p3)</span><br><span class="line">        p4 = float(p4)</span><br><span class="line">        p5 = float(p5)</span><br><span class="line">        p6 = float(p6)</span><br><span class="line">        poses.append((p0,p1,p2,p3,p4,p5,p6))</span><br><span class="line">        images.append(directory+fname)</span><br><span class="line"></span><br><span class="line">r = list(range(len(images)))</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line"><span class="keyword">print</span> <span class="string">'r = \n'</span></span><br><span class="line">random.shuffle(r)</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Creating PoseNet Dataset.'</span></span><br><span class="line">env = lmdb.open(<span class="string">'test_lmdb'</span>, map_size=int(<span class="number">1e12</span>))</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">    print(<span class="string">'i = &#123;&#125;, r = &#123;&#125;'</span>).format(i, len(r))</span><br><span class="line">    <span class="keyword">if</span> (count+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Saving image: '</span>, count+<span class="number">1</span></span><br><span class="line">    X = cv2.imread(images[i])</span><br><span class="line">    print(<span class="string">'images[i] = \n X = &#123;&#125;'</span>).format(images[i], X)</span><br><span class="line">    X = cv2.resize(X, (<span class="number">455</span>,<span class="number">256</span>))    <span class="comment"># to reproduce PoseNet results, please resize the images so that the shortest side is 256 pixels</span></span><br><span class="line">    X = np.transpose(X,(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    im_dat = caffe.io.array_to_datum(np.array(X).astype(np.uint8))</span><br><span class="line">    im_dat.float_data.extend(poses[i])</span><br><span class="line">    str_id = <span class="string">'&#123;:0&gt;10d&#125;'</span>.format(count)</span><br><span class="line">    <span class="keyword">with</span> env.begin(write=<span class="keyword">True</span>) <span class="keyword">as</span> txn:</span><br><span class="line">        txn.put(str_id, im_dat.SerializeToString())</span><br><span class="line">    count = count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">env.close()</span><br></pre></td></tr></table></figure><h2 id="计算均值文件"><a href="#计算均值文件" class="headerlink" title="计算均值文件"></a>计算均值文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./caffe-posenet-path/build/tools/compute_image_mean train_lmdb/ train.binaryproto</span><br><span class="line">$ ./caffe-posenet-path/biuld/tools/compute_image_mean test_lmdb/ test.binaryproto</span><br></pre></td></tr></table></figure><h2 id="修改训练配置文件"><a href="#修改训练配置文件" class="headerlink" title="修改训练配置文件"></a>修改训练配置文件</h2><h3 id="修改-train-bayesian-posenet-prototxt"><a href="#修改-train-bayesian-posenet-prototxt" class="headerlink" title="修改 train_bayesian_posenet.prototxt"></a>修改 train_bayesian_posenet.prototxt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">name: <span class="string">"GoogLeNet"</span></span><br><span class="line">layers &#123;</span><br><span class="line">  top: <span class="string">"data"</span></span><br><span class="line">  top: <span class="string">"label"</span></span><br><span class="line">  name: <span class="string">"data"</span></span><br><span class="line">  <span class="built_in">type</span>: DATA</span><br><span class="line">  data_param &#123;</span><br><span class="line">    <span class="built_in">source</span>: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/lmdb/train_lmdb/"</span> <span class="comment"># revised</span></span><br><span class="line">    batch_size: 64</span><br><span class="line">    backend: LMDB</span><br><span class="line">  &#125;</span><br><span class="line">  include &#123;</span><br><span class="line">    phase: TRAIN</span><br><span class="line">  &#125;</span><br><span class="line">  transform_param &#123;</span><br><span class="line">    mirror: <span class="literal">false</span></span><br><span class="line">    crop_size: 224</span><br><span class="line">    mean_file: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/lmdb/train.binaryproto"</span> <span class="comment"># revised</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layers &#123;</span><br><span class="line">  top: <span class="string">"data"</span></span><br><span class="line">  top: <span class="string">"label"</span></span><br><span class="line">  name: <span class="string">"data"</span></span><br><span class="line">  <span class="built_in">type</span>: DATA</span><br><span class="line">  data_param &#123;</span><br><span class="line">    <span class="built_in">source</span>: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/lmdb/test_lmdb"</span> <span class="comment"># revised</span></span><br><span class="line">    batch_size: 32</span><br><span class="line">    backend: LMDB</span><br><span class="line">  &#125;</span><br><span class="line">  include &#123;</span><br><span class="line">    phase: TEST</span><br><span class="line">  &#125;</span><br><span class="line">  transform_param &#123;</span><br><span class="line">    mirror: <span class="literal">false</span></span><br><span class="line">    crop_size: 224</span><br><span class="line">    mean_file: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/lmdb/test.binaryproto"</span> <span class="comment"># revised</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">layers &#123;</span><br><span class="line">    name: <span class="string">"slice_label"</span></span><br><span class="line">    <span class="built_in">type</span>: SLICE</span><br><span class="line">    bottom: <span class="string">"label"</span></span><br><span class="line">    top: <span class="string">"label_xyz"</span></span><br><span class="line">    top: <span class="string">"label_wpqr"</span></span><br><span class="line">    slice_param &#123;</span><br><span class="line">        slice_dim: 1</span><br><span class="line">        slice_point: 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="修改-solver-bayesian-posenet-prototxt"><a href="#修改-solver-bayesian-posenet-prototxt" class="headerlink" title="修改 solver_bayesian_posenet.prototxt"></a>修改 solver_bayesian_posenet.prototxt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">net: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/train/ train_bayesian_posenet.prototxt"</span> <span class="comment">#训练或者测试配置文件</span></span><br><span class="line">test_initialization: <span class="literal">false</span></span><br><span class="line">test_iter: 7 <span class="comment">#完成一次测试需要的迭代次数</span></span><br><span class="line">test_interval: 36 <span class="comment">#测试间隔</span></span><br><span class="line">base_lr: 0.00001 <span class="comment">#基础学习率</span></span><br><span class="line">lr_policy: <span class="string">"step"</span> <span class="comment">#学习率变化规律</span></span><br><span class="line">gamma: 0.9 <span class="comment">#学习率变化指数</span></span><br><span class="line">stepsize: 20000 <span class="comment">#学习率变化频率</span></span><br><span class="line">momentum: 0.9 <span class="comment">#动量</span></span><br><span class="line">display: 20 <span class="comment">#屏幕显示间隔</span></span><br><span class="line">max_iter: 120000 <span class="comment">#最大迭代次数</span></span><br><span class="line">solver_type: SGD</span><br><span class="line">weight_decay: 0.005 <span class="comment">#权重衰减</span></span><br><span class="line">snapshot: 5000 <span class="comment">#保存模型间隔</span></span><br><span class="line">snapshot_prefix: <span class="string">"/home/teng/programmings/semap/caffe-posenet/posenet/models/611/train/models/posenet"</span> <span class="comment">#权重衰减</span></span><br><span class="line">solver_mode: GPU <span class="comment">#是否使用GPU</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>训练样本</p><p>总共:2280个</p><p>batch_szie:64</p><p>将所有样本处理完一次（称为一代，即epoch)需要：2280/64=36 次迭代才能完成</p><p>所以这里将test_interval设置为36，即处理完一次所有的训练数据后，才去进行测试。所以这个数要大于等于36.<br>如果想训练100代，则最大迭代次数为3600；</p><p>测试样本</p><p>同理，如果有212个测试样本，batch_size为32，那么需要7次才能完整的测试一次。 所以test_iter为7；这个数要大于等于7.</p><p>学习率</p><p>学习率变化规律我们设置为随着迭代次数的增加，慢慢变低。总共迭代120000次，我们将变化6次，所以stepsize设置为120000/6=20000，即每迭代20000次，我们就降低一次学习率。</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./caffe-posenet-path/build/tools/caffe train -solver=examples/mnist/lenet_solver.prototxt 2&gt;&amp;1 | tee <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 从中断点的 snapshot 继续训练</span></span><br><span class="line">$ ./caffe-posenet-path/build/tools/caffe train -solver examples/mnist/lenet_solver.prototxt -snapshot examples/mnist/lenet_iter_5000.solverstate</span><br><span class="line"><span class="comment"># 观察各个阶段的运行时间可以使用</span></span><br><span class="line">$ ./caffe-posenet-path/build/tools/caffe time -model examples/mnist/lenet_train_test.prototxt -iterations 10</span><br><span class="line"><span class="comment"># 使用已有模型提取特征</span></span><br><span class="line">$ ./caffe-posenet-path/build/tools/extract_features.bin models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel examples/feature_extraction/train_val.prototxt fc7 examples/temp_features 10 lmdb</span><br></pre></td></tr></table></figure><p>1） fc7表示提取全连接第七层特征，conv5表示提取第五个卷积层的特征， examples/temp_features表示存放结果的目录（目录不需要提前构建）</p><p>2.）10：输入的包的数量，我们test时的batchsize是50，这里输入10，表示会提取50*10=500张图片的特征</p><p>3.）imageNet网络有很多层（data conv1 conv2 conv3 conv4 conv5 fc6 fc7 fc8 prob），我们可以选取任意一层；fc7是最后一层特征，fc8输出的就是softmax的输出了，所以提取fc7层</p><p>4.）lmdb：输出的数据格式是lmdb，还可以是leveldb</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> colmap-posenet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> colmap-posenet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-深度学习环境配置-Centos</title>
      <link href="/2018/04/08/linux-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-Centos/"/>
      <url>/2018/04/08/linux-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-Centos/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos-7-环境安装"><a href="#Centos-7-环境安装" class="headerlink" title="Centos 7 环境安装"></a>Centos 7 环境安装</h1><p>下载<a href="https://www.centos.org/download/" target="_blank" rel="noopener">Centos 7</a>安装镜像，制作启动优盘。</p><p>Install CentOS 7 安装CentOS 7。</p><ul><li><p>第一步，配置日期、语言和键盘。</p></li><li><p>第二步，选择-系统-安装位置，进入磁盘分区界面。选择-其它存储选项-分区-我要配置分区，点左上角的“完成”，进入下面的界面:</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分区前先规划好:</span></span><br><span class="line"><span class="comment"># swap #交换分区，一般设置为内存的2倍</span></span><br><span class="line"><span class="comment"># / #剩余所有空间</span></span><br><span class="line"><span class="comment"># 挂载点：swap, 期望容量：2048</span></span><br></pre></td></tr></table></figure><p>点左上角的“完成”，接受更改。</p><ul><li><p>第三步，在这步中，你可以通过选择列表中安全配置来设置你的系统“安全策略Security Policy”，点击选择配置按钮来选择你想要的安全配置并点击“应用安全策略Apply security policy”按钮到 On。点击“完成Done”按钮后继续安装流程。</p></li><li><p>第四步，点击“软件选择Software Selection”按钮来配置你的基础机器环境。左边的列表是你可以选择安装桌面环境（Gnome、KDE Plasma 或者创意工作站）或者安装一个服务器环境（Web 服务器、计算节点、虚拟化主机、基础设施服务器、带图形界面的服务器或者文件及打印服务器）或者执行一个最小化的安装。为了随后能自定义你的系统，选择最小化安装并附加兼容库，点击“完成Done”按钮继续。对于完整的 Gnome 或者 KDE 桌面环境。选择：</p><ul><li>GNOM Applications</li><li>Internet Applications</li><li>Compatibility Libries</li><li>Compatibility Libries</li></ul></li><li><p>第五步，设置你的主机名并启用网络服务。点击“网络和主机名Network &amp; Hostname”，在主机名中输入你的 FQDN（完整限定网域名称），如果你在局域网中有一个 DHCP 服务器，将以太网按钮从 OFF 切换到 ON 来激活网络接口。为了静态配置你的网络接口，点击“配置Configure”按钮，添加 IP 设置，并点击“保存Save”按钮来应用更改。完成后，点击“完成Done”按钮来回到主安装菜单。</p></li><li><p>第六步，最后检查下所有到目前为止的配置，如果一切没问题，点击“开始安装Begin Installation”按钮开始安装</p></li></ul><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="Centos-7-更换阿里源"><a href="#Centos-7-更换阿里源" class="headerlink" title="Centos 7 更换阿里源"></a>Centos 7 更换阿里源</h2><p>备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><p>下载新的CentOS-Base.repo 到/etc/yum.repos.d/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS 5</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 6</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 7</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>之后运行yum makecache生成缓存.</p><h2 id="安装常用工具"><a href="#安装常用工具" class="headerlink" title="安装常用工具"></a>安装常用工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nano vim wget curl net-tools lsof gcc gcc-c++ll</span><br></pre></td></tr></table></figure><p>等待安装完成即可。如果提示有错可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>重建缓存即可。</p><h1 id="NVIDIA显卡驱动安装"><a href="#NVIDIA显卡驱动安装" class="headerlink" title="NVIDIA显卡驱动安装"></a>NVIDIA显卡驱动安装</h1><h2 id="检查是否安装了GPU"><a href="#检查是否安装了GPU" class="headerlink" title="检查是否安装了GPU"></a>检查是否安装了GPU</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure><h2 id="安装kernel-devel和kernel-headers"><a href="#安装kernel-devel和kernel-headers" class="headerlink" title="安装kernel-devel和kernel-headers"></a>安装kernel-devel和kernel-headers</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install kernel-devel  </span><br><span class="line">yum install kernel-headers</span><br></pre></td></tr></table></figure><h2 id="修改-etc-modprobe-d-blacklist-conf-文件，以阻止-nouveau-模块的加载"><a href="#修改-etc-modprobe-d-blacklist-conf-文件，以阻止-nouveau-模块的加载" class="headerlink" title="修改/etc/modprobe.d/blacklist.conf 文件，以阻止 nouveau 模块的加载"></a>修改/etc/modprobe.d/blacklist.conf 文件，以阻止 nouveau 模块的加载</h2><p>方法： 添加blacklist nouveau，注释掉blacklist nvidiafb（如果存在）<br>blacklist.conf不存在时，执行下面的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo -e "blacklist nouveau\noptions nouveau modeset=0" &gt; /etc/modprobe.d/blacklist.conf</span></span><br></pre></td></tr></table></figure><h2 id="重新建立initramfs-image文件"><a href="#重新建立initramfs-image文件" class="headerlink" title="重新建立initramfs image文件"></a>重新建立initramfs image文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.bak</span></span><br><span class="line"><span class="comment"># dracut /boot/initramfs-$(uname -r).img $(uname -r)</span></span><br></pre></td></tr></table></figure><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt +F2    <span class="comment">#纯文本命令模式  </span></span><br><span class="line">登陆----获取root权限  </span><br><span class="line">init 3  </span><br><span class="line">切换至安装包文件夹  </span><br><span class="line">./NVIDIA-Linux-x86_64-375.66.run   <span class="comment">#根据提示安装  </span></span><br><span class="line">cuda_8.0.61_375.26_linux.run   <span class="comment">#根据提示安装</span></span><br></pre></td></tr></table></figure><h2 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -i cuda-repo-rhel7-8-0-local-ga2-8.0.61-1.x86_64.rpm</span><br><span class="line">$ sudo yum clean all</span><br><span class="line">$ sudo yum install cuda</span><br></pre></td></tr></table></figure><p>报错了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error: Package: 1:nvidia-kmod-375.26-2.el7.x86_64 (cuda-8-0-local-ga2)</span><br><span class="line">           Requires: dkms</span><br><span class="line"> You could try using --skip-broken to work around the problem</span><br><span class="line"> You could try running: rpm -Va --nofiles --nodigest</span><br></pre></td></tr></table></figure><p>缺少2个包，装第一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/yum.repos.d/linuxtech.testing.repo</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[linuxtech-testing]</span><br><span class="line">name=LinuxTECH Testing</span><br><span class="line">baseurl=http://pkgrepo.linuxtech.net/el6/testing/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://pkgrepo.linuxtech.net/el6/release/RPM-GPG-KEY-LinuxTECH.NET</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum --enablerepo=linuxtech-testing install libvdpau</span><br></pre></td></tr></table></figure><p>第二个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install --enablerepo=epel dkms</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.bashrc </span><br><span class="line"><span class="comment">#写入bashrc文件保存  </span></span><br><span class="line"><span class="comment">#gpu driver  </span></span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda-8.0  </span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-8.0/bin:<span class="variable">$PATH</span>  </span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-8.0/lib64:<span class="variable">$LD_LIBRARY_PATH</span>  </span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"/usr/local/cuda-8.0/lib:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>"</span> </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://my.oschina.net/u/2449787/blog/778145" target="_blank" rel="noopener">https://my.oschina.net/u/2449787/blog/778145</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Linux </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git教程</title>
      <link href="/2018/04/06/git%E6%95%99%E7%A8%8B/"/>
      <url>/2018/04/06/git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Github常用命令总结"><a href="#Github常用命令总结" class="headerlink" title="Github常用命令总结"></a>Github常用命令总结</h1><h2 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h2><p>本小节将远程仓库变为自己可推送数据的仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/schacon/ticgit.git</span><br><span class="line">$ <span class="built_in">cd</span> grit</span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote add pb git://github.com/paulboone/ticgit.git</span><br><span class="line">$ git fetch pb</span><br><span class="line">$ git push origin master</span><br><span class="line">$ git remote show origin</span><br></pre></td></tr></table></figure><h1 id="Git命令总结"><a href="#Git命令总结" class="headerlink" title="Git命令总结"></a>Git命令总结</h1><ul><li>git init  命令把这个目录变成Git可以管理的仓库</li><li>git add  文件添加到仓库</li><li>git commit  文件提交到仓库</li><li>git log  历史记录</li><li>git log –pretty=oneline  历史记录</li><li>HEAD  当前版本</li><li>HEAD^  上一个版本</li><li>HEAD^^  上上一个版本</li><li>HEAD~100  往上100个版本</li><li>git reset –hard HEAD^  回退到上一个版本</li><li>git reflog  记录你的每一次命令</li><li>git diff HEAD – readme.txt  查看工作区和版本库里面最新版本的区别</li><li>git status  版本的状态</li><li>git checkout – file  丢弃工作区的修改</li><li>git reset HEAD file  暂存区的修改撤销掉（unstage），重新放回工作区</li><li>git reset  既可以回退版本，也可以把暂存区的修改回退到工作区</li><li>git rm  从版本库中删除该文件</li><li>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:michaelliao/learngit.git  关联远程库</li><li>git push -u origin master  本地库的所有内容推送到远程库上</li><li>git push  本地库的内容推送到远程</li><li>git push origin master  推送最新修改</li><li>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:michaelliao/gitskills.git  克隆一个本地库</li><li>git checkout -b dev  创建dev分支，然后切换到dev分支</li><li>git branch  查看当前分支</li><li>git checkout master  切换回master分支</li><li>git merge dev  把dev分支的工作成果合并到master分支上</li><li>git merge  合并指定分支到当前分支</li><li>git branch -d dev  删除dev分支</li><li>git branch <name>  创建分支</name></li><li>git checkout <name>  切换分支</name></li><li>git log –grap  分支合并图</li><li>git merge –no-ff -m “merge with no-ff” dev  强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息</li><li>git stash  把当前工作现场“储藏”起来，等以后恢复现场后继续工作</li><li>git stash list  工作现场</li><li>git stash apply  恢复stash内容并不删除</li><li>git stash drop  删除工作现场</li><li>git stash pop  恢复的同时把stash内容也删了</li><li>git branch -D <name>  丢弃一个没有被合并过的分支</name></li><li>git remote  查看远程库的信息</li><li>git remote -v  显示更详细的信息</li><li>git pull  最新的提交从origin/dev抓下来</li><li>git branch –set-upstream dev origin/dev  git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接，建立本地分支和远程分支的关联</li><li>git checkout -b branch-name origin/branch-name  在本地创建和远程分支对应的分支，本地和远程分支的名称最好一致</li><li>git tag <name>  打一个新标签</name></li><li>git tag  查看所有标签</li><li>git log –pretty=oneline –abbrev-commit  找到历史提交的commit id</li><li>git show <tagname>  查看标签信息</tagname></li><li>git tag -a <tagname> -m “blablabla…”  指定标签信息</tagname></li><li>git tag -s <tagname> -m “blablabla…”  用PGP签名标签</tagname></li><li>git push origin <tagname>  推送某个标签到远程</tagname></li><li>git push origin –tags  一次性推送全部尚未推送到远程的本地标签</li><li>git tag -d <tagname>  删除一个本地标签</tagname></li><li>git push origin :refs/tags/<tagname>  删除一个远程标签</tagname></li><li>git config –global alias.st status  告诉Git，以后st就表示status </li></ul><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><ul><li><p>Linux上安装Git</p><p>  $ sudo apt-get install git</p></li><li><p>Mac OS X上安装Git</p><p>  $ brew install git</p></li><li><p>Windows上安装Git</p><p>  在Windows上使用Git，可以从Git官网直接下载安装程序，（网速慢的同学请移步国内镜像），然后按默认选项安装即可。</p><p>  安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p></li><li><p>安装完成后，还需要最后一步设置，在命令行输入：</p><p>  $ git config –global user.name “Your Name”</p><p>  $ git config –global user.email “<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“</p><p>  因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>  注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></li></ul><h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>版本库又名仓库，英文名repository。首先，选择一个合适的地方，创建一个空目录：</p><pre><code>$ mkdir learngit$ cd learngit$ pwd/Users/michael/learngit</code></pre><p>第二步，通过git init命令把这个目录变成Git可以管理的仓库：</p><pre><code>$ git initInitialized empty Git repository in /Users/michael/learngit/.git/</code></pre><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。</p><p>把文件添加到版本库,现在我们编写一个readme.txt文件，内容如下：</p><pre><code>Git is a version control system.Git is free software.</code></pre><p>用命令git add告诉Git，把文件添加到仓库：</p><pre><code>$ git add readme.txt</code></pre><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p>用命令git commit告诉Git，把文件提交到仓库：</p><pre><code>$ git commit -m &quot;wrote a readme file&quot;[master (root-commit) cb926e7] wrote a readme file1 file changed, 2 insertions(+)create mode 100644 readme.txt</code></pre><p>简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。</p><p>为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：</p><pre><code>$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m &quot;add 3 files.&quot;</code></pre><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看</p><pre><code>$ git logcommit 3628164fb26d48395383f8f31179f24e0882e1e0Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Tue Aug 20 15:11:49 2013 +0800append GPLcommit ea34578d5496d7dd233c827ed32a8cd576c5ee85Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Tue Aug 20 14:53:12 2013 +0800add distributedcommit cb926e7ea50ad11b8f9e909c05226233bf755030Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Mon Aug 19 17:51:55 2013 +0800wrote a readme file</code></pre><p>git log命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是append GPL，上一次是add distributed，最早的一次是wrote a readme file。<br>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上–pretty=oneline参数：</p><pre><code>$ git log --pretty=oneline3628164fb26d48395383f8f31179f24e0882e1e0 append GPLea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributedcb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file</code></pre><p>需要友情提示的是，你看到的一大串类似3628164…882e1e0的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p><p>好了，现在我们启动时光穿梭机，准备把readme.txt回退到上一个版本，也就是“add distributed”的那个版本，怎么做呢？</p><p>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164…882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p><p>现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：</p><pre><code>$ git reset --hard HEAD^HEAD is now at ea34578 add distributed</code></pre><p>看看readme.txt的内容是不是版本add distributed：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software.</code></pre><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？</p><p>在Git中，总是有后悔药可以吃的。当你用$ git reset –hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：</p><pre><code>$ git reflogea34578 HEAD@{0}: reset: moving to HEAD^3628164 HEAD@{1}: commit: append GPLea34578 HEAD@{2}: commit: add distributedcb926e7 HEAD@{3}: commit (initial): wrote a readme file</code></pre><h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><ul><li><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p></li><li><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p></li><li><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p></li></ul><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了</p><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了</p><p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：</p><pre><code>$ git rm test.txtrm &apos;test.txt&apos;$ git commit -m &quot;remove test.txt&quot;[master d17efd8] remove test.txt 1 file changed, 1 deletion(-) delete mode 100644 test.txt</code></pre><p> 现在，文件就从版本库中被删除了。</p><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><pre><code>$ git checkout -- test.txt</code></pre><p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><h1 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h1><p>在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库</p><p>目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：</p><pre><code>$ git remote add origin git@github.com:michaelliao/learngit.git</code></pre><p>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><pre><code>$ git push -u origin masterCounting objects: 19, done.Delta compression using up to 4 threads.Compressing objects: 100% (19/19), done.Writing objects: 100% (19/19), 13.73 KiB, done.</code></pre><p>   Total 23 (delta 6), reused 0 (delta 0)<br>   To <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:michaelliao/learngit.git</p><pre><code>* [new branch]      master -&gt; masterBranch master set up to track remote branch master from origin.</code></pre><p>把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>从现在起，只要本地作了提交，就可以通过命令：</p><pre><code>$ git push origin master</code></pre><p>把本地master分支的最新修改推送至GitHub</p><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><ol><li>原理：</li></ol><p>在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点，每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长</p><p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev，你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变</p><p>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并，所以Git合并分支也很快！就改改指针，工作区内容也不变！合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：</p><ol start="2"><li>实战</li></ol><p>首先，我们创建dev分支，然后切换到dev分支：</p><pre><code>$ git checkout -b devSwitched to a new branch &apos;dev&apos;</code></pre><p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：</p><pre><code>$ git branch dev$ git checkout devSwitched to branch &apos;dev&apos;</code></pre><p>然后，用git branch命令查看当前分支</p><pre><code>$ git branch* dev  master</code></pre><p>git branch命令会列出所有分支，当前分支前面会标一个*号。</p><p>然后，我们就可以在dev分支上正常提交</p><pre><code>$ git add readme.txt $ git commit -m &quot;branch test&quot;[dev fec145a] branch test 1 file changed, 1 insertion(+)</code></pre><p>现在，dev分支的工作完成，我们就可以切换回master分支</p><pre><code>$ git checkout masterSwitched to branch &apos;master&apos;</code></pre><p>切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变</p><p>现在，我们把dev分支的工作成果合并到master分支上：</p><pre><code>$ git merge devUpdating d17efd8..fec145aFast-forward readme.txt |    1 + 1 file changed, 1 insertion(+)</code></pre><p>git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。</p><p>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。</p><p>合并完成后，就可以放心地删除dev分支了：</p><pre><code>$ git branch -d devDeleted branch dev (was fec145a).</code></pre><p>删除后，查看branch，就只剩下master分支了：</p><pre><code>$ git branch* master</code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。</p><ol start="3"><li>小结</li></ol><p>Git鼓励大量使用分支：</p><p>查看分支：git branch</p><p>创建分支：git branch <name></name></p><p>切换分支：git checkout <name></name></p><p>创建+切换分支：git checkout -b <name></name></p><p>合并某分支到当前分支：git merge <name></name></p><p>删除分支：git branch -d <name></name></p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>用git log –graph命令可以看到分支合并图。</p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p>下面我们实战一下–no-ff方式的git merge：</p><p>首先，仍然创建并切换dev分支：</p><pre><code>$ git checkout -b devSwitched to a new branch &apos;dev&apos;</code></pre><p>修改readme.txt文件，并提交一个新的commit：</p><pre><code>$ git add readme.txt $ git commit -m &quot;add merge&quot;[dev 6224937] add merge 1 file changed, 1 insertion(+)</code></pre><p>现在，我们切换回master：</p><p>   $ git checkout master<br>   Switched to branch ‘master’<br>准备合并dev分支，请注意–no-ff参数，表示禁用Fast forward：</p><pre><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; devMerge made by the &apos;recursive&apos; strategy. readme.txt |    1 + 1 file changed, 1 insertion(+)</code></pre><p>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</p><p>合并后，我们用git log看看分支历史：</p><pre><code> $ git log --graph --pretty=oneline --abbrev-commit*   7825a50 merge with no-ff|\| * 6224937 add merge|/*   59bc1cb conflict fixed...</code></pre><p>可以看到，不使用Fast forward模式，merge后就像这样：</p><p>分支策略<br>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p><h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交，并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p><pre><code>$ git stashSaved working directory and index state WIP on dev: 6224937 add mergeHEAD is now at 6224937 add merge</code></pre><p>现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p><p>首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：</p><pre><code>$ git checkout masterSwitched to branch &apos;master&apos;Your branch is ahead of &apos;origin/master&apos; by 6 commits.$ git checkout -b issue-101Switched to a new branch &apos;issue-101&apos;</code></pre><p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p><pre><code>$ git add readme.txt $ git commit -m &quot;fix bug 101&quot;[issue-101 cc17032] fix bug 101 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：</p><pre><code>$ git checkout masterSwitched to branch &apos;master&apos;Your branch is ahead of &apos;origin/master&apos; by 2 commits.$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101Merge made by the &apos;recursive&apos; strategy. readme.txt |    2 +- 1 file changed, 1 insertion(+), 1 deletion(-)$ git branch -d issue-101Deleted branch issue-101 (was cc17032).</code></pre><p>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！</p><pre><code>$ git checkout devSwitched to branch &apos;dev&apos;$ git status# On branch devnothing to commit (working directory clean)</code></pre><p>工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：</p><pre><code>$ git stash liststash@{0}: WIP on dev: 6224937 add merge</code></pre><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><p>一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；</p><p>另一种方式是用git stash pop，恢复的同时把stash内容也删了：</p><pre><code>$ git stash pop# On branch dev# Changes to be committed:#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)##       new file:   hello.py## Changes not staged for commit:#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)##       modified:   readme.txt#Dropped refs/stash@{0} (f624f8e5f082f2df2bed8a4e09c12fd2943bdd40)</code></pre><p>再用git stash list查看，就看不到任何stash内容了：</p><pre><code>$ git stash list</code></pre><p>你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：</p><pre><code>$ git stash apply stash@{0}</code></pre><h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><p>软件开发中，总有无穷无尽的新的功能要不断添加进来。</p><p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p><p>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p><p>于是准备开发：</p><pre><code>$ git checkout -b feature-vulcanSwitched to a new branch &apos;feature-vulcan&apos;</code></pre><p>5分钟后，开发完毕：</p><pre><code>$ git add vulcan.py$ git status# On branch feature-vulcan# Changes to be committed:#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)##       new file:   vulcan.py#$ git commit -m &quot;add feature vulcan&quot;[feature-vulcan 756d4af] add feature vulcan 1 file changed, 2 insertions(+) create mode 100644 vulcan.py</code></pre><p>切回dev，准备合并：</p><pre><code>$ git checkout dev</code></pre><p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p><p>但是，就在此时，接到上级命令，因经费不足，新功能必须取消！虽然白干了，但是这个分支还是必须就地销毁：</p><pre><code>$ git branch -d feature-vulcanerror: The branch &apos;feature-vulcan&apos; is not fully merged.If you are sure you want to delete it, run &apos;git branch -D feature-vulcan&apos;.</code></pre><p>销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。</p><p>现在我们强行删除：</p><pre><code>$ git branch -D feature-vulcanDeleted branch feature-vulcan (was 756d4af).</code></pre><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p><p>要查看远程库的信息，用git remote：</p><pre><code>$ git remoteorigin</code></pre><p>或者，用git remote -v显示更详细的信息</p><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><pre><code>$ git push origin master</code></pre><p>如果要推送其他分支，比如dev，就改成：</p><pre><code>$ git push origin dev</code></pre><p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看：</p><pre><code>$ git branch* master* </code></pre><p>现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：</p><pre><code>$ git checkout -b dev origin/dev</code></pre><p>现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程</p><p>你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p><pre><code>$ git add hello.py $ git commit -m &quot;add coding: utf-8&quot;[dev bd6ae48] add coding: utf-8 1 file changed, 1 insertion(+) $ git push origin devTo git@github.com:michaelliao/learngit.git ! [rejected]        dev -&gt; dev (non-fast-forward)error: failed to push some refs to &apos;git@github.com:michaelliao/learngit.git&apos;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Merge the remote changes (e.g. &apos;git pull&apos;)hint: before pushing again.hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</code></pre><p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：</p><pre><code>$ git pullremote: Counting objects: 5, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 3 (delta 0)Unpacking objects: 100% (3/3), done.From github.com:michaelliao/learngit   fc38031..291bea8  dev        -&gt; origin/devThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for details    git pull &lt;remote&gt; &lt;branch&gt;If you wish to set tracking information for this branch you can do so with:    git branch --set-upstream dev origin/&lt;branch&gt;</code></pre><p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</p><pre><code>$ git branch --set-upstream dev origin/devBranch dev set up to track remote branch dev from origin.</code></pre><p>再pull：</p><pre><code>$ git pullAuto-merging hello.pyCONFLICT (content): Merge conflict in hello.pyAutomatic merge failed; fix conflicts and then commit the result.</code></pre><p>这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：</p><pre><code>$ git commit -m &quot;merge &amp; fix hello.py&quot;[dev adca45d] merge &amp; fix hello.py$ git push origin devCounting objects: 10, done.Delta compression using up to 4 threads.Compressing objects: 100% (5/5), done.Writing objects: 100% (6/6), 747 bytes, done.Total 6 (delta 0), reused 0 (delta 0)To git@github.com:michaelliao/learngit.git   291bea8..adca45d  dev -&gt; dev</code></pre><p>因此，多人协作的工作模式通常是这样：</p><p>首先，可以试图用git push origin branch-name推送自己的修改；</p><ol><li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p></li><li><p>如果合并有冲突，则解决冲突，并在本地提交；</p></li><li><p>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</p></li><li><p>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin/branch-name。</p></li></ol><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><p>小结</p><ul><li><p>查看远程库信息，使用git remote -v；</p></li><li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p></li><li><p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</p></li><li><p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</p></li><li><p>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</p></li><li><p>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li><li><a href="https://git-scm.com" target="_blank" rel="noopener">https://git-scm.com</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ILSVRC2015数据集转VOC2007数据集格式</title>
      <link href="/2018/04/05/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/"/>
      <url>/2018/04/05/ILSVRC2015%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACVOC2007%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="下载imageNet2015数据集"><a href="#下载imageNet2015数据集" class="headerlink" title="下载imageNet2015数据集"></a>下载imageNet2015数据集</h1><p>image-net官网下载：image-net.org</p><h1 id="VOC2007数据格式介绍"><a href="#VOC2007数据格式介绍" class="headerlink" title="VOC2007数据格式介绍"></a>VOC2007数据格式介绍</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── Annotations</span><br><span class="line">│   ├── 000001.xml</span><br><span class="line">│   └── 000002.xml</span><br><span class="line">|   |__ ...</span><br><span class="line">├── ImageSets</span><br><span class="line">│   └── Main</span><br><span class="line">│       ├── test.txt</span><br><span class="line">│       ├── train.txt</span><br><span class="line">│       └── val.txt</span><br><span class="line">└── JPEGImages</span><br><span class="line">    ├── 000001.jpg</span><br><span class="line">    └── 000002.jpg</span><br><span class="line">    |__ ...</span><br></pre></td></tr></table></figure><p>JPEGImages文件夹中包含了PASCAL VOC所提供的所有的图片信息，包括了训练图片和测试图片。</p><p>Annotations文件夹中存放的是xml格式的标签文件，每一个xml文件都对应于JPEGImages文件夹中的一张图片。</p><p>xml文件的具体格式如下：（对于2007_000392.jpg）:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">folder</span>&gt;</span>VOC2012<span class="tag">&lt;/<span class="name">folder</span>&gt;</span>                           </span><br><span class="line"><span class="tag">&lt;<span class="name">filename</span>&gt;</span>2007_000392.jpg<span class="tag">&lt;/<span class="name">filename</span>&gt;</span>                               //文件名</span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>                                                           //图像来源（不重要）</span><br><span class="line"><span class="tag">&lt;<span class="name">database</span>&gt;</span>The VOC2007 Database<span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">annotation</span>&gt;</span>PASCAL VOC2007<span class="tag">&lt;/<span class="name">annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span>flickr<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">size</span>&gt;</span>                           //图像尺寸（长宽以及通道数）</span><br><span class="line"><span class="tag">&lt;<span class="name">width</span>&gt;</span>500<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">height</span>&gt;</span>332<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depth</span>&gt;</span>3<span class="tag">&lt;/<span class="name">depth</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">segmented</span>&gt;</span>1<span class="tag">&lt;/<span class="name">segmented</span>&gt;</span>                           //是否用于分割（在图像物体识别中01无所谓）</span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span>                                                           //检测到的物体</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>horse<span class="tag">&lt;/<span class="name">name</span>&gt;</span>                                         //物体类别</span><br><span class="line"><span class="tag">&lt;<span class="name">pose</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">pose</span>&gt;</span>                                         //拍摄角度</span><br><span class="line"><span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span>                                   //是否被截断（0表示完整）</span><br><span class="line"><span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span>                                   //目标是否难以识别（0表示容易识别）</span><br><span class="line"><span class="tag">&lt;<span class="name">bndbox</span>&gt;</span>                                                   //bounding-box（包含左下角和右上角xy坐标）</span><br><span class="line"><span class="tag">&lt;<span class="name">xmin</span>&gt;</span>100<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymin</span>&gt;</span>96<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmax</span>&gt;</span>355<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymax</span>&gt;</span>324<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span>                                                           //检测到多个物体</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>person<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pose</span>&gt;</span>Unspecified<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmin</span>&gt;</span>198<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymin</span>&gt;</span>58<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmax</span>&gt;</span>286<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymax</span>&gt;</span>197<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">annotation</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ImageSets存放的是每一种类型的challenge对应的图像数据。<br>在ImageSets下有四个文件夹：</p><p>其中Action下存放的是人的动作（例如running、jumping等等，这也是VOC challenge的一部分）</p><p>Layout下存放的是具有人体部位的数据（人的head、hand、feet等等，这也是VOC challenge的一部分）</p><p>Main下存放的是图像物体识别的数据，总共分为20类。</p><p>Segmentation下存放的是可用于分割的数据。</p><p>在这里主要考察Main文件夹。</p><p>Main文件夹下包含了20个分类的***_train.txt、***_val.txt和***_trainval.txt。</p><p>这些txt中的内容都差不多如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">000012</span><br><span class="line">000017</span><br><span class="line">000023</span><br><span class="line">000026</span><br><span class="line">000032</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>表示图像的name。</p><h1 id="ILSVRC2015数据集介绍"><a href="#ILSVRC2015数据集介绍" class="headerlink" title="ILSVRC2015数据集介绍"></a>ILSVRC2015数据集介绍</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">├── Annotations</span><br><span class="line">│   └── CLS-LOC</span><br><span class="line">│       └── train</span><br><span class="line">│           ├── n01440764</span><br><span class="line">│           │   ├── n01440764_18.xml</span><br><span class="line">│           │   └── n01440764_37.xml</span><br><span class="line">|           |   |__ ...</span><br><span class="line">│           └── n01443537</span><br><span class="line">│               ├── n01443537_16.xml</span><br><span class="line">│               └── n01443537_2.xml</span><br><span class="line">|               |__ ...</span><br><span class="line">├── Data</span><br><span class="line">│   └── CLS-LOC</span><br><span class="line">│       ├── <span class="built_in">test</span></span><br><span class="line">│       ├── train</span><br><span class="line">│       │   ├── n01440764</span><br><span class="line">│       │   │   ├── n01440764_36.JPEG</span><br><span class="line">│       │   │   └── n01440764_37.JPEG</span><br><span class="line">|       |       |__ ...</span><br><span class="line">│       │   └── n01443537</span><br><span class="line">│       │       ├── n01443537_16.JPEG</span><br><span class="line">│       │       └── n01443537_2.JPEG</span><br><span class="line">|       |       |__ ...</span><br><span class="line">│       └── val</span><br><span class="line">├── ImageSets</span><br><span class="line">│   └── CLS-LOC</span><br><span class="line">│       ├── test.txt</span><br><span class="line">│       ├── train_cls.txt</span><br><span class="line">│       ├── train_loc.txt</span><br><span class="line">│       └── val.txt</span><br><span class="line">└── devkit</span><br><span class="line">    ├── COPYING</span><br><span class="line">    ├── data</span><br><span class="line">    │   └── map_clsloc.txt</span><br><span class="line">    |   |__ ...</span><br><span class="line">    ├── evaluation</span><br><span class="line">    │   └── VOCreadxml.m</span><br><span class="line">    |   |__ ...</span><br><span class="line">    └── readme.txt</span><br></pre></td></tr></table></figure><p>ILSVRC2015_devkit\devkit\data\map_clsloc.txt文件描述了类别对应关系。</p><h1 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h1><h2 id="图片JPEG转jpg格式"><a href="#图片JPEG转jpg格式" class="headerlink" title="图片JPEG转jpg格式"></a>图片JPEG转jpg格式</h2><p>VOC2007中的原图片的数据格式为.jpg格式，而ILSVRC2015数据集中的原始图片为.JPEG格式。考虑到有些深度神经网络只支持.jpg格式的图片。因此，首先将.JPEG格式图片转换为.jpg格式的图片。转换代码可参考如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">clc;</span><br><span class="line">clear all;</span><br><span class="line"> </span><br><span class="line">maindir = <span class="string">'/Users/xiaoqiangteng/Downloads/imageset/JPEGImages1/'</span>;</span><br><span class="line">subdir =  dir( maindir ); <span class="comment">% 遍历所有子文件夹</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">length</span>( subdir )</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'.'</span> ) || ...</span><br><span class="line">        <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'..'</span> ) || ...</span><br><span class="line">        ~subdir( <span class="built_in">i</span> ).isdir )   <span class="comment">% 过滤空文件夹</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">     </span><br><span class="line">    subdirpath = fullfile( maindir, subdir( <span class="built_in">i</span> ).name, <span class="string">'*.JPEG'</span> ); <span class="comment">%subdir( i ).name = 'n00007846'; subdirpath = S:\ImageNet\JPEGImages1\n00007846\*.JPEG;</span></span><br><span class="line">    images = dir( subdirpath );</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> : <span class="built_in">length</span>( images )</span><br><span class="line">        imagepath = fullfile(maindir, subdir( <span class="built_in">i</span> ).name, images( <span class="built_in">j</span> ).name);</span><br><span class="line">        imgdata = imread( imagepath);</span><br><span class="line">        subdirpath1 = strcat(maindir, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">        subdirpath = strcat(subdirpath1, <span class="string">'/'</span>);</span><br><span class="line">        jpgPath = [subdirpath, images( <span class="built_in">j</span> ).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-5</span>), <span class="string">'.jpg'</span>];</span><br><span class="line">        imwrite(imgdata, jpgPath, <span class="string">'mode'</span>,<span class="string">'lossless'</span>);</span><br><span class="line">        delete(imagepath, images( <span class="built_in">j</span> ).name);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>待解决的问题：</p><p>函数imwrite(imgdata, jpgPath);默认参数会改变图片大小。</p><p>imwrite(imgdata, jpgPath, ‘mode’,’lossless’);加入特定模式后，图片损坏。</p><h2 id="转换XML文件"><a href="#转换XML文件" class="headerlink" title="转换XML文件"></a>转换XML文件</h2><p>参考这篇<a href="http://blog.csdn.net/samylee/article/details/51201744，他是将每个图片的数据写成了一个txt文件，然后用txt转化为xml文件。我模仿这种方法，那么我得先获得txt文件，所以现在的第一步是要将我的imageNet的annotation，即xml文件转化为参考博客所提到的txt文件。" target="_blank" rel="noopener">http://blog.csdn.net/samylee/article/details/51201744，他是将每个图片的数据写成了一个txt文件，然后用txt转化为xml文件。我模仿这种方法，那么我得先获得txt文件，所以现在的第一步是要将我的imageNet的annotation，即xml文件转化为参考博客所提到的txt文件。</a></p><h3 id="XML文件转txt文件"><a href="#XML文件转txt文件" class="headerlink" title="XML文件转txt文件"></a>XML文件转txt文件</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%createtxt.m</span></span><br><span class="line">clc;</span><br><span class="line">clear all;</span><br><span class="line"> </span><br><span class="line">RootPath = <span class="string">'/Users/xiaoqiangteng/Downloads/imageset/'</span>;</span><br><span class="line">[dir_name, count, label] = importDataFiles(RootPath);</span><br><span class="line"></span><br><span class="line">path_image = <span class="string">'/Users/xiaoqiangteng/Downloads/imageset/JPEGImages2/'</span>;<span class="comment">%原始图片文件夹</span></span><br><span class="line">path_xml = <span class="string">'/Users/xiaoqiangteng/Downloads/imageset/Annotations1/'</span>;</span><br><span class="line">path_label = <span class="string">'/Users/xiaoqiangteng/Downloads/imageset/labels/'</span>;<span class="comment">%生成的txt文件夹</span></span><br><span class="line">subdir = dir(path_xml);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">3</span> : <span class="built_in">length</span>( subdir )</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'.'</span> ) || ...</span><br><span class="line">        <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'..'</span> ) || ...</span><br><span class="line">        ~subdir( <span class="built_in">i</span> ).isdir )   <span class="comment">% 过滤空文件夹</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">    subdirpath = fullfile(path_xml, subdir( <span class="built_in">i</span> ).name, <span class="string">'*.xml'</span>);</span><br><span class="line">    xml_files1 = dir( subdirpath );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">%XML文件排序</span></span><br><span class="line">    xml_files2 = [];</span><br><span class="line">    int_xml_files = [];</span><br><span class="line">    int_xml = [];</span><br><span class="line">    xml_files = [];</span><br><span class="line">    length_xml = <span class="built_in">length</span>(xml_files1);</span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">length</span>(xml_files1)</span><br><span class="line">        xml_files2(k).name = xml_files1(k).name(<span class="number">11</span>:<span class="keyword">end</span><span class="number">-4</span>);</span><br><span class="line">        int_xml_files(k) = str2num(xml_files2(k).name);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    int_xml = <span class="built_in">sort</span>(int_xml_files);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ii = <span class="number">1</span>:<span class="built_in">length</span>(xml_files1)</span><br><span class="line">        xml_files3 = strcat(subdir( <span class="built_in">i</span> ).name, <span class="string">'_'</span>);</span><br><span class="line">        xml_files4 = strcat(xml_files3, num2str(int_xml(ii)));</span><br><span class="line">        xml_files(ii).name = strcat(xml_files4, <span class="string">'.xml'</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    mkdir(path_label, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">    pathtxt1 = strcat(path_label, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">    pathtxt2 = strcat(pathtxt1, <span class="string">'/'</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 遍历XML文件</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> : <span class="built_in">length</span>(xml_files)</span><br><span class="line">        <span class="built_in">disp</span>(<span class="built_in">j</span>);</span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">            pathtxt = [pathtxt2 xml_files( <span class="built_in">j</span> ).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>) <span class="string">'.txt'</span>];</span><br><span class="line">            subdir_xml = fullfile(path_xml, subdir( <span class="built_in">i</span> ).name, xml_files( <span class="built_in">j</span> ).name);</span><br><span class="line">            str = fileread(subdir_xml);</span><br><span class="line">            v = xml_parse( str );</span><br><span class="line">            xmin = v.object.bndbox.xmin;</span><br><span class="line">            ymin = v.object.bndbox.ymin;</span><br><span class="line">            xmax = v.object.bndbox.xmax;</span><br><span class="line">            ymax = v.object.bndbox.ymax;</span><br><span class="line">            filename = v.filename;</span><br><span class="line">            fid = fopen(pathtxt,<span class="string">'wt'</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%s%s'</span>,filename,<span class="string">'.JPEG'</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,<span class="string">' '</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%s'</span>, label&#123;<span class="built_in">i</span><span class="number">-2</span>&#125;);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,<span class="string">' '</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,xmin);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,<span class="string">' '</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,ymin);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,<span class="string">' '</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,xmax);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,<span class="string">' '</span>);</span><br><span class="line">            fprintf(fid,<span class="string">'%c'</span>,ymax);</span><br><span class="line">            fclose(fid);</span><br><span class="line">         <span class="keyword">catch</span></span><br><span class="line"><span class="comment">%             delete_image1 = strcat(path_image, subdir( i ).name);</span></span><br><span class="line"><span class="comment">%             delete_image2 = strcat(delete_image1, '/');</span></span><br><span class="line"><span class="comment">%             delete_image = [delete_image2, xml_files( j ).name(1:end-4), '.JPEG'];</span></span><br><span class="line"><span class="comment">%             delete(delete_image);</span></span><br><span class="line">             delete_xml1 = strcat(path_xml, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">             delete_xml2 = strcat(delete_xml1, <span class="string">'/'</span>);</span><br><span class="line">             delete_xml = [delete_xml2, xml_files( <span class="built_in">j</span> ).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>), <span class="string">'.xml'</span>];</span><br><span class="line">             delete(delete_xml);</span><br><span class="line">             <span class="built_in">disp</span>(<span class="string">'Wrong'</span>);</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>importDataFiles(RootPath)函数：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[dir_name, count, label]</span>=<span class="title">importDataFiles</span><span class="params">(RootPath)</span></span></span><br><span class="line">DirOutput = dir(fullfile(RootPath));</span><br><span class="line">SimpleName = &#123;DirOutput(<span class="number">3</span>:<span class="keyword">end</span>).name&#125;';</span><br><span class="line">LenSimFile = <span class="built_in">length</span>(SimpleName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:LenSimFile</span><br><span class="line">    fileName = fullfile(RootPath,SimpleName&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">    <span class="keyword">switch</span> SimpleName&#123;<span class="built_in">i</span>&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'map_clsloc.txt'</span></span><br><span class="line">            [dir_name, count, label] = textread(fileName,<span class="string">'%s%d%s'</span>);</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>改代码通过遍历xml文件来生成txt文件。原因在于原始图片文件夹内的图片多余对应的xml文件。</p><p>可能存在的问题：</p><p>（1）以上matlab代码通过使用XML 函数来解析XML文件，即xml_parse()函数。需要先下载该函数的工具包，下载地址：<a href="https://cn.mathworks.com/matlabcentral/fileexchange/4278-xml-toolbox?focused=5055046&amp;tab=function" target="_blank" rel="noopener">https://cn.mathworks.com/matlabcentral/fileexchange/4278-xml-toolbox?focused=5055046&amp;tab=function</a></p><p>但是该工具包在高版本的matlab已不支持，请尝试低版本的Matlab。楼主使用matlab 2014a版本，可运行。</p><p>（2）待解决的问题</p><p>以上代码仅仅支持XML中存在一个object对象。若存在多个object对象，即会报错，运行catch语句块，将不能够读取的xml文件从原文件夹中删除，以此来保证xml文件的数量同txt文件的数量相同。但是，该问题应该很好能够解决。</p><h3 id="TXT转XML"><a href="#TXT转XML" class="headerlink" title="TXT转XML"></a>TXT转XML</h3><p>接下来就可以进行将txt转化为pascal voc格式的xml文件了，在当前目录下创建一个Annotations的文件夹，代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%writeanno.m</span></span><br><span class="line">clc;</span><br><span class="line">clear all;</span><br><span class="line"> </span><br><span class="line">path_image = <span class="string">'/home/teng/programmings/datasets/imagenet/imagenet/JPEGImages/'</span>;</span><br><span class="line">path_label = <span class="string">'/home/teng/programmings/datasets/imagenet/imagenet/labels/'</span>;</span><br><span class="line">path_xml = <span class="string">'/home/teng/programmings/datasets/imagenet/imagenet/Annotations/'</span>;</span><br><span class="line">subdir = dir(path_label);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">3</span> : <span class="built_in">length</span>( subdir )</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'.'</span> ) || ...</span><br><span class="line">        <span class="built_in">isequal</span>( subdir( <span class="built_in">i</span> ).name, <span class="string">'..'</span> ) || ...</span><br><span class="line">        ~subdir( <span class="built_in">i</span> ).isdir )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">    subdirpath = fullfile(path_label, subdir( <span class="built_in">i</span> ).name, <span class="string">'*.txt'</span>);</span><br><span class="line">    txt_files = dir( subdirpath );</span><br><span class="line">    </span><br><span class="line">    mkdir(path_xml, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">length</span>(txt_files)</span><br><span class="line">        <span class="built_in">disp</span>(<span class="built_in">i</span>, <span class="built_in">j</span>)</span><br><span class="line">        path_label_dir1 = strcat(path_label, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">        path_label_dir = strcat(path_label_dir1, <span class="string">'/'</span>);</span><br><span class="line">        msg = textread(strcat(path_label_dir, txt_files(<span class="built_in">j</span>).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>),<span class="string">'.txt'</span>),<span class="string">'%s'</span>);</span><br><span class="line">        clear rec;</span><br><span class="line">        path_xml_subdir1 = strcat(path_xml, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">        path_xml_subdir = strcat(path_xml_subdir1, <span class="string">'/'</span>);</span><br><span class="line">        path = [path_xml_subdir txt_files(<span class="built_in">j</span>).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>) <span class="string">'.xml'</span>];</span><br><span class="line">        fid=fopen(path,<span class="string">'w'</span>);</span><br><span class="line">        rec.annotation.folder = <span class="string">'VOC2007'</span>;<span class="comment">%数据集名</span></span><br><span class="line">        rec.annotation.filename = strcat(txt_files(<span class="built_in">j</span>).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>), <span class="string">'.JPEG'</span>);</span><br><span class="line">        rec.annotation.source.database = <span class="string">'The VOC2007 Database'</span>;    </span><br><span class="line">        rec.annotation.source.annotation = <span class="string">'PASCAL VOC2007'</span>;    </span><br><span class="line">        rec.annotation.source.image = <span class="string">'flickr'</span>;</span><br><span class="line">        rec.annotation.source.flickrid = <span class="string">'0'</span>;</span><br><span class="line">        rec.annotation.owner.flickrid = <span class="string">'I do not know'</span>;    </span><br><span class="line">        rec.annotation.owner.name = <span class="string">'I do not know'</span>;</span><br><span class="line"></span><br><span class="line">        path_image_subdir1 = strcat(path_image, subdir( <span class="built_in">i</span> ).name);</span><br><span class="line">        path_image_subdir = strcat(path_image_subdir1, <span class="string">'/'</span>);</span><br><span class="line">        img = imread([path_image_subdir txt_files(<span class="built_in">j</span>).name(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-4</span>) <span class="string">'.JPEG'</span>]);</span><br><span class="line">        rec.annotation.<span class="built_in">size</span>.width = int2str(<span class="built_in">size</span>(img,<span class="number">2</span>));</span><br><span class="line">        rec.annotation.<span class="built_in">size</span>.height = int2str(<span class="built_in">size</span>(img,<span class="number">1</span>));</span><br><span class="line">        rec.annotation.<span class="built_in">size</span>.depth = int2str(<span class="built_in">size</span>(img,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        rec.annotation.segmented = <span class="string">'0'</span>;  </span><br><span class="line">        rec.annotation.object.name = msg&#123;<span class="number">2</span>&#125;;   </span><br><span class="line">        rec.annotation.object.pose = <span class="string">'Left'</span>;    </span><br><span class="line">        rec.annotation.object.truncated = <span class="string">'1'</span>;    </span><br><span class="line">        rec.annotation.object.difficult = <span class="string">'0'</span>;    </span><br><span class="line">        rec.annotation.object.bndbox.xmin = msg&#123;<span class="number">3</span>&#125;;<span class="comment">%坐标x1</span></span><br><span class="line">        rec.annotation.object.bndbox.ymin = msg&#123;<span class="number">4</span>&#125;;<span class="comment">%坐标y1</span></span><br><span class="line">        rec.annotation.object.bndbox.xmax = msg&#123;<span class="number">5</span>&#125;;<span class="comment">%坐标x2</span></span><br><span class="line">        rec.annotation.object.bndbox.ymax = msg&#123;<span class="number">6</span>&#125;;<span class="comment">%坐标y2</span></span><br><span class="line">        writexml(fid,rec,<span class="number">0</span>);</span><br><span class="line">        fclose(fid);</span><br><span class="line">    <span class="keyword">end</span>   </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>writexml函数：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%writexml.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xml</span> = <span class="title">writexml</span><span class="params">(fid,rec,depth)</span></span></span><br><span class="line"></span><br><span class="line">fn=fieldnames(rec);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(fn)</span><br><span class="line">    f=rec.(fn&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span> ~<span class="built_in">isempty</span>(f)</span><br><span class="line">        <span class="keyword">if</span> isstruct(f)</span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">length</span>(f)            </span><br><span class="line">                fprintf(fid,<span class="string">'%s'</span>,<span class="built_in">repmat</span>(char(<span class="number">9</span>),<span class="number">1</span>,depth));</span><br><span class="line">                a=<span class="built_in">repmat</span>(char(<span class="number">9</span>),<span class="number">1</span>,depth);</span><br><span class="line">                fprintf(fid,<span class="string">'&lt;%s&gt;\n'</span>,fn&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">                writexml(fid,rec.(fn&#123;<span class="built_in">i</span>&#125;)(<span class="built_in">j</span>),depth+<span class="number">1</span>);</span><br><span class="line">                fprintf(fid,<span class="string">'%s'</span>,<span class="built_in">repmat</span>(char(<span class="number">9</span>),<span class="number">1</span>,depth));</span><br><span class="line">                fprintf(fid,<span class="string">'&lt;/%s&gt;\n'</span>,fn&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> ~iscell(f)</span><br><span class="line">                f=&#123;f&#125;;</span><br><span class="line">            <span class="keyword">end</span>       </span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">length</span>(f)</span><br><span class="line">                fprintf(fid,<span class="string">'%s'</span>,<span class="built_in">repmat</span>(char(<span class="number">9</span>),<span class="number">1</span>,depth));</span><br><span class="line">                fprintf(fid,<span class="string">'&lt;%s&gt;'</span>,fn&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">                <span class="keyword">if</span> ischar(f&#123;<span class="built_in">j</span>&#125;)</span><br><span class="line">                    fprintf(fid,<span class="string">'%s'</span>,f&#123;<span class="built_in">j</span>&#125;);</span><br><span class="line">                <span class="keyword">elseif</span> isnumeric(f&#123;<span class="built_in">j</span>&#125;)&amp;&amp;<span class="built_in">numel</span>(f&#123;<span class="built_in">j</span>&#125;)==<span class="number">1</span></span><br><span class="line">                    fprintf(fid,<span class="string">'%s'</span>,num2str(f&#123;<span class="built_in">j</span>&#125;));</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    error(<span class="string">'unsupported type'</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                fprintf(fid,<span class="string">'&lt;/%s&gt;\n'</span>,fn&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="移动目录内所有文件夹内的文件至上层目录"><a href="#移动目录内所有文件夹内的文件至上层目录" class="headerlink" title="移动目录内所有文件夹内的文件至上层目录"></a>移动目录内所有文件夹内的文件至上层目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">read_dir</span></span>()&#123;</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls <span class="variable">$1</span>`       <span class="comment">#注意此处这是两个反引号，表示运行系统命令</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span> ]  <span class="comment">#注意此处之间一定要加上空格，否则会报错</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span><span class="variable">$file</span></span><br><span class="line">read_dir <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mv <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span> /home/teng/programmings/datasets/imagenet/imagenet/Annotations</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">delete_dir</span></span>()&#123;</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls <span class="variable">$1</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span>$<span class="string">"/"</span>file</span><br><span class="line">rm -rf <span class="variable">$1</span><span class="string">"/"</span><span class="variable">$file</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#读取第一个参数</span></span><br><span class="line">read_dir <span class="variable">$1</span></span><br><span class="line">delete_dir <span class="variable">$1</span></span><br></pre></td></tr></table></figure><p>这一步的目的在于将Annotations文件夹内的所有xml文件置于一个目录下。</p><h2 id="imageSets文件夹"><a href="#imageSets文件夹" class="headerlink" title="imageSets文件夹"></a>imageSets文件夹</h2><p>代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%createimagesets.m</span></span><br><span class="line">clc;</span><br><span class="line">clear all;</span><br><span class="line">  </span><br><span class="line">file = dir(<span class="string">'/home/teng/programmings/datasets/imagenet/imagenet/Annotations/'</span>);</span><br><span class="line">len = <span class="built_in">length</span>(file)<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_trainval=<span class="built_in">sort</span>(randperm(len, <span class="built_in">floor</span>(<span class="number">9</span>*len/<span class="number">10</span>)));<span class="comment">%trainval集占所有数据的9/10，可以根据需要设置</span></span><br><span class="line">num_train=<span class="built_in">sort</span>(num_trainval(randperm(<span class="built_in">length</span>(num_trainval), <span class="built_in">floor</span>(<span class="number">5</span>*<span class="built_in">length</span>(num_trainval)/<span class="number">6</span>))));<span class="comment">%train集占trainval集的5/6，可以根据需要设置</span></span><br><span class="line">num_val=setdiff(num_trainval,num_train);<span class="comment">%trainval集剩下的作为val集</span></span><br><span class="line">num_test=setdiff(<span class="number">1</span>:len,num_trainval);<span class="comment">%所有数据中剩下的作为test集</span></span><br><span class="line">path = <span class="string">'/home/teng/programmings/datasets/imagenet/imagenet/ImageSets/Main/'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fid=fopen(strcat(path, <span class="string">'trainval.txt'</span>),<span class="string">'a+'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(num_trainval)</span><br><span class="line">    s = sprintf(<span class="string">'%s'</span>,file(num_trainval(<span class="built_in">i</span>)+<span class="number">2</span>).name);</span><br><span class="line">    fprintf(fid,[s(<span class="number">1</span>:<span class="built_in">length</span>(s)<span class="number">-4</span>) <span class="string">'\r\n'</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fid=fopen(strcat(path, <span class="string">'train.txt'</span>),<span class="string">'a+'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(num_train)</span><br><span class="line">    s = sprintf(<span class="string">'%s'</span>,file(num_train(<span class="built_in">i</span>)+<span class="number">2</span>).name);</span><br><span class="line">    fprintf(fid,[s(<span class="number">1</span>:<span class="built_in">length</span>(s)<span class="number">-4</span>) <span class="string">'\r\n'</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fid=fopen(strcat(path, <span class="string">'val.txt'</span>),<span class="string">'a+'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(num_val)</span><br><span class="line">    s = sprintf(<span class="string">'%s'</span>,file(num_val(<span class="built_in">i</span>)+<span class="number">2</span>).name);</span><br><span class="line">    fprintf(fid,[s(<span class="number">1</span>:<span class="built_in">length</span>(s)<span class="number">-4</span>) <span class="string">'\r\n'</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fid=fopen(strcat(path, <span class="string">'test.txt'</span>),<span class="string">'a+'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(num_test)</span><br><span class="line">    s = sprintf(<span class="string">'%s'</span>,file(num_test(<span class="built_in">i</span>)+<span class="number">2</span>).name);</span><br><span class="line">    fprintf(fid,[s(<span class="number">1</span>:<span class="built_in">length</span>(s)<span class="number">-4</span>) <span class="string">'\r\n'</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fclose(fid);</span><br></pre></td></tr></table></figure><p>这样所需的文件夹我们都已备齐，将imageSets，Annotations和JPEGiImage文件夹分别放入voc数据集的对应位置，在这之前先将其原来的文件夹删除。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ol><li><a href="https://blog.csdn.net/xbcReal/article/details/51259558" target="_blank" rel="noopener">https://blog.csdn.net/xbcReal/article/details/51259558</a></li><li><a href="https://blog.csdn.net/samylee/article/details/51201744" target="_blank" rel="noopener">https://blog.csdn.net/samylee/article/details/51201744</a></li><li><a href="https://blog.csdn.net/sinat_30071459/article/details/50723212" target="_blank" rel="noopener">https://blog.csdn.net/sinat_30071459/article/details/50723212</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 深度学习 </category>
          
          <category> 数据集制作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++教程-cmake</title>
      <link href="/2018/04/03/C++%E6%95%99%E7%A8%8B-cmake/"/>
      <url>/2018/04/03/C++%E6%95%99%E7%A8%8B-cmake/</url>
      
        <content type="html"><![CDATA[<h1 id="Cmake入门"><a href="#Cmake入门" class="headerlink" title="Cmake入门"></a>Cmake入门</h1><h2 id="CMake编译原理"><a href="#CMake编译原理" class="headerlink" title="CMake编译原理"></a>CMake编译原理</h2><p>CMake是一种跨平台编译工具，比make更为高级，使用起来要方便得多。CMake主要是编写CMakeLists.txt文件，然后用cmake命令将CMakeLists.txt文件转化为make所需要的makefile文件，最后用make命令编译源码生成可执行程序或共享库（so(shared object)）。因此CMake的编译基本就两个步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>cmake  指向CMakeLists.txt所在的目录，例如cmake .. 表示CMakeLists.txt在当前目录的上一级目录。cmake后会生成很多编译的中间文件以及makefile文件，所以一般建议新建一个新的目录，专门用来编译，例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>make根据生成makefile文件，编译程序。</p><h2 id="使用Cmake编译程序"><a href="#使用Cmake编译程序" class="headerlink" title="使用Cmake编译程序"></a>使用Cmake编译程序</h2><h3 id="源码文件介绍"><a href="#源码文件介绍" class="headerlink" title="源码文件介绍"></a>源码文件介绍</h3><p>本文以一个例子入手介绍，即开平方。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── CMakeLists.txt</span><br><span class="line">└── src</span><br><span class="line">    ├── main.cpp</span><br><span class="line">    ├── test_math.cpp</span><br><span class="line">    └── test_math.h</span><br></pre></td></tr></table></figure><p>其中，src目录存放所有的源代码，即test_math.cpp、test_math.h和main.cpp。每个源代码文件内容如下：</p><p>test_math.h:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEST4_TEST_MATH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST4_TEST_MATH_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal_sqrt</span><span class="params">(<span class="keyword">double</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//TEST4_TEST_MATH_H</span></span></span><br></pre></td></tr></table></figure><p>test_math.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test_math.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal_sqrt</span><span class="params">(<span class="keyword">double</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test_math.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">49.0</span>;</span><br><span class="line">    <span class="keyword">double</span> b = <span class="number">0.0</span>;</span><br><span class="line">    b = cal_sqrt(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sqrt result:%f\n"</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写CMakeLists-txt"><a href="#编写CMakeLists-txt" class="headerlink" title="编写CMakeLists.txt"></a>编写CMakeLists.txt</h3><p>CMakeLists.txt文件，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>cmake verson，指定cmake版本</span><br><span class="line">cmake_minimum_required(VERSION <span class="number">3.8</span>)</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>project name，指定项目的名称，一般和项目的文件夹名称对应</span><br><span class="line">project(test4)</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>head file path，头文件目录</span><br><span class="line">#INCLUDE_DIRECTORIES(include)</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>source directory，源文件目录</span><br><span class="line">AUX_SOURCE_DIRECTORY(src DIR_SRCS)</span><br><span class="line"></span><br><span class="line">#<span class="number">5.</span><span class="built_in">set</span> environment variable，设置环境变量，编译用到的源文件全部都要放到这里，否则编译能够通过，但是执行的时候会出现各种问题，比如<span class="string">"symbol lookup error xxxxx , undefined symbol"</span></span><br><span class="line">SET(TEST_MATH $&#123;DIR_SRCS&#125;)</span><br><span class="line"></span><br><span class="line">#<span class="number">7.</span>add link library，添加可执行文件所需要的库，比如我们用到了libm.so（命名规则：lib+name+.so），就添加该库的名称</span><br><span class="line">#TARGET_LINK_LIBRARIES($&#123;PROJECT_NAME&#125; m)</span><br><span class="line"></span><br><span class="line">#<span class="number">6.</span>add executable file，添加要编译的可执行文件</span><br><span class="line">ADD_EXECUTABLE($&#123;PROJECT_NAME&#125; $&#123;TEST_MATH&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br></pre></td></tr></table></figure><h3 id="编译和运行程序"><a href="#编译和运行程序" class="headerlink" title="编译和运行程序"></a>编译和运行程序</h3><p>由于编译中出现许多中间的文件，因此最好新建一个独立的目录build，在该目录下进行编译，编译步骤如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>build下生成的目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">├── CMakeLists.txt</span><br><span class="line">├── cmake-build-debug</span><br><span class="line">│   ├── CMakeCache.txt</span><br><span class="line">│   ├── CMakeFiles</span><br><span class="line">│   │   ├── 3.8.2</span><br><span class="line">│   │   │   ├── CMakeCCompiler.cmake</span><br><span class="line">│   │   │   ├── CMakeCXXCompiler.cmake</span><br><span class="line">│   │   │   ├── CMakeDetermineCompilerABI_C.bin</span><br><span class="line">│   │   │   ├── CMakeDetermineCompilerABI_CXX.bin</span><br><span class="line">│   │   │   ├── CMakeSystem.cmake</span><br><span class="line">│   │   │   ├── CompilerIdC</span><br><span class="line">│   │   │   │   ├── CMakeCCompilerId.c</span><br><span class="line">│   │   │   │   ├── a.out</span><br><span class="line">│   │   │   │   └── tmp</span><br><span class="line">│   │   │   └── CompilerIdCXX</span><br><span class="line">│   │   │       ├── CMakeCXXCompilerId.cpp</span><br><span class="line">│   │   │       ├── a.out</span><br><span class="line">│   │   │       └── tmp</span><br><span class="line">│   │   ├── CMakeDirectoryInformation.cmake</span><br><span class="line">│   │   ├── CMakeOutput.log</span><br><span class="line">│   │   ├── CMakeTmp</span><br><span class="line">│   │   ├── Makefile.cmake</span><br><span class="line">│   │   ├── Makefile2</span><br><span class="line">│   │   ├── TargetDirectories.txt</span><br><span class="line">│   │   ├── clion-environment.txt</span><br><span class="line">│   │   ├── clion-log.txt</span><br><span class="line">│   │   ├── cmake.check_cache</span><br><span class="line">│   │   ├── feature_tests.bin</span><br><span class="line">│   │   ├── feature_tests.c</span><br><span class="line">│   │   ├── feature_tests.cxx</span><br><span class="line">│   │   ├── progress.marks</span><br><span class="line">│   │   └── test4.dir</span><br><span class="line">│   │       ├── CXX.includecache</span><br><span class="line">│   │       ├── DependInfo.cmake</span><br><span class="line">│   │       ├── build.make</span><br><span class="line">│   │       ├── cmake_clean.cmake</span><br><span class="line">│   │       ├── depend.internal</span><br><span class="line">│   │       ├── depend.make</span><br><span class="line">│   │       ├── flags.make</span><br><span class="line">│   │       ├── link.txt</span><br><span class="line">│   │       ├── progress.make</span><br><span class="line">│   │       └── src</span><br><span class="line">│   │           ├── main.cpp.o</span><br><span class="line">│   │           └── test_math.cpp.o</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── cmake_install.cmake</span><br><span class="line">│   ├── test4</span><br><span class="line">│   └── test4.cbp</span><br><span class="line">└── src</span><br><span class="line">    ├── main.cpp</span><br><span class="line">    ├── test_math.cpp</span><br><span class="line">    └── test_math.h</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.cnblogs.com/cv-pr/p/6206921.html" target="_blank" rel="noopener">http://www.cnblogs.com/cv-pr/p/6206921.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
          <category> cmake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>colmap源码解读</title>
      <link href="/2018/04/03/colmap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>/2018/04/03/colmap%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="feature-extractor-cc"><a href="#feature-extractor-cc" class="headerlink" title="feature_extractor.cc"></a>feature_extractor.cc</h1><h2 id="include"><a href="#include" class="headerlink" title="#include "></a>#include <memory></memory></h2><p>1 auto_ptr</p><p>C++的auto_ptr所做的事情，就是动态分配对象以及当对象不再需要时自动执行清理。</p><p>使用std::auto_ptr，要#include <memory>。</memory></p><p>double *p = new double;//为指针分配内存</p><p>std::auto_ptr<double> autop(p);</double></p><p>//继承性指针，必须依赖上面的指针p</p><p>//创建智能指针管理指针p指向的内存，可以自动释放内存，不用delete就可以自动删除</p><p>//搭配原生指针p使用，不用担心多delete或者少delete</p><p>//auto_ptr更多用于管理类和对象的内存</p><p>2 unique_ptr</p><p>unique_ptr是一种定义在<memory>中的智能指针(smart pointer)。它持有对对象的独有权——两个unique_ptr不能指向一个对象，不能进行复制操作只能进行移动操作。unique_ptr在超出作用域，即以下情况时它指向的对象会被摧毁：</memory></p><p>unique_ptr指向的对象被破坏</p><p>对象通过operator=（）或reset（）被指定到另一个指针）</p><p>unique_ptr还可能没有对象，这种情况被称为empty。</p><p>//C++11新指针</p><p>//std::unique_ptr&lt;指针指向的变量数据类型&gt;指针变量名(new 指针指向的变量数据类型);</p><p>std::unique_ptr<double>pdb(new double);</double></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> colmap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> colmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++教程-glog功能介绍</title>
      <link href="/2018/04/03/C++%E6%95%99%E7%A8%8B-glog%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/04/03/C++%E6%95%99%E7%A8%8B-glog%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Google glog是一个基于程序级记录日志信息的c++库，编程使用方式与c++的stream操作类似，例：</p><pre><code>LOG(INFO) &lt;&lt; &quot;Found &quot; &lt;&lt; num_cookies &lt;&lt; &quot; cookies&quot;;</code></pre><p>“LOG”宏为日志输出关键字，“INFO”为严重性程度。</p><p>主要支持功能：</p><ul><li>参数设置，以命令行参数的方式设置标志参数来控制日志记录行为；</li><li>严重性分级，根据日志严重性分级记录日志；</li><li>可有条件地记录日志信息；</li><li>条件中止程序。丰富的条件判定宏，可预设程序终止条件；</li><li>异常信号处理。程序异常情况，可自定义异常处理过程；</li><li>支持debug功能。可只用于debug模式；</li><li>自定义日志信息；</li><li>线程安全日志记录方式；</li><li>系统级日志记录；</li><li>google perror风格日志信息；</li><li>精简日志字符串信息。</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>最新版本：0.3.1  <a href="http://code.google.com/p/google-glog/" target="_blank" rel="noopener">http://code.google.com/p/google-glog/</a></p><p>安装只需：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>简单示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"glog/logging.h"</span>   <span class="comment">// glog 头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  google::InitGoogleLogging(argv[<span class="number">0</span>]);    <span class="comment">// 初始化</span></span><br><span class="line">  <span class="comment">// FLAGS_log_dir=".";   </span></span><br><span class="line">  LOG(INFO) &lt;&lt; <span class="string">"hello glog"</span>;     <span class="comment">// 打印log：“hello glog.  类似于C++ stream。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Makefile:</p><p>LIB=$(HOME)/install/glog/lib    #glog 安装路径</p><p>INCLUDE=$(HOME)/install/glog/include</p><p>test_glog : main.o</p><pre><code>g++ -o $@ $^ -L$(LIB) -lglog –lpthread   #-lpthread 因为glog在多线程中需要一些锁机制。</code></pre><p>main.o: main.cpp</p><pre><code>g++ -c -o $@ $^ -I$(INCLUDE)</code></pre><p>说明：</p><p>glog 默认对log分为4级： INFO,  WARNING,  ERROR,  FATAL.  打印log语句类似于C++中的stream，实际上LOG(INFO) 宏返回的是一个继承自std::ostrstream类的对象。</p><p>编译运行上述demo， glog默认会在/tmp/目录下生成log日志文件：test_glog.search-x2.username.log.INFO.20111003-161341.2083</p><p>文件名各字段对应含义为：</p><p><program name>.<hostname>.<user name>.log.<severity level>.<date>.<time>.<pid></pid></time></date></severity></user></hostname></program></p><p>其中：</p><p>1），<program name> 其实对应google::InitGoogleLogging(argv[0])；中的argv[0]，即通过改变google::InitGoogleLogging的参数可以修改日志文件的名称。</program></p><p>2），每个级别的日志会输出到不同的文件中。并且高级别日志文件会同样输入到低级别的日志文件中。 即：FATAL的信息会同时记录在INFO，WARNING，ERROR，FATAL日志文件中。默认情况下，glog还会将会将FATAL的日志发送到stderr中。</p><p>现在的问题是：log总不能都打印到/tmp/目录下吧。</p><p>参数设置：</p><p>不同于log4系列的日志系统通过配置文件的方式， glog采用命令的方式来来配置参数。在glog的官方文档里，提到如下两种方式来配置参数（以修改日志目录为例：）</p><p>1），gflags：</p><p>./your_application –log_dir=.</p><p>（gflags 我还没有使用过）</p><p>2），export 修改环境变量，如下所示：修改GLOG_log_dir为上层目录</p><p>3）以上两种方法都需要使用命令行，除此之外，还可以直接在程序中指定（官方文档中没有提到， glog源代码中也不鼓励这么用，但确实是可行的）：</p><p>在glog/logging.h 头文件287—350行，有诸如“GLOG_log_dir”等变量的宏定义， 则其GLOG_log_dir实际为FLAGS_log_dir,  因此只需要在程序中设置FLAGS_log_dir的值即可。其他变量类似。取消main.cpp中的注释行“// FLAGS_log_dir=”.”; ” 试试吧</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://blog.51cto.com/mengjh/546766" target="_blank" rel="noopener">http://blog.51cto.com/mengjh/546766</a></li><li><a href="http://www.cnblogs.com/foreveryl/archive/2011/10/14/2212265.html" target="_blank" rel="noopener">http://www.cnblogs.com/foreveryl/archive/2011/10/14/2212265.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> C++ </category>
          
          <category> glog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-深度学习环境配置-Ubuntu</title>
      <link href="/2018/03/31/linux-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-Ubuntu/"/>
      <url>/2018/03/31/linux-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-Ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu16-04-cuda8-0-GPU驱动配置"><a href="#Ubuntu16-04-cuda8-0-GPU驱动配置" class="headerlink" title="Ubuntu16.04 cuda8.0 GPU驱动配置"></a>Ubuntu16.04 cuda8.0 GPU驱动配置</h1><ul><li>ubuntu 16.04 64bit </li><li>显卡：NVIDIA Tesla k40m + 集成显卡</li></ul><h2 id="更换阿里源"><a href="#更换阿里源" class="headerlink" title="更换阿里源"></a>更换阿里源</h2><p>更换之前要先备份之前的源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/source.list /etc/apt/source.list.bak</span><br></pre></td></tr></table></figure><p>编辑源列表文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim/etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>原来的列表删除，替换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span></span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe <span class="comment">#Added by software-properties</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure><p>更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="Ubuntu16-04挂载新硬盘并格式化硬盘"><a href="#Ubuntu16-04挂载新硬盘并格式化硬盘" class="headerlink" title="Ubuntu16.04挂载新硬盘并格式化硬盘"></a>Ubuntu16.04挂载新硬盘并格式化硬盘</h2><p>查看硬盘:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure><p>新建分区:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure><p>之后进入command状态，大概是这么操作的：</p><ul><li>输入 m 查看帮助</li><li>输入 p 查看 /dev/sdb 分区的状态</li><li>输入 n 创建sdb这块硬盘的分区</li><li>选 p primary =&gt;输入　p</li><li>Partition number =&gt;分一个区所以输入　1</li><li>其他的默认回车即可</li><li>最后输入 w 保存并退出 Command 状态。</li></ul><p>操作示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line"><span class="comment"># n创建分区</span></span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): p</span><br><span class="line"><span class="comment"># p(primary主分区） e(extended拓展分区)</span></span><br><span class="line">Partition number (1-4, default 1): 1</span><br><span class="line"><span class="comment"># 分区号</span></span><br><span class="line">First sector (2048-83886079, default 2048): </span><br><span class="line"><span class="comment"># 默认</span></span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-83886079, default 83886079): </span><br><span class="line"><span class="comment"># 大小，可自定义，保持默认</span></span><br><span class="line">Created a new partition 1 of <span class="built_in">type</span> <span class="string">'Linux'</span> and of size 40 GiB.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"><span class="comment"># 查看分区情况</span></span><br><span class="line">Disk /dev/sdb: 40 GiB, 42949672960 bytes, 83886080 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0xbb6c1792</span><br><span class="line"></span><br><span class="line">Device     Boot Start      End  Sectors Size Id Type</span><br><span class="line">/dev/sdb1        2048 83886079 83884032  40G 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><p>在通过查看命令即可查看，新增的硬盘.</p><p>格式化:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkfs.ext4 /dev/sdb1 <span class="comment"># ext4为分区格式</span></span><br></pre></td></tr></table></figure><p>挂载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/data</span><br><span class="line">sudo mount /dev/sdb1 /home/data</span><br></pre></td></tr></table></figure><p>开机自动挂载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo blkid</span><br></pre></td></tr></table></figure><p>添加UUID到/etc/fstab 添加UUID=63295b70-daec-4253-b659-821f51200be9 /home/data ext4 defaults,errors=remount-ro 0 1到/etc/fstab 其中UUID后面跟sdb1的UUID 重启。</p><h2 id="安装必要的软件"><a href="#安装必要的软件" class="headerlink" title="安装必要的软件"></a>安装必要的软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim git openssh-server</span><br></pre></td></tr></table></figure><h2 id="检查是否正确识别显卡"><a href="#检查是否正确识别显卡" class="headerlink" title="检查是否正确识别显卡"></a>检查是否正确识别显卡</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure><h2 id="查看是否已有安装的NVIDIA驱动"><a href="#查看是否已有安装的NVIDIA驱动" class="headerlink" title="查看是否已有安装的NVIDIA驱动"></a>查看是否已有安装的NVIDIA驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep nvidia</span><br></pre></td></tr></table></figure><h2 id="查看集显驱动"><a href="#查看集显驱动" class="headerlink" title="查看集显驱动"></a>查看集显驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure><h2 id="禁用nouveau驱动和相关的驱动包"><a href="#禁用nouveau驱动和相关的驱动包" class="headerlink" title="禁用nouveau驱动和相关的驱动包"></a>禁用nouveau驱动和相关的驱动包</h2><p>用编辑器打开blacklist.conf配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>在文件的最后一行加入下面的命令，屏蔽有影响的驱动包（这里有的博客添加了blacklist amd76x_edac，但是经测试后不加也是可以安装成功的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">blacklist rivafb</span><br><span class="line">blacklist vga16fb</span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist nvidiafb</span><br><span class="line">blacklist rivatv</span><br><span class="line">options nouveau modeset=0</span><br><span class="line"><span class="built_in">alias</span> nouveau off</span><br><span class="line"><span class="built_in">alias</span> lbm-nouveau off</span><br></pre></td></tr></table></figure><p>禁用 nouveau 内核模块:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$echo</span> options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf</span><br><span class="line"><span class="variable">$sudo</span> update-initramfs -u</span><br></pre></td></tr></table></figure><h2 id="卸载所有安装的nvidia驱动"><a href="#卸载所有安装的nvidia驱动" class="headerlink" title="卸载所有安装的nvidia驱动"></a>卸载所有安装的nvidia驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove –purge nvidia*</span><br></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h2 id="GPU驱动配置"><a href="#GPU驱动配置" class="headerlink" title="GPU驱动配置"></a>GPU驱动配置</h2><p>根据GPU型号从相应网站下载驱动，例如使用NVIDIA Tesla M60，从<a href="http://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">NVIDIA网站</a>选择对应的型号和操作系统，CUDA Toolkit版本，下载驱动文件，如NVIDIA-Linux-x86_64-375.66.run，运行驱动文件，根据提示安装：</p><h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><p>安装驱动可能需要的依赖(可选):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt-get update</span><br><span class="line"><span class="variable">$sudo</span> apt-get install dkms build-essential linux-headers-generic</span><br><span class="line"><span class="variable">$sudo</span> gedit ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/lib/x86_64-linux-gnu:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="variable">$source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>进入命令行界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ctrl-Alt+F1 </span><br><span class="line">sudo /etc/init.d/lightdm stop <span class="comment">#关闭当前图形环境令</span></span><br></pre></td></tr></table></figure><p>关闭桌面服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure><p>给驱动run文件赋予执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x NVIDIA-Linux-x86_64-384.66.run</span><br></pre></td></tr></table></figure><p>安装: 注意下面参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ./NVIDIA-Linux-x86_64-384.66.run –no-x-check –no-nouveau-check –no-opengl-files </span><br><span class="line"><span class="comment"># –no-x-check安装驱动时关闭X服务 </span></span><br><span class="line"><span class="comment"># –no-nouveau-check 安装驱动时禁用nouveau </span></span><br><span class="line"><span class="comment"># –no-opengl-files 只安装驱动文件，不安装OpenGL文件</span></span><br></pre></td></tr></table></figure><p>注意：安装CUDA时一定使用runfile文件，这样可以进行选择。不再选择安装驱动，以及在弹出xorg.conf时选择NO.不要使用ubuntu设置中附加驱动中驱动</p><p>报错：</p><p>（1）ERROR: Unable to load the kernel module ‘nvidia.ko’. This happens most frequently when this kernel module was built against the wrong or improperly configured kernel sources, with a version of gcc that differs from the one used to build the target kernel, or if a driver such as rivafb, nvidiafb, or nouveau is present and prevents the NVIDIA kernel module from obtaining ownership of the NVIDIA graphics device(s), or no NVIDIA GPU installed in this system is supported by this NVIDIA Linux graphics driver release.</p><p>解决方法：</p><ul><li>禁用nouveau驱动和相关的驱动</li><li>首先，Ctrl+Alt+F1进入命令提示符界面 </li><li>然后，输入对应的username和passwd进入命令行. </li><li>最后，使用指令sudo service lightdm stop 关闭图形界面，再利用cd指令进入下载好的驱动目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 NVIDIA-Linux-x86_64-384.111.run  <span class="comment">#修改权限（否则没有访问权限，无法进行指令安装）</span></span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-384.111.run –no-x-check –no-nouveau-check –no-opengl-files <span class="comment">#安装驱动</span></span><br><span class="line"><span class="comment">#–no-x-check 关闭X服务</span></span><br><span class="line"><span class="comment">#–no-nouveau-check 禁用nouveau</span></span><br><span class="line"><span class="comment">#–no-opengl-files 不安装OpenGL文件</span></span><br><span class="line"><span class="comment">#...安装完成后</span></span><br><span class="line">sudo update-initramfs -u</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>(2) WARNING: Unable to find a suitable destination to install 32-bit compatibility libraries. Your system may not be set up for 32-bit compatibility. 32-bit compatibility files will not be installed; if you wish to install them, re-run the installation and set a valid directory with the –compat32-libdir option.</p><p>解决方法：</p><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install ia32-libs</span><br></pre></td></tr></table></figure><h2 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装<a href="https://developer.nvidia.com/cuda-80-ga2-download-archive" target="_blank" rel="noopener">cuda</a></h2><p>注意这里下载的是cuda8.0的runfile（local）文件。 </p><p>这里是nvidia给出的官方安装指南（遇到问题时可以查阅) </p><p>下载完cuda8.0后，执行如下语句，运行runfile文件： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_8.0.27_linux.run</span><br></pre></td></tr></table></figure><p>因为驱动之前已经安装，这里就不要选择安装驱动。其余的都直接默认或者选择是即可。</p><p>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure><p>打开“profile”文件，在末尾处添加（注意不要有空格，不然会报错):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-8.0/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-8.0/lib64<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure><p>重启电脑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>测试cuda的Samples:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda-8.0/samples/1_Utilities/deviceQuery</span><br><span class="line">sudo make</span><br><span class="line">./deviceQuery</span><br></pre></td></tr></table></figure><h1 id="OpenCV3-1配置"><a href="#OpenCV3-1配置" class="headerlink" title="OpenCV3.1配置"></a>OpenCV3.1配置</h1><h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line"><span class="comment"># 必须的，gcc编译环境</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"><span class="comment"># 必须的,包括cmake等工具</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br><span class="line"><span class="comment"># 可选的，看个人需要，总共5M左右</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install libv4l-dev</span><br></pre></td></tr></table></figure><h2 id="下载-源码"><a href="#下载-源码" class="headerlink" title="下载 源码"></a>下载 源码</h2><p><a href="https://opencv.org/releases.html" target="_blank" rel="noopener">OpenCV</a></p><p>或着用git clone：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv310</span><br><span class="line">    <span class="comment"># opencv310为自己建的，源码将放在这里</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Itseez/opencv.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Itseez/opencv_contrib.git</span><br></pre></td></tr></table></figure><h2 id="CMake-Opencv源码"><a href="#CMake-Opencv源码" class="headerlink" title="CMake Opencv源码"></a>CMake Opencv源码</h2><p>建立一个编译目录（例如：/build）把cmake后的文件都放在这里边。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv</span><br><span class="line">mkdir build  //建立一个build目录，把cmake的文件都放着里边</span><br><span class="line"><span class="built_in">cd</span> build　　　//进入build目录</span><br></pre></td></tr></table></figure><p>cmake时ippicv_linux_20151201.tgz总是不能成功下载，故cmake之前将./downloads/linux-808b791a6eac9ed78d32a7666804320e 文件拷贝至./opencv-3.1.0/3rdparty/ippicv/ 路径下(先执行一次cmake 命令生成文件路径，在将ippicv_linux_20151201.tgz复制进去) 首先，手动下载<a href="https://raw.githubusercontent.com/Itseez/opencv_3rdparty/81a676001ca8075ada498583e4166079e5744668/ippicv/ippicv_linux_20151201.tgz" target="_blank" rel="noopener">ippicv</a></p><p>然后开始cmake，这里需要注意几个cmake的参数，比较重要。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> WITH_LIBV4L=ON ..</span><br></pre></td></tr></table></figure><p>切记最后’..’两个点之前要加空格！！</p><h2 id="把代码编译成可执行文件"><a href="#把代码编译成可执行文件" class="headerlink" title="把代码编译成可执行文件"></a>把代码编译成可执行文件</h2><p>这里官方推荐使用多进程编译，推荐七个进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错：</span></span><br><span class="line"><span class="comment"># modules/cudalegacy/src/graphcuts.cpp:120:54: error: </span></span><br><span class="line"><span class="comment"># ‘NppiGraphcutState’ has not been declared</span></span><br><span class="line"><span class="comment"># typedef NppStatus (*init_func_t)(NppiSize oSize, </span></span><br><span class="line"><span class="comment"># NppiGraphcutState** ppState, Npp8u* pDeviceMem);</span></span><br><span class="line"><span class="comment"># 这是因为opecv3.0与cuda8.0不兼容导致的。解决办法： </span></span><br><span class="line"><span class="comment"># 修改 ～/opencv/modules/cudalegacy/src/graphcuts.cpp文件内容</span></span><br><span class="line"><span class="comment"># 将  </span></span><br><span class="line"><span class="comment"># #if !defined (HAVE_CUDA) || defined (CUDA_DISABLER)   </span></span><br><span class="line"><span class="comment"># 改为  </span></span><br><span class="line"><span class="comment"># #if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) || (CUDART_VERSION &gt;= 8000) </span></span><br><span class="line">make -j7 <span class="comment"># 并行运行七个jobs，这一步也在build目录中进行</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">如果你要在python下运行opencv库的情况下，那就必须安装安装python-opencv</span><br><span class="line">sudo apt-get install python-opencv</span><br></pre></td></tr></table></figure><h2 id="配置库文件路径"><a href="#配置库文件路径" class="headerlink" title="配置库文件路径"></a>配置库文件路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">'echo "/usr/local/lib" &gt; /etc/ld.so.conf.d/opencv.conf'</span></span><br><span class="line"><span class="comment">#或者直接打开/etc/ld.so.conf.d/opencv.conf，添加/usr/local/lib</span></span><br><span class="line"><span class="comment">#使配置生效</span></span><br><span class="line">sudo  ldconfig(重要)</span><br></pre></td></tr></table></figure><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim/etc/bash.bashrc   </span><br><span class="line"><span class="comment">#在最后加入以下两行代码</span></span><br><span class="line">PKG_CONFIG_PATH=<span class="variable">$PKG_CONFIG_PATH</span>:/usr/<span class="built_in">local</span>/lib/pkgconfig </span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH  </span><br><span class="line"><span class="comment">#使配置生效</span></span><br><span class="line">sudo <span class="built_in">source</span> /etc/bash.bashrc </span><br><span class="line">（该步骤可能会报错找不到命令，原因是<span class="built_in">source</span>为root命令</span><br><span class="line">su（进入root权限）</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg-config --modversion opencv</span><br><span class="line">pkg-config --cflags opencv</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>我是用python+opencv的，我这里直接运行opencv自带的python的例子程序，TX1自带摄像头不能用，需要使用外接USB摄像头，插入USB接口即可，无需安装驱动，也无需改动测试代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;opencv3.1.0_dir&gt;/samples/python/</span><br><span class="line">python video.py</span><br><span class="line">python edge.py</span><br><span class="line">python facedetect.py</span><br></pre></td></tr></table></figure><h1 id="colmap配置"><a href="#colmap配置" class="headerlink" title="colmap配置"></a><a href="https://colmap.github.io/tutorial.html" target="_blank" rel="noopener">colmap</a>配置</h1><p>clone colmap源码到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/colmap/colmap</span><br></pre></td></tr></table></figure><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmake build-essential libboost-all-dev libeigen3-dev libsuitesparse-dev libfreeimage-dev libgoogle-glog-dev libgflags-dev libglew-dev qtbase5-dev libqt5opengl5-dev</span><br></pre></td></tr></table></figure><p>配置Ceres Solver:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libatlas-base-dev libsuitesparse-dev</span><br><span class="line">git <span class="built_in">clone</span> https://ceres-solver.googlesource.com/ceres-solver</span><br><span class="line"><span class="built_in">cd</span> ceres-solver</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"><span class="comment"># 注：如果该安装包无法下载，请离线下载安装，需翻墙</span></span><br></pre></td></tr></table></figure><p>配置和编译colmap:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> path/to/colmap</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>运行colmap:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colmap -h</span><br><span class="line">colmap gui</span><br></pre></td></tr></table></figure><h1 id="Caffe配置"><a href="#Caffe配置" class="headerlink" title="Caffe配置"></a>Caffe配置</h1><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler</span><br><span class="line">sudo apt-get install --no-install-recommends libboost-all-dev</span><br><span class="line">sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev</span><br><span class="line">sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev</span><br><span class="line">sudo apt-get install git cmake build-essential</span><br></pre></td></tr></table></figure><p>有一定几率安装失败而导致后续步骤出现问题，所以要确保以上依赖包都已安装成功，验证方法就是重新运行安装命令，如验证 git cmake build-essential是否安装成功共则再次运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git cmake build-essential</span><br></pre></td></tr></table></figure><p>安装的路径下 clone ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/BVLC/caffe.git</span><br></pre></td></tr></table></figure><p>进入 caffe ，将 Makefile.config.example 文件复制一份并更名为 Makefile.config ，也可以在 caffe 目录下直接调用以下命令完成复制操作 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp Makefile.config.example Makefile.config</span><br></pre></td></tr></table></figure><p>复制一份的原因是编译 caffe 时需要的是 Makefile.config 文件，而Makefile.config.example 只是caffe 给出的配置文件例子，不能用来编译 caffe。</p><p>参考我的Makefile.config：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Refer to http://caffe.berkeleyvision.org/installation.html</span></span><br><span class="line"><span class="comment"># Contributions simplifying and improving our build system are welcome!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cuDNN acceleration switch (uncomment to build with cuDNN).</span></span><br><span class="line"><span class="comment"># USE_CUDNN := 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU-only switch (uncomment to build without GPU support).</span></span><br><span class="line"><span class="comment"># CPU_ONLY := 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment to disable IO dependencies and corresponding data layers</span></span><br><span class="line"><span class="comment"># USE_OPENCV := 0</span></span><br><span class="line"><span class="comment"># USE_LEVELDB := 0</span></span><br><span class="line"><span class="comment"># USE_LMDB := 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary)</span></span><br><span class="line"><span class="comment">#You should not set this flag if you will be reading LMDBs with any</span></span><br><span class="line"><span class="comment">#possibility of simultaneous read and write</span></span><br><span class="line"><span class="comment"># ALLOW_LMDB_NOLOCK := 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment if you're using OpenCV 3</span></span><br><span class="line">OPENCV_VERSION := 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># To customize your choice of compiler, uncomment and set the following.</span></span><br><span class="line"><span class="comment"># N.B. the default for Linux is g++ and the default for OSX is clang++</span></span><br><span class="line"><span class="comment"># CUSTOM_CXX := g++</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CUDA directory contains bin/ and lib/ directories that we need.</span></span><br><span class="line">CUDA_DIR := /usr/<span class="built_in">local</span>/cuda</span><br><span class="line"><span class="comment"># On Ubuntu 14.04, if cuda tools are installed via</span></span><br><span class="line"><span class="comment"># "sudo apt-get install nvidia-cuda-toolkit" then use this instead:</span></span><br><span class="line"><span class="comment"># CUDA_DIR := /usr</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CUDA architecture setting: going with all of them.</span></span><br><span class="line"><span class="comment"># For CUDA &lt; 6.0, comment the *_50 lines for compatibility.</span></span><br><span class="line">CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \</span><br><span class="line">-gencode arch=compute_20,code=sm_21 \</span><br><span class="line">-gencode arch=compute_30,code=sm_30 \</span><br><span class="line">-gencode arch=compute_35,code=sm_35 \</span><br><span class="line">-gencode arch=compute_50,code=sm_50 \</span><br><span class="line">-gencode arch=compute_50,code=compute_50</span><br><span class="line"></span><br><span class="line"><span class="comment"># BLAS choice:</span></span><br><span class="line"><span class="comment"># atlas for ATLAS (default)</span></span><br><span class="line"><span class="comment"># mkl for MKL</span></span><br><span class="line"><span class="comment"># open for OpenBlas</span></span><br><span class="line">BLAS := open</span><br><span class="line"><span class="comment"># Custom (MKL/ATLAS/OpenBLAS) include and lib directories.</span></span><br><span class="line"><span class="comment"># Leave commented to accept the defaults for your choice of BLAS</span></span><br><span class="line"><span class="comment"># (which should work)!</span></span><br><span class="line"><span class="comment"># BLAS_INCLUDE := /path/to/your/blas</span></span><br><span class="line"><span class="comment"># BLAS_LIB := /path/to/your/blas</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew puts openblas in a directory that is not on the standard search path</span></span><br><span class="line"><span class="comment"># BLAS_INCLUDE := $(shell brew --prefix openblas)/include</span></span><br><span class="line"><span class="comment"># BLAS_LIB := $(shell brew --prefix openblas)/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is required only if you will compile the matlab interface.</span></span><br><span class="line"><span class="comment"># MATLAB directory should contain the mex binary in /bin.</span></span><br><span class="line"><span class="comment"># MATLAB_DIR := /usr/local</span></span><br><span class="line"><span class="comment"># MATLAB_DIR := /Applications/MATLAB_R2012b.app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> this is required only if you will compile the python interface.</span></span><br><span class="line"><span class="comment"># We need to be able to find Python.h and numpy/arrayobject.h.</span></span><br><span class="line">PYTHON_INCLUDE := /usr/include/python2.7 \</span><br><span class="line">/usr/lib64/python2.7/site-packages/numpy/core/include</span><br><span class="line"><span class="comment"># Anaconda Python distribution is quite popular. Include path:</span></span><br><span class="line"><span class="comment"># Verify anaconda location, sometimes it's in root.</span></span><br><span class="line"><span class="comment"># ANACONDA_HOME := $(HOME)/anaconda</span></span><br><span class="line"><span class="comment"># PYTHON_INCLUDE := $(ANACONDA_HOME)/include \</span></span><br><span class="line"><span class="comment"># $(ANACONDA_HOME)/include/python2.7 \</span></span><br><span class="line"><span class="comment"># $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include \</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We need to be able to find libpythonX.X.so or .dylib.</span></span><br><span class="line">PYTHON_LIB := /usr/lib</span><br><span class="line"><span class="comment"># PYTHON_LIB := $(ANACONDA_HOME)/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew installs numpy in a non standard path (keg only)</span></span><br><span class="line"><span class="comment"># PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include</span></span><br><span class="line"><span class="comment"># PYTHON_LIB += $(shell brew --prefix numpy)/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to support layers written in Python (will link against Python libs)</span></span><br><span class="line">WITH_PYTHON_LAYER := 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Whatever else you find you need goes here.</span></span><br><span class="line">INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/<span class="built_in">local</span>/include /usr/include/hdf5/serial/</span><br><span class="line">LIBRARY_DIRS := $(PYTHON_LIB) /usr/<span class="built_in">local</span>/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial</span><br><span class="line"></span><br><span class="line"><span class="comment"># If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies</span></span><br><span class="line"><span class="comment"># INCLUDE_DIRS += $(shell brew --prefix)/include</span></span><br><span class="line"><span class="comment"># LIBRARY_DIRS += $(shell brew --prefix)/lib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment to use `pkg-config` to specify OpenCV library paths.</span></span><br><span class="line"><span class="comment"># (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)</span></span><br><span class="line"><span class="comment"># USE_PKG_CONFIG := 1</span></span><br><span class="line"></span><br><span class="line">BUILD_DIR := build</span><br><span class="line">DISTRIBUTE_DIR := distribute</span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171</span></span><br><span class="line"><span class="comment"># DEBUG := 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The ID of the GPU that 'make runtest' will use to run unit tests.</span></span><br><span class="line">TEST_GPUID := 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable pretty build (comment to see full commands)</span></span><br><span class="line">Q ?= @</span><br></pre></td></tr></table></figure><p>可以开始编译了，在 caffe 目录下执行 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make all -j8</span><br><span class="line">sudo make runtest -j8</span><br><span class="line">sudo make pycaffe -j8 <span class="comment"># 安装 pycaffe notebook 接口环境</span></span><br></pre></td></tr></table></figure><h1 id="darknet配置"><a href="#darknet配置" class="headerlink" title="darknet配置"></a><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">darknet</a>配置</h1><p>环境: Ubuntu16.04 + Titan X + Cuda8.0 + OpenCV3.1 + Python2.7</p><p>请参考前文。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pjreddie/darknet</span><br><span class="line"><span class="built_in">cd</span> darknet</span><br><span class="line"><span class="comment"># 配置Makefile</span></span><br><span class="line"><span class="comment"># GPU=1</span></span><br><span class="line"><span class="comment"># CUDNN=0</span></span><br><span class="line"><span class="comment"># OPENCV=1</span></span><br><span class="line"><span class="comment"># DEBUG=0</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>可能出现的报错：</p><p>（1）error:/usr/bin/ld: 找不到 -lippicv<br><br>collect2: error: ld returned 1 exit status <br><br>Makefile:82: recipe for target ‘libdarknet.so’ failed <br></p><p>解决方法：找到-lippicv对应的库（libippicv.a），该库位于 安装目录./opencv-3.1.0/3rdparty/ippicv/unpack/ippicv_lnx/lib/intel64文件夹下 ，进入该文件夹下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo cp sudo cp libippicv.a /usr/<span class="built_in">local</span>/lib/</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">继续执行make 即可。</span><br><span class="line"></span><br><span class="line">（2）找不到nvcc</span><br><span class="line"></span><br><span class="line">解决方法：修改darknet下的Makefile文件，将其中的NVCC=nvcc改为/usr/<span class="built_in">local</span>/cuda-*/bin/nvcc即安装的cuda版本信息</span><br><span class="line"></span><br><span class="line">保存  继续执行make 即可。</span><br><span class="line"></span><br><span class="line">下载权重测试:</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">wget http://pjreddie.com/media/files/yolo.weights  </span><br><span class="line">./darknet yolo <span class="built_in">test</span> cfg/yolo.cfg yolo.weights data/dog.jpg   </span><br><span class="line">./darknet detect cfg/yolo.cfg yolo.weights data/dog.jpg</span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/ch_liu23/article/details/53558549" target="_blank" rel="noopener">YOLOv2训练自己的数据集（VOC格式）</a></li><li><a href="https://blog.csdn.net/jozeeh/article/details/79087311" target="_blank" rel="noopener">YOLOv2目标检测<em>单目标</em>训练自己数据全过程（自用）</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.liaohuqiu.net/cn/posts/ssh-public-key-auto-login/" target="_blank" rel="noopener">https://www.liaohuqiu.net/cn/posts/ssh-public-key-auto-login/</a></li><li><a href="https://blog.csdn.net/asukasmallriver/article/details/72927860" target="_blank" rel="noopener">https://blog.csdn.net/asukasmallriver/article/details/72927860</a></li><li><a href="https://blog.csdn.net/u011440558/article/details/78358447" target="_blank" rel="noopener">https://blog.csdn.net/u011440558/article/details/78358447</a></li><li><a href="https://www.mtyun.com/library/how-to-install-caffe-on-centos7" target="_blank" rel="noopener">https://www.mtyun.com/library/how-to-install-caffe-on-centos7</a></li><li><a href="https://blog.csdn.net/qq_28413479/article/details/76377184" target="_blank" rel="noopener">https://blog.csdn.net/qq_28413479/article/details/76377184</a></li><li><a href="https://blog.csdn.net/yhaolpz/article/details/71375762" target="_blank" rel="noopener">https://blog.csdn.net/yhaolpz/article/details/71375762</a></li><li><a href="https://www.jianshu.com/p/10ed332caf07" target="_blank" rel="noopener">https://www.jianshu.com/p/10ed332caf07</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Linux </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-TensorFlow教程</title>
      <link href="/2018/03/30/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-TensorFlow%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/30/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-TensorFlow%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="TensorFlow简介"><a href="#TensorFlow简介" class="headerlink" title="TensorFlow简介"></a>TensorFlow简介</h1><p>TensorFlow是Google开发的一款神经网络的Python外部的结构包, 也是一个采用数据流图来进行数值计算的开源软件库.TensorFlow 让我们可以先绘制计算结构图, 也可以称是一系列可人机交互的计算操作, 然后把编辑好的Python文件 转换成 更高效的C++, 并在后端进行计算.</p><h1 id="TensorFlow安装"><a href="#TensorFlow安装" class="headerlink" title="TensorFlow安装"></a>TensorFlow安装</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="Dock安装"><a href="#Dock安装" class="headerlink" title="Dock安装"></a>Dock安装</h3><p>Docker安装请参考<a href="http://mapstec.com/2018/03/29/%E5%AE%9E%E9%AA%8C%E5%AE%A4GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">实验室GPU服务器部署教程</a></p><p>Docker 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组，参考：<a href="https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noopener">docker docs</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><h3 id="安装NVIDIA-Docker"><a href="#安装NVIDIA-Docker" class="headerlink" title="安装NVIDIA-Docker"></a>安装NVIDIA-Docker</h3><p>安装完成docker并检查安装正确（能跑出来hello-world）后，如果需要docker容器中有gpu支持，需要再安装NVIDIA-Docker，同样找到并打开该项目的主页：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NVIDIA/nvidia-docker: Build and run Docker containers leveraging NVIDIA GPUs</span><br><span class="line">https://github.com/NVIDIA/nvidia-docker</span><br></pre></td></tr></table></figure><p>可以看到在Quick start小节，根据系统版本执行命令：</p><p>Ubuntu 14.04/16.04/18.04, Debian Jessie/Stretch：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers</span></span><br><span class="line">docker volume ls -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker rm -f</span><br><span class="line">sudo apt-get purge -y nvidia-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the package repositories</span></span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \</span><br><span class="line">  sudo apt-key add -</span><br><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> <span class="variable">$ID</span><span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.list | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install nvidia-docker2 and reload the Docker daemon configuration</span></span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line">sudo pkill -SIGHUP dockerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test nvidia-smi with the latest official CUDA image</span></span><br><span class="line">docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure><p>CentOS 7 (docker-ce), RHEL 7.4/7.5 (docker-ce), Amazon Linux 1/2:</p><p>If you are not using the official docker-ce package on CentOS/RHEL, use the next section.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers</span></span><br><span class="line">docker volume ls -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker rm -f</span><br><span class="line">sudo yum remove nvidia-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the package repositories</span></span><br><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> <span class="variable">$ID</span><span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/<span class="variable">$distribution</span>/nvidia-docker.repo | \</span><br><span class="line">  sudo tee /etc/yum.repos.d/nvidia-docker.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install nvidia-docker2 and reload the Docker daemon configuration</span></span><br><span class="line">sudo yum install -y nvidia-docker2</span><br><span class="line">sudo pkill -SIGHUP dockerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test nvidia-smi with the latest official CUDA image</span></span><br><span class="line">docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure><p>If yum reports a conflict on /etc/docker/daemon.json with the docker package, you need to use the next section instead.</p><p>CentOS 7 (docker), RHEL 7.4/7.5 (docker):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers</span></span><br><span class="line">docker volume ls -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker rm -f</span><br><span class="line">sudo yum remove nvidia-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the package repositories</span></span><br><span class="line">distribution=$(. /etc/os-release;<span class="built_in">echo</span> <span class="variable">$ID</span><span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-container-runtime/<span class="variable">$distribution</span>/nvidia-container-runtime.repo | \</span><br><span class="line">  sudo tee /etc/yum.repos.d/nvidia-container-runtime.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the nvidia runtime hook</span></span><br><span class="line">sudo yum install -y nvidia-container-runtime-hook</span><br><span class="line">sudo mkdir -p /usr/libexec/oci/hooks.d</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">'#!/bin/sh\nPATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" exec nvidia-container-runtime-hook "$@"'</span> | \</span><br><span class="line">  sudo tee /usr/libexec/oci/hooks.d/nvidia</span><br><span class="line">sudo chmod +x /usr/libexec/oci/hooks.d/nvidia</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test nvidia-smi with the latest official CUDA image</span></span><br><span class="line"><span class="comment"># You can't use `--runtime=nvidia` with this setup.</span></span><br><span class="line">docker run --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure><p>上面最后一条命令是检查是否安装成功，安装成功，则会显示关于GPU的信息。</p><p>然后在执行下面这句，默认用nvdia-docker替代docker命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'alias docker=nvidia-docker'</span> &gt;&gt; ~/.bashrc</span><br><span class="line">bash</span><br></pre></td></tr></table></figure><h3 id="下载使用TensorFlow镜像"><a href="#下载使用TensorFlow镜像" class="headerlink" title="下载使用TensorFlow镜像"></a>下载使用TensorFlow镜像</h3><p>打开dockerhub关于tensorflow的页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensorflow/tensorflow – Docker Hub</span><br><span class="line">https://hub.docker.com/r/tensorflow/tensorflow/</span><br></pre></td></tr></table></figure><p>根据需要的版本下载tensorflow镜像并开启tensorflow容器：</p><p>CPU版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8888:8888 tensorflow/tensorflow</span><br></pre></td></tr></table></figure><p>GPU版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu</span><br></pre></td></tr></table></figure><p>如何使用,执行以上命令的结果类似如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ nvidia-docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu</span><br><span class="line">[I 02:51:21.230 NotebookApp] Writing notebook server cookie secret to /root/.<span class="built_in">local</span>/share/jupyter/runtime/notebook_cookie_secret</span><br><span class="line">[W 02:51:21.242 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using encryption. This is not recommended.</span><br><span class="line">[I 02:51:21.249 NotebookApp] Serving notebooks from <span class="built_in">local</span> directory: /notebooks</span><br><span class="line">[I 02:51:21.249 NotebookApp] 0 active kernels </span><br><span class="line">[I 02:51:21.249 NotebookApp] The Jupyter Notebook is running at: http://[all ip addresses on your system]:8888/?token=8f90cc7b9ad6ccc4f36f53f347c7a314220bbcb82dd416ea</span><br><span class="line">[I 02:51:21.249 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).</span><br><span class="line">[C 02:51:21.249 NotebookApp] </span><br><span class="line">    </span><br><span class="line">    Copy/paste this URL into your browser when you connect <span class="keyword">for</span> the first time,</span><br><span class="line">    to login with a token:</span><br><span class="line">        http://localhost:8888/?token=8f90cc7b9ad6ccc4f36f53f347c7a314220bbcb82dd416ea</span><br><span class="line">[I 02:51:31.832 NotebookApp] 302 GET / (172.17.0.1) 0.74ms</span><br><span class="line">[I 02:51:31.943 NotebookApp] 302 GET /tree? (172.17.0.1) 1.44ms</span><br></pre></td></tr></table></figure><p>其中看到有个网址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/?token=8f90cc7b9ad6ccc4f36f53f347c7a314220bbcb82dd416ea</span><br></pre></td></tr></table></figure><p>每个人的网址在token=后面的内容是不一样的，现在我们打开浏览器，输入网址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/</span><br></pre></td></tr></table></figure><p>输入刚刚token后面的值后,点击第一个1_hello_tensorflow.ipynb，然后可以选择执行所有代码.</p><p>常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull library/hello-world</span><br></pre></td></tr></table></figure><p>上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><p>抓取成功以后，就可以在本机看到这个 image 文件了。运行这个 image 文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run hello-world</span><br></pre></td></tr></table></figure><p>docker container run命令会从 image 文件，生成一个正在运行的容器实例。</p><p>注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。</p><p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -it ubuntu bash</span><br></pre></td></tr></table></figure><p>对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">kill</span> [containID]</span><br></pre></td></tr></table></figure><p>image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本机正在运行的容器</span></span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出本机所有容器，包括终止运行的容器</span></span><br><span class="line">$ docker container ls --all</span><br></pre></td></tr></table></figure><p>上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的docker container kill命令。</p><p>终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container rm [containerID]</span><br></pre></td></tr></table></figure><p>运行上面的命令之后，再使用docker container ls –all命令，就会发现被删除的容器文件已经消失了。</p><p>创建tensorflow docker容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker container run --name [name] -it -p 8888:8888 tensorflow/tensorflow:latest-gpu /bin/bash</span><br><span class="line"><span class="comment"># [name]-- 容器的名字</span></span><br><span class="line"><span class="comment"># -it -- 保留命令行运行</span></span><br><span class="line"><span class="comment"># -p 8888:8888 —— 将本地的8888端口和http://localhost:8888/映射</span></span><br><span class="line"><span class="comment"># tensorflow/tensorflow:latest-gpu ：默认是tensorflow/tensorflow:latest,指定使用的镜像</span></span><br></pre></td></tr></table></figure><p>启动docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [name]</span><br></pre></td></tr></table></figure><p>进入docker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach [name]</span><br></pre></td></tr></table></figure><p>重命名docker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename  old_name new_name</span><br></pre></td></tr></table></figure><h3 id="如何进入正在执行的-docker-container"><a href="#如何进入正在执行的-docker-container" class="headerlink" title="如何进入正在执行的 docker container"></a>如何进入正在执行的 docker container</h3><h4 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h4><p>这个是官方提供的一种方法。</p><p>测试，首先启动一个container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t ubuntu bash</span><br><span class="line">root@4556f5ad6067:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>不要退出，打开另一个终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">4556f5ad6067        ubuntu:14.04        <span class="string">"bash"</span>              45 seconds ago      Up 43 seconds                           jolly_ardinghelli</span><br><span class="line"></span><br><span class="line">$ docker attach 4556f5ad6067</span><br><span class="line">root@4556f5ad6067:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>这样就连接进去了。这时候如果我们输入一些命令，就能看到在两个终端都有显示和输出。这种方式有比较大的局限性，如果知道了entrypoint或者有程序正在执行，通过docker attach进入之后是不能执行操作的，一个终端退出之后整个container就终止了。不推荐使用这种方式。</p><h4 id="lxc-attach"><a href="#lxc-attach" class="headerlink" title="lxc-attach"></a>lxc-attach</h4><p>如果使用这种方式，首先要保证docker是以lxc方式启动的，具体可以这样做：</p><p>修改/etc/default/docker增加DOCKER_OPTS=”-e lxc”</p><p>重启docker服务sudo service docker restart</p><p>启动container的方式和之前一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t ubuntu bash</span><br><span class="line">root@e7f01f0ff598:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>进入container可以这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">e7f01f0ff598        ubuntu:14.04        <span class="string">"bash"</span>              17 seconds ago      Up 15 seconds                           grave_jones</span><br><span class="line"></span><br><span class="line">$ ps aux | grep e7f01f0ff598</span><br><span class="line">root     23691  0.0  0.0  43140  1876 pts/9    Ss   21:47   0:00 lxc-start -n e7f01f0ff598c80d70a996135c98fbaeddc6daa61436bbbfa735233e8b6f8ebe -f /var/lib/docker/containers/e7f01f0ff598c80d70a996135c98fbaeddc6daa61436bbbfa735233e8b6f8ebe/config.lxc -- /.dockerinit -g 172.17.42.1 -i 172.17.0.3/16 -mtu 1500 -- bash</span><br><span class="line">ma6174   23756  0.0  0.0  13428   928 pts/12   S+   21:47   0:00 grep --color=auto e7f01f0ff598</span><br><span class="line"></span><br><span class="line">$ sudo lxc-attach -n e7f01f0ff598c80d70a996135c98fbaeddc6daa61436bbbfa735233e8b6f8ebe</span><br><span class="line">root@e7f01f0ff598:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>这种方式还是很方便的。前提是需要重启docker服务以lxc的方式执行，进入container之后会有一个终端可以执行命令，不影响正在执行的程序。</p><h4 id="nsenter"><a href="#nsenter" class="headerlink" title="nsenter"></a>nsenter</h4><p>如果docker不是以lxc方式启动的，这时候还想进入一个正在执行的container的话，可以考虑使用nsenter</p><p>这个程序的安装方式很独特，使用docker进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -v /usr/<span class="built_in">local</span>/bin:/target jpetazzo/nsenter</span><br></pre></td></tr></table></figure><p>使用方法也很简单，首先你要进入的container的PID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ PID=$(docker inspect --format &#123;&#123;.State.Pid&#125;&#125; &lt;container_name_or_ID&gt;)</span><br></pre></td></tr></table></figure><p>然后就可以用这个命令进入container了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nsenter --target <span class="variable">$PID</span> --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure><p>为了使用方便可以写一个脚本自动完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat /bin/docker_enter</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sudo nsenter --target `docker inspect --format &#123;&#123;.State.Pid&#125;&#125; <span class="variable">$1</span>` --mount --uts --ipc --net --pid bash</span><br></pre></td></tr></table></figure><p>这样每次要进入某个container只需要执行docker_enter &lt;container_name_or_ID&gt;就可以了。</p><h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><p>这个原理也很简单，在container里面启动ssh服务，然后通过ssh的方式去登陆到container里面，不推荐这种方式，主要是配置ssh登陆比较繁琐，开启ssh服务也会耗费资源，完全没有必要。</p><h3 id="TensorFlow安装方式一"><a href="#TensorFlow安装方式一" class="headerlink" title="TensorFlow安装方式一"></a>TensorFlow安装方式一</h3><ol><li><p>下载镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tensorflow/tensorflow</span><br></pre></td></tr></table></figure></li><li><p>创建Tensorflow容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-tensorflow -it -p 8888:8888 -v ~/tensorflow:/<span class="built_in">test</span>/data tensorflow/tensorflow</span><br><span class="line"><span class="comment"># --name：创建的容器名，即my-tensorflow</span></span><br><span class="line"><span class="comment"># -it：保留命令行运行</span></span><br><span class="line"><span class="comment"># p 8888:8888：将本地的8888端口和http://localhost:8888/映射</span></span><br><span class="line"><span class="comment"># -v ~/tensorflow:/test/data:将本地的~/tensorflow挂载到容器内的/# test/data下</span></span><br><span class="line"><span class="comment"># tensorflow/tensorflow ：默认是tensorflow/tensorflow:latest,指定使用的镜像</span></span><br></pre></td></tr></table></figure></li><li><p>拷贝带token的URL在浏览器打开</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[all ip addresses on your system]:8888/?token=649d7cab1734e01db75b6c2b476ea87aa0b24dde56662a27</span><br></pre></td></tr></table></figure></li><li><p>显示Jupyter Notebook，Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本。示例中已经显示了Tensorflow的入门教程，点开一个可以看见。</p></li><li><p>关闭容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop my-tensortflow</span><br></pre></td></tr></table></figure></li><li><p>再次打开</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start my-tensortflow</span><br></pre></td></tr></table></figure></li></ol><h3 id="TensorFlow安装方式二"><a href="#TensorFlow安装方式二" class="headerlink" title="TensorFlow安装方式二"></a>TensorFlow安装方式二</h3><ol><li><p>下载镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tensorflow/tensorflow</span><br></pre></td></tr></table></figure></li><li><p>创建Tensorflow容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name bash_tensorflow tensorflow/tensorflow /bin/bash</span><br><span class="line"><span class="comment"># 这样我们就创建了名为bash_tensorflow的容器</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>start命令启动容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start bash_tensorflow</span><br></pre></td></tr></table></figure></li><li><p>再连接上容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker attach bash_tensorflow</span><br><span class="line"><span class="comment"># 可以看到我们用终端连接上了容器，和操作Linux一样了。</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Pip安装"><a href="#Pip安装" class="headerlink" title="Pip安装"></a>Pip安装</h2><h3 id="Linux-和-MacOS"><a href="#Linux-和-MacOS" class="headerlink" title="Linux 和 MacOS"></a>Linux 和 MacOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Linux 64-位 系统的执行代码:</span></span><br><span class="line">$ sudo apt-get install python-pip python-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac OS X 系统的执行代码:</span></span><br><span class="line">$ sudo easy_install --upgrade pip</span><br><span class="line">$ sudo easy_install --upgrade six</span><br></pre></td></tr></table></figure><ol><li><p>CPU 版</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 2+ 的用户:</span></span><br><span class="line">$ pip install tensorflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># python 3+ 的用户:</span></span><br><span class="line">$ pip3 install tensorflow</span><br></pre></td></tr></table></figure></li><li><p>GPU 版</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libcupti-dev</span><br><span class="line">$ sudo apt-get install python-pip python-dev   <span class="comment"># for Python 2.7</span></span><br><span class="line">$ sudo apt-get install python3-pip python3-dev <span class="comment"># for Python 3.n</span></span><br><span class="line">$ pip install tensorflow      <span class="comment"># Python 2.7; CPU support (no GPU support)</span></span><br><span class="line">$ pip3 install tensorflow     <span class="comment"># Python 3.n; CPU support (no GPU support)</span></span><br><span class="line">$ pip install tensorflow-gpu  <span class="comment"># Python 2.7;  GPU support</span></span><br><span class="line">$ pip3 install tensorflow-gpu <span class="comment"># Python 3.n; GPU support</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>测试</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow</span><br></pre></td></tr></table></figure></li></ol><h1 id="TensorFlow-教程"><a href="#TensorFlow-教程" class="headerlink" title="TensorFlow 教程"></a>TensorFlow 教程</h1><h2 id="Session-会话控制"><a href="#Session-会话控制" class="headerlink" title="Session 会话控制"></a>Session 会话控制</h2><p>参考：</p><ul><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-3-session/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-3-session/</a></li></ul><p>Session 是 Tensorflow 为了控制,和输出文件的执行的语句. 运行 session.run() 可以获得你要得知的运算结果, 或者是你所要运算的部分.</p><p>例子讲解：建立两个 matrix ,输出两个 matrix 矩阵相乘的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># create two matrixes</span></span><br><span class="line"></span><br><span class="line">matrix1 = tf.constant([[<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">matrix2 = tf.constant([[<span class="number">2</span>],</span><br><span class="line">                       [<span class="number">2</span>]])</span><br><span class="line">product = tf.matmul(matrix1,matrix2)</span><br></pre></td></tr></table></figure><p>因为 product 不是直接计算的步骤, 所以我们会要使用 Session 来激活 product 并得到计算结果. 有两种形式使用会话控制 Session 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line">result = sess.run(product)</span><br><span class="line">print(result)</span><br><span class="line">sess.close()</span><br><span class="line"><span class="comment"># [[12]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result2 = sess.run(product)</span><br><span class="line">    print(result2)</span><br><span class="line"><span class="comment"># [[12]]</span></span><br></pre></td></tr></table></figure><h2 id="Variable-变量"><a href="#Variable-变量" class="headerlink" title="Variable 变量"></a>Variable 变量</h2><p>参考：</p><ul><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-4-variable/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-4-variable/</a></li></ul><p>在 Tensorflow 中，定义了某字符串是变量，它才是变量。定义语法： state = tf.Variable()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">state = tf.Variable(<span class="number">0</span>, name=<span class="string">'counter'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义常量 one</span></span><br><span class="line">one = tf.constant(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义加法步骤 (注: 此步并没有直接计算)</span></span><br><span class="line">new_value = tf.add(state, one)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 State 更新成 new_value</span></span><br><span class="line">update = tf.assign(state, new_value)</span><br></pre></td></tr></table></figure><p>如果你在 Tensorflow 中设定了变量，那么初始化变量是最重要的！！所以定义了变量以后, 一定要定义 init = tf.initialize_all_variables() .</p><p>到这里变量还是没有被激活，需要再在 sess 里, sess.run(init) , 激活 init 这一步.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果定义 Variable, 就一定要 initialize</span></span><br><span class="line"><span class="comment"># init = tf.initialize_all_variables() # tf 马上就要废弃这种写法</span></span><br><span class="line">init = tf.global_variables_initializer()  <span class="comment"># 替换成这样就好</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 Session</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        sess.run(update)</span><br><span class="line">        print(sess.run(state))</span><br></pre></td></tr></table></figure><p>注意：直接 print(state) 不起作用！！</p><p>一定要把 sess 的指针指向 state 再进行 print 才能得到想要的结果！</p><h2 id="Placeholder-传入值"><a href="#Placeholder-传入值" class="headerlink" title="Placeholder 传入值"></a>Placeholder 传入值</h2><p>参考：</p><ul><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-5-placeholde/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/2-5-placeholde/</a></li></ul><p>placeholder 是 Tensorflow 中的占位符，暂时储存变量.</p><p>Tensorflow 如果想要从外部传入data, 那就需要用到 tf.placeholder(), 然后以这种形式传输数据 sess.run(<strong>*, feed_dict={input: </strong>}).</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#在 Tensorflow 中需要定义 placeholder 的 type ，一般为 float32 形式</span></span><br><span class="line">input1 = tf.placeholder(tf.float32)</span><br><span class="line">input2 = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mul = multiply 是将input1和input2 做乘法运算，并输出为 output </span></span><br><span class="line">ouput = tf.multiply(input1, input2)</span><br></pre></td></tr></table></figure><p>接下来, 传值的工作交给了 sess.run() , 需要传入的值放在了feed_dict={} 并一一对应每一个 input. placeholder 与 feed_dict={} 是绑定在一起出现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    print(sess.run(ouput, feed_dict=&#123;input1: [<span class="number">7.</span>], input2: [<span class="number">2.</span>]&#125;))</span><br><span class="line"><span class="comment"># [ 14.]</span></span><br></pre></td></tr></table></figure><h2 id="建造神经网络"><a href="#建造神经网络" class="headerlink" title="建造神经网络"></a>建造神经网络</h2><p>参考：</p><ul><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-2-create-NN/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-2-create-NN/</a></li></ul><h3 id="add-layer-功能"><a href="#add-layer-功能" class="headerlink" title="add_layer 功能"></a>add_layer 功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs, in_size, out_size, activation_function=None)</span>:</span></span><br><span class="line">    Weights = tf.Variable(tf.random_normal([in_size, out_size]))</span><br><span class="line">    biases = tf.Variable(tf.zeros([<span class="number">1</span>, out_size]) + <span class="number">0.1</span>)</span><br><span class="line">    Wx_plus_b = tf.matmul(inputs, Weights) + biases</span><br><span class="line">    <span class="keyword">if</span> activation_function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs = Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation_function(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p>构建所需的数据。 这里的x_data和y_data并不是严格的一元二次函数的关系，因为我们多加了一个noise,这样看起来会更像真实情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_data = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">300</span>, dtype=np.float32)[:, np.newaxis]</span><br><span class="line">noise = np.random.normal(<span class="number">0</span>, <span class="number">0.05</span>, x_data.shape).astype(np.float32)</span><br><span class="line">y_data = np.square(x_data) - <span class="number">0.5</span> + noise</span><br></pre></td></tr></table></figure><p>利用占位符定义我们所需的神经网络的输入。 tf.placeholder()就是代表占位符，这里的None代表无论输入有多少都可以，因为输入只有一个特征，所以这里是1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xs = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br><span class="line">ys = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>接下来，我们就可以开始定义神经层了。 通常神经层都包括输入层、隐藏层和输出层。这里的输入层只有一个属性， 所以我们就只有一个输入；隐藏层我们可以自己假设，这里我们假设隐藏层有10个神经元； 输出层和输入层的结构是一样的，所以我们的输出层也是只有一层。 所以，我们构建的是——输入层1个、隐藏层10个、输出层1个的神经网络。</p><h3 id="搭建网络"><a href="#搭建网络" class="headerlink" title="搭建网络"></a>搭建网络</h3><p>利用之前的add_layer()函数，这里使用 Tensorflow 自带的激励函数tf.nn.relu。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l1 = add_layer(xs, <span class="number">1</span>, <span class="number">10</span>, activation_function=tf.nn.relu)</span><br></pre></td></tr></table></figure><p>接着，定义输出层。此时的输入就是隐藏层的输出——l1，输入有10层（隐藏层的输出层），输出有1层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prediction = add_layer(l1, <span class="number">10</span>, <span class="number">1</span>, activation_function=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>计算预测值prediction和真实值的误差，对二者差的平方求和再取平均。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),</span><br><span class="line">                     reduction_indices=[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>接下来，是很关键的一步，如何让机器学习提升它的准确率。tf.train.GradientDescentOptimizer()中的值通常都小于1，这里取的是0.1，代表以0.1的效率来最小化误差loss。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br></pre></td></tr></table></figure><p>使用变量时，都要对它进行初始化，这是必不可少的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># init = tf.initialize_all_variables() # tf 马上就要废弃这种写法</span></span><br><span class="line">init = tf.global_variables_initializer()  <span class="comment"># 替换成这样就好</span></span><br></pre></td></tr></table></figure><p>定义Session，并用 Session 来执行 init 初始化步骤。 （注意：在tensorflow中，只有session.run()才会执行我们定义的运算。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>机器学习的内容是train_step, 用 Session 来 run 每一次 training 的数据，逐步提升神经网络的预测准确性。 (注意：当运算要用到placeholder时，就需要feed_dict这个字典来指定输入。)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># training</span></span><br><span class="line">    sess.run(train_step, feed_dict=&#123;xs: x_data, ys: y_data&#125;)</span><br></pre></td></tr></table></figure><p>每50步我们输出一下机器学习的误差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># to see the step improvement</span></span><br><span class="line">    print(sess.run(loss, feed_dict=&#123;xs: x_data, ys: y_data&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.021204619</span></span><br><span class="line"><span class="number">0.009980676</span></span><br><span class="line"><span class="number">0.007174721</span></span><br><span class="line"><span class="number">0.006633012</span></span><br><span class="line"><span class="number">0.00622975</span></span><br><span class="line"><span class="number">0.005894037</span></span><br><span class="line"><span class="number">0.005621146</span></span><br><span class="line"><span class="number">0.0053801737</span></span><br><span class="line"><span class="number">0.00519997</span></span><br><span class="line"><span class="number">0.005050111</span></span><br><span class="line"><span class="number">0.004922069</span></span><br><span class="line"><span class="number">0.0048095705</span></span><br><span class="line"><span class="number">0.0047140927</span></span><br><span class="line"><span class="number">0.0046234317</span></span><br><span class="line"><span class="number">0.0045334958</span></span><br><span class="line"><span class="number">0.0044504963</span></span><br><span class="line"><span class="number">0.004378309</span></span><br><span class="line"><span class="number">0.0043256846</span></span><br><span class="line"><span class="number">0.0042802156</span></span><br><span class="line"><span class="number">0.0042369063</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 深度学习 </category>
          
          <category> TF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> TF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验室GPU服务器部署教程</title>
      <link href="/2018/03/29/%E5%AE%9E%E9%AA%8C%E5%AE%A4GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/29/%E5%AE%9E%E9%AA%8C%E5%AE%A4GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a><a href="https://docs.docker.com/install/linux/ubuntu/" target="_blank" rel="noopener">Docker</a> 安装</h1><p>参考：<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository</a></p><ol><li><p>Prerequisites</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">To install Docker CE, you need the 64-bit version of one of these Ubuntu versions:</span><br><span class="line"></span><br><span class="line">Artful 17.10 (Docker CE 17.11 Edge and higher only)</span><br><span class="line">Xenial 16.04 (LTS)</span><br><span class="line">Trusty 14.04 (LTS)</span><br></pre></td></tr></table></figure></li><li><p>Uninstall old versions</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure></li><li><p>Install Docker CE</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"><span class="comment"># Install packages to allow apt to use a repository over HTTPS</span></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line"><span class="comment"># Add Docker’s official GPG key:</span></span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"><span class="comment"># Use the following command to set up the stable repository.</span></span><br><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"><span class="comment"># Install the latest version of Docker CE</span></span><br><span class="line">$ sudo apt-get install docker-ce</span><br><span class="line"><span class="comment"># Verify that Docker CE is installed correctly by running the hello-world image.</span></span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>UPGRADE DOCKER CE</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>Uninstall Docker CE</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge docker-ce</span><br><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ol><h1 id="Docker-备份、恢复和迁移"><a href="#Docker-备份、恢复和迁移" class="headerlink" title="Docker 备份、恢复和迁移"></a>Docker 备份、恢复和迁移</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>首先，为了备份Docker中的容器，我们会想看看我们想要备份的容器列表。要达成该目的，我们需要在我们运行着Docker引擎，并已创建了容器的Linux机器中运行 docker ps 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br></pre></td></tr></table></figure><p>在此之后，我们要选择我们想要备份的容器，然后去创建该容器的快照。我们可以使用 docker commit 命令来创建快照。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker commit -p 30b8f18f20b4 container-backup</span></span><br></pre></td></tr></table></figure><p>该命令会生成一个作为Docker镜像的容器快照，我们可以通过运行 docker images 命令来查看Docker镜像，如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br></pre></td></tr></table></figure><p>正如我们所看见的，上面做的快照已经作为Docker镜像保存了。现在，为了备份该快照，我们有两个选择，一个是我们可以登录进Docker注册中心，并推送该镜像；另一个是我们可以将Docker镜像打包成tar包备份，以供今后使用。</p><p>如果我们想要在<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker注册中心</a>上传或备份镜像，我们只需要运行 docker login 命令来登录进Docker注册中心，然后推送所需的镜像即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker login</span></span><br><span class="line"><span class="comment"># docker tag a25ddfec4d2a arunpyasi/container-backup:test</span></span><br><span class="line"><span class="comment"># docker push arunpyasi/container-backup</span></span><br></pre></td></tr></table></figure><p>如果我们不想备份到docker注册中心，而是想要将此镜像保存在本地机器中，以供日后使用，那么我们可以将其作为tar包备份。要完成该操作，我们需要运行以下 docker save 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker save -o ~/container-backup.tar container-backup</span></span><br></pre></td></tr></table></figure><p>要验证tar包是否已经生成，我们只需要在保存tar包的目录中运行 ls 命令即可。</p><h2 id="恢复容器"><a href="#恢复容器" class="headerlink" title="恢复容器"></a>恢复容器</h2><p>接下来，在我们成功备份了我们的Docker容器后，我们现在来恢复这些制作了Docker镜像快照的容器。如果我们已经在注册中心推送了这些Docker镜像，那么我们仅仅需要把那个Docker镜像拖回并直接运行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker pull arunpyasi/container-backup:test</span></span><br></pre></td></tr></table></figure><p>但是，如果我们将这些Docker镜像作为tar包文件备份到了本地，那么我们只要使用 docker load 命令，后面加上tar包的备份路径，就可以加载该Docker镜像了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker load -i ~/container-backup.tar</span></span><br></pre></td></tr></table></figure><p>现在，为了确保这些Docker镜像已经加载成功，我们来运行 docker images 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br></pre></td></tr></table></figure><p>在镜像被加载后，我们将用加载的镜像去运行Docker容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 80:80 container-backup</span></span><br></pre></td></tr></table></figure><h2 id="迁移Docker容器"><a href="#迁移Docker容器" class="headerlink" title="迁移Docker容器"></a>迁移Docker容器</h2><p>迁移容器同时涉及到了上面两个操作，备份和恢复。我们可以将任何一个Docker容器从一台机器迁移到另一台机器。在迁移过程中，首先我们将把容器备份为Docker镜像快照。然后，该Docker镜像或者是被推送到了Docker注册中心，或者被作为tar包文件保存到了本地。如果我们将镜像推送到了Docker注册中心，我们简单地从任何我们想要的机器上使用 docker run 命令来恢复并运行该容器。但是，如果我们将镜像打包成tar包备份到了本地，我们只需要拷贝或移动该镜像到我们想要的机器上，加载该镜像并运行需要的容器即可。</p><h1 id="Docker-SSH-访问"><a href="#Docker-SSH-访问" class="headerlink" title="Docker SSH 访问"></a>Docker SSH 访问</h1><p>假设我们已经pull了一个docker 镜像，如下图所示的tensorflow/tensorflow。</p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-tensorflow -it -p 8888:8888 -v ~/tensorflow:/<span class="built_in">test</span>/data tensorflow/tensorflow</span><br><span class="line"><span class="comment"># --name：创建的容器名，即my-tensorflow</span></span><br><span class="line"><span class="comment"># -it：保留命令行运行</span></span><br><span class="line"><span class="comment"># p 8888:8888：将本地的8888端口和http://localhost:8888/映射</span></span><br><span class="line"><span class="comment"># -v ~/tensorflow:/test/data:将本地的~/tensorflow挂载到容器内的/# test/data下</span></span><br><span class="line"><span class="comment"># tensorflow/tensorflow ：默认是tensorflow/tensorflow:latest,指定使用的镜像</span></span><br></pre></td></tr></table></figure></code></pre><p>如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name tf tensorflow/tensorflow /bin/bash</span><br><span class="line"><span class="comment"># 这样我们就创建了名为tf的容器</span></span><br><span class="line">docker start tf</span><br><span class="line">docker attach tf</span><br></pre></td></tr></table></figure><h2 id="修改容器的root密码"><a href="#修改容器的root密码" class="headerlink" title="修改容器的root密码"></a>修改容器的root密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vim -y</span><br><span class="line">apt-get install openssh-server -y</span><br><span class="line">apt-get install passwd</span><br><span class="line">passwd root</span><br></pre></td></tr></table></figure><h2 id="修改ssh配置"><a href="#修改ssh配置" class="headerlink" title="修改ssh配置"></a>修改ssh配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 修改PermitRootLogin yes  </span></span><br><span class="line">UsePAM no</span><br></pre></td></tr></table></figure><h2 id="启动ssh服务"><a href="#启动ssh服务" class="headerlink" title="启动ssh服务"></a>启动ssh服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="提交容器成为新的镜像"><a href="#提交容器成为新的镜像" class="headerlink" title="提交容器成为新的镜像"></a>提交容器成为新的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如叫做ubuntu-ssh，输入docker commit 容器ID ubuntu-ssh</span><br></pre></td></tr></table></figure><h2 id="启动这个镜像的容器，并映射本地的一个闲置的端口"><a href="#启动这个镜像的容器，并映射本地的一个闲置的端口" class="headerlink" title="启动这个镜像的容器，并映射本地的一个闲置的端口"></a>启动这个镜像的容器，并映射本地的一个闲置的端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 50001:22 tf-ssh /bin/bash</span><br></pre></td></tr></table></figure><h2 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@127.0.0.1 -p 50001</span><br></pre></td></tr></table></figure><h2 id="Docker后台运行"><a href="#Docker后台运行" class="headerlink" title="Docker后台运行"></a>Docker后台运行</h2><h1 id="阿里云加速器设置"><a href="#阿里云加速器设置" class="headerlink" title="阿里云加速器设置"></a>阿里云加速器设置</h1><p>由于官方Docker Hub网络速度较慢，这里使用阿里云提供的<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>. 需要配置阿里云加速器，官方说明如下：</p><ol><li><p>针对Docker客户端版本大于1.10的用户： </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</span></span><br><span class="line">$ sudo mkdir -p /etc/docker</span><br><span class="line">$ sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’ </span><br><span class="line">  &#123; </span><br><span class="line">  “registry-mirrors”: [“https://fird1mfg.mirror.aliyuncs.com“] </span><br><span class="line">  &#125; </span><br><span class="line">  EOF</span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>针对Docker客户的版本小于等于1.10的用户或者想配置启动参数，可以使用下面的命令将配置添加到docker daemon的启动参数中.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 12.04 14.04的用户:</span></span><br><span class="line">$ <span class="built_in">echo</span> “DOCKER_OPTS=/”<span class="variable">$DOCKER_OPTS</span> –registry-mirror=https://fird1mfg.mirror.aliyuncs.com/”” | sudo tee -a /etc/default/docker</span><br><span class="line">$ sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 15.04 16.04的用户</span></span><br><span class="line">$ sudo mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">$ sudo tee /etc/systemd/system/docker.service.d/mirror.conf &lt;&lt;-‘EOF’ </span><br><span class="line">[Service] </span><br><span class="line">ExecStart=/usr/bin/docker daemon -H fd:// –registry-mirror=https://fird1mfg.mirror.aliyuncs.com </span><br><span class="line">EOF</span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><h1 id="NVIDIA-Docker安装"><a href="#NVIDIA-Docker安装" class="headerlink" title="NVIDIA-Docker安装"></a><a href="https://github.com/NVIDIA/nvidia-docker/wiki" target="_blank" rel="noopener">NVIDIA-Docker</a>安装</h1><ol><li><p>Prerequisties</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GNU/Linux x86_64 with kernel version &gt; 3.10 </span><br><span class="line">Docker &gt;= 1.9 (official docker-engine, docker-ce or docker-ee only) </span><br><span class="line">NVIDIA GPU with Architecture &gt; Fermi (2.1) </span><br><span class="line">NVIDIA drivers &gt;= 340.29 with binary nvidia-modprobe (驱动版本与CUDA计算能力相关)</span><br></pre></td></tr></table></figure></li><li><p>CUDA与NVIDIA driver安装 <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">cuda</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">处理NVIDIA-Docker依赖项 NVIDIA drivers &gt;= 340.29 with binary nvidia-modprobe 要求. </span><br><span class="line">根据显卡，下载对应版本的CUDA并进行安装.</span><br></pre></td></tr></table></figure></li><li><p>NVIDIA-Docker安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Install nvidia-docker and nvidia-docker-plugin</span></span><br><span class="line"></span><br><span class="line">wget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker_1.0.1-1_amd64.deb</span><br><span class="line">sudo dpkg -i /tmp/nvidia-docker*.deb &amp;&amp; rm /tmp/nvidia-docker*.deb</span><br><span class="line"><span class="comment">#Test nvidia-smi</span></span><br><span class="line"></span><br><span class="line">sudo nvidia-docker run –rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>默认用nvdia-docker替代docker命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'alias docker=nvidia-docker'</span> &gt;&gt; ~/.bashrc</span><br><span class="line">bash</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://jingyan.baidu.com/article/a3aad71aa180e7b1fa009676.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/a3aad71aa180e7b1fa009676.html</a></li><li><a href="https://github.com/ufoym/deepo#Installation" target="_blank" rel="noopener">https://github.com/ufoym/deepo#Installation</a></li><li><a href="https://hub.docker.com/r/ufoym/deepo/" target="_blank" rel="noopener">https://hub.docker.com/r/ufoym/deepo/</a></li><li><a href="https://github.com/fatedier/frp/blob/master/README_zh.md#frp-%E7%9A%84%E4%BD%9C%E7%94%A8" target="_blank" rel="noopener">https://github.com/fatedier/frp/blob/master/README_zh.md#frp-%E7%9A%84%E4%BD%9C%E7%94%A8</a></li><li><a href="https://ranpox.github.io/2018/01/14/notification-of-gpu-server/" target="_blank" rel="noopener">https://ranpox.github.io/2018/01/14/notification-of-gpu-server/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 深度学习 </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python多线程教程</title>
      <link href="/2018/03/26/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/26/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么多线程"><a href="#什么多线程" class="headerlink" title="什么多线程"></a>什么多线程</h1><p>多线程是加速程序计算的有效方式</p><h2 id="添加线程-Thread"><a href="#添加线程-Thread" class="headerlink" title="添加线程 Thread"></a>添加线程 Thread</h2><ul><li>导入模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure><ul><li>获取已激活的线程数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threading.active_count()</span><br></pre></td></tr></table></figure><ul><li>查看所有线程信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threading.enumerate()</span><br></pre></td></tr></table></figure><ul><li>查看现在正在运行的线程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threading.current_thread()</span><br></pre></td></tr></table></figure><ul><li>添加线程</li></ul><p>threading.Thread()接收参数target代表这个线程要完成的任务，需自行定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'This is a thread of %s'</span> % threading.current_thread())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    thread = threading.Thread(target=thread_job,)   <span class="comment"># 定义线程 </span></span><br><span class="line">    thread.start()  <span class="comment"># 让线程开始工作</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="join-功能"><a href="#join-功能" class="headerlink" title="join 功能"></a>join 功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_job</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"T1 start\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>) <span class="comment"># 任务间隔0.1s</span></span><br><span class="line">    print(<span class="string">"T1 finish\n"</span>)</span><br><span class="line"></span><br><span class="line">added_thread = threading.Thread(target=thread_job, name=<span class="string">'T1'</span>)</span><br><span class="line">added_thread.start()</span><br><span class="line">print(<span class="string">"all done\n"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">thread_1.start() <span class="comment"># start T1</span></span><br><span class="line">thread_2.start() <span class="comment"># start T2</span></span><br><span class="line">thread_2.join() <span class="comment"># join for T2</span></span><br><span class="line">thread_1.join() <span class="comment"># join for T1</span></span><br><span class="line">print(<span class="string">"all done\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">T1 start</span></span><br><span class="line"><span class="string">T2 start</span></span><br><span class="line"><span class="string">T2 finish</span></span><br><span class="line"><span class="string">T1 finish</span></span><br><span class="line"><span class="string">all done</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="储存进程结果-Queue"><a href="#储存进程结果-Queue" class="headerlink" title="储存进程结果 Queue"></a>储存进程结果 Queue</h2><ul><li>导入线程,队列的标准模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br></pre></td></tr></table></figure><ul><li>定义一个被多线程调用的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(l,q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (len(l)):</span><br><span class="line">        l[i] = l[i]**<span class="number">2</span></span><br><span class="line">    q.put(l)   <span class="comment">#多线程调用的函数不能用return返回值</span></span><br></pre></td></tr></table></figure><p>完整的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(l,q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (len(l)):</span><br><span class="line">        l[i] = l[i]**<span class="number">2</span></span><br><span class="line">    q.put(l)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multithreading</span><span class="params">()</span>:</span></span><br><span class="line">    q =Queue()</span><br><span class="line">    threads = []</span><br><span class="line">    data = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        t = threading.Thread(target=job,args=(data[i],q))</span><br><span class="line">        t.start()</span><br><span class="line">        threads.append(t)</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        results.append(q.get())</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name___==<span class="string">'__main__'</span>:</span><br><span class="line">    multithreading()</span><br></pre></td></tr></table></figure><h2 id="线程锁-Lock"><a href="#线程锁-Lock" class="headerlink" title="线程锁 Lock"></a>线程锁 Lock</h2><ul><li>不使用 Lock 的情况</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> A</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        A+=<span class="number">1</span></span><br><span class="line">        print(<span class="string">'job1'</span>,A)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> A</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        A+=<span class="number">10</span></span><br><span class="line">        print(<span class="string">'job2'</span>,A)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">'__main__'</span>:</span><br><span class="line">    lock=threading.Lock()</span><br><span class="line">    A=<span class="number">0</span></span><br><span class="line">    t1=threading.Thread(target=job1)</span><br><span class="line">    t2=threading.Thread(target=job2)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">job1job2 <span class="number">11</span></span><br><span class="line">job2 <span class="number">21</span></span><br><span class="line">job2 <span class="number">31</span></span><br><span class="line">job2 <span class="number">41</span></span><br><span class="line">job2 <span class="number">51</span></span><br><span class="line">job2 <span class="number">61</span></span><br><span class="line">job2 <span class="number">71</span></span><br><span class="line">job2 <span class="number">81</span></span><br><span class="line">job2 <span class="number">91</span></span><br><span class="line">job2 <span class="number">101</span></span><br><span class="line"> <span class="number">1</span></span><br><span class="line">job1 <span class="number">102</span></span><br><span class="line">job1 <span class="number">103</span></span><br><span class="line">job1 <span class="number">104</span></span><br><span class="line">job1 <span class="number">105</span></span><br><span class="line">job1 <span class="number">106</span></span><br><span class="line">job1 <span class="number">107</span></span><br><span class="line">job1 <span class="number">108</span></span><br><span class="line">job1 <span class="number">109</span></span><br><span class="line">job1 <span class="number">110</span></span><br></pre></td></tr></table></figure><ul><li>使用 Lock 的情况</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> A,lock</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        A+=<span class="number">1</span></span><br><span class="line">        print(<span class="string">'job1'</span>,A)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> A,lock</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        A+=<span class="number">10</span></span><br><span class="line">        print(<span class="string">'job2'</span>,A)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">'__main__'</span>:</span><br><span class="line">    lock=threading.Lock()</span><br><span class="line">    A=<span class="number">0</span></span><br><span class="line">    t1=threading.Thread(target=job1)</span><br><span class="line">    t2=threading.Thread(target=job2)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">job1 <span class="number">1</span></span><br><span class="line">job1 <span class="number">2</span></span><br><span class="line">job1 <span class="number">3</span></span><br><span class="line">job1 <span class="number">4</span></span><br><span class="line">job1 <span class="number">5</span></span><br><span class="line">job1 <span class="number">6</span></span><br><span class="line">job1 <span class="number">7</span></span><br><span class="line">job1 <span class="number">8</span></span><br><span class="line">job1 <span class="number">9</span></span><br><span class="line">job1 <span class="number">10</span></span><br><span class="line">job2 <span class="number">20</span></span><br><span class="line">job2 <span class="number">30</span></span><br><span class="line">job2 <span class="number">40</span></span><br><span class="line">job2 <span class="number">50</span></span><br><span class="line">job2 <span class="number">60</span></span><br><span class="line">job2 <span class="number">70</span></span><br><span class="line">job2 <span class="number">80</span></span><br><span class="line">job2 <span class="number">90</span></span><br><span class="line">job2 <span class="number">100</span></span><br><span class="line">job2 <span class="number">110</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://morvanzhou.github.io/tutorials/python-basic/threading/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/python-basic/threading/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Python </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>semantic_mapping_论文阅读</title>
      <link href="/2018/03/26/semantic-mapping-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>/2018/03/26/semantic-mapping-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Semantic-Mapping-文献综述"><a href="#Semantic-Mapping-文献综述" class="headerlink" title="Semantic Mapping 文献综述"></a>Semantic Mapping 文献综述</h1><blockquote><p>1，CNN-SLAM为今年CVPR的文章，是比较完整的pipeline，将LSD-SLAM里的深度估计和图像匹配都替换成基于CNN的方法，取得了更为robust的结果，并可以融合语义信息。见<a href="http://campar.in.tum.de/Chair/ProjectCNNSLAM" target="_blank" rel="noopener">ProjectCNNSLAM</a>.类似的工作还有UnDeepVO: Monocular Visual Odometry through Unsupervised Deep Learning。 问题在于准确度非常低。做过benchmark，基于单帧彩色照片进行距离信息预测，在室内每个像素的平均误差约50cm，在室外平均误差则高达７米以上。一篇投ICRA的工作结合少量的距离信息和彩色信息进行距离图像预测，效果比单纯用彩色照片准确得多且鲁棒性强。这个方法可以帮助传统SLAM从稀疏点云快速生成密集的点云，也可以用在激光雷达的超分辨率上。代码已开源<a href="https://github.com/fangchangma/sparse-to-dense" target="_blank" rel="noopener">sparse-to-dense</a>,论文：Sparse-to-Dense: Depth Prediction from Sparse Depth Samples and a Single Image <br><br></p><ol start="2"><li>VINet是AAAI2017的文章，利用CNN和RNN构建了一个VIO，即输入image和IMU信息，直接输出估计的pose。 <br><br></li><li>Unsupervised learning of depth and ego-motion from video是Google CVPR 2017的oral文章，利用CNN学习一个无监督的深度估计和pose估计网络，代码见<a href="https://github.com/tinghuiz/SfMLearner.git" target="_blank" rel="noopener">SfMLearner</a>.SfM-Net利用监督学习也干了类似的工作。 <br><br></li><li>重定位PoseNet和Delving deeper into convolutional neural networks for camera relocalization <br></li><li>语义地图 Semi-Dense 3D Semantic Mapping from Monocular SLAM <br><br></li><li>哪怕在传统基于特征点的SLAM已经能做到非常稳定高效的这个情况下，适合结合deep learning的科研方向还是有很多的。这其中包括 <br><blockquote><ul><li>提高特征点稳定性（减少outlier）和自动提取不同层级的特征点（点、线、面、物体）， <br></li><li>快速生成密集的地图（而非稀疏的三维点云） <br></li><li>结合语义信息和图像分割 <br></li><li>生成动态地图（可以实时更新、表达动态物体） <br></li><li>降低SLAM调参的难度 <br></li></ul></blockquote></li></ol></blockquote><blockquote><p>7.跳出SLAM，说点题外话，利用深度强化学习来进行端对端的机器人导航，已经有了不错的结果。人类在环境中导航，不也是直接输入image，输出action吗？有兴趣的可以看看这两篇文章：<a href="https://arxiv.org/abs/1702.03920" target="_blank" rel="noopener">Cognitive Mapping and Planning for Visual Navigation</a>和<a href="https://arxiv.org/abs/1609.05143" target="_blank" rel="noopener">Target-driven Visual Navigation in Indoor Scenes using Deep Reinforcement Learning</a>。navigation 是更适合 DL 的一个场景。人在移动的时候，并不会建立精确的环境地图，无法具体说出障碍物距离自己多少厘米。所以，我一直有一个直觉：「navigation 应该不需要精确地图信息与定位信息」，而 DL 似乎有可能实现这一全新的方法。 navigation 是更适合 DL 的一个场景。人在移动的时候，并不会建立精确的环境地图，无法具体说出障碍物距离自己多少厘米。所以，一直有一个直觉：「navigation 应该不需要精确地图信息与定位信息」，而 DL 似乎有可能实现这一全新的方法。但是，目前所有这些工作都存在一个问题：只是训练出一个 local planner，无法实现全局的路径规划。 <br><br></p><ol start="8"><li>语义分割和SLAM的结合还很粗糙.最简单的方式，就是跑一个pixel-wise的图像语义分割，再跑一个dense或者semi-dense的SLAM，把前者的结果map到后者的地图上去，每个像素（或者surfel）上做recursive Bayesian update，其实也就是概率累乘。参见Andrew Davison组的SemanticFusion (ICRA’17)，代码已开源。国内学者也有类似的工作，用LSD-SLAM + DeepLab v2，这个是单目的（SemanticFusion是RGB-D）,即<a href="https://arxiv.org/abs/1611.04144" target="_blank" rel="noopener">Semi-Dense 3D Semantic Mapping from Monocular SLAM</a>。这种结合方式，按某些学者的意见都不能称为semantic SLAM，只能叫semantic mapping，因为localization部分跟semantics没关系嘛。 <br><br></li><li>真正的semantic SLAM，语义信息是要能够帮助定位的，比如这篇：<a href="https://pdfs.semanticscholar.org/ef4c/ffbbca79df1c1ca7891345f898812289b6cb.pdf" target="_blank" rel="noopener">Probabilistic Data Association for Semantic SLAM</a>(ICRA’17)。用object detection的结果作为SLAM前端的输入，跟ORB之类的特征互补提高定位鲁棒性。优点很明显，这下SLAM不会因为你把床收拾了一下就啥都不认识了（视觉特征都变了，但床还是床）。难点是detection结果的data association最好能跟定位联合优化，但前者是个离散问题。这篇文章用EM算法，E步考虑所有可能的association，比较粗暴，但识别物体较少的时候还不错（论文实验里只识别椅子）。上面这篇文章没有语义分割。。。map里只有稀稀拉拉的几个物体（位置和类别）。 <br><br></li><li>另外，SLAM也能提升语义理解水平。前面提到的SemanticFusion和类似的工作里，融合了多个视角语义理解结果的3D地图，其中的语义标签准确率高于单帧图像得到的结果，这很容易理解。另外，通过在3D空间引入一些先验信息，比如用CRF对地图做一下diffusion，能进一步提升准确率。但CRF毕竟还是简单粗暴，如果设计更精细的滤波算法，尤其是能从真实数据中学习一些先验的话，应该效果还会更好。这方面的工作还没有。 <br><br></li><li>再提一个，融合优化之后的结果如果反馈给图像语义理解算法做一下fine-tuning，那就是self-supervised learning了。这方面的工作也还没有。 <br><br></li><li>接下来是语义地图怎么用的问题。对上层应用有价值的语义地图，应该包含一个个物体及其模型，而不仅是一堆标记了类别的voxel。一个比较好的例子来自IROS’17：<a href="https://arxiv.org/abs/1609.07849" target="_blank" rel="noopener">Meaningful Maps With Object-Oriented Semantic Mapping</a>不过这篇文章里的语义信息来自SSD和非神经网络的分割，还没有用端到端的语义分割网络。 <br><br></li><li>另外，针对动态场景，怎样处理物体移位，怎样区别长效地图和短效地图，怎么“脑补”同类物体，这里面一堆问题可以研究。更别说地图构建出来之后如何做体现空间智能的自然语言交互和任务规划，如何reasoning了，这方面研究目前连影子都没有。 <br><br></li><li>一篇很好的综述，里面也有很多关于语义SLAM的介绍：<a href="https://arxiv.org/abs/1606.05830" target="_blank" rel="noopener">Past, Present, and Future of Simultaneous Localization And Mapping: Towards the Robust-Perception Age</a> <br><br></li><li>语义slam开源：<br></li></ol><ul><li><a href="https://github.com/yuxng/DA-RNN" target="_blank" rel="noopener">DA-RNN_Semantic Mapping with Data Associated</a><br></li><li><a href="https://bitbucket.org/dysonroboticslab/semanticfusion" target="_blank" rel="noopener">SemanticFusion</a><br></li><li><a href="https://github.com/shichaoy/pop_up_image" target="_blank" rel="noopener">Pop-up SLAM: Semantic Monocular Plane SLAM</a>.场景理解用于改善状态估计，尤其是在低纹理区域，是目前极少的开源语义SLAM方案之一<br></li></ul></blockquote><p>参考：</p><ol><li><a href="https://www.zhihu.com/question/66006923/answer/241333356" target="_blank" rel="noopener">当前深度学习和slam结合有哪些比较好的论文，有没有一些开源的代码?</a></li><li><a href="https://www.zhihu.com/question/264578623/answer/283163990" target="_blank" rel="noopener">当前语义分割帮助视觉SLAM提高定位准确度，建立语义地图的研究现状如何？</a></li></ol><h2 id="研读论文一：CNN-SLAM-Real-time-dense-monocular-SLAM-with-learned-depth-prediction"><a href="#研读论文一：CNN-SLAM-Real-time-dense-monocular-SLAM-with-learned-depth-prediction" class="headerlink" title="研读论文一：CNN-SLAM: Real-time dense monocular SLAM with learned depth prediction"></a>研读论文一：CNN-SLAM: Real-time dense monocular SLAM with learned depth prediction</h2><blockquote><p>Tateno, K., Tombari, F., Laina, I., &amp; Navab, N. (2017). CNN-SLAM: Real-time dense monocular SLAM with learned depth prediction. arXiv preprint arXiv:1704.03489.<br>CVPR 2017</p></blockquote><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ol><li>本文提出了一种基于深度神经网络方法能够从单目图像中预测深度信息，用途可为弹幕图像的重建。尤其是对于纯单目重建是小的区域，如纹理不丰富的区域，效果较好。此外，相比较于单目SLAM，该深度SLAM还可提供scale。此外，该方法还融合了语义标记，来重建语义信息的场景。</li><li>传统的基于深度摄像头的SLAM有如下缺点：</li></ol><ul><li>有效工作距离较短</li><li>太阳光的影响等</li><li>普适性</li></ul><ol start="3"><li>双目摄像头缺点：特征丰富程度敏感</li><li>鉴于卷积神经网络（CNN）深度预测的最新进展，本文研究了深度神经网络的预测深度图，可以部署用于精确和密集的单目重建。我们提出了一种方法，其中CNN预测的稠密深度图与通过直接单目SLAM获得的深度测量自然地融合在一起。我们的融合方案在图像定位中优于单目SLAM方法，例如沿低纹理区域，反之亦然。我们展示了使用深度预测来估计重建的绝对尺度，从而克服了单眼SLAM的主要局限性之一。最后，我们提出一个框架，从单个帧获得的语义标签有效地融合了密集的SLAM，从单个视图产生语义相干的场景重构。两个基准数据集的评估结果显示了我们的方法的鲁棒性和准确性</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
          <category> 论文阅读 </category>
          
          <category> Semantic Mapping </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学术 </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy和pandas教程</title>
      <link href="/2018/03/26/numpy%E5%92%8Cpandas%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/26/numpy%E5%92%8Cpandas%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-numpy和pandas"><a href="#安装-numpy和pandas" class="headerlink" title="安装 numpy和pandas"></a>安装 numpy和pandas</h1><p><a href="http://www.numpy.org/" target="_blank" rel="noopener">numpy</a> 和 <a href="https://pandas.pydata.org/" target="_blank" rel="noopener">pandas</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install numpy</span><br><span class="line">sudo pip install pandas</span><br></pre></td></tr></table></figure><h1 id="Numpy教程"><a href="#Numpy教程" class="headerlink" title="Numpy教程"></a>Numpy教程</h1><h2 id="Numpy-属性"><a href="#Numpy-属性" class="headerlink" title="Numpy 属性"></a>Numpy 属性</h2><ul><li>ndim：维度</li><li>shape：行数和列数</li><li>size：元素个数</li></ul><h2 id="Numpy-的创建-array"><a href="#Numpy-的创建-array" class="headerlink" title="Numpy 的创建 array"></a>Numpy 的创建 array</h2><ul><li>array：创建数组</li><li>dtype：指定数据类型</li><li>zeros：创建数据全为0</li><li>ones：创建数据全为1</li><li>empty：创建数据接近0</li><li>arrange：按指定范围创建数据</li><li>linspace：创建线段</li></ul><h2 id="Numpy-基础运算"><a href="#Numpy-基础运算" class="headerlink" title="Numpy 基础运算"></a>Numpy 基础运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])   <span class="comment"># array([10, 20, 30, 40])</span></span><br><span class="line">b=np.arange(<span class="number">4</span>)              <span class="comment"># array([0, 1, 2, 3])</span></span><br></pre></td></tr></table></figure><ul><li>减法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=a-b  <span class="comment"># array([10, 19, 28, 37])</span></span><br></pre></td></tr></table></figure><ul><li>加法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=a+b   <span class="comment"># array([10, 21, 32, 43])</span></span><br></pre></td></tr></table></figure><ul><li>乘法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=a*b   <span class="comment"># array([  0,  20,  60, 120])</span></span><br></pre></td></tr></table></figure><p>有所不同的是，在Numpy中，想要求出矩阵中各个元素的乘方需要依赖双星符号 **</p><ul><li>乘法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=b**<span class="number">2</span>  <span class="comment"># array([0, 1, 4, 9])</span></span><br></pre></td></tr></table></figure><ul><li>三角函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="number">10</span>*np.sin(a)  <span class="comment"># cos tan</span></span><br><span class="line"><span class="comment"># array([-5.44021111,  9.12945251, -9.88031624,  7.4511316 ])</span></span><br></pre></td></tr></table></figure><ul><li>逻辑判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(b&lt;<span class="number">3</span>)  </span><br><span class="line"><span class="comment"># array([ True,  True,  True, False], dtype=bool)</span></span><br></pre></td></tr></table></figure><p>上述运算均是建立在一维矩阵，即只有一行的矩阵上面的计算，如果我们想要对多行多维度的矩阵进行操作，需要对开始的脚本进行一些修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">b=np.arange(<span class="number">4</span>).reshape((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># array([[1, 1],</span></span><br><span class="line"><span class="comment">#       [0, 1]])</span></span><br><span class="line"></span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># array([[0, 1],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br></pre></td></tr></table></figure><p>此时构造出来的矩阵a和b便是2行2列的，其中 reshape 操作是对矩阵的形状进行重构， 其重构的形状便是括号中给出的数字。</p><ul><li>矩阵乘法运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c_dot = np.dot(a,b)</span><br><span class="line"><span class="comment"># array([[2, 4],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br><span class="line">c_dot_2 = a.dot(b)</span><br><span class="line"><span class="comment"># array([[2, 4],</span></span><br><span class="line"><span class="comment">#       [2, 3]])</span></span><br></pre></td></tr></table></figure><ul><li>特定运算<ul><li>求和：np.sum(A)</li><li>最小值：np.min(A)</li><li>最大值：np.max(A)</li><li>最小值索引：np.argmin(A)</li><li>最大值索引：np.argmax(A)</li><li>平均值：np.mean(A)</li><li>中位数：np.medium(A)</li><li>累加：np.cumsum(A)</li><li>累差：np.diff(A)</li><li>非零数：np.nonzero(A)</li><li>排序：np.sort(A)</li><li>矩阵反向（转置）：np.transpose(A)或A.T</li><li>截断：np.clip(A,5,9) # 小于5为5，大于9为9</li></ul></li></ul><h2 id="Numpy-索引"><a href="#Numpy-索引" class="headerlink" title="Numpy 索引"></a>Numpy 索引</h2><h3 id="一维索引"><a href="#一维索引" class="headerlink" title="一维索引"></a>一维索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span></span><br><span class="line">         </span><br><span class="line">print(A[<span class="number">3</span>])    <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h3 id="二维索引"><a href="#二维索引" class="headerlink" title="二维索引"></a>二维索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(A[<span class="number">1</span>][<span class="number">1</span>])      <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><p>这一脚本中的flatten是一个展开性质的函数，将多维的矩阵进行展开成1行的数列。而flat是一个迭代器，本身是一个object属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">         </span><br><span class="line">print(A.flatten())   </span><br><span class="line"><span class="comment"># array([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A.flat:</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">……</span><br><span class="line"><span class="comment"># 14</span></span><br></pre></td></tr></table></figure><h2 id="Numpy-array-合并"><a href="#Numpy-array-合并" class="headerlink" title="Numpy array 合并"></a>Numpy array 合并</h2><ul><li>上下合并 - np.vstack()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">         </span><br><span class="line">print(np.vstack((A,B)))    <span class="comment"># vertical stack</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1,1,1]</span></span><br><span class="line"><span class="string"> [2,2,2]]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>左右合并 - np.hstack()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D = np.hstack((A,B))       <span class="comment"># horizontal stack</span></span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="comment"># [1,1,1,2,2,2]</span></span><br><span class="line"></span><br><span class="line">print(A.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,) (6,)</span></span><br></pre></td></tr></table></figure><ul><li>转置操作 - np.newaxis()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(A[np.newaxis,:])</span><br><span class="line"><span class="comment"># [[1 1 1]]</span></span><br><span class="line"></span><br><span class="line">print(A[np.newaxis,:].shape)</span><br><span class="line"><span class="comment"># (1,3)</span></span><br><span class="line"></span><br><span class="line">print(A[:,np.newaxis])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1]</span></span><br><span class="line"><span class="string">[1]</span></span><br><span class="line"><span class="string">[1]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(A[:,np.newaxis].shape)</span><br><span class="line"><span class="comment"># (3,1)</span></span><br></pre></td></tr></table></figure><p>此时我们便将具有3个元素的array转换为了1行3列以及3行1列的矩阵了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])[:,np.newaxis]</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])[:,np.newaxis]</span><br><span class="line">         </span><br><span class="line">C = np.vstack((A,B))   <span class="comment"># vertical stack</span></span><br><span class="line">D = np.hstack((A,B))   <span class="comment"># horizontal stack</span></span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string">[1 2]</span></span><br><span class="line"><span class="string">[1 2]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(A.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,1) (3,2)</span></span><br></pre></td></tr></table></figure><ul><li>合并操作需要针对多个矩阵或序列 - np.concatenate()</li></ul><p>当你的合并操作需要针对多个矩阵或序列时，借助concatenate函数可能会让你使用起来比前述的函数更加方便：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">C = np.concatenate((A,B,B,A),axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(C)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [2],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1],</span></span><br><span class="line"><span class="string">       [1]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">D = np.concatenate((A,B,B,A),axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(D)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1, 2, 2, 1],</span></span><br><span class="line"><span class="string">       [1, 2, 2, 1],</span></span><br><span class="line"><span class="string">       [1, 2, 2, 1]])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>axis参数很好的控制了矩阵的纵向或是横向打印，相比较vstack和hstack函数显得更加方便。</p><h2 id="Numpy-array-分割"><a href="#Numpy-array-分割" class="headerlink" title="Numpy array 分割"></a>Numpy array 分割</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(A)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3],</span></span><br><span class="line"><span class="string">    [ 4,  5,  6,  7],</span></span><br><span class="line"><span class="string">    [ 8,  9, 10, 11]])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>纵向分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(np.split(A, <span class="number">2</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">        [4, 5],</span></span><br><span class="line"><span class="string">        [8, 9]]), array([[ 2,  3],</span></span><br><span class="line"><span class="string">        [ 6,  7],</span></span><br><span class="line"><span class="string">        [10, 11]])]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>横向分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(np.split(A, <span class="number">3</span>, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br></pre></td></tr></table></figure><ul><li>错误的分割 </li></ul><p>范例的Array只有4列，只能等量对分，因此输入以上程序代码后Python就会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(np.split(A, <span class="number">3</span>, axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ValueError: array split does not result in an equal division</span></span><br></pre></td></tr></table></figure><ul><li>不等量的分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(np.array_split(A, <span class="number">3</span>, axis=<span class="number">1</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">        [4, 5],</span></span><br><span class="line"><span class="string">        [8, 9]]), array([[ 2],</span></span><br><span class="line"><span class="string">        [ 6],</span></span><br><span class="line"><span class="string">        [10]]), array([[ 3],</span></span><br><span class="line"><span class="string">        [ 7],</span></span><br><span class="line"><span class="string">        [11]])]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>其他的分割方式</li></ul><p>在Numpy里还有np.vsplit()与横np.hsplit()方式可用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">print(np.vsplit(A, <span class="number">3</span>)) <span class="comment">#等于 print(np.split(A, 3, axis=0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(np.hsplit(A, <span class="number">2</span>)) <span class="comment">#等于 print(np.split(A, 2, axis=1))</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[array([[0, 1],</span></span><br><span class="line"><span class="string">       [4, 5],</span></span><br><span class="line"><span class="string">       [8, 9]]), array([[ 2,  3],</span></span><br><span class="line"><span class="string">        [ 6,  7],</span></span><br><span class="line"><span class="string">        [10, 11]])]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="Numpy-copy-amp-deep-copy"><a href="#Numpy-copy-amp-deep-copy" class="headerlink" title="Numpy copy &amp; deep copy"></a>Numpy copy &amp; deep copy</h2><ul><li>copy() 的赋值方式没有关联性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = a.copy()    <span class="comment"># deep copy</span></span><br><span class="line">print(b)        <span class="comment"># array([11, 22, 33,  3])</span></span><br><span class="line">a[<span class="number">3</span>] = <span class="number">44</span></span><br><span class="line">print(a)        <span class="comment"># array([11, 22, 33, 44])</span></span><br><span class="line">print(b)        <span class="comment"># array([11, 22, 33,  3])</span></span><br></pre></td></tr></table></figure><h1 id="Pandas-教程"><a href="#Pandas-教程" class="headerlink" title="Pandas 教程"></a>Pandas 教程</h1><h2 id="Numpy-和-Pandas-有什么不同"><a href="#Numpy-和-Pandas-有什么不同" class="headerlink" title="Numpy 和 Pandas 有什么不同"></a>Numpy 和 Pandas 有什么不同</h2><p>如果用 python 的列表和字典来作比较, 那么可以说 Numpy 是列表形式的，没有数值标签，而 Pandas 就是字典形式。Pandas是基于Numpy构建的，让Numpy为中心的应用变得更加简单。</p><ul><li>Series</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,np.nan,<span class="number">44</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(s)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">0     1.0</span></span><br><span class="line"><span class="string">1     3.0</span></span><br><span class="line"><span class="string">2     6.0</span></span><br><span class="line"><span class="string">3     NaN</span></span><br><span class="line"><span class="string">4    44.0</span></span><br><span class="line"><span class="string">5     1.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>Series的字符串表现形式为：索引在左边，值在右边。由于我们没有为数据指定索引。于是会自动创建一个0到N-1（N为长度）的整数型索引。</p><ul><li>DataFrame</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dates = pd.date_range(<span class="string">'20160101'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>),index=dates,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">                   a         b         c         d</span></span><br><span class="line"><span class="string">2016-01-01 -0.253065 -2.071051 -0.640515  0.613663</span></span><br><span class="line"><span class="string">2016-01-02 -1.147178  1.532470  0.989255 -0.499761</span></span><br><span class="line"><span class="string">2016-01-03  1.221656 -2.390171  1.862914  0.778070</span></span><br><span class="line"><span class="string">2016-01-04  1.473877 -0.046419  0.610046  0.204672</span></span><br><span class="line"><span class="string">2016-01-05 -1.584752 -0.700592  1.487264 -1.778293</span></span><br><span class="line"><span class="string">2016-01-06  0.633675 -1.414157 -0.277066 -0.442545</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>DataFrame是一个表格型的数据结构，它包含有一组有序的列，每列可以是不同的值类型（数值，字符串，布尔值等）。DataFrame既有行索引也有列索引， 它可以被看做由Series组成的大字典。</p><ul><li>DataFrame 的一些简单运用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(df[<span class="string">'b'</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">2016-01-01   -2.071051</span></span><br><span class="line"><span class="string">2016-01-02    1.532470</span></span><br><span class="line"><span class="string">2016-01-03   -2.390171</span></span><br><span class="line"><span class="string">2016-01-04   -0.046419</span></span><br><span class="line"><span class="string">2016-01-05   -0.700592</span></span><br><span class="line"><span class="string">2016-01-06   -1.414157</span></span><br><span class="line"><span class="string">Freq: D, Name: b, dtype: float64</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>我们在创建一组没有给定行标签和列标签的数据 df1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line">print(df1)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">   0  1   2   3</span></span><br><span class="line"><span class="string">0  0  1   2   3</span></span><br><span class="line"><span class="string">1  4  5   6   7</span></span><br><span class="line"><span class="string">2  8  9  10  11</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>默认的从0开始 index. 还有一种生成 df 的方法, 如下 df2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'A'</span> : <span class="number">1.</span>,</span><br><span class="line">                    <span class="string">'B'</span> : pd.Timestamp(<span class="string">'20130102'</span>),</span><br><span class="line">                    <span class="string">'C'</span> : pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">                    <span class="string">'D'</span> : np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">                    <span class="string">'E'</span> : pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</span><br><span class="line">                    <span class="string">'F'</span> : <span class="string">'foo'</span>&#125;)</span><br><span class="line">                    </span><br><span class="line">print(df2)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">     A          B    C  D      E    F</span></span><br><span class="line"><span class="string">0  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">1  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">2  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">3  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>这种方法能对每一列的数据进行特殊对待. 如果想要查看数据中的类型, 我们可以用 dtype 这个属性:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(df2.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">df2.dtypes</span></span><br><span class="line"><span class="string">A           float64</span></span><br><span class="line"><span class="string">B    datetime64[ns]</span></span><br><span class="line"><span class="string">C           float32</span></span><br><span class="line"><span class="string">D             int32</span></span><br><span class="line"><span class="string">E          category</span></span><br><span class="line"><span class="string">F            object</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>如果想看对列的序号:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(df2.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Int64Index([0, 1, 2, 3], dtype='int64')</span></span><br></pre></td></tr></table></figure><p>同样, 每种数据的名称也能看到:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(df2.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Index(['A', 'B', 'C', 'D', 'E', 'F'], dtype='object')</span></span><br></pre></td></tr></table></figure><p>果只想看所有df2的值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(df2.values)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],</span></span><br><span class="line"><span class="string">       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo'],</span></span><br><span class="line"><span class="string">       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],</span></span><br><span class="line"><span class="string">       [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo']], dtype=object)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>想知道数据的总结, 可以用 describe():</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df2.describe()</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">         A    C    D</span></span><br><span class="line"><span class="string">count  4.0  4.0  4.0</span></span><br><span class="line"><span class="string">mean   1.0  1.0  3.0</span></span><br><span class="line"><span class="string">std    0.0  0.0  0.0</span></span><br><span class="line"><span class="string">min    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">25%    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">50%    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">75%    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">max    1.0  1.0  3.0</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>如果想翻转数据, transpose:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">print(df2.T)</span><br><span class="line"></span><br><span class="line"><span class="string">"""                   </span></span><br><span class="line"><span class="string">0                    1                    2  \</span></span><br><span class="line"><span class="string">A                    1                    1                    1   </span></span><br><span class="line"><span class="string">B  2013-01-02 00:00:00  2013-01-02 00:00:00  2013-01-02 00:00:00   </span></span><br><span class="line"><span class="string">C                    1                    1                    1   </span></span><br><span class="line"><span class="string">D                    3                    3                    3   </span></span><br><span class="line"><span class="string">E                 test                train                 test   </span></span><br><span class="line"><span class="string">F                  foo                  foo                  foo   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                     3  </span></span><br><span class="line"><span class="string">A                    1  </span></span><br><span class="line"><span class="string">B  2013-01-02 00:00:00  </span></span><br><span class="line"><span class="string">C                    1  </span></span><br><span class="line"><span class="string">D                    3  </span></span><br><span class="line"><span class="string">E                train  </span></span><br><span class="line"><span class="string">F                  foo  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>如果想对数据的 index 进行排序并输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(df2.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">     F      E  D    C          B    A</span></span><br><span class="line"><span class="string">0  foo   test  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">1  foo  train  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">2  foo   test  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">3  foo  train  3  1.0 2013-01-02  1.0</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">如果是对数据 值 排序输出:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">print(df2.sort_values(by=<span class="string">'B'</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">     A          B    C  D      E    F</span></span><br><span class="line"><span class="string">0  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">1  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">2  1.0 2013-01-02  1.0  3   test  foo</span></span><br><span class="line"><span class="string">3  1.0 2013-01-02  1.0  3  train  foo</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/3-1-pd-intro/" target="_blank" rel="noopener">Pandas 基本介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux入门教程</title>
      <link href="/2018/03/25/linux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2018/03/25/linux%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux入门教程"><a href="#Linux入门教程" class="headerlink" title="Linux入门教程"></a>Linux入门教程</h1><h2 id="SSH-远程连接-Linux"><a href="#SSH-远程连接-Linux" class="headerlink" title="SSH 远程连接 Linux"></a>SSH 远程连接 Linux</h2><h3 id="Linux端配置"><a href="#Linux端配置" class="headerlink" title="Linux端配置"></a>Linux端配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>查看IP地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></p><h3 id="Mac端配置"><a href="#Mac端配置" class="headerlink" title="Mac端配置"></a>Mac端配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@IP地址 <span class="comment">#输入密码确认</span></span><br></pre></td></tr></table></figure><h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><p>Mac端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f <span class="built_in">test</span> -C <span class="string">"test-key"</span> <span class="comment"># 一直回车</span></span><br><span class="line">cat test.pub <span class="comment"># 查看公钥内容</span></span><br></pre></td></tr></table></figure><p>配置公钥到服务器：将公钥内容添加到服务器的~/.ssh/authorized_keys 文件中.</p><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp   /home/yourname/.ssh/authorized_keys yourname@192.168.38.58:/home/yourname/.ssh/</span><br></pre></td></tr></table></figure><p>alias 实现命令快速登陆：做好配置之后，通过ssh可以直接登录了。对经常登录的服务器，可以将ssh登录命令的alias加到 ~/.bash_profile文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.bash_profile | grep 101</span><br><span class="line"><span class="built_in">alias</span> to-101=<span class="string">'ssh huqiu@192.168.154.101'</span></span><br></pre></td></tr></table></figure><p>登录的时候:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ to-101</span><br></pre></td></tr></table></figure><p>无法登录一般的原因：</p><ul><li><p>客户端的私钥和公钥文件位置必须位于 ~/.ssh 下。</p></li><li><p>确保双方 ~/.ssh 目录，父目录，公钥私钥，authorized_keys 文件的权限对当前用户至少要有执行权限，对其他用户最多只能有执行权限。</p></li><li><p>注意git登录，要求对公钥和私钥以及config文件，其他用户不能有任何权限。</p></li><li><p>服务器端 ~/.ssh/authorized_keys 文件名确保没错 :).</p></li></ul><p>ssh-copy-id：ssh-copy-id 是一个小脚本，你可以用这个小脚本完成以上工作。这个脚本在linux系统上一般都有。</p><p><a href="https://www.liaohuqiu.net/cn/posts/ssh-keygen-abc/" target="_blank" rel="noopener">ssh-keygen 基本用法</a></p><p>1) 使用 ssh-keygen 时，请先进入到 ~/.ssh 目录，不存在的话，请先创建。并且保证 ~/.ssh 以及所有父目录的权限不能大于 711</p><p>2) 使用 ssh-kengen 会在~/.ssh/目录下生成两个文件，不指定文件名和密钥类型的时候，默认生成的两个文件是：</p><ul><li>id_rsa</li><li>id_rsa.pub</li></ul><p>第一个是私钥文件，第二个是公钥文件。</p><p>生成ssh key的时候，可以通过 -f 选项指定生成文件的文件名，如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f <span class="built_in">test</span>   -C <span class="string">"test key"</span> <span class="comment"># test - 文件名，"test key" - 备注</span></span><br></pre></td></tr></table></figure><h3 id="SSH-config"><a href="#SSH-config" class="headerlink" title="SSH config"></a>SSH config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host example                       <span class="comment"># 关键词</span></span><br><span class="line">HostName example.com           <span class="comment"># 主机地址</span></span><br><span class="line">User root                      <span class="comment"># 用户名</span></span><br><span class="line">IdentityFile ~/.ssh/id_ecdsa <span class="comment"># 认证文件</span></span><br><span class="line">Port 22                      <span class="comment"># 指定端口</span></span><br><span class="line">ControlMaster auto</span><br><span class="line">ControlPath /tmp/%r@%h:%p</span><br></pre></td></tr></table></figure><h1 id="OpenCV3-1配置"><a href="#OpenCV3-1配置" class="headerlink" title="OpenCV3.1配置"></a>OpenCV3.1配置</h1><h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line"><span class="comment"># 必须的，gcc编译环境</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"><span class="comment"># 必须的,包括cmake等工具</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br><span class="line"><span class="comment"># 可选的，看个人需要，总共5M左右</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install libv4l-dev</span><br></pre></td></tr></table></figure><h2 id="下载-源码"><a href="#下载-源码" class="headerlink" title="下载 源码"></a>下载 源码</h2><p><a href="https://opencv.org/releases.html" target="_blank" rel="noopener">OpenCV</a></p><p>或着用git clone：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv310</span><br><span class="line">    <span class="comment"># opencv310为自己建的，源码将放在这里</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Itseez/opencv.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Itseez/opencv_contrib.git</span><br></pre></td></tr></table></figure><h2 id="CMake-Opencv源码"><a href="#CMake-Opencv源码" class="headerlink" title="CMake Opencv源码"></a>CMake Opencv源码</h2><p>建立一个编译目录（例如：/build）把cmake后的文件都放在这里边。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv</span><br><span class="line">mkdir build  //建立一个build目录，把cmake的文件都放着里边</span><br><span class="line"><span class="built_in">cd</span> build　　　//进入build目录</span><br></pre></td></tr></table></figure><p>cmake时ippicv_linux_20151201.tgz总是不能成功下载，故cmake之前将./downloads/linux-808b791a6eac9ed78d32a7666804320e 文件拷贝至./opencv-3.1.0/3rdparty/ippicv/ 路径下(先执行一次cmake 命令生成文件路径，在将ippicv_linux_20151201.tgz复制进去) ippicv_linux_20151201.tgz下载链接:链接: <a href="https://pan.baidu.com/s/1jBBPxXX_NqCodS5bAln4-g" target="_blank" rel="noopener">https://pan.baidu.com/s/1jBBPxXX_NqCodS5bAln4-g</a> 密码: x4sn</p><p>然后开始cmake，这里需要注意几个cmake的参数，比较重要。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> WITH_LIBV4L=ON ..</span><br></pre></td></tr></table></figure><p>切记最后’..’两个点之前要加空格！！</p><h2 id="把代码编译成可执行文件"><a href="#把代码编译成可执行文件" class="headerlink" title="把代码编译成可执行文件"></a>把代码编译成可执行文件</h2><p>这里官方推荐使用多进程编译，推荐七个进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j7 <span class="comment"># 并行运行七个jobs，这一步也在build目录中进行</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">如果你要在python下运行opencv库的情况下，那就必须安装安装python-opencv</span><br><span class="line">sudo apt-get install python-opencv</span><br></pre></td></tr></table></figure><h2 id="配置库文件路径"><a href="#配置库文件路径" class="headerlink" title="配置库文件路径"></a>配置库文件路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">'echo "/usr/local/lib" &gt; /etc/ld.so.conf.d/opencv.conf'</span></span><br><span class="line"><span class="comment">#或者直接打开/etc/ld.so.conf.d/opencv.conf，添加/usr/local/lib</span></span><br><span class="line"><span class="comment">#使配置生效</span></span><br><span class="line">sudo  ldconfig(重要)</span><br></pre></td></tr></table></figure><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim/etc/bash.bashrc   </span><br><span class="line"><span class="comment">#在最后加入以下两行代码</span></span><br><span class="line">PKG_CONFIG_PATH=<span class="variable">$PKG_CONFIG_PATH</span>:/usr/<span class="built_in">local</span>/lib/pkgconfig </span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH  </span><br><span class="line"><span class="comment">#使配置生效</span></span><br><span class="line">sudo <span class="built_in">source</span> /etc/bash.bashrc </span><br><span class="line">（该步骤可能会报错找不到命令，原因是<span class="built_in">source</span>为root命令</span><br><span class="line">su（进入root权限）</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkg-config --modversion opencv</span><br><span class="line">pkg-config --cflags opencv</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>我是用python+opencv的，我这里直接运行opencv自带的python的例子程序，TX1自带摄像头不能用，需要使用外接USB摄像头，插入USB接口即可，无需安装驱动，也无需改动测试代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;opencv3.1.0_dir&gt;/samples/python/</span><br><span class="line">python video.py</span><br><span class="line">python edge.py</span><br><span class="line">python facedetect.py</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.liaohuqiu.net/cn/posts/ssh-public-key-auto-login/" target="_blank" rel="noopener">https://www.liaohuqiu.net/cn/posts/ssh-public-key-auto-login/</a></li><li><a href="https://blog.csdn.net/asukasmallriver/article/details/72927860" target="_blank" rel="noopener">https://blog.csdn.net/asukasmallriver/article/details/72927860</a></li><li><a href="https://blog.csdn.net/u011440558/article/details/78358447" target="_blank" rel="noopener">https://blog.csdn.net/u011440558/article/details/78358447</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Linux </category>
          
          <category> 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu_16.04_env</title>
      <link href="/2018/03/25/ubuntu-16-04-env/"/>
      <url>/2018/03/25/ubuntu-16-04-env/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-16-04-环境配置"><a href="#Ubuntu-16-04-环境配置" class="headerlink" title="Ubuntu 16.04 环境配置"></a>Ubuntu 16.04 环境配置</h1><h2 id="PCL1-8环境"><a href="#PCL1-8环境" class="headerlink" title="PCL1.8环境"></a>PCL1.8环境</h2><h3 id="第一步：安装依赖"><a href="#第一步：安装依赖" class="headerlink" title="第一步：安装依赖"></a>第一步：安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install git build-essential linux-libc-dev  </span><br><span class="line">sudo apt-get install cmake cmake-gui   </span><br><span class="line">sudo apt-get install libusb-1.0-0-dev libusb-dev libudev-dev  </span><br><span class="line">sudo apt-get install mpi-default-dev openmpi-bin openmpi-common    </span><br><span class="line">sudo apt-get install libflann1.8 libflann-dev  </span><br><span class="line">sudo apt-get install libeigen3-dev  </span><br><span class="line">sudo apt-get install libboost-all-dev  </span><br><span class="line">sudo apt-get install libvtk5.10-qt4 libvtk5.10 libvtk5-dev  </span><br><span class="line">sudo apt-get install libqhull* libgtest-dev  </span><br><span class="line">sudo apt-get install freeglut3-dev pkg-config  </span><br><span class="line">sudo apt-get install libxmu-dev libxi-dev   </span><br><span class="line">sudo apt-get install mono-complete  </span><br><span class="line">sudo apt-get install qt-sdk openjdk-8-jdk openjdk-8-jre</span><br></pre></td></tr></table></figure><h3 id="第二步：下载源码"><a href="#第二步：下载源码" class="headerlink" title="第二步：下载源码"></a>第二步：下载源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PointCloudLibrary/pcl.git</span><br></pre></td></tr></table></figure><h3 id="第三步：编译源码"><a href="#第三步：编译源码" class="headerlink" title="第三步：编译源码"></a>第三步：编译源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> pcl  </span><br><span class="line">mkdir release  </span><br><span class="line"><span class="built_in">cd</span> release  </span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=None -DCMAKE_INSTALL_PREFIX=/usr \  </span><br><span class="line">      -DBUILD_GPU=ON -DBUILD_apps=ON -DBUILD_examples=ON \  </span><br><span class="line">      -DCMAKE_INSTALL_PREFIX=/usr ..  </span><br><span class="line">make</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="第四步（可选-and-建议）：如果需要PCLVisualizer"><a href="#第四步（可选-and-建议）：如果需要PCLVisualizer" class="headerlink" title="第四步（可选 and 建议）：如果需要PCLVisualizer"></a>第四步（可选 and 建议）：如果需要PCLVisualizer</h3><p>安装OpenNI、OpenNI2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libopenni-dev   </span><br><span class="line">sudo apt-get install libopenni2-dev</span><br></pre></td></tr></table></figure><p>安装<a href="https://www.ensenso.com/support/sdk-download/?lang=de" target="_blank" rel="noopener">ensensor</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i ensenso-sdk-2.0.147-x64.deb </span><br><span class="line">sudo dpkg -i codemeter_6.40.2402.501_amd64.deb</span><br></pre></td></tr></table></figure><p>如缺少依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ol><li><a href="https://blog.csdn.net/dantengc/article/details/78446600" target="_blank" rel="noopener">https://blog.csdn.net/dantengc/article/details/78446600</a></li></ol><h2 id="OpenCV环境"><a href="#OpenCV环境" class="headerlink" title="OpenCV环境"></a>OpenCV环境</h2><h2 id="Caffe-环境"><a href="#Caffe-环境" class="headerlink" title="Caffe 环境"></a>Caffe 环境</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Linux </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>semap论文</title>
      <link href="/2018/03/25/semap%E8%AE%BA%E6%96%87/"/>
      <url>/2018/03/25/semap%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="SeMap-数字化室内语义地图低成本自动化构建方法"><a href="#SeMap-数字化室内语义地图低成本自动化构建方法" class="headerlink" title="SeMap: 数字化室内语义地图低成本自动化构建方法"></a>SeMap: 数字化室内语义地图低成本自动化构建方法</h1><h2 id="场景图重建"><a href="#场景图重建" class="headerlink" title="场景图重建"></a>场景图重建</h2><p>使用Colmap工具来获取场景图重建结果</p><h2 id="Colmap使用方法"><a href="#Colmap使用方法" class="headerlink" title="Colmap使用方法"></a><a href="https://colmap.github.io/tutorial.html#quickstart" target="_blank" rel="noopener">Colmap使用方法</a></h2><p>场景图通过<a href="https://colmap.github.io/tutorial.html#feature-detection-and-extraction" target="_blank" rel="noopener">Feature Detection and Extraction</a>和<a href="https://colmap.github.io/tutorial.html#feature-matching-and-geometric-verification" target="_blank" rel="noopener">Feature Matching and Geometric Verification</a>两步完成。</p><p>首先使用GUI来操作。</p><h3 id="打开Colmap"><a href="#打开Colmap" class="headerlink" title="打开Colmap"></a><a href="https://colmap.github.io/tutorial.html#data-structure" target="_blank" rel="noopener">打开Colmap</a></h3><p>（1）Windows: COLMAP.bat</p><p>Mac: COLMAP.app</p><p>Linux可选为：./src/exe/colmap gui</p><p>（2）新建项目-GUI操作</p><p>File &gt; New project</p><p>在此步，首先确定生成的数据库保存位置，还要确定输入图片位置。为了方便起见，能够通过File &gt; Save project来保存整个项目。</p><p>File &gt; Open project为打开现有项目。</p><p>（3）新建项目-命令行操作</p><p>colmap gui 或 colmap gui –project_path path/to/project.ini</p><p>（4）例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/path/to/project/...</span><br><span class="line">+── images</span><br><span class="line">│   +── image1.jpg</span><br><span class="line">│   +── image2.jpg</span><br><span class="line">│   +── ...</span><br><span class="line">│   +── imageN.jpg</span><br><span class="line">+── database.db</span><br><span class="line">+── project.ini</span><br></pre></td></tr></table></figure><p>其中，/path/to/project/images为图片路径，/path/to/project/database.db为数据库保存路径，/path/to/project/project.ini为项目配置保存路径。</p><h3 id="Feature-Detection-and-Extraction"><a href="#Feature-Detection-and-Extraction" class="headerlink" title="Feature Detection and Extraction"></a>Feature Detection and Extraction</h3><p>(1) GUI操作</p><p>Processing &gt; Extract features</p><blockquote><p>如果导入现有的特征提取的文件，需有如下文件：<br><br>NUM_FEATURES 128 <br><br>X Y SCALE ORIENTATION D_1 D_2 D_3 … D_128<br><br>…<br><br>X Y SCALE ORIENTATION D_1 D_2 D_3 … D_128<br><br>where X, Y, SCALE, ORIENTATION are floating point numbers and D_1…D_128 values in the range 0…255. The file should have NUM_FEATURES lines with one line per feature. For example, if an image has 4 features, then the text file should look something like this:<br><br>4 128<br><br>1.2 2.3 0.1 0.3 1 2 3 4 … 21<br><br>2.2 3.3 1.1 0.3 3 2 3 2 … 32<br><br>0.2 1.3 1.1 0.3 3 2 3 2 … 2<br><br>1.2 2.3 1.1 0.3 3 2 3 2 … 3<br></p></blockquote><h3 id="Feature-Matching-and-Geometric-Verification"><a href="#Feature-Matching-and-Geometric-Verification" class="headerlink" title="Feature Matching and Geometric Verification"></a>Feature Matching and Geometric Verification</h3><p>Processing &gt; Match features</p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>（1）<a href="https://colmap.github.io/tutorial.html#database-management" target="_blank" rel="noopener">Database Management</a></p><p>Processing &gt; Manage database</p><p>（2）<a href="https://colmap.github.io/database.html#database-format" target="_blank" rel="noopener">Database Format</a></p><p>SQLite database file</p><p>The database contains the following tables:</p><ul><li>cameras</li><li>images</li><li>keypoints</li><li>descriptors</li><li>matches</li><li>inlier_matches</li></ul><p>Cameras and Images： The relation between cameras and images is 1-to-N. </p><p>Keypoints and Descriptors：The detected keypoints are stored as row-major float32 binary blobs, where the first two columns are the X and Y locations in the image, respectively. </p><p>Matches：Feature matching stores its output in the matches table and geometric verification in the inlier_matches table. COLMAP only uses the data in inlier_matches for reconstruction. Every entry in the two tables stores the feature matches between two unique images, where the pair_id is the row-major, linear index in the upper-triangular match matrix, generated as follows:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_ids_to_pair_id</span><span class="params">(image_id1, image_id2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> image_id1 &gt; image_id2:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2147483647</span> * image_id2 + image_id1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2147483647</span> * image_id1 + image_id2</span><br></pre></td></tr></table></figure><p>and image identifiers can be uniquely determined from the pair_id as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pair_id_to_image_ids</span><span class="params">(pair_id)</span>:</span></span><br><span class="line">    image_id2 = pair_id % <span class="number">2147483647</span></span><br><span class="line">    image_id1 = (pair_id - image_id2) / <span class="number">2147483647</span></span><br><span class="line">    <span class="keyword">return</span> image_id1, image_id2</span><br></pre></td></tr></table></figure><p>The pair_id enables efficient database queries, as the matches tables may contain several hundred millions of entries. This scheme limits the maximum number of images in a database to 2147483647 (maximum value of signed 32-bit integers), i.e. image_id must be smaller than 2147483647.</p><p>The binary blobs in the matches tables are row-major uint32 matrices, where the left column are zero-based indices into the features of image_id1 and the second column into the features of image_id2. The column cols must be 2 and the rows column specifies the number of feature matches.</p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
          <category> semap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学术 </tag>
            
            <tag> semap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/2018/03/24/categories/"/>
      <url>/2018/03/24/categories/</url>
      
        <content type="html"><![CDATA[<h1 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h1><ul><li><p><font color="“blue”"><strong>编程: programming</strong></font></p><ul><li>C++</li><li>Java</li><li>Python</li><li>Matlab</li><li>Android</li><li>Linux</li><li>Git</li><li>Latex</li><li>PHP</li><li>IOS</li><li>数据库</li><li>网络编程</li><li>多线程</li><li>QT编程</li><li>MarkDown</li><li>DP<ul><li>Caffe</li><li>TF</li><li>PyTorch</li></ul></li><li>数据结构</li><li>算法</li></ul></li><li><p><font color="“blue”"><strong>学术: science</strong></font></p><ul><li>计算机视觉<ul><li>ICCV</li><li>CVPR</li><li>ECCV</li></ul></li><li>移动计算<ul><li>MobiCom</li><li>SigComm</li><li>InfoCom</li><li>NSDI</li><li>SenSys</li><li>PerCom</li><li>UbiComp</li></ul></li><li>机器学习&amp;深度学习<ul><li>AAAI</li><li>IJCAI</li></ul></li></ul></li><li><p><font color="“blue”"><strong>理论: theory</strong></font></p><ul><li>计算机视觉</li><li>移动计算</li><li>数学</li><li>优化算法</li><li>机器学习</li></ul></li><li><p><font color="“blue”"><strong>其他: other</strong></font></p><ul><li>Hexo博客</li><li>生活</li></ul></li></ul><h1 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h1><ul><li>论文</li><li>理论</li><li>其他</li><li>等等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> categories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> categories </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双目成像深度原理</title>
      <link href="/2018/03/24/%E5%8F%8C%E7%9B%AE%E6%88%90%E5%83%8F%E6%B7%B1%E5%BA%A6%E5%8E%9F%E7%90%86/"/>
      <url>/2018/03/24/%E5%8F%8C%E7%9B%AE%E6%88%90%E5%83%8F%E6%B7%B1%E5%BA%A6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="相机内参数"><a href="#相机内参数" class="headerlink" title="相机内参数"></a>相机内参数</h1><p>与相机自身特性相关的参数，比如相机的焦距、像素大小等；</p><h1 id="相机外参数"><a href="#相机外参数" class="headerlink" title="相机外参数"></a>相机外参数</h1><p>在世界坐标系中的参数，比如相机的位置、旋转方向等</p><h1 id="坐标系转换"><a href="#坐标系转换" class="headerlink" title="坐标系转换"></a>坐标系转换</h1><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p>图像处理、立体视觉等等方向常常涉及到四个坐标系：世界坐标系、相机坐标系、图像坐标系、像素坐标系。例如下图：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_1" alt></p><h2 id="坐标系转换-1"><a href="#坐标系转换-1" class="headerlink" title="坐标系转换"></a>坐标系转换</h2><h3 id="世界坐标系与相机坐标系"><a href="#世界坐标系与相机坐标系" class="headerlink" title="世界坐标系与相机坐标系"></a>世界坐标系与相机坐标系</h3><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_2" alt></p><p>于是，从世界坐标系到相机坐标系，涉及到旋转和平移（其实所有的运动也可以用旋转矩阵和平移向量来描述）。绕着不同的坐标轴旋转不同的角度，得到相应的旋转矩阵，如下图所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_3" alt></p><p>从世界坐标系到相机坐标系的转换关系如下所示：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_4" alt></p><p>那么点P在相机坐标系的坐标为：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_8" alt></p><h3 id="相机坐标系与图像坐标系"><a href="#相机坐标系与图像坐标系" class="headerlink" title="相机坐标系与图像坐标系"></a>相机坐标系与图像坐标系</h3><p>相机坐标系到图像坐标系，属于透视投影关系，从3D转换到2D。 </p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_5" alt></p><p>此时投影点p的单位还是mm，并不是pixel，需要进一步转换到像素坐标系。</p><h3 id="图像坐标系与像素坐标系"><a href="#图像坐标系与像素坐标系" class="headerlink" title="图像坐标系与像素坐标系"></a>图像坐标系与像素坐标系</h3><p>像素坐标系和图像坐标系都在成像平面上，只是各自的原点和度量单位不一样。图像坐标系的原点为相机光轴与成像平面的交点，通常情况下是成像平面的中点或者叫principal point。图像坐标系的单位是mm，属于物理单位，而像素坐标系的单位是pixel，我们平常描述一个像素点都是几行几列。所以这二者之间的转换如下：其中dx和dy表示每一列和每一行分别代表多少mm，即1pixel=dx mm </p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_6" alt></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>那么通过上面四个坐标系的转换就可以得到一个点从世界坐标系如何转换到像素坐标系的。</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_7" alt></p><p>其中，<img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_9" alt>为相机的内参，<img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_10" alt>为相机的外参，fx, fy,  cx/dx+u0, cy/dy+v0的单位均为像素。相机的内参和外参可以通过张正友标定获取,如下小节介绍。通过最终的转换关系来看，一个三维中的坐标点，的确可以在图像中找到一个对应的像素点，但是反过来，通过图像中的一个点找到它在三维中对应的点就很成了一个问题，因为我们并不知道等式左边的Zc的值。 </p><h4 id="相机内参K"><a href="#相机内参K" class="headerlink" title="相机内参K"></a>相机内参K</h4><p>在计算机视觉中，摄像机内参数矩阵如下：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_11" alt></p><p>其中 f 为摄像机的焦距，单位一般是mm;dx,dy 为像元尺寸;u0,v0 为图像中心。fx = f/dx, fy = f/dy,分别称为x轴和y轴上的归一化焦距.</p><p>为更好的理解，举个实例：<br><br>现以NiKon D700相机为例进行求解其内参数矩阵：<br><br>就算大家身边没有这款相机也无所谓，可以在网上百度一下，很方便的就知道其一些参数—— <br><br>焦距 f = 35mm<br>   最高分辨率：4256×2832<br>     传感器尺寸：36.0×23.9 mm<br><br>根据以上定义可以有：<br><br>u0= 4256/2 = 2128<br>   v0= 2832/2 = 1416<br>  dx = 36.0/4256<br>   dy = 23.9/2832<br><br>fx = f/dx = 4137.8<br>   fy = f/dy = 4147.3<br></p><p>分辨率可以从显示分辨率与图像分辨率两个方向来分类。<br><br>[1]显示分辨率（屏幕分辨率）是屏幕图像的精密度，是指显示器所能显示的像素有多少。由于屏幕上的点、线和面都是由像素组成的，<br>显示器可显示的像素越多，画面就越精细，同样的屏幕区域内能显示的信息也越多，所以分辨率是个非常重要的性能指标之一。<br>可以把整个图像想象成是一个大型的棋盘，而分辨率的表示方式就是所有经线和纬线交叉点的数目。<br>显示分辨率一定的情况下，显示屏越小图像越清晰，反之，显示屏大小固定时，显示分辨率越高图像越清晰。<br><br>[2]图像分辨率则是单位英寸中所包含的像素点数，其定义更趋近于分辨率本身的定义。</p><h4 id="畸变参数（与点集如何畸变的2D几何相关。）"><a href="#畸变参数（与点集如何畸变的2D几何相关。）" class="headerlink" title="畸变参数（与点集如何畸变的2D几何相关。）"></a>畸变参数（与点集如何畸变的2D几何相关。）</h4><p>采用理想针孔模型，由于通过针孔的光线少，摄像机曝光太慢，在实际使用中均采用透镜，可以使图像生成迅速，但代价是引入了畸变。</p><p>有两种畸变对投影图像影响较大： 径向畸变和切向畸变。</p><p>(1) 对某些透镜，光线在远离透镜中心的地方比靠近中心的地方更加弯曲，产生“筒形”或“鱼眼”现象，称为径向畸变。一般来讲，成像仪中心的径向畸变为0，越向边缘移动，畸变越严重。不过径向畸变可以通过下面的泰勒级数展开式来校正：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_12" alt></p><p>这里（x, y）是畸变点在成像仪上的原始位置，r为该点距离成像仪中心的距离，（xcorrected ，ycorrected ）是校正后的新位置。</p><p>对于一般的摄像机校正，通常使用泰勒级数中的前两项k1和k2就够了；对畸变很大的摄像机，比如鱼眼透镜，可以使用第三径向畸变项k3.</p><p>(2) 当成像仪被粘贴在摄像机的时候，会存在一定的误差，使得图像平面和透镜不完全平行，从而产生切向畸变。也就是说，如果一个矩形被投影到成像仪上时，可能会变成一个梯形。切向畸变可以通过如下公式来校正：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_13" alt></p><p>这里（x, y）是畸变点在成像仪上的原始位置，r为该点距离成像仪中心的距离，（xcorrected ，ycorrected ）是校正后的新位置。</p><h4 id="摄像机的外参数"><a href="#摄像机的外参数" class="headerlink" title="摄像机的外参数"></a>摄像机的外参数</h4><p>旋转向量（大小为1×3的矢量或旋转矩阵3×3）和平移向量（tx,ty,tz）。</p><p>旋转向量:旋转向量是旋转矩阵紧凑的变现形式，旋转向量为1×3的行矢量。</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_14" alt></p><p>r就是旋转向量，旋转向量的方向是旋转轴 ,旋转向量的模为围绕旋转轴旋转的角度。</p><p>通过上面的公式，我们就可以求解出旋转矩阵R。同样的已知旋转矩阵，我们也可以通过下面的公式求解得到旋转向量：</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_15" alt></p><h1 id="相机标定（或摄像机标定）"><a href="#相机标定（或摄像机标定）" class="headerlink" title="相机标定（或摄像机标定）"></a>相机标定（或摄像机标定）</h1><p>摄像机标定(Camera calibration)简单来说是从世界坐标系换到图像坐标系的过程，也就是求最终的投影矩阵的过程。</p><p>那为什么要做相机标定呢？<br><br>【1】进行摄像机标定的目的：求出相机的内、外参数，以及畸变参数。<br><br>【2】标定相机后通常是想做两件事：一个是由于每个镜头的畸变程度各不相同，通过相机标定可以校正这种镜头畸变矫正畸变，生成矫正后的图像；另一个是根据获得的图像重构三维场景。<br><br>摄像机标定过程，简单的可以简单的描述为通过标定板，如下图，可以得到n个对应的世界坐标三维点Xi和对应的图像坐标二维点xi，这些三维点到二维点的转换都可以通过上面提到的相机内参K，相机外参R和t，以及畸变参数D，经过一系列的矩阵变换得到。<br></p><h2 id="标定原理"><a href="#标定原理" class="headerlink" title="标定原理"></a>标定原理</h2><p>原理推导请参考<a href="https://zhuanlan.zhihu.com/p/24651968" target="_blank" rel="noopener">张氏法相机标定</a></p><h2 id="标定方法"><a href="#标定方法" class="headerlink" title="标定方法"></a>标定方法</h2><h3 id="摄像机标定方法分类"><a href="#摄像机标定方法分类" class="headerlink" title="摄像机标定方法分类"></a>摄像机标定方法分类</h3><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_17" alt></p><h3 id="使用Matlab相机标定工具箱标定相机的基本步骤"><a href="#使用Matlab相机标定工具箱标定相机的基本步骤" class="headerlink" title="使用Matlab相机标定工具箱标定相机的基本步骤"></a>使用Matlab相机标定工具箱标定相机的基本步骤</h3><p>参考：</p><ol><li><a href="http://www.cnblogs.com/star91/p/6012425.html" target="_blank" rel="noopener">http://www.cnblogs.com/star91/p/6012425.html</a></li><li><a href="https://blog.csdn.net/wangxiaokun671903/article/details/38925553" target="_blank" rel="noopener">https://blog.csdn.net/wangxiaokun671903/article/details/38925553</a></li></ol><h3 id="使用OpenCV进行相机标定"><a href="#使用OpenCV进行相机标定" class="headerlink" title="使用OpenCV进行相机标定"></a>使用OpenCV进行相机标定</h3><p>参考：</p><ol><li><a href="https://blog.csdn.net/dcrmg/article/details/52929669" target="_blank" rel="noopener">Opencv 张正友相机标定傻瓜教程</a></li><li><a href="https://blog.csdn.net/u010784534/article/details/24323643" target="_blank" rel="noopener">使用OpenCV进行相机标定(基于OpenCV2.4.3)</a></li><li><a href="https://blog.csdn.net/dcrmg/article/details/52939318" target="_blank" rel="noopener">张正友相机标定Opencv实现以及标定流程&amp;&amp;标定结果评价&amp;&amp;图像矫正流程解析（附标定程序和棋盘图）</a></li></ol><h1 id="双目立体视觉深度相机详细原理"><a href="#双目立体视觉深度相机详细原理" class="headerlink" title="双目立体视觉深度相机详细原理"></a>双目立体视觉深度相机详细原理</h1><h2 id="理想双目相机成像模型"><a href="#理想双目相机成像模型" class="headerlink" title="理想双目相机成像模型"></a>理想双目相机成像模型</h2><p>首先我们从理想的情况开始分析:假设左右两个相机位于同一平面（光轴平行），且相机参数（如焦距f）一致。那么深度值的推导原理和公式如下。公式只涉及到初中学的三角形相似知识，不难看懂。</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_18" alt><br><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_19" alt><br><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_20" alt></p><p>根据上述推导，空间点P离相机的距离（深度）z=f*b/d，可以发现如果要计算深度z，必须要知道：</p><p>（1）、相机焦距f，左右相机基线b。这些参数可以通过先验信息或者相机标定得到。</p><p>（2）、视差d。需要知道左相机的每个像素点(xl, yl)和右相机中对应点(xr, yr)的对应关系。这是双目视觉的核心问题。</p><h2 id="极线约束"><a href="#极线约束" class="headerlink" title="极线约束"></a>极线约束</h2><p>那么问题来了，对于左图中的一个像素点，如何确定该点在右图中的位置？是不是需要我们在整个图像中地毯式搜索一个个匹配？</p><p>答案是：不需要。因为有极线约束（名字听着很吓人）。极线约束对于求解图像对中像素点的对应关系非常重要。</p><p>那什么是极线呢？如下图所示。C1，C2是两个相机，P是空间中的一个点，P和两个相机中心点C1、C2形成了三维空间中的一个平面PC1C2，称为极平面（Epipolar plane）。极平面和两幅图像相交于两条直线，这两条直线称为极线(Epipolar line)。P在相机C1中的成像点是P1，在相机C2中的成像点是P2，但是P的位置事先是未知的。</p><p>我们的目标是：对于左图的P1点，寻找它在右图中的对应点P2，这样就能确定P点的空间位置，也就是我们想要的空间物体和相机的距离（深度）。</p><p>所谓极线约束（Epipolar Constraint）就是指当同一个空间点在两幅图像上分别成像时，已知左图投影点p1，那么对应右图投影点p2一定在相对于p1的极线上，这样可以极大的缩小匹配范围。</p><p><img src="http://p55se4hrx.bkt.clouddn.com/images/theory/computer_vision/1_camera_21" alt></p><p>根据极线约束的定义，我们可以在下图中直观的看到P2一定在对极线上，所以我们只需要沿着极线搜索一定可以找到和P1的对应点P2。</p><p>细心的朋友会发现上述过程考虑的情况（两相机共面且光轴平行，参数相同）非常理想，相机C1，C2如果不是在同一直线上怎么办？</p><p>事实上，这种情况非常常见，因为有些场景下两个相机需要独立固定，很难保证光心C1，C2完全水平，即使是固定在同一个基板上也会因为装配的原因导致光心不完全水平。如下图所示。我们看到两个相机的极线不仅不平行，还不共面，之前的理想模型那一套推导结果用不了了，这可咋办呢？</p><p>把不理想情况转化为理想情况不就OK了！这就是图像矫正（Image Rectification）技术。</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/32199990" target="_blank" rel="noopener">深度相机原理揭秘–双目立体视觉</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://www.bijishequ.com/detail/397458" target="_blank" rel="noopener">http://www.bijishequ.com/detail/397458</a></li><li><a href="https://www.cnblogs.com/Jessica-jie/p/6596450.html" target="_blank" rel="noopener">https://www.cnblogs.com/Jessica-jie/p/6596450.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/32199990" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32199990</a></li><li><a href="https://cloud.tencent.com/developer/article/1015777" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1015777</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
          <category> 计算机视觉 </category>
          
          <category> 成像原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo+github免费搭建个人博客</title>
      <link href="/2018/03/04/%E5%9F%BA%E4%BA%8EHexo+GitHub%20Pages%20%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/03/04/%E5%9F%BA%E4%BA%8EHexo+GitHub%20Pages%20%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Hexo简介"><a href="#一、Hexo简介" class="headerlink" title="一、Hexo简介"></a>一、Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我们选用的是GitHub。Hexo同时也是GitHub上的开源项目，参见：<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexojs/hexo</a> 如果想要更加全面的了解Hexo，可以到其官网 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><h1 id="三、环境配置"><a href="#三、环境配置" class="headerlink" title="三、环境配置"></a>三、环境配置</h1><h2 id="1-本机环境配置"><a href="#1-本机环境配置" class="headerlink" title="1. 本机环境配置"></a>1. 本机环境配置</h2><ol><li><p>安装Node.js</p><p> 下载<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>,注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v. 检测npm是否安装成功，在命令行中输入npm -v</p></li><li><p>安装Hexo</p></li></ol><ul><li><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中,使用npm命令安装Hexo，输入：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo <span class="comment">#等待一会就会完成下载安装。</span></span><br><span class="line">hexo init <span class="comment">#该命令会在目标文件夹内建立网站所需要的所有文件</span></span><br><span class="line">npm install <span class="comment">#安装依赖包</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>到这里本地博客就搭建好了。执行以下命令（在你博客的对应文件夹路径下）:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment"># Or hexo g</span></span><br><span class="line">hexo server   <span class="comment"># Or hexo s</span></span><br></pre></td></tr></table></figure></li><li><p>在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以进行查看了。当然这个博客是本地的，别人是无法访问的，之后我们需要部署到GitHub上。常用的Hexo 命令:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g <span class="comment">#安装Hexo</span></span><br><span class="line">npm update hexo -g <span class="comment">#升级</span></span><br><span class="line">hexo init <span class="comment">#初始化博客</span></span><br><span class="line"><span class="comment"># 命令简写</span></span><br><span class="line">hexo n <span class="string">"我的博客"</span> == hexo new <span class="string">"我的博客"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo g == hexo generate <span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#部署</span></span><br><span class="line">hexo server <span class="comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-git环境配置"><a href="#2-git环境配置" class="headerlink" title="2. git环境配置"></a>2. git环境配置</h2><ol><li><p>注册Github账号并新建仓库</p><ul><li>注册过程就不多说了，注册完成之后需要新建一个仓库。需要注意的是新创建的仓库的名字，必须是username.github.io。例如我的username是XXX，那么新创建的仓库的名字便是XXX.github.io。</li></ul></li><li><p>配置SSH Key</p></li></ol><ul><li><p>这一步不是必须的，配置SSH Key的话之后每次更新博客就不用都输入用户名和密码，可以方便一些。</p><p>  (1)检查本机上是否已经存在SSH Key。打开终端，输入如下命令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">ls -la</span><br></pre></td></tr></table></figure><p>  检查终端输出的文件列表中是否已经存在id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，则直接进入第三步。</p><p>  (2)创建一个SSH Key。在终端输入如下命令:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><pre><code>按下回车，让你输入文件名，直接回车会创建使用默认文件名的文件(推荐使用默认文件名)，然后会提示你输入两次密码，可以为空。</code></pre><p>  (3)添加SSH Key到Github</p><pre><code>如果你没有指定文件名（也就是使用的默认文件名），那么你的.ssh文件夹下，应该有一个id_rsa.pub文件了，打开该文件，复制里面的文本。然后登录Github，点击右上角头像右边的三角图标，点击Settings，然后在左边菜单栏点击SSH and GPG keys，点击New SSH key，Title 随便填一个，在Key栏填入你复制的内容，点击Add SSH key，就添加成功了。</code></pre><p>  (4)检验SSH Key是否配置成功。在终端输入如下命令:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ul><pre><code>    如果出现:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure>    请输入yes再按回车。如果最后出现:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>    就说明你的SSH Key配置成功了。</code></pre><h2 id="3-同步本地博客到Github"><a href="#3-同步本地博客到Github" class="headerlink" title="3. 同步本地博客到Github"></a>3. 同步本地博客到Github</h2><ol><li><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为站点配置文件.</p></li><li><p>我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">type: git</span><br><span class="line">repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</span><br><span class="line">branch: master参考如下：</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>例子：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repo: https://github.com/xiaoqiangteng/xiaoqiangteng.github.io.git</span><br><span class="line">brabch: master</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>保存站点配置文件。其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>这时，我们分别输入三条命令：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><pre><code>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径</code></pre><ol start="4"><li><p>发布新的博客</p><ul><li><p>既然博客已经搭建好了，那么不发几篇博文有就没有意义了，使用下面的命令来新建一篇叫做”brightloong”的文章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">'brightloong'</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>- 命令执行之后，你会在你文件博客根目录的source/_post目录下找到你刚刚新建的md后缀的文件，hexo博客是使用markdown语法来书写的，如果不熟悉markdown语法可以快速的看一下[markdown](https://www.appinn.com/markdown/)语法说明.&gt; 注意：在冒号后面一定要加上一个空格，否则在生成静态文件的时候会报错，并且也不能将其成功推送到github。<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: brightloong #文章标题</span><br><span class="line">date: 2017-02-24 12:03:12 #创建时间</span><br><span class="line">tags: #文章标签，如果有多个标签可以使用[1,2,3]的形式，还有其他形式自己摸索吧</span><br><span class="line">---</span><br><span class="line"><span class="section">#这之后是正文</span></span><br></pre></td></tr></table></figure>- 文章编写好之后，只用以下命令生成静态文件并推送到github上，执行完成后打开自己的博客页面，是不是发现刚刚编写的文章出现了；如果你想删除某一篇文章，那么在source/_post目录下找到对应的文章将其删除后，同样执行一下命令就OK了。</code></pre><ol start="5"><li><p>站点配置文件_config.yml</p><ul><li><p>站点配置文件_config.yml是在你博客保存目录的根目录下，注意将它与主题配置文件进行区分，我使用的主题是Next主题。下面我先介绍下站点配置文件，我将一些主要的配置做了注释，如果你想了解更多的配置的含义和作用，请访问<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">Hexo官方教程</a>查看。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">BrightLoong's</span> <span class="string">Blog</span> <span class="comment">#博客的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment">#子标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Remember</span> <span class="string">what</span> <span class="string">should</span> <span class="string">be</span> <span class="string">remembered,</span> <span class="string">and</span> <span class="string">forget</span> <span class="string">what</span> <span class="string">should</span> <span class="string">be</span> <span class="string">forgotten.Alter</span> <span class="string">what</span> <span class="string">is</span> <span class="string">changeable,</span> <span class="string">and</span> <span class="string">accept</span> <span class="string">what</span> <span class="string">is</span> <span class="string">mutable.</span> <span class="comment">#博客描述，可以是一段你喜欢的话，也可以是你博客的描述，只要你开心就好。</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">BrightLoong</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment">#语言（我使用的是简体中文）</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="comment">#时区（默认使用电脑时间）</span></span><br><span class="line"><span class="comment">##之下的保持默认就好，没有什么需要更改的</span></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' #and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://brightloong.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span> <span class="comment">#source目录</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span> <span class="comment">#标签目录</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span> </span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span> <span class="comment">#分类目录</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">static/**</span> <span class="comment">#注意这个属性（跳过渲染），你暂时不用配置，我之后会讲到，这个也是我遇到的坑</span></span><br><span class="line"><span class="comment">##之下的保持默认就好，没有什么需要更改的</span></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment">#你设置的主题，接下来我会说到这个</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/BrightLoong/BrightLoong.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="设置专属域名"><a href="#设置专属域名" class="headerlink" title="设置专属域名"></a>设置专属域名</h2><p>博客搭建好后，我们可以通过之前设置好的GitHub仓库地址来访问，比如：<a href="http://XXX.github.io，而且GitHub是免费替我们托管的的，如果我们想要设置自己的专属的域名，我们可以去阿里云购买域名，我们点击添加记录，设置主机记录为@，类型为A，到IP" target="_blank" rel="noopener">http://XXX.github.io，而且GitHub是免费替我们托管的的，如果我们想要设置自己的专属的域名，我们可以去阿里云购买域名，我们点击添加记录，设置主机记录为@，类型为A，到IP</a> 192.30.252.153（固定值）。按照如上设置完成之后， 可能不会立即生效，等个几分钟，在./source目录下新建文件CNAME（没有后缀名），文件中写上我们要绑定的域名，例如: XXX.com.部署到GitHub上。这时就可以通过<a href="http://XXX.com访问" target="_blank" rel="noopener">http://XXX.com访问</a>.</p><h1 id="四、Hexo配置"><a href="#四、Hexo配置" class="headerlink" title="四、Hexo配置"></a>四、Hexo配置</h1><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>搭建自己的博客，最吸引人的莫过于那千变万化的主题了，大家可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网</a>上看到无数漂亮、大方、简洁的主题。本人使用的是简洁的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next主题</a>，你可以选择你喜欢的下载下来，将其解压放入themes目录中，比如我的目录是.\themes，然后修改我在上面提到的站点配置文件中的theme属性，为你刚刚放入themes目录中文件的名字（最好是对解压文件修改一个名字，否则名字可能会比较长，我把我下载下来的主题改文了next）,做完这些之后并不代表你完成了，你还需要参考你所下载的主题所说的配置步骤进行相关的配置，由于不同的主题配置过程也尽不相同，大家根据自己下载的主题去配置，我在这里只说我使用的Next主题如何配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：从下面开始所说的都是Next主题的相关配置。</p></blockquote><p>如果你使用的和我一样，也是Next的主题，那么你最好还是看官方提供<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next使用文档</a>，并且文档是中文版的,我也仅仅是讲一些容易被忽略的配置，以及我使用的配置，以及在使用过程中遇到的问题;至于如何更换头像，添加分类和标签页面、切换主题样式（Next主题包含3中样式）之类的，大家还是照着官方的做更好。</p><ol><li><p>配置网站图标 </p><p> 如何让网站前能显示自己想要的图标，我当时也是找了很久，最后发现是在主题配置文件（我的是F:\myblog\themes\next_config.yml）的最前面，有一个favicon属性，我把一个名字叫favicon.ico的图片放到了F:\myblog\source下，然后配置如下：</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>首页显示阅读全文按钮</p><p> 首页的文章是不是默认展开了，显示出了整篇文章，怎么才能显示出如下的阅读全文的按钮。在主题配置文件中找到auto_excerpt属性进行配置:</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#改写为true</span></span><br><span class="line"><span class="attr">   length:</span> <span class="number">150</span> <span class="comment">#默认展示的高度</span></span><br></pre></td></tr></table></figure></li></ol><pre><code>你也可以在自己的博文中添加\&lt;!--more--&gt;来决定在首页展示到什么位置（我就喜欢用这种方式），这个标签后的内容就不会展示到首页啦。</code></pre><h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2><p>修改文件 themes\next\source\css_common\components\post\post.styl，在末尾添加如下css样式，：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><h2 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h2>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用攻略-添加分类标签和搜索功能</title>
      <link href="/2018/03/04/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/"/>
      <url>/2018/03/04/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo使用攻略-添加分类及标签"><a href="#Hexo使用攻略-添加分类及标签" class="headerlink" title="Hexo使用攻略-添加分类及标签"></a>Hexo使用攻略-添加分类及标签</h1><h2 id="创建“分类”选项"><a href="#创建“分类”选项" class="headerlink" title="创建“分类”选项"></a>创建“分类”选项</h2><p>###生成“分类”页并添加tpye属性</p><p>打开命令行，进入博客所在文件夹。执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>成功后会提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure></p><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h3 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h3><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p><p>注意：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>或</p><h3 id="设置分类列表"><a href="#设置分类列表" class="headerlink" title="设置分类列表"></a>设置分类列表</h3><p>在我们编辑文章的时候，直接在categories:项填写属于哪个分类，但如果分类是中文的时候，路径也会包含中文。<br>比如分类我们设置的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: 编程</span><br></pre></td></tr></table></figure><p>那在生成页面后，分类列表就会出现编程这个选项，他的访问路径是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">那在生成页面后，分类列表就会出现编程这个选项，他的访问路径是：</span><br></pre></td></tr></table></figure><p>如果我们想要把路径名和分类名分别设置，需要怎么办呢？</p><p>打开根目录下的配置文件_config.yml，找到如下位置做更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">编程: programming</span><br><span class="line">生活: life</span><br><span class="line">其他: other</span><br><span class="line">tag_map:</span><br></pre></td></tr></table></figure><p>在这里category_map:是设置分类的地方，每行一个分类，冒号前面是分类名称，后面是访问路径。</p><p>可以提前在这里设置好一些分类，当编辑的文章填写了对应的分类名时，就会自动的按照对应的路径来访问。</p><h2 id="创建“标签”选项"><a href="#创建“标签”选项" class="headerlink" title="创建“标签”选项"></a>创建“标签”选项</h2><h3 id="生成“标签”页并添加tpye属性"><a href="#生成“标签”页并添加tpye属性" class="headerlink" title="生成“标签”页并添加tpye属性"></a>生成“标签”页并添加tpye属性</h3><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2017-05-27 14:22:08</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: “tags”到内容中，添加后是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h3 id="给文章添加“tags”属性"><a href="#给文章添加“tags”属性" class="headerlink" title="给文章添加“tags”属性"></a>给文章添加“tags”属性</h3><p>打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格<br>- 表单验证就是这篇文章的标签了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- jQuery</span><br><span class="line">- 表格</span><br><span class="line">- 表单验证</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p><h2 id="新建页面的模板"><a href="#新建页面的模板" class="headerlink" title="新建页面的模板"></a>新建页面的模板</h2><p>打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，重新执行hexo n ‘name’命令，会发现新建的页面里有categories:项了。</p><p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p><h2 id="菜单中添加链接"><a href="#菜单中添加链接" class="headerlink" title="菜单中添加链接"></a>菜单中添加链接</h2><p>编辑主题的 _config.yml ，将 menu 中的 categories: /categories 注释去掉，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br></pre></td></tr></table></figure><p>在主题配置文件中添加分类选项</p><p>在主题配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes/_config.yml</span><br></pre></td></tr></table></figure><p>中添加以下代码（#号后为注释内容）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  所有文章: /archives</span><br><span class="line">  技巧经验: /categories/技巧经验     # 博客首页展示文本： 访问路径/自定义归档名称</span><br><span class="line">  资料总结: /categories/资料总结</span><br></pre></td></tr></table></figure><h1 id="Hexo使用攻略-搜索功能"><a href="#Hexo使用攻略-搜索功能" class="headerlink" title="Hexo使用攻略-搜索功能"></a>Hexo使用攻略-搜索功能</h1><p>1）用 hexo-generator-search 生成索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
